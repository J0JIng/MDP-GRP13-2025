
STM32_MDP_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011cd4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001078  08011e68  08011e68  00012e68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012ee0  08012ee0  000141dc  2**0
                  CONTENTS
  4 .ARM          00000008  08012ee0  08012ee0  00013ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012ee8  08012ee8  000141dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012ee8  08012ee8  00013ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08012ef0  08012ef0  00013ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08012ef8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000141dc  2**0
                  CONTENTS
 10 .bss          000054cc  200001dc  200001dc  000141dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200056a8  200056a8  000141dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000141dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026d4d  00000000  00000000  0001420c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052ab  00000000  00000000  0003af59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bc0  00000000  00000000  00040208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015b5  00000000  00000000  00041dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a387  00000000  00000000  0004337d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022abd  00000000  00000000  0006d704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0393  00000000  00000000  000901c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00170554  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000089d0  00000000  00000000  00170598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000088  00000000  00000000  00178f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011e4c 	.word	0x08011e4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08011e4c 	.word	0x08011e4c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <IMU_Initialise>:
int16_t gyro_offset[3] = { 0 }; // gyro_offset value calibrated by Gyro_calibrate()

/*
 * INITIALISATION
 */
uint8_t* IMU_Initialise(ICM20948 *dev, I2C_HandleTypeDef *i2cHandle) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]

	char hex[2];
	uint8_t regData;

	dev->i2cHandle = i2cHandle;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	601a      	str	r2, [r3, #0]
	 buf[0] = REG_ADD_REG_BANK_SEL;  // bank select register
	 buf[1] = REG_VAL_REG_BANK_0;           // bank 0
	 ret = HAL_I2C_Master_Transmit(i2cHandle, IMU_ADDR, buf, I2C_MEMADD_SIZE_16BIT, 10);

	 */
	ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	217f      	movs	r1, #127	@ 0x7f
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f000 f8b3 	bl	8001134 <IMU_WriteOneByte>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b57      	ldr	r3, [pc, #348]	@ (8001130 <IMU_Initialise+0x17c>)
 8000fd4:	701a      	strb	r2, [r3, #0]


	//check ID
	/*	  buf[0] = REG_WHO_AM_I;  //(Should return ID =  0xEA)
	 ret = HAL_I2C_Mem_Read(i2cHandle, IMU_ADDR, REG_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, buf, I2C_MEMADD_SIZE_8BIT, 10);  */
	ret = IMU_ReadOneByte(dev, REG_WHO_AM_I, &regData);
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	f107 030b 	add.w	r3, r7, #11
 8000fdc:	461a      	mov	r2, r3
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 f8c4 	bl	800116c <IMU_ReadOneByte>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4b51      	ldr	r3, [pc, #324]	@ (8001130 <IMU_Initialise+0x17c>)
 8000fea:	701a      	strb	r2, [r3, #0]

	// Initialize
	// Bank 0 - Reset the device and then auto selects the best available clock source
	ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 8000fec:	2200      	movs	r2, #0
 8000fee:	217f      	movs	r1, #127	@ 0x7f
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 f89f 	bl	8001134 <IMU_WriteOneByte>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b4d      	ldr	r3, [pc, #308]	@ (8001130 <IMU_Initialise+0x17c>)
 8000ffc:	701a      	strb	r2, [r3, #0]

	//ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_1, REG_VAL_ALL_RGE_RESET); // reset device - check header file value should be 0xF1

	HAL_Delay(10);
 8000ffe:	200a      	movs	r0, #10
 8001000:	f004 ffbe 	bl	8005f80 <HAL_Delay>
	ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_1, REG_VAL_RUN_MODE); // auto selects the best available clock source for device
 8001004:	2201      	movs	r2, #1
 8001006:	2106      	movs	r1, #6
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 f893 	bl	8001134 <IMU_WriteOneByte>
 800100e:	4603      	mov	r3, r0
 8001010:	461a      	mov	r2, r3
 8001012:	4b47      	ldr	r3, [pc, #284]	@ (8001130 <IMU_Initialise+0x17c>)
 8001014:	701a      	strb	r2, [r3, #0]

	// Turn off and on Accelator and Gyro - page 28
	HAL_Delay(10);
 8001016:	200a      	movs	r0, #10
 8001018:	f004 ffb2 	bl	8005f80 <HAL_Delay>
	ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_2, REG_VAL_ACCEL_GYROLL_OFF); // OFF
 800101c:	223f      	movs	r2, #63	@ 0x3f
 800101e:	2107      	movs	r1, #7
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f000 f887 	bl	8001134 <IMU_WriteOneByte>
 8001026:	4603      	mov	r3, r0
 8001028:	461a      	mov	r2, r3
 800102a:	4b41      	ldr	r3, [pc, #260]	@ (8001130 <IMU_Initialise+0x17c>)
 800102c:	701a      	strb	r2, [r3, #0]

	HAL_Delay(10);
 800102e:	200a      	movs	r0, #10
 8001030:	f004 ffa6 	bl	8005f80 <HAL_Delay>
	ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_2, REG_VAL_ACCEL_GYROLL_ON); // ON
 8001034:	2200      	movs	r2, #0
 8001036:	2107      	movs	r1, #7
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 f87b 	bl	8001134 <IMU_WriteOneByte>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	4b3b      	ldr	r3, [pc, #236]	@ (8001130 <IMU_Initialise+0x17c>)
 8001044:	701a      	strb	r2, [r3, #0]

	ret = IMU_WriteOneByte(dev, REG_ADD_INT_ENABLE_1, REG_VAL_INT_ENABLED); // Turn on int on pin INT1
 8001046:	2201      	movs	r2, #1
 8001048:	2110      	movs	r1, #16
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 f872 	bl	8001134 <IMU_WriteOneByte>
 8001050:	4603      	mov	r3, r0
 8001052:	461a      	mov	r2, r3
 8001054:	4b36      	ldr	r3, [pc, #216]	@ (8001130 <IMU_Initialise+0x17c>)
 8001056:	701a      	strb	r2, [r3, #0]

	uint8_t tmp = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	72bb      	strb	r3, [r7, #10]
	IMU_ReadOneByte(dev, REG_ADD_INT_PIN_CFG, &tmp);
 800105c:	f107 030a 	add.w	r3, r7, #10
 8001060:	461a      	mov	r2, r3
 8001062:	210f      	movs	r1, #15
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f000 f881 	bl	800116c <IMU_ReadOneByte>
	IMU_WriteOneByte(dev, REG_ADD_INT_PIN_CFG, tmp | 0x02);
 800106a:	7abb      	ldrb	r3, [r7, #10]
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	b2db      	uxtb	r3, r3
 8001072:	461a      	mov	r2, r3
 8001074:	210f      	movs	r1, #15
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 f85c 	bl	8001134 <IMU_WriteOneByte>

	// Bank 2 - Gyro and Acce and start running
	/* user bank 2 register */
	ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_2);
 800107c:	2220      	movs	r2, #32
 800107e:	217f      	movs	r1, #127	@ 0x7f
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f000 f857 	bl	8001134 <IMU_WriteOneByte>
 8001086:	4603      	mov	r3, r0
 8001088:	461a      	mov	r2, r3
 800108a:	4b29      	ldr	r3, [pc, #164]	@ (8001130 <IMU_Initialise+0x17c>)
 800108c:	701a      	strb	r2, [r3, #0]

	ret = IMU_WriteOneByte(dev, REG_ADD_GYRO_SMPLRT_DIV, 0x00); // changed to 0 from 0x16 **NEW**
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 f84e 	bl	8001134 <IMU_WriteOneByte>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	4b24      	ldr	r3, [pc, #144]	@ (8001130 <IMU_Initialise+0x17c>)
 800109e:	701a      	strb	r2, [r3, #0]

	ret = IMU_WriteOneByte(dev, REG_ADD_GYRO_CONFIG_1,
 80010a0:	2237      	movs	r2, #55	@ 0x37
 80010a2:	2101      	movs	r1, #1
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f000 f845 	bl	8001134 <IMU_WriteOneByte>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b20      	ldr	r3, [pc, #128]	@ (8001130 <IMU_Initialise+0x17c>)
 80010b0:	701a      	strb	r2, [r3, #0]
			REG_VAL_BIT_GYRO_DLPCFG_6 | REG_VAL_BIT_GYRO_FS_2000DPS
					| REG_VAL_BIT_GYRO_DLPF); // enable low pass filter and set Gyro FS

	ret = IMU_WriteOneByte(dev, REG_ADD_GYRO_CONFIG_2, 0x06); // 8x average **NEW**
 80010b2:	2206      	movs	r2, #6
 80010b4:	2102      	movs	r1, #2
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 f83c 	bl	8001134 <IMU_WriteOneByte>
 80010bc:	4603      	mov	r3, r0
 80010be:	461a      	mov	r2, r3
 80010c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <IMU_Initialise+0x17c>)
 80010c2:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_SMPLRT_DIV_2, 0x10); //
 80010c4:	2210      	movs	r2, #16
 80010c6:	2111      	movs	r1, #17
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 f833 	bl	8001134 <IMU_WriteOneByte>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b17      	ldr	r3, [pc, #92]	@ (8001130 <IMU_Initialise+0x17c>)
 80010d4:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_SMPLRT_DIV_1, 0x00); // upper 3 bit of sample rate = 0
 80010d6:	2200      	movs	r2, #0
 80010d8:	2110      	movs	r1, #16
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 f82a 	bl	8001134 <IMU_WriteOneByte>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <IMU_Initialise+0x17c>)
 80010e6:	701a      	strb	r2, [r3, #0]

	// enable LPF and set accel full scale to +/-2G, sensitivity scale factor = 16384 LSB/g
	ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_CONFIG,
 80010e8:	2231      	movs	r2, #49	@ 0x31
 80010ea:	2114      	movs	r1, #20
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 f821 	bl	8001134 <IMU_WriteOneByte>
 80010f2:	4603      	mov	r3, r0
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <IMU_Initialise+0x17c>)
 80010f8:	701a      	strb	r2, [r3, #0]
			REG_VAL_BIT_ACCEL_DLPCFG_6 | REG_VAL_BIT_ACCEL_FS_2g
					| REG_VAL_BIT_ACCEL_DLPF);

	IMU_WriteOneByte(dev, REG_ADD_TEMP_CONFIG, REG_VAL_TEMP_CONFIG); // Temp configuration pg 67
 80010fa:	2200      	movs	r2, #0
 80010fc:	2153      	movs	r1, #83	@ 0x53
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f818 	bl	8001134 <IMU_WriteOneByte>

	IMU_WriteOneByte(dev, 0x15, 0x03);
 8001104:	2203      	movs	r2, #3
 8001106:	2115      	movs	r1, #21
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f000 f813 	bl	8001134 <IMU_WriteOneByte>
	// back to bank 0
	ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 800110e:	2200      	movs	r2, #0
 8001110:	217f      	movs	r1, #127	@ 0x7f
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 f80e 	bl	8001134 <IMU_WriteOneByte>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	4b04      	ldr	r3, [pc, #16]	@ (8001130 <IMU_Initialise+0x17c>)
 800111e:	701a      	strb	r2, [r3, #0]

	HAL_Delay(100);
 8001120:	2064      	movs	r0, #100	@ 0x64
 8001122:	f004 ff2d 	bl	8005f80 <HAL_Delay>
	//Gyro_calibrate(dev);  // calibrate the offset of the gyroscope

	// everthing OK
	//strcpy((char*)buf, "Initialize OK\r\n");
	//return &buf;
	return 0; // 0 means 0 error
 8001126:	2300      	movs	r3, #0

}
 8001128:	4618      	mov	r0, r3
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200001f8 	.word	0x200001f8

08001134 <IMU_WriteOneByte>:

HAL_StatusTypeDef IMU_WriteOneByte(ICM20948 *dev, uint8_t reg, uint8_t data) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af04      	add	r7, sp, #16
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	70fb      	strb	r3, [r7, #3]
 8001140:	4613      	mov	r3, r2
 8001142:	70bb      	strb	r3, [r7, #2]

	return HAL_I2C_Mem_Write(dev->i2cHandle, IMU_ADDR, reg, 1, &data, 1, 100);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6818      	ldr	r0, [r3, #0]
 8001148:	23d0      	movs	r3, #208	@ 0xd0
 800114a:	4619      	mov	r1, r3
 800114c:	78fb      	ldrb	r3, [r7, #3]
 800114e:	b29a      	uxth	r2, r3
 8001150:	2364      	movs	r3, #100	@ 0x64
 8001152:	9302      	str	r3, [sp, #8]
 8001154:	2301      	movs	r3, #1
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	1cbb      	adds	r3, r7, #2
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2301      	movs	r3, #1
 800115e:	f005 ff59 	bl	8007014 <HAL_I2C_Mem_Write>
 8001162:	4603      	mov	r3, r0

}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <IMU_ReadOneByte>:

HAL_StatusTypeDef IMU_ReadOneByte(ICM20948 *dev, uint8_t reg, uint8_t *data) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af04      	add	r7, sp, #16
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	460b      	mov	r3, r1
 8001176:	607a      	str	r2, [r7, #4]
 8001178:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read(dev->i2cHandle, IMU_ADDR, reg, 1, data, 1, 100);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	6818      	ldr	r0, [r3, #0]
 800117e:	23d0      	movs	r3, #208	@ 0xd0
 8001180:	4619      	mov	r1, r3
 8001182:	7afb      	ldrb	r3, [r7, #11]
 8001184:	b29a      	uxth	r2, r3
 8001186:	2364      	movs	r3, #100	@ 0x64
 8001188:	9302      	str	r3, [sp, #8]
 800118a:	2301      	movs	r3, #1
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2301      	movs	r3, #1
 8001194:	f006 f838 	bl	8007208 <HAL_I2C_Mem_Read>
 8001198:	4603      	mov	r3, r0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <Mag_WriteOneByte>:

HAL_StatusTypeDef Mag_WriteOneByte(ICM20948 *dev, uint8_t reg, uint8_t data) {
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b086      	sub	sp, #24
 80011a6:	af04      	add	r7, sp, #16
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	460b      	mov	r3, r1
 80011ac:	70fb      	strb	r3, [r7, #3]
 80011ae:	4613      	mov	r3, r2
 80011b0:	70bb      	strb	r3, [r7, #2]

	return HAL_I2C_Mem_Write(dev->i2cHandle, MAG_ADDR, reg, 1, &data, 1, 100);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	2318      	movs	r3, #24
 80011b8:	4619      	mov	r1, r3
 80011ba:	78fb      	ldrb	r3, [r7, #3]
 80011bc:	b29a      	uxth	r2, r3
 80011be:	2364      	movs	r3, #100	@ 0x64
 80011c0:	9302      	str	r3, [sp, #8]
 80011c2:	2301      	movs	r3, #1
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	1cbb      	adds	r3, r7, #2
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2301      	movs	r3, #1
 80011cc:	f005 ff22 	bl	8007014 <HAL_I2C_Mem_Write>
 80011d0:	4603      	mov	r3, r0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <IMU_AccelRead>:
	ret = IMU_ReadOneByte(dev, REG_ADD_TEMP_OUT_H, &u8Buf[1]);
	tempRaw = (u8Buf[1] << 8) | u8Buf[0];
	dev->temp_C = (tempRaw) / 333.81 + 21; // assuming no further offset apart from 21 dec C
}

HAL_StatusTypeDef IMU_AccelRead(ICM20948 *dev) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	uint8_t u8Buf[2] = { 0 }; // reset to zero
 80011e4:	2300      	movs	r3, #0
 80011e6:	83bb      	strh	r3, [r7, #28]
	int16_t accRaw[3] = { 0 };  // reset to zero
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	809a      	strh	r2, [r3, #4]

	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_XOUT_L, &u8Buf[0]);
 80011f2:	f107 031c 	add.w	r3, r7, #28
 80011f6:	461a      	mov	r2, r3
 80011f8:	212e      	movs	r1, #46	@ 0x2e
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ffb6 	bl	800116c <IMU_ReadOneByte>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	4b5f      	ldr	r3, [pc, #380]	@ (8001384 <IMU_AccelRead+0x1a8>)
 8001206:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_XOUT_H, &u8Buf[1]);
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	3301      	adds	r3, #1
 800120e:	461a      	mov	r2, r3
 8001210:	212d      	movs	r1, #45	@ 0x2d
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ffaa 	bl	800116c <IMU_ReadOneByte>
 8001218:	4603      	mov	r3, r0
 800121a:	461a      	mov	r2, r3
 800121c:	4b59      	ldr	r3, [pc, #356]	@ (8001384 <IMU_AccelRead+0x1a8>)
 800121e:	701a      	strb	r2, [r3, #0]
	accRaw[0] = (u8Buf[1] << 8) | u8Buf[0];
 8001220:	7f7b      	ldrb	r3, [r7, #29]
 8001222:	b21b      	sxth	r3, r3
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	b21a      	sxth	r2, r3
 8001228:	7f3b      	ldrb	r3, [r7, #28]
 800122a:	b21b      	sxth	r3, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	b21b      	sxth	r3, r3
 8001230:	82bb      	strh	r3, [r7, #20]

	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_YOUT_L, &u8Buf[0]);
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	461a      	mov	r2, r3
 8001238:	2130      	movs	r1, #48	@ 0x30
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ff96 	bl	800116c <IMU_ReadOneByte>
 8001240:	4603      	mov	r3, r0
 8001242:	461a      	mov	r2, r3
 8001244:	4b4f      	ldr	r3, [pc, #316]	@ (8001384 <IMU_AccelRead+0x1a8>)
 8001246:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_YOUT_H, &u8Buf[1]);
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	3301      	adds	r3, #1
 800124e:	461a      	mov	r2, r3
 8001250:	212f      	movs	r1, #47	@ 0x2f
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ff8a 	bl	800116c <IMU_ReadOneByte>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	4b49      	ldr	r3, [pc, #292]	@ (8001384 <IMU_AccelRead+0x1a8>)
 800125e:	701a      	strb	r2, [r3, #0]
	accRaw[1] = (u8Buf[1] << 8) | u8Buf[0];
 8001260:	7f7b      	ldrb	r3, [r7, #29]
 8001262:	b21b      	sxth	r3, r3
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21a      	sxth	r2, r3
 8001268:	7f3b      	ldrb	r3, [r7, #28]
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21b      	sxth	r3, r3
 8001270:	82fb      	strh	r3, [r7, #22]

	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_ZOUT_L, &u8Buf[0]);
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	461a      	mov	r2, r3
 8001278:	2132      	movs	r1, #50	@ 0x32
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ff76 	bl	800116c <IMU_ReadOneByte>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	4b3f      	ldr	r3, [pc, #252]	@ (8001384 <IMU_AccelRead+0x1a8>)
 8001286:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_ZOUT_H, &u8Buf[1]);
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	3301      	adds	r3, #1
 800128e:	461a      	mov	r2, r3
 8001290:	2131      	movs	r1, #49	@ 0x31
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ff6a 	bl	800116c <IMU_ReadOneByte>
 8001298:	4603      	mov	r3, r0
 800129a:	461a      	mov	r2, r3
 800129c:	4b39      	ldr	r3, [pc, #228]	@ (8001384 <IMU_AccelRead+0x1a8>)
 800129e:	701a      	strb	r2, [r3, #0]
	accRaw[2] = (u8Buf[1] << 8) | u8Buf[0];
 80012a0:	7f7b      	ldrb	r3, [r7, #29]
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	b21a      	sxth	r2, r3
 80012a8:	7f3b      	ldrb	r3, [r7, #28]
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	4313      	orrs	r3, r2
 80012ae:	b21b      	sxth	r3, r3
 80012b0:	833b      	strh	r3, [r7, #24]

	/* Convert to SIGNED integers (two's complement) */
	int32_t accRawSigned[3];

	if ((accRaw[0] & 0x00080000) == 0x00080000)
 80012b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d007      	beq.n	80012ce <IMU_AccelRead+0xf2>
		accRawSigned[0] = accRaw[0] | 0xFFF00000;
 80012be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012c2:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 80012c6:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	e002      	b.n	80012d4 <IMU_AccelRead+0xf8>
	else
		accRawSigned[0] = accRaw[0];
 80012ce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012d2:	60bb      	str	r3, [r7, #8]

	if ((accRaw[1] & 0x00080000) == 0x00080000)
 80012d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d007      	beq.n	80012f0 <IMU_AccelRead+0x114>
		accRawSigned[1] = accRaw[1] | 0xFFF00000;
 80012e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012e4:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 80012e8:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	e002      	b.n	80012f6 <IMU_AccelRead+0x11a>
	else
		accRawSigned[1] = accRaw[1];
 80012f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012f4:	60fb      	str	r3, [r7, #12]

	if ((accRaw[2] & 0x00080000) == 0x000080000)
 80012f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d007      	beq.n	8001312 <IMU_AccelRead+0x136>
		accRawSigned[2] = accRaw[2] | 0xFFF00000;
 8001302:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001306:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 800130a:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	e002      	b.n	8001318 <IMU_AccelRead+0x13c>
	else
		accRawSigned[2] = accRaw[2];
 8001312:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001316:	613b      	str	r3, [r7, #16]

	// accel full scale set to +/-2G, sensitivity scale factor = 16384 LSB/g
	dev->acc[0] = 0.00006103515625f * accRawSigned[0] * 9.81f;
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	ee07 3a90 	vmov	s15, r3
 800131e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001322:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001388 <IMU_AccelRead+0x1ac>
 8001326:	ee67 7a87 	vmul.f32	s15, s15, s14
 800132a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800138c <IMU_AccelRead+0x1b0>
 800132e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	edc3 7a01 	vstr	s15, [r3, #4]
	dev->acc[1] = 0.00006103515625f * accRawSigned[1] * 9.81f;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001342:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001388 <IMU_AccelRead+0x1ac>
 8001346:	ee67 7a87 	vmul.f32	s15, s15, s14
 800134a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800138c <IMU_AccelRead+0x1b0>
 800134e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	edc3 7a02 	vstr	s15, [r3, #8]
	dev->acc[2] = 0.00006103515625f * accRawSigned[2] * 9.81f; // * 9.81f
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001362:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001388 <IMU_AccelRead+0x1ac>
 8001366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800138c <IMU_AccelRead+0x1b0>
 800136e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edc3 7a03 	vstr	s15, [r3, #12]

	return ret;
 8001378:	4b02      	ldr	r3, [pc, #8]	@ (8001384 <IMU_AccelRead+0x1a8>)
 800137a:	781b      	ldrb	r3, [r3, #0]

}
 800137c:	4618      	mov	r0, r3
 800137e:	3720      	adds	r7, #32
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200001f8 	.word	0x200001f8
 8001388:	38800000 	.word	0x38800000
 800138c:	411cf5c3 	.word	0x411cf5c3

08001390 <Gyro_calibrate>:

HAL_StatusTypeDef Gyro_calibrate(ICM20948 *dev) // calibrate the offset of the gyro
// store the offset in int16_t gyro_offset[3]
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	uint8_t u8Buf[2] = { 0 }; // reset to zero upon entry
 8001398:	2300      	movs	r3, #0
 800139a:	823b      	strh	r3, [r7, #16]
	int16_t gyroRaw[3] = { 0 }; // reset to zero upon entry
 800139c:	f107 0308 	add.w	r3, r7, #8
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	809a      	strh	r2, [r3, #4]
	int8_t i;
	int16_t temp;

	for (i = 0; i < 32; i++) {
 80013a6:	2300      	movs	r3, #0
 80013a8:	75fb      	strb	r3, [r7, #23]
 80013aa:	e06f      	b.n	800148c <Gyro_calibrate+0xfc>
		IMU_ReadOneByte(dev, REG_ADD_GYRO_XOUT_L, &u8Buf[0]);
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	461a      	mov	r2, r3
 80013b2:	2134      	movs	r1, #52	@ 0x34
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff fed9 	bl	800116c <IMU_ReadOneByte>
		IMU_ReadOneByte(dev, REG_ADD_GYRO_XOUT_H, &u8Buf[1]);
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	3301      	adds	r3, #1
 80013c0:	461a      	mov	r2, r3
 80013c2:	2133      	movs	r1, #51	@ 0x33
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff fed1 	bl	800116c <IMU_ReadOneByte>
		temp = (u8Buf[1] << 8) | u8Buf[0]; // for debugging
 80013ca:	7c7b      	ldrb	r3, [r7, #17]
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	b21a      	sxth	r2, r3
 80013d2:	7c3b      	ldrb	r3, [r7, #16]
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	4313      	orrs	r3, r2
 80013d8:	82bb      	strh	r3, [r7, #20]
		gyroRaw[0] = temp + gyroRaw[0];
 80013da:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80013de:	b29a      	uxth	r2, r3
 80013e0:	8abb      	ldrh	r3, [r7, #20]
 80013e2:	4413      	add	r3, r2
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	b21b      	sxth	r3, r3
 80013e8:	813b      	strh	r3, [r7, #8]
		//gyroRaw[0] = (u8Buf[1]<<8)|u8Buf[0] + gyroRaw[0];
		HAL_Delay(1);
 80013ea:	2001      	movs	r0, #1
 80013ec:	f004 fdc8 	bl	8005f80 <HAL_Delay>
		IMU_ReadOneByte(dev, REG_ADD_GYRO_YOUT_L, &u8Buf[0]);
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	461a      	mov	r2, r3
 80013f6:	2136      	movs	r1, #54	@ 0x36
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff feb7 	bl	800116c <IMU_ReadOneByte>
		IMU_ReadOneByte(dev, REG_ADD_GYRO_YOUT_H, &u8Buf[1]);
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	3301      	adds	r3, #1
 8001404:	461a      	mov	r2, r3
 8001406:	2135      	movs	r1, #53	@ 0x35
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff feaf 	bl	800116c <IMU_ReadOneByte>
		gyroRaw[1] = ((u8Buf[1] << 8) | u8Buf[0]) + gyroRaw[1];
 800140e:	7c7b      	ldrb	r3, [r7, #17]
 8001410:	b21b      	sxth	r3, r3
 8001412:	021b      	lsls	r3, r3, #8
 8001414:	b21a      	sxth	r2, r3
 8001416:	7c3b      	ldrb	r3, [r7, #16]
 8001418:	b21b      	sxth	r3, r3
 800141a:	4313      	orrs	r3, r2
 800141c:	b21b      	sxth	r3, r3
 800141e:	b29a      	uxth	r2, r3
 8001420:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001424:	b29b      	uxth	r3, r3
 8001426:	4413      	add	r3, r2
 8001428:	b29b      	uxth	r3, r3
 800142a:	b21b      	sxth	r3, r3
 800142c:	817b      	strh	r3, [r7, #10]
		HAL_Delay(1);
 800142e:	2001      	movs	r0, #1
 8001430:	f004 fda6 	bl	8005f80 <HAL_Delay>
		IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_L, &u8Buf[0]);
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	461a      	mov	r2, r3
 800143a:	2138      	movs	r1, #56	@ 0x38
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff fe95 	bl	800116c <IMU_ReadOneByte>
		ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_H, &u8Buf[1]);
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	3301      	adds	r3, #1
 8001448:	461a      	mov	r2, r3
 800144a:	2137      	movs	r1, #55	@ 0x37
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff fe8d 	bl	800116c <IMU_ReadOneByte>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	4b23      	ldr	r3, [pc, #140]	@ (80014e4 <Gyro_calibrate+0x154>)
 8001458:	701a      	strb	r2, [r3, #0]
		gyroRaw[2] = ((u8Buf[1] << 8) | u8Buf[0]) + gyroRaw[2];
 800145a:	7c7b      	ldrb	r3, [r7, #17]
 800145c:	b21b      	sxth	r3, r3
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	b21a      	sxth	r2, r3
 8001462:	7c3b      	ldrb	r3, [r7, #16]
 8001464:	b21b      	sxth	r3, r3
 8001466:	4313      	orrs	r3, r2
 8001468:	b21b      	sxth	r3, r3
 800146a:	b29a      	uxth	r2, r3
 800146c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001470:	b29b      	uxth	r3, r3
 8001472:	4413      	add	r3, r2
 8001474:	b29b      	uxth	r3, r3
 8001476:	b21b      	sxth	r3, r3
 8001478:	81bb      	strh	r3, [r7, #12]

		HAL_Delay(25);; // wait for 100msec
 800147a:	2019      	movs	r0, #25
 800147c:	f004 fd80 	bl	8005f80 <HAL_Delay>
	for (i = 0; i < 32; i++) {
 8001480:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	3301      	adds	r3, #1
 8001488:	b2db      	uxtb	r3, r3
 800148a:	75fb      	strb	r3, [r7, #23]
 800148c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001490:	2b1f      	cmp	r3, #31
 8001492:	dd8b      	ble.n	80013ac <Gyro_calibrate+0x1c>
	}

	dev->gyro_bias[0] = (float)(gyroRaw[0] >> 5);  // average of 32 reads
 8001494:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001498:	115b      	asrs	r3, r3, #5
 800149a:	b21b      	sxth	r3, r3
 800149c:	ee07 3a90 	vmov	s15, r3
 80014a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	dev->gyro_bias[1] = (float)(gyroRaw[1] >> 5);
 80014aa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014ae:	115b      	asrs	r3, r3, #5
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	ee07 3a90 	vmov	s15, r3
 80014b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	dev->gyro_bias[2] = (float)(gyroRaw[2] >> 5);
 80014c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014c4:	115b      	asrs	r3, r3, #5
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	ee07 3a90 	vmov	s15, r3
 80014cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c


	return ret;
 80014d6:	4b03      	ldr	r3, [pc, #12]	@ (80014e4 <Gyro_calibrate+0x154>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200001f8 	.word	0x200001f8

080014e8 <IMU_GyroRead>:

HAL_StatusTypeDef IMU_GyroRead(ICM20948 *dev) { // return the change in value instead of current value
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	@ 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	uint8_t u8Buf[2] = { 0 }; // reset to zero
 80014f0:	2300      	movs	r3, #0
 80014f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t gyroRaw[3] = { 0 };  // reset to zero
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	809a      	strh	r2, [r3, #4]
	int16_t gyroDiff[3];
	int16_t temp;

	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_YOUT_L, &u8Buf[0]);
 80014fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001502:	461a      	mov	r2, r3
 8001504:	2136      	movs	r1, #54	@ 0x36
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff fe30 	bl	800116c <IMU_ReadOneByte>
 800150c:	4603      	mov	r3, r0
 800150e:	461a      	mov	r2, r3
 8001510:	4b5a      	ldr	r3, [pc, #360]	@ (800167c <IMU_GyroRead+0x194>)
 8001512:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_YOUT_H, &u8Buf[1]);
 8001514:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001518:	3301      	adds	r3, #1
 800151a:	461a      	mov	r2, r3
 800151c:	2135      	movs	r1, #53	@ 0x35
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff fe24 	bl	800116c <IMU_ReadOneByte>
 8001524:	4603      	mov	r3, r0
 8001526:	461a      	mov	r2, r3
 8001528:	4b54      	ldr	r3, [pc, #336]	@ (800167c <IMU_GyroRead+0x194>)
 800152a:	701a      	strb	r2, [r3, #0]
	gyroRaw[1] = (u8Buf[1] << 8) | u8Buf[0];
 800152c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001530:	b21b      	sxth	r3, r3
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	b21a      	sxth	r2, r3
 8001536:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800153a:	b21b      	sxth	r3, r3
 800153c:	4313      	orrs	r3, r2
 800153e:	b21b      	sxth	r3, r3
 8001540:	83fb      	strh	r3, [r7, #30]


	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_L, &u8Buf[0]);
 8001542:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001546:	461a      	mov	r2, r3
 8001548:	2138      	movs	r1, #56	@ 0x38
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff fe0e 	bl	800116c <IMU_ReadOneByte>
 8001550:	4603      	mov	r3, r0
 8001552:	461a      	mov	r2, r3
 8001554:	4b49      	ldr	r3, [pc, #292]	@ (800167c <IMU_GyroRead+0x194>)
 8001556:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_H, &u8Buf[1]);
 8001558:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800155c:	3301      	adds	r3, #1
 800155e:	461a      	mov	r2, r3
 8001560:	2137      	movs	r1, #55	@ 0x37
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff fe02 	bl	800116c <IMU_ReadOneByte>
 8001568:	4603      	mov	r3, r0
 800156a:	461a      	mov	r2, r3
 800156c:	4b43      	ldr	r3, [pc, #268]	@ (800167c <IMU_GyroRead+0x194>)
 800156e:	701a      	strb	r2, [r3, #0]
	gyroRaw[2] = (u8Buf[1] << 8) | u8Buf[0];
 8001570:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001574:	b21b      	sxth	r3, r3
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b21a      	sxth	r2, r3
 800157a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800157e:	b21b      	sxth	r3, r3
 8001580:	4313      	orrs	r3, r2
 8001582:	b21b      	sxth	r3, r3
 8001584:	843b      	strh	r3, [r7, #32]


	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_XOUT_L, &u8Buf[0]);
 8001586:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800158a:	461a      	mov	r2, r3
 800158c:	2134      	movs	r1, #52	@ 0x34
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff fdec 	bl	800116c <IMU_ReadOneByte>
 8001594:	4603      	mov	r3, r0
 8001596:	461a      	mov	r2, r3
 8001598:	4b38      	ldr	r3, [pc, #224]	@ (800167c <IMU_GyroRead+0x194>)
 800159a:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_XOUT_H, &u8Buf[1]);
 800159c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a0:	3301      	adds	r3, #1
 80015a2:	461a      	mov	r2, r3
 80015a4:	2133      	movs	r1, #51	@ 0x33
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fde0 	bl	800116c <IMU_ReadOneByte>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	4b32      	ldr	r3, [pc, #200]	@ (800167c <IMU_GyroRead+0x194>)
 80015b2:	701a      	strb	r2, [r3, #0]
	temp = (u8Buf[1] << 8) | u8Buf[0]; // for debugging
 80015b4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	b21a      	sxth	r2, r3
 80015be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	4313      	orrs	r3, r2
 80015c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
	gyroRaw[0] = (u8Buf[1] << 8) | u8Buf[0];
 80015c8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	021b      	lsls	r3, r3, #8
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	b21b      	sxth	r3, r3
 80015dc:	83bb      	strh	r3, [r7, #28]

	float gyroRawFloat[3] = {0};
 80015de:	f107 0308 	add.w	r3, r7, #8
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
	gyroRawFloat[0] = gyroRaw[0] - dev->gyro_bias[0];
 80015ea:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80015ee:	ee07 3a90 	vmov	s15, r3
 80015f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80015fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001600:	edc7 7a02 	vstr	s15, [r7, #8]
	gyroRawFloat[1] = gyroRaw[1] - dev->gyro_bias[1];
 8001604:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001608:	ee07 3a90 	vmov	s15, r3
 800160c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800161a:	edc7 7a03 	vstr	s15, [r7, #12]
	gyroRawFloat[2] = gyroRaw[2] - dev->gyro_bias[2];
 800161e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001622:	ee07 3a90 	vmov	s15, r3
 8001626:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001630:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001634:	edc7 7a04 	vstr	s15, [r7, #16]
	// gyro full scale set to +/-500 dps, sensitivity scale factor = 65.5 LSB/dps
	// degree per second = value/65.5



	dev->gyro[0] = 0.06106870229f * gyroRawFloat[0];
 8001638:	edd7 7a02 	vldr	s15, [r7, #8]
 800163c:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001680 <IMU_GyroRead+0x198>
 8001640:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	edc3 7a04 	vstr	s15, [r3, #16]
	dev->gyro[1] = 0.06106870229f * gyroRawFloat[1];
 800164a:	edd7 7a03 	vldr	s15, [r7, #12]
 800164e:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001680 <IMU_GyroRead+0x198>
 8001652:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	edc3 7a05 	vstr	s15, [r3, #20]
	dev->gyro[2] = 0.06106870229f * gyroRawFloat[2];
 800165c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001660:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001680 <IMU_GyroRead+0x198>
 8001664:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	edc3 7a06 	vstr	s15, [r3, #24]

	return ret;
 800166e:	4b03      	ldr	r3, [pc, #12]	@ (800167c <IMU_GyroRead+0x194>)
 8001670:	781b      	ldrb	r3, [r3, #0]

}
 8001672:	4618      	mov	r0, r3
 8001674:	3728      	adds	r7, #40	@ 0x28
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200001f8 	.word	0x200001f8
 8001680:	3d7a232d 	.word	0x3d7a232d

08001684 <Mag_init>:

HAL_StatusTypeDef Mag_init(ICM20948 *dev) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	73fb      	strb	r3, [r7, #15]

	Mag_WriteOneByte(dev, AK09916__CNTL2__REGISTER, REG_VAL_MAG_MODE_10HZ);
 8001690:	2202      	movs	r2, #2
 8001692:	2131      	movs	r1, #49	@ 0x31
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff fd84 	bl	80011a2 <Mag_WriteOneByte>

}
 800169a:	bf00      	nop
 800169c:	4618      	mov	r0, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <_ZN7Display8oledTaskEPv>:
#include "app_display.h"
#include <cstring>
#include <cstdio>
namespace Display {

	void oledTask(void*) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af02      	add	r7, sp, #8
 80016aa:	6078      	str	r0, [r7, #4]

		OLED_Init();
 80016ac:	f003 fd68 	bl	8005180 <OLED_Init>
		OLED_Clear();
 80016b0:	f003 fb6c 	bl	8004d8c <OLED_Clear>

		OLED_ShowString(0, 0, (uint8_t*) "TRD|OK");
 80016b4:	4a93      	ldr	r2, [pc, #588]	@ (8001904 <_ZN7Display8oledTaskEPv+0x260>)
 80016b6:	2100      	movs	r1, #0
 80016b8:	2000      	movs	r0, #0
 80016ba:	f003 fc69 	bl	8004f90 <OLED_ShowString>
		OLED_Display_On();
 80016be:	f003 fb8b 	bl	8004dd8 <OLED_Display_On>
		OLED_DrawRect(46, 16, 51, 21, 1);
 80016c2:	2301      	movs	r3, #1
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	2315      	movs	r3, #21
 80016c8:	2233      	movs	r2, #51	@ 0x33
 80016ca:	2110      	movs	r1, #16
 80016cc:	202e      	movs	r0, #46	@ 0x2e
 80016ce:	f003 fc91 	bl	8004ff4 <OLED_DrawRect>
		OLED_DrawRect(46, 28, 51, 33, 1);
 80016d2:	2301      	movs	r3, #1
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2321      	movs	r3, #33	@ 0x21
 80016d8:	2233      	movs	r2, #51	@ 0x33
 80016da:	211c      	movs	r1, #28
 80016dc:	202e      	movs	r0, #46	@ 0x2e
 80016de:	f003 fc89 	bl	8004ff4 <OLED_DrawRect>
		OLED_DrawRect(46, 40, 51, 45, 1);
 80016e2:	2301      	movs	r3, #1
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	232d      	movs	r3, #45	@ 0x2d
 80016e8:	2233      	movs	r2, #51	@ 0x33
 80016ea:	2128      	movs	r1, #40	@ 0x28
 80016ec:	202e      	movs	r0, #46	@ 0x2e
 80016ee:	f003 fc81 	bl	8004ff4 <OLED_DrawRect>
		OLED_DrawRect(46, 52, 51, 57, 1);
 80016f2:	2301      	movs	r3, #1
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	2339      	movs	r3, #57	@ 0x39
 80016f8:	2233      	movs	r2, #51	@ 0x33
 80016fa:	2134      	movs	r1, #52	@ 0x34
 80016fc:	202e      	movs	r0, #46	@ 0x2e
 80016fe:	f003 fc79 	bl	8004ff4 <OLED_DrawRect>
		OLED_DrawVerticalLine(55, 3, 58);
 8001702:	223a      	movs	r2, #58	@ 0x3a
 8001704:	2103      	movs	r1, #3
 8001706:	2037      	movs	r0, #55	@ 0x37
 8001708:	f003 fd19 	bl	800513e <OLED_DrawVerticalLine>

		OLED_ShowString(1, 13, (uint8_t*) "SELF");
 800170c:	4a7e      	ldr	r2, [pc, #504]	@ (8001908 <_ZN7Display8oledTaskEPv+0x264>)
 800170e:	210d      	movs	r1, #13
 8001710:	2001      	movs	r0, #1
 8001712:	f003 fc3d 	bl	8004f90 <OLED_ShowString>
		OLED_ShowString(1, 25, (uint8_t*) "PROC");
 8001716:	4a7d      	ldr	r2, [pc, #500]	@ (800190c <_ZN7Display8oledTaskEPv+0x268>)
 8001718:	2119      	movs	r1, #25
 800171a:	2001      	movs	r0, #1
 800171c:	f003 fc38 	bl	8004f90 <OLED_ShowString>
		OLED_ShowString(1, 37, (uint8_t*) "SENR");
 8001720:	4a7b      	ldr	r2, [pc, #492]	@ (8001910 <_ZN7Display8oledTaskEPv+0x26c>)
 8001722:	2125      	movs	r1, #37	@ 0x25
 8001724:	2001      	movs	r0, #1
 8001726:	f003 fc33 	bl	8004f90 <OLED_ShowString>
		OLED_ShowString(1, 49, (uint8_t*) "MOTN");
 800172a:	4a7a      	ldr	r2, [pc, #488]	@ (8001914 <_ZN7Display8oledTaskEPv+0x270>)
 800172c:	2131      	movs	r1, #49	@ 0x31
 800172e:	2001      	movs	r0, #1
 8001730:	f003 fc2e 	bl	8004f90 <OLED_ShowString>
		OLED_ShowString(60, 0, (uint8_t*) "Le");   // left encoder count.
 8001734:	4a78      	ldr	r2, [pc, #480]	@ (8001918 <_ZN7Display8oledTaskEPv+0x274>)
 8001736:	2100      	movs	r1, #0
 8001738:	203c      	movs	r0, #60	@ 0x3c
 800173a:	f003 fc29 	bl	8004f90 <OLED_ShowString>
		OLED_ShowString(60, 12, (uint8_t*) "Ri");  // right encoder count.
 800173e:	4a77      	ldr	r2, [pc, #476]	@ (800191c <_ZN7Display8oledTaskEPv+0x278>)
 8001740:	210c      	movs	r1, #12
 8001742:	203c      	movs	r0, #60	@ 0x3c
 8001744:	f003 fc24 	bl	8004f90 <OLED_ShowString>
		OLED_ShowString(60, 24, (uint8_t*) "To");  // total encoder count expected for distance travelled (for each encoder).
 8001748:	4a75      	ldr	r2, [pc, #468]	@ (8001920 <_ZN7Display8oledTaskEPv+0x27c>)
 800174a:	2118      	movs	r1, #24
 800174c:	203c      	movs	r0, #60	@ 0x3c
 800174e:	f003 fc1f 	bl	8004f90 <OLED_ShowString>
		OLED_ShowString(60, 36, (uint8_t*) "Er");  // err between left and right encoders.
 8001752:	4a74      	ldr	r2, [pc, #464]	@ (8001924 <_ZN7Display8oledTaskEPv+0x280>)
 8001754:	2124      	movs	r1, #36	@ 0x24
 8001756:	203c      	movs	r0, #60	@ 0x3c
 8001758:	f003 fc1a 	bl	8004f90 <OLED_ShowString>
		OLED_ShowString(60, 48, (uint8_t*) "Di");  // distance travelled.
 800175c:	4a72      	ldr	r2, [pc, #456]	@ (8001928 <_ZN7Display8oledTaskEPv+0x284>)
 800175e:	2130      	movs	r1, #48	@ 0x30
 8001760:	203c      	movs	r0, #60	@ 0x3c
 8001762:	f003 fc15 	bl	8004f90 <OLED_ShowString>
		OLED_Refresh_Gram();
 8001766:	f003 fad9 	bl	8004d1c <OLED_Refresh_Gram>
		bool self = false;
 800176a:	2300      	movs	r3, #0
 800176c:	75fb      	strb	r3, [r7, #23]
		uint8_t buf[10] = { 0 };
 800176e:	f107 030c 	add.w	r3, r7, #12
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	811a      	strh	r2, [r3, #8]

		for (;;) {

			OLED_DrawRectWithFill(47, 17, 50, 20, self);
 800177a:	7dfb      	ldrb	r3, [r7, #23]
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	2314      	movs	r3, #20
 8001780:	2232      	movs	r2, #50	@ 0x32
 8001782:	2111      	movs	r1, #17
 8001784:	202f      	movs	r0, #47	@ 0x2f
 8001786:	f003 fc79 	bl	800507c <OLED_DrawRectWithFill>
			OLED_DrawRectWithFill(47, 29, 50, 32, is_task_alive_struct.proc);
 800178a:	4b68      	ldr	r3, [pc, #416]	@ (800192c <_ZN7Display8oledTaskEPv+0x288>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	2320      	movs	r3, #32
 8001792:	2232      	movs	r2, #50	@ 0x32
 8001794:	211d      	movs	r1, #29
 8001796:	202f      	movs	r0, #47	@ 0x2f
 8001798:	f003 fc70 	bl	800507c <OLED_DrawRectWithFill>
			OLED_DrawRectWithFill(47, 41, 50, 44, is_task_alive_struct.senr);
 800179c:	4b63      	ldr	r3, [pc, #396]	@ (800192c <_ZN7Display8oledTaskEPv+0x288>)
 800179e:	789b      	ldrb	r3, [r3, #2]
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	232c      	movs	r3, #44	@ 0x2c
 80017a4:	2232      	movs	r2, #50	@ 0x32
 80017a6:	2129      	movs	r1, #41	@ 0x29
 80017a8:	202f      	movs	r0, #47	@ 0x2f
 80017aa:	f003 fc67 	bl	800507c <OLED_DrawRectWithFill>
			OLED_DrawRectWithFill(47, 53, 50, 56, is_task_alive_struct.motn);
 80017ae:	4b5f      	ldr	r3, [pc, #380]	@ (800192c <_ZN7Display8oledTaskEPv+0x288>)
 80017b0:	78db      	ldrb	r3, [r3, #3]
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	2338      	movs	r3, #56	@ 0x38
 80017b6:	2232      	movs	r2, #50	@ 0x32
 80017b8:	2135      	movs	r1, #53	@ 0x35
 80017ba:	202f      	movs	r0, #47	@ 0x2f
 80017bc:	f003 fc5e 	bl	800507c <OLED_DrawRectWithFill>

			memset(&buf, 0, sizeof(buf));
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	220a      	movs	r2, #10
 80017c6:	2100      	movs	r1, #0
 80017c8:	4618      	mov	r0, r3
 80017ca:	f00e fbc1 	bl	800ff50 <memset>
			snprintf((char*) buf, sizeof(buf), "%4.1f", sensor_data.cur_left);
 80017ce:	4b58      	ldr	r3, [pc, #352]	@ (8001930 <_ZN7Display8oledTaskEPv+0x28c>)
 80017d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe feb8 	bl	8000548 <__aeabi_f2d>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	f107 000c 	add.w	r0, r7, #12
 80017e0:	e9cd 2300 	strd	r2, r3, [sp]
 80017e4:	4a53      	ldr	r2, [pc, #332]	@ (8001934 <_ZN7Display8oledTaskEPv+0x290>)
 80017e6:	210a      	movs	r1, #10
 80017e8:	f00e fa82 	bl	800fcf0 <sniprintf>
			OLED_ShowString(85, 0, (uint8_t*) &buf);
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	461a      	mov	r2, r3
 80017f2:	2100      	movs	r1, #0
 80017f4:	2055      	movs	r0, #85	@ 0x55
 80017f6:	f003 fbcb 	bl	8004f90 <OLED_ShowString>

			memset(&buf, 0, sizeof(buf));
 80017fa:	f107 030c 	add.w	r3, r7, #12
 80017fe:	220a      	movs	r2, #10
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f00e fba4 	bl	800ff50 <memset>
			snprintf((char*) buf, sizeof(buf), "%4.1f", sensor_data.cur_right);
 8001808:	4b49      	ldr	r3, [pc, #292]	@ (8001930 <_ZN7Display8oledTaskEPv+0x28c>)
 800180a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe fe9b 	bl	8000548 <__aeabi_f2d>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	f107 000c 	add.w	r0, r7, #12
 800181a:	e9cd 2300 	strd	r2, r3, [sp]
 800181e:	4a45      	ldr	r2, [pc, #276]	@ (8001934 <_ZN7Display8oledTaskEPv+0x290>)
 8001820:	210a      	movs	r1, #10
 8001822:	f00e fa65 	bl	800fcf0 <sniprintf>
			OLED_ShowString(85, 12, (uint8_t*) &buf);
 8001826:	f107 030c 	add.w	r3, r7, #12
 800182a:	461a      	mov	r2, r3
 800182c:	210c      	movs	r1, #12
 800182e:	2055      	movs	r0, #85	@ 0x55
 8001830:	f003 fbae 	bl	8004f90 <OLED_ShowString>

			memset(&buf, 0, sizeof(buf));
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	220a      	movs	r2, #10
 800183a:	2100      	movs	r1, #0
 800183c:	4618      	mov	r0, r3
 800183e:	f00e fb87 	bl	800ff50 <memset>
			snprintf((char*) buf, sizeof(buf), "%4.1f", sensor_data.target);
 8001842:	4b3b      	ldr	r3, [pc, #236]	@ (8001930 <_ZN7Display8oledTaskEPv+0x28c>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fe7e 	bl	8000548 <__aeabi_f2d>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	f107 000c 	add.w	r0, r7, #12
 8001854:	e9cd 2300 	strd	r2, r3, [sp]
 8001858:	4a36      	ldr	r2, [pc, #216]	@ (8001934 <_ZN7Display8oledTaskEPv+0x290>)
 800185a:	210a      	movs	r1, #10
 800185c:	f00e fa48 	bl	800fcf0 <sniprintf>
			OLED_ShowString(85, 24, (uint8_t*) &buf);
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	461a      	mov	r2, r3
 8001866:	2118      	movs	r1, #24
 8001868:	2055      	movs	r0, #85	@ 0x55
 800186a:	f003 fb91 	bl	8004f90 <OLED_ShowString>

			memset(&buf, 0, sizeof(buf));
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	220a      	movs	r2, #10
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f00e fb6a 	bl	800ff50 <memset>
			snprintf((char*) buf, sizeof(buf), "%4.1f", sensor_data.cur_left - sensor_data.cur_right);
 800187c:	4b2c      	ldr	r3, [pc, #176]	@ (8001930 <_ZN7Display8oledTaskEPv+0x28c>)
 800187e:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8001882:	4b2b      	ldr	r3, [pc, #172]	@ (8001930 <_ZN7Display8oledTaskEPv+0x28c>)
 8001884:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001888:	ee77 7a67 	vsub.f32	s15, s14, s15
 800188c:	ee17 0a90 	vmov	r0, s15
 8001890:	f7fe fe5a 	bl	8000548 <__aeabi_f2d>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	f107 000c 	add.w	r0, r7, #12
 800189c:	e9cd 2300 	strd	r2, r3, [sp]
 80018a0:	4a24      	ldr	r2, [pc, #144]	@ (8001934 <_ZN7Display8oledTaskEPv+0x290>)
 80018a2:	210a      	movs	r1, #10
 80018a4:	f00e fa24 	bl	800fcf0 <sniprintf>
			OLED_ShowString(85, 36, (uint8_t*) &buf);
 80018a8:	f107 030c 	add.w	r3, r7, #12
 80018ac:	461a      	mov	r2, r3
 80018ae:	2124      	movs	r1, #36	@ 0x24
 80018b0:	2055      	movs	r0, #85	@ 0x55
 80018b2:	f003 fb6d 	bl	8004f90 <OLED_ShowString>

			memset(&buf, 0, sizeof(buf));
 80018b6:	f107 030c 	add.w	r3, r7, #12
 80018ba:	220a      	movs	r2, #10
 80018bc:	2100      	movs	r1, #0
 80018be:	4618      	mov	r0, r3
 80018c0:	f00e fb46 	bl	800ff50 <memset>
			snprintf((char*) buf, sizeof(buf), "%d", sensor_data.last_halt_val);
 80018c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001930 <_ZN7Display8oledTaskEPv+0x28c>)
 80018c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018c8:	f107 000c 	add.w	r0, r7, #12
 80018cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001938 <_ZN7Display8oledTaskEPv+0x294>)
 80018ce:	210a      	movs	r1, #10
 80018d0:	f00e fa0e 	bl	800fcf0 <sniprintf>
			OLED_ShowString(85, 48, (uint8_t*) &buf);
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	461a      	mov	r2, r3
 80018da:	2130      	movs	r1, #48	@ 0x30
 80018dc:	2055      	movs	r0, #85	@ 0x55
 80018de:	f003 fb57 	bl	8004f90 <OLED_ShowString>


			OLED_Refresh_Gram();
 80018e2:	f003 fa1b 	bl	8004d1c <OLED_Refresh_Gram>
			self = !self;
 80018e6:	7dfb      	ldrb	r3, [r7, #23]
 80018e8:	f083 0301 	eor.w	r3, r3, #1
 80018ec:	75fb      	strb	r3, [r7, #23]
			memset((void*) &is_task_alive_struct, 0, sizeof(isTaskAlive_t));
 80018ee:	2204      	movs	r2, #4
 80018f0:	2100      	movs	r1, #0
 80018f2:	480e      	ldr	r0, [pc, #56]	@ (800192c <_ZN7Display8oledTaskEPv+0x288>)
 80018f4:	f00e fb2c 	bl	800ff50 <memset>
			osDelay(250);
 80018f8:	20fa      	movs	r0, #250	@ 0xfa
 80018fa:	f009 ff75 	bl	800b7e8 <osDelay>
			OLED_DrawRectWithFill(47, 17, 50, 20, self);
 80018fe:	bf00      	nop
 8001900:	e73b      	b.n	800177a <_ZN7Display8oledTaskEPv+0xd6>
 8001902:	bf00      	nop
 8001904:	08011e68 	.word	0x08011e68
 8001908:	08011e70 	.word	0x08011e70
 800190c:	08011e78 	.word	0x08011e78
 8001910:	08011e80 	.word	0x08011e80
 8001914:	08011e88 	.word	0x08011e88
 8001918:	08011e90 	.word	0x08011e90
 800191c:	08011e94 	.word	0x08011e94
 8001920:	08011e98 	.word	0x08011e98
 8001924:	08011e9c 	.word	0x08011e9c
 8001928:	08011ea0 	.word	0x08011ea0
 800192c:	20000240 	.word	0x20000240
 8001930:	200001fc 	.word	0x200001fc
 8001934:	08011ea4 	.word	0x08011ea4
 8001938:	08011eac 	.word	0x08011eac

0800193c <_ZN9AppMotion16MotionControllerD1Ev>:
			void move(bool isFwd, uint32_t arg, uint32_t speed, bool isCrawl, bool nostop);
			void emergencyStop();
			void task2ScanAndRot(bool dir);
			void task2ScanAndReturn(bool dir);
			void task2PassObstOne(bool dir);
			~MotionController() {
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
			}
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <initializeCPPconstructs>:
/*****************************************************************************************/

/*
 * This function initializes the C++ stuff, called from within main() context.
 */
void initializeCPPconstructs(void) {
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0

	sensor_data.is_allow_motor_override = true;
 8001958:	4b10      	ldr	r3, [pc, #64]	@ (800199c <initializeCPPconstructs+0x48>)
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	sensor_data.ir_dist_th_L = 10.0f;
 8001960:	4b0e      	ldr	r3, [pc, #56]	@ (800199c <initializeCPPconstructs+0x48>)
 8001962:	4a0f      	ldr	r2, [pc, #60]	@ (80019a0 <initializeCPPconstructs+0x4c>)
 8001964:	62da      	str	r2, [r3, #44]	@ 0x2c
	sensor_data.ir_dist_th_R = 10.0f;
 8001966:	4b0d      	ldr	r3, [pc, #52]	@ (800199c <initializeCPPconstructs+0x48>)
 8001968:	4a0d      	ldr	r2, [pc, #52]	@ (80019a0 <initializeCPPconstructs+0x4c>)
 800196a:	631a      	str	r2, [r3, #48]	@ 0x30


	// create instance of the Task
	// 1. Processor related task
	processor.start();
 800196c:	480d      	ldr	r0, [pc, #52]	@ (80019a4 <initializeCPPconstructs+0x50>)
 800196e:	f002 f8a1 	bl	8003ab4 <_ZN9AppParser9Processor5startEv>

	// 2. Motor related task
	controller.start();
 8001972:	480d      	ldr	r0, [pc, #52]	@ (80019a8 <initializeCPPconstructs+0x54>)
 8001974:	f000 fe02 	bl	800257c <_ZN9AppMotion16MotionController5startEv>


	// 3. Display related task
	oledTaskHandle = osThreadNew(Display::oledTask, NULL, &oledTask_attr);
 8001978:	4a0c      	ldr	r2, [pc, #48]	@ (80019ac <initializeCPPconstructs+0x58>)
 800197a:	2100      	movs	r1, #0
 800197c:	480c      	ldr	r0, [pc, #48]	@ (80019b0 <initializeCPPconstructs+0x5c>)
 800197e:	f009 fe81 	bl	800b684 <osThreadNew>
 8001982:	4603      	mov	r3, r0
 8001984:	4a0b      	ldr	r2, [pc, #44]	@ (80019b4 <initializeCPPconstructs+0x60>)
 8001986:	6013      	str	r3, [r2, #0]

	// 4. Sensor related task
	imuTaskHandle = osThreadNew(sensorIMUTask, NULL, &imuTask_attr);
 8001988:	4a0b      	ldr	r2, [pc, #44]	@ (80019b8 <initializeCPPconstructs+0x64>)
 800198a:	2100      	movs	r1, #0
 800198c:	480b      	ldr	r0, [pc, #44]	@ (80019bc <initializeCPPconstructs+0x68>)
 800198e:	f009 fe79 	bl	800b684 <osThreadNew>
 8001992:	4603      	mov	r3, r0
 8001994:	4a0a      	ldr	r2, [pc, #40]	@ (80019c0 <initializeCPPconstructs+0x6c>)
 8001996:	6013      	str	r3, [r2, #0]
	//	irTaskHandle = osThreadNew(sensorIRTask, NULL, &irTask_attr);
	//	usTaskHandle = osThreadNew(sensorUSTask, NULL, &usTask_attr);

}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	200001fc 	.word	0x200001fc
 80019a0:	41200000 	.word	0x41200000
 80019a4:	2000040c 	.word	0x2000040c
 80019a8:	200002b0 	.word	0x200002b0
 80019ac:	08011fdc 	.word	0x08011fdc
 80019b0:	080016a5 	.word	0x080016a5
 80019b4:	20000244 	.word	0x20000244
 80019b8:	08012000 	.word	0x08012000
 80019bc:	080019c9 	.word	0x080019c9
 80019c0:	20000248 	.word	0x20000248
 80019c4:	00000000 	.word	0x00000000

080019c8 <sensorIMUTask>:
float SEq_1 = 1.0f;
float SEq_2 = 0.0f;
float SEq_3 = 0.0f;
float SEq_4 = 0.0f;

void sensorIMUTask(void *pv) {
 80019c8:	b5b0      	push	{r4, r5, r7, lr}
 80019ca:	ed2d 8b06 	vpush	{d8-d10}
 80019ce:	b0a0      	sub	sp, #128	@ 0x80
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]

	/**Init IMU**/
	IMU_Initialise(&imu, &hi2c2);
 80019d4:	498c      	ldr	r1, [pc, #560]	@ (8001c08 <sensorIMUTask+0x240>)
 80019d6:	488d      	ldr	r0, [pc, #564]	@ (8001c0c <sensorIMUTask+0x244>)
 80019d8:	f7ff faec 	bl	8000fb4 <IMU_Initialise>
	osDelay(400);
 80019dc:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80019e0:	f009 ff02 	bl	800b7e8 <osDelay>
	Gyro_calibrate(&imu);
 80019e4:	4889      	ldr	r0, [pc, #548]	@ (8001c0c <sensorIMUTask+0x244>)
 80019e6:	f7ff fcd3 	bl	8001390 <Gyro_calibrate>
	Mag_init(&imu);
 80019ea:	4888      	ldr	r0, [pc, #544]	@ (8001c0c <sensorIMUTask+0x244>)
 80019ec:	f7ff fe4a 	bl	8001684 <Mag_init>
	sensor_data.imu = &imu;
 80019f0:	4b87      	ldr	r3, [pc, #540]	@ (8001c10 <sensorIMUTask+0x248>)
 80019f2:	4a86      	ldr	r2, [pc, #536]	@ (8001c0c <sensorIMUTask+0x244>)
 80019f4:	601a      	str	r2, [r3, #0]
	char sbuf[100] = { 0 };
 80019f6:	f107 030c 	add.w	r3, r7, #12
 80019fa:	2264      	movs	r2, #100	@ 0x64
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f00e faa6 	bl	800ff50 <memset>
	HAL_StatusTypeDef result;

	/**I2C scanner for debug purposes **/
	printf("Scanning I2C bus:\r\n");
 8001a04:	4883      	ldr	r0, [pc, #524]	@ (8001c14 <sensorIMUTask+0x24c>)
 8001a06:	f00e f96b 	bl	800fce0 <puts>
	for (uint8_t addr = 1; addr < 127; addr++) {
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001a10:	e029      	b.n	8001a66 <sensorIMUTask+0x9e>
		result = HAL_I2C_IsDeviceReady(&hi2c2, addr << 1, 1, 10);
 8001a12:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	b299      	uxth	r1, r3
 8001a1c:	230a      	movs	r3, #10
 8001a1e:	2201      	movs	r2, #1
 8001a20:	4879      	ldr	r0, [pc, #484]	@ (8001c08 <sensorIMUTask+0x240>)
 8001a22:	f005 fe17 	bl	8007654 <HAL_I2C_IsDeviceReady>
 8001a26:	4603      	mov	r3, r0
 8001a28:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
		if (result == HAL_OK) {
 8001a2c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d113      	bne.n	8001a5c <sensorIMUTask+0x94>
			uint16_t len = sprintf(&sbuf[0], "I2C device found at 0x%02X\r\n", addr);
 8001a34:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8001a38:	f107 030c 	add.w	r3, r7, #12
 8001a3c:	4976      	ldr	r1, [pc, #472]	@ (8001c18 <sensorIMUTask+0x250>)
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f00e f98c 	bl	800fd5c <siprintf>
 8001a44:	4603      	mov	r3, r0
 8001a46:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
			HAL_UART_Transmit(&huart3, (uint8_t*)sbuf, len, HAL_MAX_DELAY);
 8001a4a:	f8b7 2070 	ldrh.w	r2, [r7, #112]	@ 0x70
 8001a4e:	f107 010c 	add.w	r1, r7, #12
 8001a52:	f04f 33ff 	mov.w	r3, #4294967295
 8001a56:	4871      	ldr	r0, [pc, #452]	@ (8001c1c <sensorIMUTask+0x254>)
 8001a58:	f008 fb63 	bl	800a122 <HAL_UART_Transmit>
	for (uint8_t addr = 1; addr < 127; addr++) {
 8001a5c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001a60:	3301      	adds	r3, #1
 8001a62:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001a66:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001a6a:	2b7e      	cmp	r3, #126	@ 0x7e
 8001a6c:	d9d1      	bls.n	8001a12 <sensorIMUTask+0x4a>
		}
	}
	uint32_t timeNow = HAL_GetTick();
 8001a6e:	f004 fa7b 	bl	8005f68 <HAL_GetTick>
 8001a72:	67b8      	str	r0, [r7, #120]	@ 0x78
	float DEG2RAD = 0.017453292519943295769236907684886f;
 8001a74:	4b6a      	ldr	r3, [pc, #424]	@ (8001c20 <sensorIMUTask+0x258>)
 8001a76:	677b      	str	r3, [r7, #116]	@ 0x74

	for (;;) {
		osDelay(80); // 281hz gyro
 8001a78:	2050      	movs	r0, #80	@ 0x50
 8001a7a:	f009 feb5 	bl	800b7e8 <osDelay>
		osThreadYield();
 8001a7e:	f009 fe93 	bl	800b7a8 <osThreadYield>

		IMU_AccelRead(&imu);
 8001a82:	4862      	ldr	r0, [pc, #392]	@ (8001c0c <sensorIMUTask+0x244>)
 8001a84:	f7ff fbaa 	bl	80011dc <IMU_AccelRead>
		IMU_GyroRead(&imu);
 8001a88:	4860      	ldr	r0, [pc, #384]	@ (8001c0c <sensorIMUTask+0x244>)
 8001a8a:	f7ff fd2d 	bl	80014e8 <IMU_GyroRead>

		quaternionUpdate(
				imu.gyro[0] * DEG2RAD,
 8001a8e:	4b5f      	ldr	r3, [pc, #380]	@ (8001c0c <sensorIMUTask+0x244>)
 8001a90:	ed93 7a04 	vldr	s14, [r3, #16]
		quaternionUpdate(
 8001a94:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001a98:	ee27 8a27 	vmul.f32	s16, s14, s15
				imu.gyro[1] * DEG2RAD,
 8001a9c:	4b5b      	ldr	r3, [pc, #364]	@ (8001c0c <sensorIMUTask+0x244>)
 8001a9e:	ed93 7a05 	vldr	s14, [r3, #20]
		quaternionUpdate(
 8001aa2:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001aa6:	ee67 8a27 	vmul.f32	s17, s14, s15
				imu.gyro[2] * DEG2RAD,
 8001aaa:	4b58      	ldr	r3, [pc, #352]	@ (8001c0c <sensorIMUTask+0x244>)
 8001aac:	ed93 7a06 	vldr	s14, [r3, #24]
		quaternionUpdate(
 8001ab0:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001ab4:	ee27 9a27 	vmul.f32	s18, s14, s15
 8001ab8:	4b54      	ldr	r3, [pc, #336]	@ (8001c0c <sensorIMUTask+0x244>)
 8001aba:	edd3 9a01 	vldr	s19, [r3, #4]
 8001abe:	4b53      	ldr	r3, [pc, #332]	@ (8001c0c <sensorIMUTask+0x244>)
 8001ac0:	ed93 aa02 	vldr	s20, [r3, #8]
 8001ac4:	4b51      	ldr	r3, [pc, #324]	@ (8001c0c <sensorIMUTask+0x244>)
 8001ac6:	edd3 aa03 	vldr	s21, [r3, #12]
				imu.acc[0],
				imu.acc[1],
				imu.acc[2],
				(HAL_GetTick() - timeNow) * 0.001f
 8001aca:	f004 fa4d 	bl	8005f68 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ad2:	1ad3      	subs	r3, r2, r3
		quaternionUpdate(
 8001ad4:	ee07 3a90 	vmov	s15, r3
 8001ad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001adc:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8001c24 <sensorIMUTask+0x25c>
 8001ae0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ae4:	eeb0 3a67 	vmov.f32	s6, s15
 8001ae8:	eef0 2a6a 	vmov.f32	s5, s21
 8001aec:	eeb0 2a4a 	vmov.f32	s4, s20
 8001af0:	eef0 1a69 	vmov.f32	s3, s19
 8001af4:	eeb0 1a49 	vmov.f32	s2, s18
 8001af8:	eef0 0a68 	vmov.f32	s1, s17
 8001afc:	eeb0 0a48 	vmov.f32	s0, s16
 8001b00:	f000 f89e 	bl	8001c40 <quaternionUpdate>
				);

		timeNow = HAL_GetTick();
 8001b04:	f004 fa30 	bl	8005f68 <HAL_GetTick>
 8001b08:	67b8      	str	r0, [r7, #120]	@ 0x78

		imu.q[0] = SEq_1;
 8001b0a:	4b47      	ldr	r3, [pc, #284]	@ (8001c28 <sensorIMUTask+0x260>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a3f      	ldr	r2, [pc, #252]	@ (8001c0c <sensorIMUTask+0x244>)
 8001b10:	6593      	str	r3, [r2, #88]	@ 0x58
		imu.q[1] = SEq_2;
 8001b12:	4b46      	ldr	r3, [pc, #280]	@ (8001c2c <sensorIMUTask+0x264>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a3d      	ldr	r2, [pc, #244]	@ (8001c0c <sensorIMUTask+0x244>)
 8001b18:	65d3      	str	r3, [r2, #92]	@ 0x5c
		imu.q[2] = SEq_3;
 8001b1a:	4b45      	ldr	r3, [pc, #276]	@ (8001c30 <sensorIMUTask+0x268>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a3b      	ldr	r2, [pc, #236]	@ (8001c0c <sensorIMUTask+0x244>)
 8001b20:	6613      	str	r3, [r2, #96]	@ 0x60
		imu.q[3] = SEq_4;
 8001b22:	4b44      	ldr	r3, [pc, #272]	@ (8001c34 <sensorIMUTask+0x26c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a39      	ldr	r2, [pc, #228]	@ (8001c0c <sensorIMUTask+0x244>)
 8001b28:	6653      	str	r3, [r2, #100]	@ 0x64

		sensor_data.yaw_abs_prev = sensor_data.yaw_abs;
 8001b2a:	4b39      	ldr	r3, [pc, #228]	@ (8001c10 <sensorIMUTask+0x248>)
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	4a38      	ldr	r2, [pc, #224]	@ (8001c10 <sensorIMUTask+0x248>)
 8001b30:	6153      	str	r3, [r2, #20]

		// yaw = atan2(2(q1​q2​+q0​q3​),q02​+q12​−q22​−q32​)
		sensor_data.yaw_abs = atan2(
				2.0f * (imu.q[1] * imu.q[2] + imu.q[0] * imu.q[3]),
 8001b32:	4b36      	ldr	r3, [pc, #216]	@ (8001c0c <sensorIMUTask+0x244>)
 8001b34:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 8001b38:	4b34      	ldr	r3, [pc, #208]	@ (8001c0c <sensorIMUTask+0x244>)
 8001b3a:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8001b3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b42:	4b32      	ldr	r3, [pc, #200]	@ (8001c0c <sensorIMUTask+0x244>)
 8001b44:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 8001b48:	4b30      	ldr	r3, [pc, #192]	@ (8001c0c <sensorIMUTask+0x244>)
 8001b4a:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8001b4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b56:	ee77 7aa7 	vadd.f32	s15, s15, s15
		sensor_data.yaw_abs = atan2(
 8001b5a:	ee17 0a90 	vmov	r0, s15
 8001b5e:	f7fe fcf3 	bl	8000548 <__aeabi_f2d>
 8001b62:	4604      	mov	r4, r0
 8001b64:	460d      	mov	r5, r1
				imu.q[0] * imu.q[0] + imu.q[1] * imu.q[1] - imu.q[2] * imu.q[2] - imu.q[3] * imu.q[3])
 8001b66:	4b29      	ldr	r3, [pc, #164]	@ (8001c0c <sensorIMUTask+0x244>)
 8001b68:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 8001b6c:	4b27      	ldr	r3, [pc, #156]	@ (8001c0c <sensorIMUTask+0x244>)
 8001b6e:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001b72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b76:	4b25      	ldr	r3, [pc, #148]	@ (8001c0c <sensorIMUTask+0x244>)
 8001b78:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 8001b7c:	4b23      	ldr	r3, [pc, #140]	@ (8001c0c <sensorIMUTask+0x244>)
 8001b7e:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8001b82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b8a:	4b20      	ldr	r3, [pc, #128]	@ (8001c0c <sensorIMUTask+0x244>)
 8001b8c:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 8001b90:	4b1e      	ldr	r3, [pc, #120]	@ (8001c0c <sensorIMUTask+0x244>)
 8001b92:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8001b96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c0c <sensorIMUTask+0x244>)
 8001ba0:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 8001ba4:	4b19      	ldr	r3, [pc, #100]	@ (8001c0c <sensorIMUTask+0x244>)
 8001ba6:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8001baa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bae:	ee77 7a67 	vsub.f32	s15, s14, s15
		sensor_data.yaw_abs = atan2(
 8001bb2:	ee17 0a90 	vmov	r0, s15
 8001bb6:	f7fe fcc7 	bl	8000548 <__aeabi_f2d>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	ec43 2b11 	vmov	d1, r2, r3
 8001bc2:	ec45 4b10 	vmov	d0, r4, r5
 8001bc6:	f00c fd39 	bl	800e63c <atan2>
 8001bca:	ec51 0b10 	vmov	r0, r1, d0
				* 57.295779513082320876798154814105f;
 8001bce:	a30c      	add	r3, pc, #48	@ (adr r3, 8001c00 <sensorIMUTask+0x238>)
 8001bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd4:	f7fe fd10 	bl	80005f8 <__aeabi_dmul>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	f7ff f802 	bl	8000be8 <__aeabi_d2f>
 8001be4:	4603      	mov	r3, r0
		sensor_data.yaw_abs = atan2(
 8001be6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c10 <sensorIMUTask+0x248>)
 8001be8:	6113      	str	r3, [r2, #16]

		sensor_data.yaw_abs_time = timeNow;
 8001bea:	4a09      	ldr	r2, [pc, #36]	@ (8001c10 <sensorIMUTask+0x248>)
 8001bec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001bee:	6193      	str	r3, [r2, #24]
//				sensor_data.yaw_abs,
//				sensor_data.ir_distL
//				);
//
//		HAL_UART_Transmit(&huart3, (uint8_t*) sbuf, len, 10);
		is_task_alive_struct.senr = true;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	@ (8001c38 <sensorIMUTask+0x270>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	709a      	strb	r2, [r3, #2]
		osDelay(80); // 281hz gyro
 8001bf6:	bf00      	nop
 8001bf8:	e73e      	b.n	8001a78 <sensorIMUTask+0xb0>
 8001bfa:	bf00      	nop
 8001bfc:	f3af 8000 	nop.w
 8001c00:	20000000 	.word	0x20000000
 8001c04:	404ca5dc 	.word	0x404ca5dc
 8001c08:	200004ac 	.word	0x200004ac
 8001c0c:	20000444 	.word	0x20000444
 8001c10:	200001fc 	.word	0x200001fc
 8001c14:	08011f00 	.word	0x08011f00
 8001c18:	08011f14 	.word	0x08011f14
 8001c1c:	200006f8 	.word	0x200006f8
 8001c20:	3c8efa35 	.word	0x3c8efa35
 8001c24:	3a83126f 	.word	0x3a83126f
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	20000418 	.word	0x20000418
 8001c30:	2000041c 	.word	0x2000041c
 8001c34:	20000420 	.word	0x20000420
 8001c38:	20000240 	.word	0x20000240
 8001c3c:	00000000 	.word	0x00000000

08001c40 <quaternionUpdate>:

#define gyroMeasError 3.14159265358979f * (1.0f / 180.0f)
#define beta sqrt(3.0f / 4.0f) * gyroMeasError

void quaternionUpdate(float w_x, float w_y, float w_z, float a_x, float a_y,
		float a_z, float deltat) {
 8001c40:	b5b0      	push	{r4, r5, r7, lr}
 8001c42:	b0a2      	sub	sp, #136	@ 0x88
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	ed87 0a07 	vstr	s0, [r7, #28]
 8001c4a:	edc7 0a06 	vstr	s1, [r7, #24]
 8001c4e:	ed87 1a05 	vstr	s2, [r7, #20]
 8001c52:	edc7 1a04 	vstr	s3, [r7, #16]
 8001c56:	ed87 2a03 	vstr	s4, [r7, #12]
 8001c5a:	edc7 2a02 	vstr	s5, [r7, #8]
 8001c5e:	ed87 3a01 	vstr	s6, [r7, #4]
	float SEqDot_omega_1, SEqDot_omega_2, SEqDot_omega_3, SEqDot_omega_4; // quaternion derivative from gyroscopes elements
	float f_1, f_2, f_3;                          						  // objective function elements
	float J_11or24, J_12or23, J_13or22, J_14or21, J_32, J_33; 			  // objective function Jacobian elements
	float SEqHatDot_1, SEqHatDot_2, SEqHatDot_3, SEqHatDot_4; 			  // estimated direction of the gyro error

	float halfSEq_1 = 0.5f * SEq_1;
 8001c62:	4bf1      	ldr	r3, [pc, #964]	@ (8002028 <quaternionUpdate+0x3e8>)
 8001c64:	edd3 7a00 	vldr	s15, [r3]
 8001c68:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c70:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
	float halfSEq_2 = 0.5f * SEq_2;
 8001c74:	4bed      	ldr	r3, [pc, #948]	@ (800202c <quaternionUpdate+0x3ec>)
 8001c76:	edd3 7a00 	vldr	s15, [r3]
 8001c7a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c82:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
	float halfSEq_3 = 0.5f * SEq_3;
 8001c86:	4bea      	ldr	r3, [pc, #936]	@ (8002030 <quaternionUpdate+0x3f0>)
 8001c88:	edd3 7a00 	vldr	s15, [r3]
 8001c8c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c94:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
	float halfSEq_4 = 0.5f * SEq_4;
 8001c98:	4be6      	ldr	r3, [pc, #920]	@ (8002034 <quaternionUpdate+0x3f4>)
 8001c9a:	edd3 7a00 	vldr	s15, [r3]
 8001c9e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001ca2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ca6:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
	float twoSEq_1 = 2.0f * SEq_1;
 8001caa:	4bdf      	ldr	r3, [pc, #892]	@ (8002028 <quaternionUpdate+0x3e8>)
 8001cac:	edd3 7a00 	vldr	s15, [r3]
 8001cb0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cb4:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
	float twoSEq_2 = 2.0f * SEq_2;
 8001cb8:	4bdc      	ldr	r3, [pc, #880]	@ (800202c <quaternionUpdate+0x3ec>)
 8001cba:	edd3 7a00 	vldr	s15, [r3]
 8001cbe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cc2:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
	float twoSEq_3 = 2.0f * SEq_3;
 8001cc6:	4bda      	ldr	r3, [pc, #872]	@ (8002030 <quaternionUpdate+0x3f0>)
 8001cc8:	edd3 7a00 	vldr	s15, [r3]
 8001ccc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cd0:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c

	// Normalize the accelerometer measurement
	norm = sqrt(a_x * a_x + a_y * a_y + a_z * a_z);
 8001cd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cd8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001cdc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ce0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ce4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ce8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf4:	ee17 0a90 	vmov	r0, s15
 8001cf8:	f7fe fc26 	bl	8000548 <__aeabi_f2d>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	ec43 2b10 	vmov	d0, r2, r3
 8001d04:	f00c fcca 	bl	800e69c <sqrt>
 8001d08:	ec53 2b10 	vmov	r2, r3, d0
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f7fe ff6a 	bl	8000be8 <__aeabi_d2f>
 8001d14:	4603      	mov	r3, r0
 8001d16:	66bb      	str	r3, [r7, #104]	@ 0x68
	a_x /= norm;
 8001d18:	edd7 6a04 	vldr	s13, [r7, #16]
 8001d1c:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001d20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d24:	edc7 7a04 	vstr	s15, [r7, #16]
	a_y /= norm;
 8001d28:	edd7 6a03 	vldr	s13, [r7, #12]
 8001d2c:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001d30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d34:	edc7 7a03 	vstr	s15, [r7, #12]
	a_z /= norm;
 8001d38:	edd7 6a02 	vldr	s13, [r7, #8]
 8001d3c:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001d40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d44:	edc7 7a02 	vstr	s15, [r7, #8]

	// Compute the objective function and Jacobian
	f_1 = twoSEq_2 * SEq_4 - twoSEq_1 * SEq_3 - a_x;
 8001d48:	4bba      	ldr	r3, [pc, #744]	@ (8002034 <quaternionUpdate+0x3f4>)
 8001d4a:	ed93 7a00 	vldr	s14, [r3]
 8001d4e:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001d52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d56:	4bb6      	ldr	r3, [pc, #728]	@ (8002030 <quaternionUpdate+0x3f0>)
 8001d58:	edd3 6a00 	vldr	s13, [r3]
 8001d5c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001d60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d68:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d70:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	f_2 = twoSEq_1 * SEq_2 + twoSEq_3 * SEq_4 - a_y;
 8001d74:	4bad      	ldr	r3, [pc, #692]	@ (800202c <quaternionUpdate+0x3ec>)
 8001d76:	ed93 7a00 	vldr	s14, [r3]
 8001d7a:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001d7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d82:	4bac      	ldr	r3, [pc, #688]	@ (8002034 <quaternionUpdate+0x3f4>)
 8001d84:	edd3 6a00 	vldr	s13, [r3]
 8001d88:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001d8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d94:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d9c:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
	f_3 = 1.0f - twoSEq_2 * SEq_2 - twoSEq_3 * SEq_3 - a_z;
 8001da0:	4ba2      	ldr	r3, [pc, #648]	@ (800202c <quaternionUpdate+0x3ec>)
 8001da2:	ed93 7a00 	vldr	s14, [r3]
 8001da6:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001db2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001db6:	4b9e      	ldr	r3, [pc, #632]	@ (8002030 <quaternionUpdate+0x3f0>)
 8001db8:	edd3 6a00 	vldr	s13, [r3]
 8001dbc:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001dc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dd0:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
	J_11or24 = twoSEq_3;
 8001dd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001dd6:	65bb      	str	r3, [r7, #88]	@ 0x58
	J_12or23 = 2.0f * SEq_4;
 8001dd8:	4b96      	ldr	r3, [pc, #600]	@ (8002034 <quaternionUpdate+0x3f4>)
 8001dda:	edd3 7a00 	vldr	s15, [r3]
 8001dde:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001de2:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
	J_13or22 = twoSEq_1;
 8001de6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001de8:	653b      	str	r3, [r7, #80]	@ 0x50
	J_14or21 = twoSEq_2;
 8001dea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001dec:	64fb      	str	r3, [r7, #76]	@ 0x4c
	J_32 = 2.0f * J_14or21;
 8001dee:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001df2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001df6:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	J_33 = 2.0f * J_11or24;
 8001dfa:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001dfe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e02:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

	// Compute the gradient (matrix multiplication)
	SEqHatDot_1 = J_14or21 * f_2 - J_11or24 * f_1;
 8001e06:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001e0a:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001e0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e12:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8001e16:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001e1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e22:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	SEqHatDot_2 = J_12or23 * f_1 + J_13or22 * f_2 - J_32 * f_3;
 8001e26:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001e2a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001e2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e32:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8001e36:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001e3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e42:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8001e46:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001e4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e52:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	SEqHatDot_3 = J_12or23 * f_2 - J_33 * f_3 - J_13or22 * f_1;
 8001e56:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001e5a:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001e5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e62:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8001e66:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001e6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e72:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8001e76:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001e7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e82:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	SEqHatDot_4 = J_14or21 * f_1 + J_11or24 * f_2;
 8001e86:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001e8a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001e8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e92:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8001e96:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001e9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	// Normalize the gradient
	norm = sqrt(
			SEqHatDot_1 * SEqHatDot_1 + SEqHatDot_2 * SEqHatDot_2
 8001ea6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001eaa:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001eae:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001eb2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001eb6:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ SEqHatDot_3 * SEqHatDot_3 + SEqHatDot_4 * SEqHatDot_4);
 8001eba:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001ebe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ec2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ec6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001eca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ece:	ee77 7a27 	vadd.f32	s15, s14, s15
	norm = sqrt(
 8001ed2:	ee17 0a90 	vmov	r0, s15
 8001ed6:	f7fe fb37 	bl	8000548 <__aeabi_f2d>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	ec43 2b10 	vmov	d0, r2, r3
 8001ee2:	f00c fbdb 	bl	800e69c <sqrt>
 8001ee6:	ec53 2b10 	vmov	r2, r3, d0
 8001eea:	4610      	mov	r0, r2
 8001eec:	4619      	mov	r1, r3
 8001eee:	f7fe fe7b 	bl	8000be8 <__aeabi_d2f>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	66bb      	str	r3, [r7, #104]	@ 0x68
	SEqHatDot_1 /= norm;
 8001ef6:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8001efa:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001efe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f02:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	SEqHatDot_2 /= norm;
 8001f06:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001f0a:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001f0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f12:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	SEqHatDot_3 /= norm;
 8001f16:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8001f1a:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f22:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	SEqHatDot_4 /= norm;
 8001f26:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8001f2a:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001f2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f32:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	// Compute the quaternion derivative measured by gyroscopes
	SEqDot_omega_1 = -halfSEq_2 * w_x - halfSEq_3 * w_y - halfSEq_4 * w_z;
 8001f36:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001f3a:	eeb1 7a67 	vneg.f32	s14, s15
 8001f3e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f46:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8001f4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f56:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 8001f5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f66:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	SEqDot_omega_2 = halfSEq_1 * w_x + halfSEq_3 * w_z - halfSEq_4 * w_y;
 8001f6a:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8001f6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f76:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8001f7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f86:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 8001f8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f96:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	SEqDot_omega_3 = halfSEq_1 * w_y - halfSEq_2 * w_z + halfSEq_4 * w_x;
 8001f9a:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8001f9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fa6:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 8001faa:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fb6:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 8001fba:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	SEqDot_omega_4 = halfSEq_1 * w_z + halfSEq_2 * w_y - halfSEq_3 * w_x;
 8001fca:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8001fce:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fd6:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 8001fda:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fe6:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8001fea:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ff2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ff6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	// Compute then integrate the estimated quaternion derivative
	SEq_1 += (SEqDot_omega_1 - (beta * SEqHatDot_1)) * deltat;
 8001ffa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001ffc:	f7fe faa4 	bl	8000548 <__aeabi_f2d>
 8002000:	4604      	mov	r4, r0
 8002002:	460d      	mov	r5, r1
 8002004:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002006:	f7fe fa9f 	bl	8000548 <__aeabi_f2d>
 800200a:	a305      	add	r3, pc, #20	@ (adr r3, 8002020 <quaternionUpdate+0x3e0>)
 800200c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002010:	f7fe faf2 	bl	80005f8 <__aeabi_dmul>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	e00e      	b.n	8002038 <quaternionUpdate+0x3f8>
 800201a:	bf00      	nop
 800201c:	f3af 8000 	nop.w
 8002020:	5a6bac7d 	.word	0x5a6bac7d
 8002024:	3f8ef49c 	.word	0x3f8ef49c
 8002028:	20000000 	.word	0x20000000
 800202c:	20000418 	.word	0x20000418
 8002030:	2000041c 	.word	0x2000041c
 8002034:	20000420 	.word	0x20000420
 8002038:	4620      	mov	r0, r4
 800203a:	4629      	mov	r1, r5
 800203c:	f7fe f924 	bl	8000288 <__aeabi_dsub>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4614      	mov	r4, r2
 8002046:	461d      	mov	r5, r3
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7fe fa7d 	bl	8000548 <__aeabi_f2d>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4620      	mov	r0, r4
 8002054:	4629      	mov	r1, r5
 8002056:	f7fe facf 	bl	80005f8 <__aeabi_dmul>
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	4614      	mov	r4, r2
 8002060:	461d      	mov	r5, r3
 8002062:	4b93      	ldr	r3, [pc, #588]	@ (80022b0 <quaternionUpdate+0x670>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe fa6e 	bl	8000548 <__aeabi_f2d>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4620      	mov	r0, r4
 8002072:	4629      	mov	r1, r5
 8002074:	f7fe f90a 	bl	800028c <__adddf3>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	f7fe fdb2 	bl	8000be8 <__aeabi_d2f>
 8002084:	4603      	mov	r3, r0
 8002086:	4a8a      	ldr	r2, [pc, #552]	@ (80022b0 <quaternionUpdate+0x670>)
 8002088:	6013      	str	r3, [r2, #0]
	SEq_2 += (SEqDot_omega_2 - (beta * SEqHatDot_2)) * deltat;
 800208a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800208c:	f7fe fa5c 	bl	8000548 <__aeabi_f2d>
 8002090:	4604      	mov	r4, r0
 8002092:	460d      	mov	r5, r1
 8002094:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002096:	f7fe fa57 	bl	8000548 <__aeabi_f2d>
 800209a:	a383      	add	r3, pc, #524	@ (adr r3, 80022a8 <quaternionUpdate+0x668>)
 800209c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a0:	f7fe faaa 	bl	80005f8 <__aeabi_dmul>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4620      	mov	r0, r4
 80020aa:	4629      	mov	r1, r5
 80020ac:	f7fe f8ec 	bl	8000288 <__aeabi_dsub>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	4614      	mov	r4, r2
 80020b6:	461d      	mov	r5, r3
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7fe fa45 	bl	8000548 <__aeabi_f2d>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4620      	mov	r0, r4
 80020c4:	4629      	mov	r1, r5
 80020c6:	f7fe fa97 	bl	80005f8 <__aeabi_dmul>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	4614      	mov	r4, r2
 80020d0:	461d      	mov	r5, r3
 80020d2:	4b78      	ldr	r3, [pc, #480]	@ (80022b4 <quaternionUpdate+0x674>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fa36 	bl	8000548 <__aeabi_f2d>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	4620      	mov	r0, r4
 80020e2:	4629      	mov	r1, r5
 80020e4:	f7fe f8d2 	bl	800028c <__adddf3>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	4610      	mov	r0, r2
 80020ee:	4619      	mov	r1, r3
 80020f0:	f7fe fd7a 	bl	8000be8 <__aeabi_d2f>
 80020f4:	4603      	mov	r3, r0
 80020f6:	4a6f      	ldr	r2, [pc, #444]	@ (80022b4 <quaternionUpdate+0x674>)
 80020f8:	6013      	str	r3, [r2, #0]
	SEq_3 += (SEqDot_omega_3 - (beta * SEqHatDot_3)) * deltat;
 80020fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80020fc:	f7fe fa24 	bl	8000548 <__aeabi_f2d>
 8002100:	4604      	mov	r4, r0
 8002102:	460d      	mov	r5, r1
 8002104:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002106:	f7fe fa1f 	bl	8000548 <__aeabi_f2d>
 800210a:	a367      	add	r3, pc, #412	@ (adr r3, 80022a8 <quaternionUpdate+0x668>)
 800210c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002110:	f7fe fa72 	bl	80005f8 <__aeabi_dmul>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4620      	mov	r0, r4
 800211a:	4629      	mov	r1, r5
 800211c:	f7fe f8b4 	bl	8000288 <__aeabi_dsub>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4614      	mov	r4, r2
 8002126:	461d      	mov	r5, r3
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7fe fa0d 	bl	8000548 <__aeabi_f2d>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4620      	mov	r0, r4
 8002134:	4629      	mov	r1, r5
 8002136:	f7fe fa5f 	bl	80005f8 <__aeabi_dmul>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4614      	mov	r4, r2
 8002140:	461d      	mov	r5, r3
 8002142:	4b5d      	ldr	r3, [pc, #372]	@ (80022b8 <quaternionUpdate+0x678>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe f9fe 	bl	8000548 <__aeabi_f2d>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4620      	mov	r0, r4
 8002152:	4629      	mov	r1, r5
 8002154:	f7fe f89a 	bl	800028c <__adddf3>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4610      	mov	r0, r2
 800215e:	4619      	mov	r1, r3
 8002160:	f7fe fd42 	bl	8000be8 <__aeabi_d2f>
 8002164:	4603      	mov	r3, r0
 8002166:	4a54      	ldr	r2, [pc, #336]	@ (80022b8 <quaternionUpdate+0x678>)
 8002168:	6013      	str	r3, [r2, #0]
	SEq_4 += (SEqDot_omega_4 - (beta * SEqHatDot_4)) * deltat;
 800216a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800216c:	f7fe f9ec 	bl	8000548 <__aeabi_f2d>
 8002170:	4604      	mov	r4, r0
 8002172:	460d      	mov	r5, r1
 8002174:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002176:	f7fe f9e7 	bl	8000548 <__aeabi_f2d>
 800217a:	a34b      	add	r3, pc, #300	@ (adr r3, 80022a8 <quaternionUpdate+0x668>)
 800217c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002180:	f7fe fa3a 	bl	80005f8 <__aeabi_dmul>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	4620      	mov	r0, r4
 800218a:	4629      	mov	r1, r5
 800218c:	f7fe f87c 	bl	8000288 <__aeabi_dsub>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4614      	mov	r4, r2
 8002196:	461d      	mov	r5, r3
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7fe f9d5 	bl	8000548 <__aeabi_f2d>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4620      	mov	r0, r4
 80021a4:	4629      	mov	r1, r5
 80021a6:	f7fe fa27 	bl	80005f8 <__aeabi_dmul>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4614      	mov	r4, r2
 80021b0:	461d      	mov	r5, r3
 80021b2:	4b42      	ldr	r3, [pc, #264]	@ (80022bc <quaternionUpdate+0x67c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe f9c6 	bl	8000548 <__aeabi_f2d>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4620      	mov	r0, r4
 80021c2:	4629      	mov	r1, r5
 80021c4:	f7fe f862 	bl	800028c <__adddf3>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4610      	mov	r0, r2
 80021ce:	4619      	mov	r1, r3
 80021d0:	f7fe fd0a 	bl	8000be8 <__aeabi_d2f>
 80021d4:	4603      	mov	r3, r0
 80021d6:	4a39      	ldr	r2, [pc, #228]	@ (80022bc <quaternionUpdate+0x67c>)
 80021d8:	6013      	str	r3, [r2, #0]

	// Normalize quaternion
	norm = sqrt(SEq_1 * SEq_1 + SEq_2 * SEq_2 + SEq_3 * SEq_3 + SEq_4 * SEq_4);
 80021da:	4b35      	ldr	r3, [pc, #212]	@ (80022b0 <quaternionUpdate+0x670>)
 80021dc:	ed93 7a00 	vldr	s14, [r3]
 80021e0:	4b33      	ldr	r3, [pc, #204]	@ (80022b0 <quaternionUpdate+0x670>)
 80021e2:	edd3 7a00 	vldr	s15, [r3]
 80021e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021ea:	4b32      	ldr	r3, [pc, #200]	@ (80022b4 <quaternionUpdate+0x674>)
 80021ec:	edd3 6a00 	vldr	s13, [r3]
 80021f0:	4b30      	ldr	r3, [pc, #192]	@ (80022b4 <quaternionUpdate+0x674>)
 80021f2:	edd3 7a00 	vldr	s15, [r3]
 80021f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021fe:	4b2e      	ldr	r3, [pc, #184]	@ (80022b8 <quaternionUpdate+0x678>)
 8002200:	edd3 6a00 	vldr	s13, [r3]
 8002204:	4b2c      	ldr	r3, [pc, #176]	@ (80022b8 <quaternionUpdate+0x678>)
 8002206:	edd3 7a00 	vldr	s15, [r3]
 800220a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800220e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002212:	4b2a      	ldr	r3, [pc, #168]	@ (80022bc <quaternionUpdate+0x67c>)
 8002214:	edd3 6a00 	vldr	s13, [r3]
 8002218:	4b28      	ldr	r3, [pc, #160]	@ (80022bc <quaternionUpdate+0x67c>)
 800221a:	edd3 7a00 	vldr	s15, [r3]
 800221e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002226:	ee17 0a90 	vmov	r0, s15
 800222a:	f7fe f98d 	bl	8000548 <__aeabi_f2d>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	ec43 2b10 	vmov	d0, r2, r3
 8002236:	f00c fa31 	bl	800e69c <sqrt>
 800223a:	ec53 2b10 	vmov	r2, r3, d0
 800223e:	4610      	mov	r0, r2
 8002240:	4619      	mov	r1, r3
 8002242:	f7fe fcd1 	bl	8000be8 <__aeabi_d2f>
 8002246:	4603      	mov	r3, r0
 8002248:	66bb      	str	r3, [r7, #104]	@ 0x68
	SEq_1 /= norm;
 800224a:	4b19      	ldr	r3, [pc, #100]	@ (80022b0 <quaternionUpdate+0x670>)
 800224c:	edd3 6a00 	vldr	s13, [r3]
 8002250:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8002254:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002258:	4b15      	ldr	r3, [pc, #84]	@ (80022b0 <quaternionUpdate+0x670>)
 800225a:	edc3 7a00 	vstr	s15, [r3]
	SEq_2 /= norm;
 800225e:	4b15      	ldr	r3, [pc, #84]	@ (80022b4 <quaternionUpdate+0x674>)
 8002260:	edd3 6a00 	vldr	s13, [r3]
 8002264:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8002268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800226c:	4b11      	ldr	r3, [pc, #68]	@ (80022b4 <quaternionUpdate+0x674>)
 800226e:	edc3 7a00 	vstr	s15, [r3]
	SEq_3 /= norm;
 8002272:	4b11      	ldr	r3, [pc, #68]	@ (80022b8 <quaternionUpdate+0x678>)
 8002274:	edd3 6a00 	vldr	s13, [r3]
 8002278:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 800227c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002280:	4b0d      	ldr	r3, [pc, #52]	@ (80022b8 <quaternionUpdate+0x678>)
 8002282:	edc3 7a00 	vstr	s15, [r3]
	SEq_4 /= norm;
 8002286:	4b0d      	ldr	r3, [pc, #52]	@ (80022bc <quaternionUpdate+0x67c>)
 8002288:	edd3 6a00 	vldr	s13, [r3]
 800228c:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8002290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002294:	4b09      	ldr	r3, [pc, #36]	@ (80022bc <quaternionUpdate+0x67c>)
 8002296:	edc3 7a00 	vstr	s15, [r3]
}
 800229a:	bf00      	nop
 800229c:	3788      	adds	r7, #136	@ 0x88
 800229e:	46bd      	mov	sp, r7
 80022a0:	bdb0      	pop	{r4, r5, r7, pc}
 80022a2:	bf00      	nop
 80022a4:	f3af 8000 	nop.w
 80022a8:	5a6bac7d 	.word	0x5a6bac7d
 80022ac:	3f8ef49c 	.word	0x3f8ef49c
 80022b0:	20000000 	.word	0x20000000
 80022b4:	20000418 	.word	0x20000418
 80022b8:	2000041c 	.word	0x2000041c
 80022bc:	20000420 	.word	0x20000420

080022c0 <_ext_sig_halt>:

//void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
//	test_run = true;
//}

void _ext_sig_halt(void) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
	controller.emergencyStop();
 80022c4:	4802      	ldr	r0, [pc, #8]	@ (80022d0 <_ext_sig_halt+0x10>)
 80022c6:	f001 f8ed 	bl	80034a4 <_ZN9AppMotion16MotionController13emergencyStopEv>
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200002b0 	.word	0x200002b0

080022d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
	if (huart == &huart3) {
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a05      	ldr	r2, [pc, #20]	@ (80022f4 <HAL_UART_RxCpltCallback+0x20>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d102      	bne.n	80022ea <HAL_UART_RxCpltCallback+0x16>
		listener.invoke();
 80022e4:	4804      	ldr	r0, [pc, #16]	@ (80022f8 <HAL_UART_RxCpltCallback+0x24>)
 80022e6:	f001 fb9f 	bl	8003a28 <_ZN9AppParser8Listener6invokeEv>
	}
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	200006f8 	.word	0x200006f8
 80022f8:	20000414 	.word	0x20000414

080022fc <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
	static int t1, t2, first=0,echo=0;
	char buffer[15];

	if(htim==&htim8){
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a3a      	ldr	r2, [pc, #232]	@ (80023f0 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d16d      	bne.n	80023e8 <HAL_TIM_IC_CaptureCallback+0xec>
		if (first == 0){
 800230c:	4b39      	ldr	r3, [pc, #228]	@ (80023f4 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d11b      	bne.n	800234c <HAL_TIM_IC_CaptureCallback+0x50>
			t1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002314:	2104      	movs	r1, #4
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f007 f980 	bl	800961c <HAL_TIM_ReadCapturedValue>
 800231c:	4603      	mov	r3, r0
 800231e:	461a      	mov	r2, r3
 8002320:	4b35      	ldr	r3, [pc, #212]	@ (80023f8 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8002322:	601a      	str	r2, [r3, #0]
			first=1;
 8002324:	4b33      	ldr	r3, [pc, #204]	@ (80023f4 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8002326:	2201      	movs	r2, #1
 8002328:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6a1a      	ldr	r2, [r3, #32]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002338:	621a      	str	r2, [r3, #32]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6a1a      	ldr	r2, [r3, #32]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f042 0220 	orr.w	r2, r2, #32
 8002348:	621a      	str	r2, [r3, #32]
			first=0;
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
			HAL_TIM_IC_Stop_IT(&htim8, TIM_CHANNEL_2);
		}
	}
}
 800234a:	e04d      	b.n	80023e8 <HAL_TIM_IC_CaptureCallback+0xec>
		} else if (first == 1){
 800234c:	4b29      	ldr	r3, [pc, #164]	@ (80023f4 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d149      	bne.n	80023e8 <HAL_TIM_IC_CaptureCallback+0xec>
			t2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002354:	2104      	movs	r1, #4
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f007 f960 	bl	800961c <HAL_TIM_ReadCapturedValue>
 800235c:	4603      	mov	r3, r0
 800235e:	461a      	mov	r2, r3
 8002360:	4b26      	ldr	r3, [pc, #152]	@ (80023fc <HAL_TIM_IC_CaptureCallback+0x100>)
 8002362:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2200      	movs	r2, #0
 800236a:	625a      	str	r2, [r3, #36]	@ 0x24
			if(t2 >= t1){
 800236c:	4b23      	ldr	r3, [pc, #140]	@ (80023fc <HAL_TIM_IC_CaptureCallback+0x100>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4b21      	ldr	r3, [pc, #132]	@ (80023f8 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	db07      	blt.n	8002388 <HAL_TIM_IC_CaptureCallback+0x8c>
				echo = t2 - t1;
 8002378:	4b20      	ldr	r3, [pc, #128]	@ (80023fc <HAL_TIM_IC_CaptureCallback+0x100>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4b1e      	ldr	r3, [pc, #120]	@ (80023f8 <HAL_TIM_IC_CaptureCallback+0xfc>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	4a1f      	ldr	r2, [pc, #124]	@ (8002400 <HAL_TIM_IC_CaptureCallback+0x104>)
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	e009      	b.n	800239c <HAL_TIM_IC_CaptureCallback+0xa0>
				echo = (0xffff - t1) + t2;
 8002388:	4b1b      	ldr	r3, [pc, #108]	@ (80023f8 <HAL_TIM_IC_CaptureCallback+0xfc>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8002390:	33ff      	adds	r3, #255	@ 0xff
 8002392:	4a1a      	ldr	r2, [pc, #104]	@ (80023fc <HAL_TIM_IC_CaptureCallback+0x100>)
 8002394:	6812      	ldr	r2, [r2, #0]
 8002396:	4413      	add	r3, r2
 8002398:	4a19      	ldr	r2, [pc, #100]	@ (8002400 <HAL_TIM_IC_CaptureCallback+0x104>)
 800239a:	6013      	str	r3, [r2, #0]
			sensor_data.usonic_dist = echo * 0.0343f / 2;
 800239c:	4b18      	ldr	r3, [pc, #96]	@ (8002400 <HAL_TIM_IC_CaptureCallback+0x104>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	ee07 3a90 	vmov	s15, r3
 80023a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023a8:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8002404 <HAL_TIM_IC_CaptureCallback+0x108>
 80023ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023b0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80023b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023b8:	4b13      	ldr	r3, [pc, #76]	@ (8002408 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80023ba:	edc3 7a03 	vstr	s15, [r3, #12]
			first=0;
 80023be:	4b0d      	ldr	r3, [pc, #52]	@ (80023f4 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6a1a      	ldr	r2, [r3, #32]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80023d2:	621a      	str	r2, [r3, #32]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6a12      	ldr	r2, [r2, #32]
 80023de:	621a      	str	r2, [r3, #32]
			HAL_TIM_IC_Stop_IT(&htim8, TIM_CHANNEL_2);
 80023e0:	2104      	movs	r1, #4
 80023e2:	4803      	ldr	r0, [pc, #12]	@ (80023f0 <HAL_TIM_IC_CaptureCallback+0xf4>)
 80023e4:	f006 fc0a 	bl	8008bfc <HAL_TIM_IC_Stop_IT>
}
 80023e8:	bf00      	nop
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20000620 	.word	0x20000620
 80023f4:	2000042c 	.word	0x2000042c
 80023f8:	20000424 	.word	0x20000424
 80023fc:	20000428 	.word	0x20000428
 8002400:	20000430 	.word	0x20000430
 8002404:	3d0c7e28 	.word	0x3d0c7e28
 8002408:	200001fc 	.word	0x200001fc

0800240c <_Z41__static_initialization_and_destruction_0v>:
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
};
 8002410:	4b22      	ldr	r3, [pc, #136]	@ (800249c <_Z41__static_initialization_and_destruction_0v+0x90>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a22      	ldr	r2, [pc, #136]	@ (80024a0 <_Z41__static_initialization_and_destruction_0v+0x94>)
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	4b21      	ldr	r3, [pc, #132]	@ (80024a0 <_Z41__static_initialization_and_destruction_0v+0x94>)
 800241a:	3304      	adds	r3, #4
 800241c:	2224      	movs	r2, #36	@ 0x24
 800241e:	2100      	movs	r1, #0
 8002420:	4618      	mov	r0, r3
 8002422:	f00d fd95 	bl	800ff50 <memset>
 8002426:	4b1e      	ldr	r3, [pc, #120]	@ (80024a0 <_Z41__static_initialization_and_destruction_0v+0x94>)
 8002428:	4a1e      	ldr	r2, [pc, #120]	@ (80024a4 <_Z41__static_initialization_and_destruction_0v+0x98>)
 800242a:	605a      	str	r2, [r3, #4]
 800242c:	4b1c      	ldr	r3, [pc, #112]	@ (80024a0 <_Z41__static_initialization_and_destruction_0v+0x94>)
 800242e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002432:	619a      	str	r2, [r3, #24]
 8002434:	4b1a      	ldr	r3, [pc, #104]	@ (80024a0 <_Z41__static_initialization_and_destruction_0v+0x94>)
 8002436:	2220      	movs	r2, #32
 8002438:	61da      	str	r2, [r3, #28]
osMessageQueueId_t ctrlQueue = osMessageQueueNew(
 800243a:	2200      	movs	r2, #0
 800243c:	210c      	movs	r1, #12
 800243e:	200a      	movs	r0, #10
 8002440:	f009 f9ed 	bl	800b81e <osMessageQueueNew>
 8002444:	4603      	mov	r3, r0
);
 8002446:	4a18      	ldr	r2, [pc, #96]	@ (80024a8 <_Z41__static_initialization_and_destruction_0v+0x9c>)
 8002448:	6013      	str	r3, [r2, #0]
};
 800244a:	4b18      	ldr	r3, [pc, #96]	@ (80024ac <_Z41__static_initialization_and_destruction_0v+0xa0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a18      	ldr	r2, [pc, #96]	@ (80024b0 <_Z41__static_initialization_and_destruction_0v+0xa4>)
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	4b17      	ldr	r3, [pc, #92]	@ (80024b0 <_Z41__static_initialization_and_destruction_0v+0xa4>)
 8002454:	3304      	adds	r3, #4
 8002456:	2224      	movs	r2, #36	@ 0x24
 8002458:	2100      	movs	r1, #0
 800245a:	4618      	mov	r0, r3
 800245c:	f00d fd78 	bl	800ff50 <memset>
 8002460:	4b13      	ldr	r3, [pc, #76]	@ (80024b0 <_Z41__static_initialization_and_destruction_0v+0xa4>)
 8002462:	4a14      	ldr	r2, [pc, #80]	@ (80024b4 <_Z41__static_initialization_and_destruction_0v+0xa8>)
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	4b12      	ldr	r3, [pc, #72]	@ (80024b0 <_Z41__static_initialization_and_destruction_0v+0xa4>)
 8002468:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800246c:	619a      	str	r2, [r3, #24]
 800246e:	4b10      	ldr	r3, [pc, #64]	@ (80024b0 <_Z41__static_initialization_and_destruction_0v+0xa4>)
 8002470:	2218      	movs	r2, #24
 8002472:	61da      	str	r2, [r3, #28]
 8002474:	4b0c      	ldr	r3, [pc, #48]	@ (80024a8 <_Z41__static_initialization_and_destruction_0v+0x9c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a0d      	ldr	r2, [pc, #52]	@ (80024b0 <_Z41__static_initialization_and_destruction_0v+0xa4>)
 800247a:	6293      	str	r3, [r2, #40]	@ 0x28
AppMotion::MotionController controller(&ctrlCtx);
 800247c:	490c      	ldr	r1, [pc, #48]	@ (80024b0 <_Z41__static_initialization_and_destruction_0v+0xa4>)
 800247e:	480e      	ldr	r0, [pc, #56]	@ (80024b8 <_Z41__static_initialization_and_destruction_0v+0xac>)
 8002480:	f000 f86c 	bl	800255c <_ZN9AppMotion16MotionControllerC1EP5u_ctx>
AppParser::Processor processor(&procCtx, &ctrlCtx);
 8002484:	4a0a      	ldr	r2, [pc, #40]	@ (80024b0 <_Z41__static_initialization_and_destruction_0v+0xa4>)
 8002486:	4906      	ldr	r1, [pc, #24]	@ (80024a0 <_Z41__static_initialization_and_destruction_0v+0x94>)
 8002488:	480c      	ldr	r0, [pc, #48]	@ (80024bc <_Z41__static_initialization_and_destruction_0v+0xb0>)
 800248a:	f001 faed 	bl	8003a68 <_ZN9AppParser9ProcessorC1EP5u_ctxS2_>
AppParser::Listener listener(&procCtx);
 800248e:	4904      	ldr	r1, [pc, #16]	@ (80024a0 <_Z41__static_initialization_and_destruction_0v+0x94>)
 8002490:	480b      	ldr	r0, [pc, #44]	@ (80024c0 <_Z41__static_initialization_and_destruction_0v+0xb4>)
 8002492:	f001 faaf 	bl	80039f4 <_ZN9AppParser8ListenerC1EP5u_ctx>
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000250 	.word	0x20000250
 80024a0:	20000254 	.word	0x20000254
 80024a4:	08011ee8 	.word	0x08011ee8
 80024a8:	20000280 	.word	0x20000280
 80024ac:	2000024c 	.word	0x2000024c
 80024b0:	20000284 	.word	0x20000284
 80024b4:	08011ef4 	.word	0x08011ef4
 80024b8:	200002b0 	.word	0x200002b0
 80024bc:	2000040c 	.word	0x2000040c
 80024c0:	20000414 	.word	0x20000414

080024c4 <_Z41__static_initialization_and_destruction_1v>:
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
AppParser::Listener listener(&procCtx);
 80024c8:	4805      	ldr	r0, [pc, #20]	@ (80024e0 <_Z41__static_initialization_and_destruction_1v+0x1c>)
 80024ca:	f001 faa2 	bl	8003a12 <_ZN9AppParser8ListenerD1Ev>
AppParser::Processor processor(&procCtx, &ctrlCtx);
 80024ce:	4805      	ldr	r0, [pc, #20]	@ (80024e4 <_Z41__static_initialization_and_destruction_1v+0x20>)
 80024d0:	f001 fae4 	bl	8003a9c <_ZN9AppParser9ProcessorD1Ev>
AppMotion::MotionController controller(&ctrlCtx);
 80024d4:	4804      	ldr	r0, [pc, #16]	@ (80024e8 <_Z41__static_initialization_and_destruction_1v+0x24>)
 80024d6:	f7ff fa31 	bl	800193c <_ZN9AppMotion16MotionControllerD1Ev>
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000414 	.word	0x20000414
 80024e4:	2000040c 	.word	0x2000040c
 80024e8:	200002b0 	.word	0x200002b0

080024ec <_GLOBAL__sub_I_sensor_data>:
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	f7ff ff8c 	bl	800240c <_Z41__static_initialization_and_destruction_0v>
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <_GLOBAL__sub_D_sensor_data>:
 80024f6:	b580      	push	{r7, lr}
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	f7ff ffe3 	bl	80024c4 <_Z41__static_initialization_and_destruction_1v>
 80024fe:	bd80      	pop	{r7, pc}

08002500 <_ZN9AppMotion16MotionController3mapEfffff>:
			;
			u_ctx *ctx;
			static void motionTask(void *pv);
			static float map(float x, float in_min, float in_max, float out_min, float out_max) {
 8002500:	b480      	push	{r7}
 8002502:	b087      	sub	sp, #28
 8002504:	af00      	add	r7, sp, #0
 8002506:	ed87 0a05 	vstr	s0, [r7, #20]
 800250a:	edc7 0a04 	vstr	s1, [r7, #16]
 800250e:	ed87 1a03 	vstr	s2, [r7, #12]
 8002512:	edc7 1a02 	vstr	s3, [r7, #8]
 8002516:	ed87 2a01 	vstr	s4, [r7, #4]
				return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800251a:	ed97 7a05 	vldr	s14, [r7, #20]
 800251e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002522:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002526:	edd7 6a01 	vldr	s13, [r7, #4]
 800252a:	edd7 7a02 	vldr	s15, [r7, #8]
 800252e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002532:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002536:	ed97 7a03 	vldr	s14, [r7, #12]
 800253a:	edd7 7a04 	vldr	s15, [r7, #16]
 800253e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002546:	edd7 7a02 	vldr	s15, [r7, #8]
 800254a:	ee77 7a27 	vadd.f32	s15, s14, s15
			}
 800254e:	eeb0 0a67 	vmov.f32	s0, s15
 8002552:	371c      	adds	r7, #28
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <_ZN9AppMotion16MotionControllerC1EP5u_ctx>:
	#define RIGHT_ENCODER_SCALE 0.996  // adjust based on reference choice
	#define REAR_WHEEL_ROTATION_DISTANCE (3.142 * 6.5)
	#define ENCODER_PULSES_PER_WHEEL_ROTATION 1560
	#define DISTANCE_PER_ENCODER_PULSE (REAR_WHEEL_ROTATION_DISTANCE / ENCODER_PULSES_PER_WHEEL_ROTATION)

	MotionController::MotionController(u_ctx *ctx) {
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
		this->ctx = ctx;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	601a      	str	r2, [r3, #0]
		/* Instantiate the physical devices */

	}
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
	...

0800257c <_ZN9AppMotion16MotionController5startEv>:

	void MotionController::start(void) {
 800257c:	b590      	push	{r4, r7, lr}
 800257e:	b08f      	sub	sp, #60	@ 0x3c
 8002580:	af02      	add	r7, sp, #8
 8002582:	6078      	str	r0, [r7, #4]
			&htim12,
			TIM_CHANNEL_1,
			CENTER_POS_PWM - LEFT_DELTA,
			CENTER_POS_PWM + RIGHT_DELTA,
			CENTER_POS_PWM
		);
 8002584:	2018      	movs	r0, #24
 8002586:	f00c f83f 	bl	800e608 <_Znwj>
 800258a:	4603      	mov	r3, r0
 800258c:	461c      	mov	r4, r3
 800258e:	f44f 733d 	mov.w	r3, #756	@ 0x2f4
 8002592:	9301      	str	r3, [sp, #4]
 8002594:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	f240 23ea 	movw	r3, #746	@ 0x2ea
 800259e:	2200      	movs	r2, #0
 80025a0:	4951      	ldr	r1, [pc, #324]	@ (80026e8 <_ZN9AppMotion16MotionController5startEv+0x16c>)
 80025a2:	4620      	mov	r0, r4
 80025a4:	f000 ff8c 	bl	80034c0 <_ZN9AppMotion5ServoC1EP17TIM_HandleTypeDefmmmm>
		this->servo = new Servo(
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	60dc      	str	r4, [r3, #12]


		this->lencoder = new Encoder(
			&htim2,
			TIM_CHANNEL_ALL
		);
 80025ac:	2008      	movs	r0, #8
 80025ae:	f00c f82b 	bl	800e608 <_Znwj>
 80025b2:	4603      	mov	r3, r0
 80025b4:	461c      	mov	r4, r3
 80025b6:	223c      	movs	r2, #60	@ 0x3c
 80025b8:	494c      	ldr	r1, [pc, #304]	@ (80026ec <_ZN9AppMotion16MotionController5startEv+0x170>)
 80025ba:	4620      	mov	r0, r4
 80025bc:	f001 f9a0 	bl	8003900 <_ZN9AppMotion7EncoderC1EP17TIM_HandleTypeDefm>
		this->lencoder = new Encoder(
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	611c      	str	r4, [r3, #16]

		this->rencoder = new Encoder(
			&htim3,
			TIM_CHANNEL_ALL
		);
 80025c4:	2008      	movs	r0, #8
 80025c6:	f00c f81f 	bl	800e608 <_Znwj>
 80025ca:	4603      	mov	r3, r0
 80025cc:	461c      	mov	r4, r3
 80025ce:	223c      	movs	r2, #60	@ 0x3c
 80025d0:	4947      	ldr	r1, [pc, #284]	@ (80026f0 <_ZN9AppMotion16MotionController5startEv+0x174>)
 80025d2:	4620      	mov	r0, r4
 80025d4:	f001 f994 	bl	8003900 <_ZN9AppMotion7EncoderC1EP17TIM_HandleTypeDefm>
		this->rencoder = new Encoder(
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	615c      	str	r4, [r3, #20]
		this->lmotor = new Motor(
			&htim4,
			TIM_CHANNEL_3,
			TIM_CHANNEL_4,
			7000
		);
 80025dc:	2014      	movs	r0, #20
 80025de:	f00c f813 	bl	800e608 <_Znwj>
 80025e2:	4603      	mov	r3, r0
 80025e4:	461c      	mov	r4, r3
 80025e6:	f641 3358 	movw	r3, #7000	@ 0x1b58
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	230c      	movs	r3, #12
 80025ee:	2208      	movs	r2, #8
 80025f0:	4940      	ldr	r1, [pc, #256]	@ (80026f4 <_ZN9AppMotion16MotionController5startEv+0x178>)
 80025f2:	4620      	mov	r0, r4
 80025f4:	f000 ffb6 	bl	8003564 <_ZN9AppMotion5MotorC1EP17TIM_HandleTypeDefmmm>
		this->lmotor = new Motor(
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	605c      	str	r4, [r3, #4]
		this->rmotor = new Motor(
			&htim9,
			TIM_CHANNEL_1,
			TIM_CHANNEL_2,
			7000
		);
 80025fc:	2014      	movs	r0, #20
 80025fe:	f00c f803 	bl	800e608 <_Znwj>
 8002602:	4603      	mov	r3, r0
 8002604:	461c      	mov	r4, r3
 8002606:	f641 3358 	movw	r3, #7000	@ 0x1b58
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	2304      	movs	r3, #4
 800260e:	2200      	movs	r2, #0
 8002610:	4939      	ldr	r1, [pc, #228]	@ (80026f8 <_ZN9AppMotion16MotionController5startEv+0x17c>)
 8002612:	4620      	mov	r0, r4
 8002614:	f000 ffa6 	bl	8003564 <_ZN9AppMotion5MotorC1EP17TIM_HandleTypeDefmmm>
		this->rmotor = new Motor(
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	609c      	str	r4, [r3, #8]

		// Edit the following to control the DC motor's PID.

		float pid_param_left[3] = {
 800261c:	4a37      	ldr	r2, [pc, #220]	@ (80026fc <_ZN9AppMotion16MotionController5startEv+0x180>)
 800261e:	f107 0320 	add.w	r3, r7, #32
 8002622:	ca07      	ldmia	r2, {r0, r1, r2}
 8002624:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0.0,
			0.1
		};


		float pid_param_right[3] = {
 8002628:	4a35      	ldr	r2, [pc, #212]	@ (8002700 <_ZN9AppMotion16MotionController5startEv+0x184>)
 800262a:	f107 0314 	add.w	r3, r7, #20
 800262e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002630:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			3.1,  //3.1 0.35
			0.0,
			0.1
		};

		float pid_param_sync[3] = {
 8002634:	4a33      	ldr	r2, [pc, #204]	@ (8002704 <_ZN9AppMotion16MotionController5startEv+0x188>)
 8002636:	f107 0308 	add.w	r3, r7, #8
 800263a:	ca07      	ldmia	r2, {r0, r1, r2}
 800263c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			10,
			4,
			1,
		};

		PID_init(&this->left_pid, PID_POSITION, pid_param_left, 7000, 7000);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3318      	adds	r3, #24
 8002644:	f107 0220 	add.w	r2, r7, #32
 8002648:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8002708 <_ZN9AppMotion16MotionController5startEv+0x18c>
 800264c:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8002708 <_ZN9AppMotion16MotionController5startEv+0x18c>
 8002650:	2100      	movs	r1, #0
 8002652:	4618      	mov	r0, r3
 8002654:	f002 fe22 	bl	800529c <_Z8PID_initP12pid_type_defhPKfff>
		PID_init(&this->right_pid, PID_POSITION, pid_param_right, 7000, 7000);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3368      	adds	r3, #104	@ 0x68
 800265c:	f107 0214 	add.w	r2, r7, #20
 8002660:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8002708 <_ZN9AppMotion16MotionController5startEv+0x18c>
 8002664:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8002708 <_ZN9AppMotion16MotionController5startEv+0x18c>
 8002668:	2100      	movs	r1, #0
 800266a:	4618      	mov	r0, r3
 800266c:	f002 fe16 	bl	800529c <_Z8PID_initP12pid_type_defhPKfff>

		PID_init(&this->sync_left_pid, 0, pid_param_sync, 1000, 1000);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	33b8      	adds	r3, #184	@ 0xb8
 8002674:	f107 0208 	add.w	r2, r7, #8
 8002678:	eddf 0a24 	vldr	s1, [pc, #144]	@ 800270c <_ZN9AppMotion16MotionController5startEv+0x190>
 800267c:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 800270c <_ZN9AppMotion16MotionController5startEv+0x190>
 8002680:	2100      	movs	r1, #0
 8002682:	4618      	mov	r0, r3
 8002684:	f002 fe0a 	bl	800529c <_Z8PID_initP12pid_type_defhPKfff>
		PID_init(&this->sync_right_pid, 0, pid_param_sync, 1000, 1000);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800268e:	f107 0208 	add.w	r2, r7, #8
 8002692:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 800270c <_ZN9AppMotion16MotionController5startEv+0x190>
 8002696:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 800270c <_ZN9AppMotion16MotionController5startEv+0x190>
 800269a:	2100      	movs	r1, #0
 800269c:	4618      	mov	r0, r3
 800269e:	f002 fdfd 	bl	800529c <_Z8PID_initP12pid_type_defhPKfff>
		emergency = false;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158

		instance_wrapper *wrapper_instance = new instance_wrapper();
 80026aa:	2008      	movs	r0, #8
 80026ac:	f00b ffac 	bl	800e608 <_Znwj>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	2200      	movs	r2, #0
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
		wrapper_instance->ctx = ctx;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026c2:	601a      	str	r2, [r3, #0]
		wrapper_instance->i = this;
 80026c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	605a      	str	r2, [r3, #4]
		this->ctx->runner = osThreadNew(
				(osThreadFunc_t) MotionController::motionTask, wrapper_instance,
				&(ctx->attr));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	1d1a      	adds	r2, r3, #4
		this->ctx->runner = osThreadNew(
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681c      	ldr	r4, [r3, #0]
 80026d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80026d6:	480e      	ldr	r0, [pc, #56]	@ (8002710 <_ZN9AppMotion16MotionController5startEv+0x194>)
 80026d8:	f008 ffd4 	bl	800b684 <osThreadNew>
 80026dc:	4603      	mov	r3, r0
 80026de:	6023      	str	r3, [r4, #0]
		return;
 80026e0:	bf00      	nop
	}
 80026e2:	3734      	adds	r7, #52	@ 0x34
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd90      	pop	{r4, r7, pc}
 80026e8:	200006b0 	.word	0x200006b0
 80026ec:	20000500 	.word	0x20000500
 80026f0:	20000548 	.word	0x20000548
 80026f4:	20000590 	.word	0x20000590
 80026f8:	20000668 	.word	0x20000668
 80026fc:	08011f48 	.word	0x08011f48
 8002700:	08011f54 	.word	0x08011f54
 8002704:	08011f60 	.word	0x08011f60
 8002708:	45dac000 	.word	0x45dac000
 800270c:	447a0000 	.word	0x447a0000
 8002710:	08002715 	.word	0x08002715

08002714 <_ZN9AppMotion16MotionController10motionTaskEPv>:

	/* MOTIONCONTROLLER LOGIC */
	void MotionController::motionTask(void *pv) {
 8002714:	b580      	push	{r7, lr}
 8002716:	b092      	sub	sp, #72	@ 0x48
 8002718:	af02      	add	r7, sp, #8
 800271a:	6078      	str	r0, [r7, #4]

		// workaround section START
		instance_wrapper *wrapper = static_cast<instance_wrapper*>(pv);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		u_ctx *ctx = wrapper->ctx;
 8002720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	63bb      	str	r3, [r7, #56]	@ 0x38
		MotionController *self = wrapper->i;
 8002726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	637b      	str	r3, [r7, #52]	@ 0x34

		Motor *lmotor = self->lmotor;
 800272c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	633b      	str	r3, [r7, #48]	@ 0x30
		Motor *rmotor = self->rmotor;
 8002732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	62fb      	str	r3, [r7, #44]	@ 0x2c
		Servo *servo = self->servo;
 8002738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	62bb      	str	r3, [r7, #40]	@ 0x28
		osDelay(4500);
 800273e:	f241 1094 	movw	r0, #4500	@ 0x1194
 8002742:	f009 f851 	bl	800b7e8 <osDelay>
//		servo->turnLeft();
//		servo->turnRight();
		servo->turnFront();
 8002746:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002748:	f000 fefb 	bl	8003542 <_ZN9AppMotion5Servo9turnFrontEv>

		/* workaround section END. henceforth refer to any "this" as "self" */


		for (;;) {
			is_task_alive_struct.motn = true;
 800274c:	4b4b      	ldr	r3, [pc, #300]	@ (800287c <_ZN9AppMotion16MotionController10motionTaskEPv+0x168>)
 800274e:	2201      	movs	r2, #1
 8002750:	70da      	strb	r2, [r3, #3]

//			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);

			osDelay(50);
 8002752:	2032      	movs	r0, #50	@ 0x32
 8002754:	f009 f848 	bl	800b7e8 <osDelay>
			osThreadYield();
 8002758:	f009 f826 	bl	800b7a8 <osThreadYield>

//          Uncomment the following code to make the robot move without the RPI
//          WARNING: This is just to test the robots movement, do not uncomment in production env.

			// Move straight 100 m
			self->move(true, 100, 35, false, false);
 800275c:	2300      	movs	r3, #0
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	2300      	movs	r3, #0
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2323      	movs	r3, #35	@ 0x23
 8002766:	2264      	movs	r2, #100	@ 0x64
 8002768:	2101      	movs	r1, #1
 800276a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800276c:	f000 f88c 	bl	8002888 <_ZN9AppMotion16MotionController4moveEbmmbb>
//			self->move(false, 10, 35, false, false);

//			while(1){} // uncomment this code if you are using any of the test code above.


			if (osMessageQueueGetCount(ctx->mailbox.queue) > 0) {
 8002770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002774:	4618      	mov	r0, r3
 8002776:	f009 f983 	bl	800ba80 <osMessageQueueGetCount>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	bf14      	ite	ne
 8002780:	2301      	movne	r3, #1
 8002782:	2300      	moveq	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0e0      	beq.n	800274c <_ZN9AppMotion16MotionController10motionTaskEPv+0x38>
				AppParser::MOTION_PKT_t pkt;
				osMessageQueueGet(ctx->mailbox.queue, &pkt, 0, 5);
 800278a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800278c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800278e:	f107 011c 	add.w	r1, r7, #28
 8002792:	2305      	movs	r3, #5
 8002794:	2200      	movs	r2, #0
 8002796:	f009 f915 	bl	800b9c4 <osMessageQueueGet>
				char buffer[20] = { 0 };
 800279a:	f107 0308 	add.w	r3, r7, #8
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	605a      	str	r2, [r3, #4]
 80027a4:	609a      	str	r2, [r3, #8]
 80027a6:	60da      	str	r2, [r3, #12]
 80027a8:	611a      	str	r2, [r3, #16]
				sprintf((char*) &buffer, "cmd:%ld, arg:%ld\r\n", (uint32_t) pkt.cmd, pkt.arg);
 80027aa:	69fa      	ldr	r2, [r7, #28]
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	f107 0008 	add.w	r0, r7, #8
 80027b2:	4933      	ldr	r1, [pc, #204]	@ (8002880 <_ZN9AppMotion16MotionController10motionTaskEPv+0x16c>)
 80027b4:	f00d fad2 	bl	800fd5c <siprintf>
				//HAL_UART_Transmit(&huart3, (uint8_t*) buffer, sizeof(buffer), 10);

				if (pkt.cmd == AppParser::MOTION_CMD::MOVE_FWD) {
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d110      	bne.n	80027e0 <_ZN9AppMotion16MotionController10motionTaskEPv+0xcc>
					servo->turnFront();
 80027be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027c0:	f000 febf 	bl	8003542 <_ZN9AppMotion5Servo9turnFrontEv>
					self->move(true, pkt.arg, 35, pkt.is_crawl, pkt.linear);
 80027c4:	6a39      	ldr	r1, [r7, #32]
 80027c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80027ca:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80027ce:	9201      	str	r2, [sp, #4]
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	2323      	movs	r3, #35	@ 0x23
 80027d4:	460a      	mov	r2, r1
 80027d6:	2101      	movs	r1, #1
 80027d8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80027da:	f000 f855 	bl	8002888 <_ZN9AppMotion16MotionController4moveEbmmbb>
 80027de:	e7b5      	b.n	800274c <_ZN9AppMotion16MotionController10motionTaskEPv+0x38>

				} else if (pkt.cmd == AppParser::MOTION_CMD::MOVE_BWD) {
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d110      	bne.n	8002808 <_ZN9AppMotion16MotionController10motionTaskEPv+0xf4>
					servo->turnFront();
 80027e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027e8:	f000 feab 	bl	8003542 <_ZN9AppMotion5Servo9turnFrontEv>
					self->move(false, pkt.arg, 35, pkt.is_crawl, pkt.linear);
 80027ec:	6a39      	ldr	r1, [r7, #32]
 80027ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80027f2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80027f6:	9201      	str	r2, [sp, #4]
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	2323      	movs	r3, #35	@ 0x23
 80027fc:	460a      	mov	r2, r1
 80027fe:	2100      	movs	r1, #0
 8002800:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002802:	f000 f841 	bl	8002888 <_ZN9AppMotion16MotionController4moveEbmmbb>
 8002806:	e7a1      	b.n	800274c <_ZN9AppMotion16MotionController10motionTaskEPv+0x38>

				} else if (pkt.cmd == AppParser::MOTION_CMD::MOVE_LEFT_FWD) {
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	2b03      	cmp	r3, #3
 800280c:	d10a      	bne.n	8002824 <_ZN9AppMotion16MotionController10motionTaskEPv+0x110>
					self->turn(false, true, pkt.linear, pkt.arg);
 800280e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	4613      	mov	r3, r2
 8002818:	2201      	movs	r2, #1
 800281a:	2100      	movs	r1, #0
 800281c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800281e:	f000 fae7 	bl	8002df0 <_ZN9AppMotion16MotionController4turnEbbbm>
 8002822:	e793      	b.n	800274c <_ZN9AppMotion16MotionController10motionTaskEPv+0x38>

				} else if (pkt.cmd == AppParser::MOTION_CMD::MOVE_RIGHT_FWD) {
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	2b02      	cmp	r3, #2
 8002828:	d10a      	bne.n	8002840 <_ZN9AppMotion16MotionController10motionTaskEPv+0x12c>
					self->turn(true, true, pkt.linear, pkt.arg);
 800282a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	4613      	mov	r3, r2
 8002834:	2201      	movs	r2, #1
 8002836:	2101      	movs	r1, #1
 8002838:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800283a:	f000 fad9 	bl	8002df0 <_ZN9AppMotion16MotionController4turnEbbbm>
 800283e:	e785      	b.n	800274c <_ZN9AppMotion16MotionController10motionTaskEPv+0x38>

				} else if (pkt.cmd == AppParser::MOTION_CMD::MOVE_LEFT_BWD) {
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	2b05      	cmp	r3, #5
 8002844:	d10a      	bne.n	800285c <_ZN9AppMotion16MotionController10motionTaskEPv+0x148>
					self->turn(false, false, pkt.linear, pkt.arg);
 8002846:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800284a:	6a3b      	ldr	r3, [r7, #32]
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	4613      	mov	r3, r2
 8002850:	2200      	movs	r2, #0
 8002852:	2100      	movs	r1, #0
 8002854:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002856:	f000 facb 	bl	8002df0 <_ZN9AppMotion16MotionController4turnEbbbm>
 800285a:	e777      	b.n	800274c <_ZN9AppMotion16MotionController10motionTaskEPv+0x38>

				} else if (pkt.cmd == AppParser::MOTION_CMD::MOVE_RIGHT_BWD){
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	2b04      	cmp	r3, #4
 8002860:	f47f af74 	bne.w	800274c <_ZN9AppMotion16MotionController10motionTaskEPv+0x38>
					self->turn(true, false, pkt.linear, pkt.arg);
 8002864:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	4613      	mov	r3, r2
 800286e:	2200      	movs	r2, #0
 8002870:	2101      	movs	r1, #1
 8002872:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002874:	f000 fabc 	bl	8002df0 <_ZN9AppMotion16MotionController4turnEbbbm>
				}
			}
		}
 8002878:	e768      	b.n	800274c <_ZN9AppMotion16MotionController10motionTaskEPv+0x38>
 800287a:	bf00      	nop
 800287c:	20000240 	.word	0x20000240
 8002880:	08011f6c 	.word	0x08011f6c
 8002884:	00000000 	.word	0x00000000

08002888 <_ZN9AppMotion16MotionController4moveEbmmbb>:
	    // Stop motors
	    lmotor->halt();
	    rmotor->halt();
	}

	void MotionController::move(bool isFwd, uint32_t arg, uint32_t speed, bool isCrawl, bool nostop) {
 8002888:	b5b0      	push	{r4, r5, r7, lr}
 800288a:	b098      	sub	sp, #96	@ 0x60
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	607a      	str	r2, [r7, #4]
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	460b      	mov	r3, r1
 8002896:	72fb      	strb	r3, [r7, #11]
		emergency = false;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
		servo->turnFront();
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 fe4c 	bl	8003542 <_ZN9AppMotion5Servo9turnFrontEv>

		lmotor->setSpeed(speed, isFwd);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	7afa      	ldrb	r2, [r7, #11]
 80028b0:	6839      	ldr	r1, [r7, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 fe7a 	bl	80035ac <_ZN9AppMotion5Motor8setSpeedEmb>
		rmotor->setSpeed(speed, isFwd);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	7afa      	ldrb	r2, [r7, #11]
 80028be:	6839      	ldr	r1, [r7, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 fe73 	bl	80035ac <_ZN9AppMotion5Motor8setSpeedEmb>

		if (isCrawl)
 80028c6:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00d      	beq.n	80028ea <_ZN9AppMotion16MotionController4moveEbmmbb+0x62>
		{
			lmotor->setSpeed(35, isFwd);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	7afa      	ldrb	r2, [r7, #11]
 80028d4:	2123      	movs	r1, #35	@ 0x23
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fe68 	bl	80035ac <_ZN9AppMotion5Motor8setSpeedEmb>
			rmotor->setSpeed(35, isFwd);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	7afa      	ldrb	r2, [r7, #11]
 80028e2:	2123      	movs	r1, #35	@ 0x23
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fe61 	bl	80035ac <_ZN9AppMotion5Motor8setSpeedEmb>
		}

		uint32_t timeStart = HAL_GetTick();
 80028ea:	f003 fb3d 	bl	8005f68 <HAL_GetTick>
 80028ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
		uint32_t l_encoder_count = lencoder->getCount();
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f001 f818 	bl	800392a <_ZN9AppMotion7Encoder8getCountEv>
 80028fa:	65f8      	str	r0, [r7, #92]	@ 0x5c
		uint32_t r_encoder_count = rencoder->getCount();
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	4618      	mov	r0, r3
 8002902:	f001 f812 	bl	800392a <_ZN9AppMotion7Encoder8getCountEv>
 8002906:	65b8      	str	r0, [r7, #88]	@ 0x58
		double target = (double) arg / DISTANCE_PER_ENCODER_PULSE;
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7fd fdfb 	bl	8000504 <__aeabi_ui2d>
 800290e:	a3d8      	add	r3, pc, #864	@ (adr r3, 8002c70 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3e8>)
 8002910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002914:	f7fd ff9a 	bl	800084c <__aeabi_ddiv>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

		double cur_left = 0, cur_right = 0;
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
		float count_left = 0, count_right = 0;
 8002938:	f04f 0300 	mov.w	r3, #0
 800293c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800293e:	f04f 0300 	mov.w	r3, #0
 8002942:	62bb      	str	r3, [r7, #40]	@ 0x28
		float init_angle = 0, cur_angle = 0;
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	627b      	str	r3, [r7, #36]	@ 0x24
 800294a:	f04f 0300 	mov.w	r3, #0
 800294e:	623b      	str	r3, [r7, #32]

		sensor_data.target = target;
 8002950:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002954:	f7fe f948 	bl	8000be8 <__aeabi_d2f>
 8002958:	4603      	mov	r3, r0
 800295a:	4abf      	ldr	r2, [pc, #764]	@ (8002c58 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3d0>)
 800295c:	6413      	str	r3, [r2, #64]	@ 0x40
		sensor_data.cur_left = cur_left;
 800295e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002962:	f7fe f941 	bl	8000be8 <__aeabi_d2f>
 8002966:	4603      	mov	r3, r0
 8002968:	4abb      	ldr	r2, [pc, #748]	@ (8002c58 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3d0>)
 800296a:	6393      	str	r3, [r2, #56]	@ 0x38
		sensor_data.cur_right = cur_right;
 800296c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002970:	f7fe f93a 	bl	8000be8 <__aeabi_d2f>
 8002974:	4603      	mov	r3, r0
 8002976:	4ab8      	ldr	r2, [pc, #736]	@ (8002c58 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3d0>)
 8002978:	63d3      	str	r3, [r2, #60]	@ 0x3c
		init_angle = sensor_data.yaw_abs;
 800297a:	4bb7      	ldr	r3, [pc, #732]	@ (8002c58 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3d0>)
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	627b      	str	r3, [r7, #36]	@ 0x24

//		 OLED_ShowString(0, 10, (uint8_t*)"Entered move()");
//		 OLED_Refresh_Gram();


		double speed_error = 0;
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		do {

//    		OLED_ShowString(0, 20, (uint8_t*)"looping...");
//			OLED_Refresh_Gram();

			count_left = (double) lencoder->getDelta(l_encoder_count, lencoder->getCount());
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	691c      	ldr	r4, [r3, #16]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	4618      	mov	r0, r3
 8002996:	f000 ffc8 	bl	800392a <_ZN9AppMotion7Encoder8getCountEv>
 800299a:	4603      	mov	r3, r0
 800299c:	461a      	mov	r2, r3
 800299e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80029a0:	4620      	mov	r0, r4
 80029a2:	f000 ffd0 	bl	8003946 <_ZN9AppMotion7Encoder8getDeltaEmm>
 80029a6:	4603      	mov	r3, r0
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fd fdab 	bl	8000504 <__aeabi_ui2d>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	4610      	mov	r0, r2
 80029b4:	4619      	mov	r1, r3
 80029b6:	f7fe f917 	bl	8000be8 <__aeabi_d2f>
 80029ba:	4603      	mov	r3, r0
 80029bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			count_right = (double) rencoder->getDelta(r_encoder_count, rencoder->getCount());
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	695c      	ldr	r4, [r3, #20]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 ffaf 	bl	800392a <_ZN9AppMotion7Encoder8getCountEv>
 80029cc:	4603      	mov	r3, r0
 80029ce:	461a      	mov	r2, r3
 80029d0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80029d2:	4620      	mov	r0, r4
 80029d4:	f000 ffb7 	bl	8003946 <_ZN9AppMotion7Encoder8getDeltaEmm>
 80029d8:	4603      	mov	r3, r0
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fd fd92 	bl	8000504 <__aeabi_ui2d>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	4610      	mov	r0, r2
 80029e6:	4619      	mov	r1, r3
 80029e8:	f7fe f8fe 	bl	8000be8 <__aeabi_d2f>
 80029ec:	4603      	mov	r3, r0
 80029ee:	62bb      	str	r3, [r7, #40]	@ 0x28
			cur_angle = sensor_data.yaw_abs;
 80029f0:	4b99      	ldr	r3, [pc, #612]	@ (8002c58 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3d0>)
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	623b      	str	r3, [r7, #32]


			cur_left += count_left * LEFT_ENCODER_SCALE;
 80029f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80029f8:	f7fd fda6 	bl	8000548 <__aeabi_f2d>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002a04:	f7fd fc42 	bl	800028c <__adddf3>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
			cur_right += count_right * RIGHT_ENCODER_SCALE;
 8002a10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a12:	f7fd fd99 	bl	8000548 <__aeabi_f2d>
 8002a16:	a38e      	add	r3, pc, #568	@ (adr r3, 8002c50 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3c8>)
 8002a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1c:	f7fd fdec 	bl	80005f8 <__aeabi_dmul>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002a28:	f7fd fc30 	bl	800028c <__adddf3>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
			speed_error += (count_left - count_right);
 8002a34:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002a38:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002a3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a40:	ee17 0a90 	vmov	r0, s15
 8002a44:	f7fd fd80 	bl	8000548 <__aeabi_f2d>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002a50:	f7fd fc1c 	bl	800028c <__adddf3>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

			if (!isCrawl && !nostop) {
 8002a5c:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8002a60:	f083 0301 	eor.w	r3, r3, #1
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 812e 	beq.w	8002cc8 <_ZN9AppMotion16MotionController4moveEbmmbb+0x440>
 8002a6c:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8002a70:	f083 0301 	eor.w	r3, r3, #1
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 8126 	beq.w	8002cc8 <_ZN9AppMotion16MotionController4moveEbmmbb+0x440>

				// Close to target check
				if (cur_left > target - 2000 || cur_right > target - 2000) {
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	4b76      	ldr	r3, [pc, #472]	@ (8002c5c <_ZN9AppMotion16MotionController4moveEbmmbb+0x3d4>)
 8002a82:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002a86:	f7fd fbff 	bl	8000288 <__aeabi_dsub>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002a92:	f7fe f841 	bl	8000b18 <__aeabi_dcmpgt>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10f      	bne.n	8002abc <_ZN9AppMotion16MotionController4moveEbmmbb+0x234>
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	4b6e      	ldr	r3, [pc, #440]	@ (8002c5c <_ZN9AppMotion16MotionController4moveEbmmbb+0x3d4>)
 8002aa2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002aa6:	f7fd fbef 	bl	8000288 <__aeabi_dsub>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002ab2:	f7fe f831 	bl	8000b18 <__aeabi_dcmpgt>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d04c      	beq.n	8002b56 <_ZN9AppMotion16MotionController4moveEbmmbb+0x2ce>
					lmotor->setSpeed(map(target - cur_left, 2000, 330, 35, 15), isFwd);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	685c      	ldr	r4, [r3, #4]
 8002ac0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002ac4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002ac8:	f7fd fbde 	bl	8000288 <__aeabi_dsub>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	f7fe f888 	bl	8000be8 <__aeabi_d2f>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	eeb2 2a0e 	vmov.f32	s4, #46	@ 0x41700000  15.0
 8002ade:	eddf 1a60 	vldr	s3, [pc, #384]	@ 8002c60 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3d8>
 8002ae2:	ed9f 1a60 	vldr	s2, [pc, #384]	@ 8002c64 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3dc>
 8002ae6:	eddf 0a60 	vldr	s1, [pc, #384]	@ 8002c68 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3e0>
 8002aea:	ee00 3a10 	vmov	s0, r3
 8002aee:	f7ff fd07 	bl	8002500 <_ZN9AppMotion16MotionController3mapEfffff>
 8002af2:	eef0 7a40 	vmov.f32	s15, s0
 8002af6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002afa:	7afb      	ldrb	r3, [r7, #11]
 8002afc:	461a      	mov	r2, r3
 8002afe:	ee17 1a90 	vmov	r1, s15
 8002b02:	4620      	mov	r0, r4
 8002b04:	f000 fd52 	bl	80035ac <_ZN9AppMotion5Motor8setSpeedEmb>
					rmotor->setSpeed(map(target - cur_right, 2000, 330, 35, 15), isFwd);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	689c      	ldr	r4, [r3, #8]
 8002b0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b10:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002b14:	f7fd fbb8 	bl	8000288 <__aeabi_dsub>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	4619      	mov	r1, r3
 8002b20:	f7fe f862 	bl	8000be8 <__aeabi_d2f>
 8002b24:	4603      	mov	r3, r0
 8002b26:	eeb2 2a0e 	vmov.f32	s4, #46	@ 0x41700000  15.0
 8002b2a:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 8002c60 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3d8>
 8002b2e:	ed9f 1a4d 	vldr	s2, [pc, #308]	@ 8002c64 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3dc>
 8002b32:	eddf 0a4d 	vldr	s1, [pc, #308]	@ 8002c68 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3e0>
 8002b36:	ee00 3a10 	vmov	s0, r3
 8002b3a:	f7ff fce1 	bl	8002500 <_ZN9AppMotion16MotionController3mapEfffff>
 8002b3e:	eef0 7a40 	vmov.f32	s15, s0
 8002b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b46:	7afb      	ldrb	r3, [r7, #11]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	ee17 1a90 	vmov	r1, s15
 8002b4e:	4620      	mov	r0, r4
 8002b50:	f000 fd2c 	bl	80035ac <_ZN9AppMotion5Motor8setSpeedEmb>
 8002b54:	e0b8      	b.n	8002cc8 <_ZN9AppMotion16MotionController4moveEbmmbb+0x440>
				}

				// Use PID
				else {

					float pid_left = PID_calc(&this->left_pid, target - cur_left, target);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f103 0418 	add.w	r4, r3, #24
 8002b5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002b60:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002b64:	f7fd fb90 	bl	8000288 <__aeabi_dsub>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	4619      	mov	r1, r3
 8002b70:	f7fe f83a 	bl	8000be8 <__aeabi_d2f>
 8002b74:	4605      	mov	r5, r0
 8002b76:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002b7a:	f7fe f835 	bl	8000be8 <__aeabi_d2f>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	ee00 3a90 	vmov	s1, r3
 8002b84:	ee00 5a10 	vmov	s0, r5
 8002b88:	4620      	mov	r0, r4
 8002b8a:	f002 fbde 	bl	800534a <_Z8PID_calcP12pid_type_defff>
 8002b8e:	ed87 0a07 	vstr	s0, [r7, #28]
					float pid_right = PID_calc(&this->right_pid, target - cur_right, target);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f103 0468 	add.w	r4, r3, #104	@ 0x68
 8002b98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b9c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002ba0:	f7fd fb72 	bl	8000288 <__aeabi_dsub>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4610      	mov	r0, r2
 8002baa:	4619      	mov	r1, r3
 8002bac:	f7fe f81c 	bl	8000be8 <__aeabi_d2f>
 8002bb0:	4605      	mov	r5, r0
 8002bb2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002bb6:	f7fe f817 	bl	8000be8 <__aeabi_d2f>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	ee00 3a90 	vmov	s1, r3
 8002bc0:	ee00 5a10 	vmov	s0, r5
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	f002 fbc0 	bl	800534a <_Z8PID_calcP12pid_type_defff>
 8002bca:	ed87 0a06 	vstr	s0, [r7, #24]
					float pid_left_d = PID_calc(&this->sync_left_pid, speed_error, 0);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f103 04b8 	add.w	r4, r3, #184	@ 0xb8
 8002bd4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002bd8:	f7fe f806 	bl	8000be8 <__aeabi_d2f>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8002c6c <_ZN9AppMotion16MotionController4moveEbmmbb+0x3e4>
 8002be2:	ee00 3a10 	vmov	s0, r3
 8002be6:	4620      	mov	r0, r4
 8002be8:	f002 fbaf 	bl	800534a <_Z8PID_calcP12pid_type_defff>
 8002bec:	ed87 0a05 	vstr	s0, [r7, #20]
					float pid_right_d = PID_calc(&this->sync_right_pid, -speed_error, 0);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f503 7484 	add.w	r4, r3, #264	@ 0x108
 8002bf6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002bfa:	f7fd fff5 	bl	8000be8 <__aeabi_d2f>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	ee07 3a90 	vmov	s15, r3
 8002c04:	eef1 7a67 	vneg.f32	s15, s15
 8002c08:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8002c6c <_ZN9AppMotion16MotionController4moveEbmmbb+0x3e4>
 8002c0c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c10:	4620      	mov	r0, r4
 8002c12:	f002 fb9a 	bl	800534a <_Z8PID_calcP12pid_type_defff>
 8002c16:	ed87 0a04 	vstr	s0, [r7, #16]

					// Update the speed
					lmotor->_setDutyCycleVal((uint32_t) ((pid_left + pid_left_d) > 1000 ?(pid_left + pid_left_d) : 1000), isFwd);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c22:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c2a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002c78 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3f0>
 8002c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c36:	dd21      	ble.n	8002c7c <_ZN9AppMotion16MotionController4moveEbmmbb+0x3f4>
 8002c38:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c48:	ee17 1a90 	vmov	r1, s15
 8002c4c:	e018      	b.n	8002c80 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3f8>
 8002c4e:	bf00      	nop
 8002c50:	645a1cac 	.word	0x645a1cac
 8002c54:	3fefdf3b 	.word	0x3fefdf3b
 8002c58:	200001fc 	.word	0x200001fc
 8002c5c:	409f4000 	.word	0x409f4000
 8002c60:	420c0000 	.word	0x420c0000
 8002c64:	43a50000 	.word	0x43a50000
 8002c68:	44fa0000 	.word	0x44fa0000
 8002c6c:	00000000 	.word	0x00000000
 8002c70:	c177bd5f 	.word	0xc177bd5f
 8002c74:	3f8acfcd 	.word	0x3f8acfcd
 8002c78:	447a0000 	.word	0x447a0000
 8002c7c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002c80:	7afa      	ldrb	r2, [r7, #11]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 fd44 	bl	8003710 <_ZN9AppMotion5Motor16_setDutyCycleValEmb>
					rmotor->_setDutyCycleVal((uint32_t) ((pid_right + pid_right_d) > 1000 ?(pid_right + pid_right_d) : 1000), isFwd);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002c90:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c98:	ed1f 7a09 	vldr	s14, [pc, #-36]	@ 8002c78 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3f0>
 8002c9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca4:	dd0a      	ble.n	8002cbc <_ZN9AppMotion16MotionController4moveEbmmbb+0x434>
 8002ca6:	ed97 7a06 	vldr	s14, [r7, #24]
 8002caa:	edd7 7a04 	vldr	s15, [r7, #16]
 8002cae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cb6:	ee17 1a90 	vmov	r1, s15
 8002cba:	e001      	b.n	8002cc0 <_ZN9AppMotion16MotionController4moveEbmmbb+0x438>
 8002cbc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002cc0:	7afa      	ldrb	r2, [r7, #11]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 fd24 	bl	8003710 <_ZN9AppMotion5Motor16_setDutyCycleValEmb>
				}
			}

			l_encoder_count = lencoder->getCount();
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 fe2c 	bl	800392a <_ZN9AppMotion7Encoder8getCountEv>
 8002cd2:	65f8      	str	r0, [r7, #92]	@ 0x5c
			r_encoder_count = rencoder->getCount();
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 fe26 	bl	800392a <_ZN9AppMotion7Encoder8getCountEv>
 8002cde:	65b8      	str	r0, [r7, #88]	@ 0x58

			if ((cur_left > target && cur_right > target) || emergency)
 8002ce0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002ce4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002ce8:	f7fd ff16 	bl	8000b18 <__aeabi_dcmpgt>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d008      	beq.n	8002d04 <_ZN9AppMotion16MotionController4moveEbmmbb+0x47c>
 8002cf2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002cf6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002cfa:	f7fd ff0d 	bl	8000b18 <__aeabi_dcmpgt>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d104      	bne.n	8002d0e <_ZN9AppMotion16MotionController4moveEbmmbb+0x486>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d040      	beq.n	8002d90 <_ZN9AppMotion16MotionController4moveEbmmbb+0x508>
			{
				sensor_data.last_halt_val = (uint32_t) (cur_left>cur_right?cur_right:cur_left) * DISTANCE_PER_ENCODER_PULSE;
 8002d0e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d12:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002d16:	f7fd feff 	bl	8000b18 <__aeabi_dcmpgt>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <_ZN9AppMotion16MotionController4moveEbmmbb+0x4aa>
 8002d20:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002d24:	f7fd ff40 	bl	8000ba8 <__aeabi_d2uiz>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fd fbea 	bl	8000504 <__aeabi_ui2d>
 8002d30:	e007      	b.n	8002d42 <_ZN9AppMotion16MotionController4moveEbmmbb+0x4ba>
 8002d32:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002d36:	f7fd ff37 	bl	8000ba8 <__aeabi_d2uiz>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fd fbe1 	bl	8000504 <__aeabi_ui2d>
 8002d42:	a328      	add	r3, pc, #160	@ (adr r3, 8002de4 <_ZN9AppMotion16MotionController4moveEbmmbb+0x55c>)
 8002d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d48:	f7fd fc56 	bl	80005f8 <__aeabi_dmul>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4610      	mov	r0, r2
 8002d52:	4619      	mov	r1, r3
 8002d54:	f7fd ff28 	bl	8000ba8 <__aeabi_d2uiz>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	4a21      	ldr	r2, [pc, #132]	@ (8002de0 <_ZN9AppMotion16MotionController4moveEbmmbb+0x558>)
 8002d5c:	6353      	str	r3, [r2, #52]	@ 0x34
				sensor_data.cur_left = cur_left;
 8002d5e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002d62:	f7fd ff41 	bl	8000be8 <__aeabi_d2f>
 8002d66:	4603      	mov	r3, r0
 8002d68:	4a1d      	ldr	r2, [pc, #116]	@ (8002de0 <_ZN9AppMotion16MotionController4moveEbmmbb+0x558>)
 8002d6a:	6393      	str	r3, [r2, #56]	@ 0x38
				sensor_data.cur_right = cur_right;
 8002d6c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002d70:	f7fd ff3a 	bl	8000be8 <__aeabi_d2f>
 8002d74:	4603      	mov	r3, r0
 8002d76:	4a1a      	ldr	r2, [pc, #104]	@ (8002de0 <_ZN9AppMotion16MotionController4moveEbmmbb+0x558>)
 8002d78:	63d3      	str	r3, [r2, #60]	@ 0x3c
				lmotor->halt();
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 fd6e 	bl	8003860 <_ZN9AppMotion5Motor4haltEv>
				rmotor->halt();
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 fd69 	bl	8003860 <_ZN9AppMotion5Motor4haltEv>
				break;
 8002d8e:	e013      	b.n	8002db8 <_ZN9AppMotion16MotionController4moveEbmmbb+0x530>
			}

			osDelay(10);
 8002d90:	200a      	movs	r0, #10
 8002d92:	f008 fd29 	bl	800b7e8 <osDelay>
			sensor_data.cur_left = cur_left;
 8002d96:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002d9a:	f7fd ff25 	bl	8000be8 <__aeabi_d2f>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	4a0f      	ldr	r2, [pc, #60]	@ (8002de0 <_ZN9AppMotion16MotionController4moveEbmmbb+0x558>)
 8002da2:	6393      	str	r3, [r2, #56]	@ 0x38
			sensor_data.cur_right = cur_right;
 8002da4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002da8:	f7fd ff1e 	bl	8000be8 <__aeabi_d2f>
 8002dac:	4603      	mov	r3, r0
 8002dae:	4a0c      	ldr	r2, [pc, #48]	@ (8002de0 <_ZN9AppMotion16MotionController4moveEbmmbb+0x558>)
 8002db0:	63d3      	str	r3, [r2, #60]	@ 0x3c
//			char buf[50];
//			snprintf(buf, sizeof(buf), "L:%3.2f R:%3.2f T:%3.2f", cur_left, cur_right, target);
//			OLED_ShowString(0, 30, (uint8_t*)buf);
//			OLED_Refresh_Gram();
			osThreadYield();
 8002db2:	f008 fcf9 	bl	800b7a8 <osThreadYield>

		} while (1);
 8002db6:	e5e9      	b.n	800298c <_ZN9AppMotion16MotionController4moveEbmmbb+0x104>


		emergency = false;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
		lmotor->halt();
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fd4b 	bl	8003860 <_ZN9AppMotion5Motor4haltEv>
		rmotor->halt();
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 fd46 	bl	8003860 <_ZN9AppMotion5Motor4haltEv>
	}
 8002dd4:	bf00      	nop
 8002dd6:	3760      	adds	r7, #96	@ 0x60
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bdb0      	pop	{r4, r5, r7, pc}
 8002ddc:	f3af 8000 	nop.w
 8002de0:	200001fc 	.word	0x200001fc
 8002de4:	c177bd5f 	.word	0xc177bd5f
 8002de8:	3f8acfcd 	.word	0x3f8acfcd
 8002dec:	00000000 	.word	0x00000000

08002df0 <_ZN9AppMotion16MotionController4turnEbbbm>:

	void MotionController::turn(bool isRight, bool isFwd, bool arc, uint32_t arg) {
 8002df0:	b590      	push	{r4, r7, lr}
 8002df2:	ed2d 8b02 	vpush	{d8}
 8002df6:	b093      	sub	sp, #76	@ 0x4c
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	4608      	mov	r0, r1
 8002dfe:	4611      	mov	r1, r2
 8002e00:	461a      	mov	r2, r3
 8002e02:	4603      	mov	r3, r0
 8002e04:	70fb      	strb	r3, [r7, #3]
 8002e06:	460b      	mov	r3, r1
 8002e08:	70bb      	strb	r3, [r7, #2]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	707b      	strb	r3, [r7, #1]
		emergency = false;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
		isRight ? servo->turnRight() : servo->turnLeft();
 8002e16:	78fb      	ldrb	r3, [r7, #3]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <_ZN9AppMotion16MotionController4turnEbbbm+0x38>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 fb7d 	bl	8003520 <_ZN9AppMotion5Servo9turnRightEv>
 8002e26:	e004      	b.n	8002e32 <_ZN9AppMotion16MotionController4turnEbbbm+0x42>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f000 fb66 	bl	80034fe <_ZN9AppMotion5Servo8turnLeftEv>

		isRight ? lmotor->setSpeed(51, isFwd) : lmotor->setSpeed(20, !isFwd);
 8002e32:	78fb      	ldrb	r3, [r7, #3]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d007      	beq.n	8002e48 <_ZN9AppMotion16MotionController4turnEbbbm+0x58>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	78ba      	ldrb	r2, [r7, #2]
 8002e3e:	2133      	movs	r1, #51	@ 0x33
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 fbb3 	bl	80035ac <_ZN9AppMotion5Motor8setSpeedEmb>
 8002e46:	e009      	b.n	8002e5c <_ZN9AppMotion16MotionController4turnEbbbm+0x6c>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6858      	ldr	r0, [r3, #4]
 8002e4c:	78bb      	ldrb	r3, [r7, #2]
 8002e4e:	f083 0301 	eor.w	r3, r3, #1
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	461a      	mov	r2, r3
 8002e56:	2114      	movs	r1, #20
 8002e58:	f000 fba8 	bl	80035ac <_ZN9AppMotion5Motor8setSpeedEmb>
		isRight ? rmotor->setSpeed(20, !isFwd) : rmotor->setSpeed(51, isFwd);
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <_ZN9AppMotion16MotionController4turnEbbbm+0x88>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6898      	ldr	r0, [r3, #8]
 8002e66:	78bb      	ldrb	r3, [r7, #2]
 8002e68:	f083 0301 	eor.w	r3, r3, #1
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	461a      	mov	r2, r3
 8002e70:	2114      	movs	r1, #20
 8002e72:	f000 fb9b 	bl	80035ac <_ZN9AppMotion5Motor8setSpeedEmb>
 8002e76:	e006      	b.n	8002e86 <_ZN9AppMotion16MotionController4turnEbbbm+0x96>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	78ba      	ldrb	r2, [r7, #2]
 8002e7e:	2133      	movs	r1, #51	@ 0x33
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 fb93 	bl	80035ac <_ZN9AppMotion5Motor8setSpeedEmb>

		if(arc) // arc increases turn radius
 8002e86:	787b      	ldrb	r3, [r7, #1]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d023      	beq.n	8002ed4 <_ZN9AppMotion16MotionController4turnEbbbm+0xe4>
		{
			isRight ? lmotor->setSpeed(55, isFwd) : lmotor->setSpeed(20, isFwd);
 8002e8c:	78fb      	ldrb	r3, [r7, #3]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d007      	beq.n	8002ea2 <_ZN9AppMotion16MotionController4turnEbbbm+0xb2>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	78ba      	ldrb	r2, [r7, #2]
 8002e98:	2137      	movs	r1, #55	@ 0x37
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 fb86 	bl	80035ac <_ZN9AppMotion5Motor8setSpeedEmb>
 8002ea0:	e006      	b.n	8002eb0 <_ZN9AppMotion16MotionController4turnEbbbm+0xc0>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	78ba      	ldrb	r2, [r7, #2]
 8002ea8:	2114      	movs	r1, #20
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 fb7e 	bl	80035ac <_ZN9AppMotion5Motor8setSpeedEmb>
			isRight ? rmotor->setSpeed(20, isFwd) : rmotor->setSpeed(55, isFwd);
 8002eb0:	78fb      	ldrb	r3, [r7, #3]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d007      	beq.n	8002ec6 <_ZN9AppMotion16MotionController4turnEbbbm+0xd6>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	78ba      	ldrb	r2, [r7, #2]
 8002ebc:	2114      	movs	r1, #20
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 fb74 	bl	80035ac <_ZN9AppMotion5Motor8setSpeedEmb>
 8002ec4:	e006      	b.n	8002ed4 <_ZN9AppMotion16MotionController4turnEbbbm+0xe4>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	78ba      	ldrb	r2, [r7, #2]
 8002ecc:	2137      	movs	r1, #55	@ 0x37
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 fb6c 	bl	80035ac <_ZN9AppMotion5Motor8setSpeedEmb>
		}
		uint32_t timeNow = HAL_GetTick();
 8002ed4:	f003 f848 	bl	8005f68 <HAL_GetTick>
 8002ed8:	6378      	str	r0, [r7, #52]	@ 0x34
		uint32_t timeStart = timeNow;
 8002eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002edc:	633b      	str	r3, [r7, #48]	@ 0x30
		uint8_t buf[30] = { 0 };
 8002ede:	f107 0308 	add.w	r3, r7, #8
 8002ee2:	221e      	movs	r2, #30
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f00d f832 	bl	800ff50 <memset>
		float target_yaw = 0;
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	647b      	str	r3, [r7, #68]	@ 0x44
		float req = ((float) arg) ;
 8002ef2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ef4:	ee07 3a90 	vmov	s15, r3
 8002ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002efc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		float cur = sensor_data.yaw_abs; //[-179,180]
 8002f00:	4ba7      	ldr	r3, [pc, #668]	@ (80031a0 <_ZN9AppMotion16MotionController4turnEbbbm+0x3b0>)
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	643b      	str	r3, [r7, #64]	@ 0x40
		float prev_yaw = cur;
 8002f06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f08:	62bb      	str	r3, [r7, #40]	@ 0x28
		float last_target_dist = 99999.0f; // overshoot protection
 8002f0a:	4ba6      	ldr	r3, [pc, #664]	@ (80031a4 <_ZN9AppMotion16MotionController4turnEbbbm+0x3b4>)
 8002f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		float bwd_diffn_delta = 0;
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	63bb      	str	r3, [r7, #56]	@ 0x38

		if((!isRight && isFwd) || (isRight && !isFwd) ) //increase
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	f083 0301 	eor.w	r3, r3, #1
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d002      	beq.n	8002f26 <_ZN9AppMotion16MotionController4turnEbbbm+0x136>
 8002f20:	78bb      	ldrb	r3, [r7, #2]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d108      	bne.n	8002f38 <_ZN9AppMotion16MotionController4turnEbbbm+0x148>
 8002f26:	78fb      	ldrb	r3, [r7, #3]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d02c      	beq.n	8002f86 <_ZN9AppMotion16MotionController4turnEbbbm+0x196>
 8002f2c:	78bb      	ldrb	r3, [r7, #2]
 8002f2e:	f083 0301 	eor.w	r3, r3, #1
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d026      	beq.n	8002f86 <_ZN9AppMotion16MotionController4turnEbbbm+0x196>
		{
			if((req + cur) > 179) target_yaw = -180 + (req - (180 - cur));
 8002f38:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002f3c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002f40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f44:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 80031a8 <_ZN9AppMotion16MotionController4turnEbbbm+0x3b8>
 8002f48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f50:	dd10      	ble.n	8002f74 <_ZN9AppMotion16MotionController4turnEbbbm+0x184>
 8002f52:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 80031ac <_ZN9AppMotion16MotionController4turnEbbbm+0x3bc>
 8002f56:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f5e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f66:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80031ac <_ZN9AppMotion16MotionController4turnEbbbm+0x3bc>
 8002f6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f6e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 8002f72:	e02e      	b.n	8002fd2 <_ZN9AppMotion16MotionController4turnEbbbm+0x1e2>
			else target_yaw = req + cur;
 8002f74:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002f78:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f80:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
			if((req + cur) > 179) target_yaw = -180 + (req - (180 - cur));
 8002f84:	e025      	b.n	8002fd2 <_ZN9AppMotion16MotionController4turnEbbbm+0x1e2>
		}
		else
		{
			if((cur - req) < -179) target_yaw = 180 - (req + (-180 - cur));
 8002f86:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002f8a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002f8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f92:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 80031b0 <_ZN9AppMotion16MotionController4turnEbbbm+0x3c0>
 8002f96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f9e:	d510      	bpl.n	8002fc2 <_ZN9AppMotion16MotionController4turnEbbbm+0x1d2>
 8002fa0:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 80031b4 <_ZN9AppMotion16MotionController4turnEbbbm+0x3c4>
 8002fa4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002fa8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fac:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fb4:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 80031ac <_ZN9AppMotion16MotionController4turnEbbbm+0x3bc>
 8002fb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fbc:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 8002fc0:	e007      	b.n	8002fd2 <_ZN9AppMotion16MotionController4turnEbbbm+0x1e2>
			else target_yaw = cur - req;
 8002fc2:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002fc6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002fca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fce:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		}

		do{
			if (abs(target_yaw - cur) < 45 ) {
 8002fd2:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8002fd6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002fda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fe2:	ee17 3a90 	vmov	r3, s15
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	bfb8      	it	lt
 8002fea:	425b      	neglt	r3, r3
 8002fec:	2b2c      	cmp	r3, #44	@ 0x2c
 8002fee:	dc58      	bgt.n	80030a2 <_ZN9AppMotion16MotionController4turnEbbbm+0x2b2>
				if(isRight) lmotor->setSpeed((uint32_t)map(abs(target_yaw - cur), 45, 0, 30, 15), isFwd);
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d02a      	beq.n	800304c <_ZN9AppMotion16MotionController4turnEbbbm+0x25c>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685c      	ldr	r4, [r3, #4]
 8002ffa:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8002ffe:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8003002:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003006:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800300a:	ee17 3a90 	vmov	r3, s15
 800300e:	2b00      	cmp	r3, #0
 8003010:	bfb8      	it	lt
 8003012:	425b      	neglt	r3, r3
 8003014:	ee07 3a90 	vmov	s15, r3
 8003018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800301c:	eeb2 2a0e 	vmov.f32	s4, #46	@ 0x41700000  15.0
 8003020:	eef3 1a0e 	vmov.f32	s3, #62	@ 0x41f00000  30.0
 8003024:	ed9f 1a64 	vldr	s2, [pc, #400]	@ 80031b8 <_ZN9AppMotion16MotionController4turnEbbbm+0x3c8>
 8003028:	eddf 0a64 	vldr	s1, [pc, #400]	@ 80031bc <_ZN9AppMotion16MotionController4turnEbbbm+0x3cc>
 800302c:	eeb0 0a67 	vmov.f32	s0, s15
 8003030:	f7ff fa66 	bl	8002500 <_ZN9AppMotion16MotionController3mapEfffff>
 8003034:	eef0 7a40 	vmov.f32	s15, s0
 8003038:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800303c:	78bb      	ldrb	r3, [r7, #2]
 800303e:	461a      	mov	r2, r3
 8003040:	ee17 1a90 	vmov	r1, s15
 8003044:	4620      	mov	r0, r4
 8003046:	f000 fab1 	bl	80035ac <_ZN9AppMotion5Motor8setSpeedEmb>
 800304a:	e0fd      	b.n	8003248 <_ZN9AppMotion16MotionController4turnEbbbm+0x458>

				else rmotor->setSpeed((uint32_t)map(abs(target_yaw - cur), 45, 0, 30, 15), isFwd);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689c      	ldr	r4, [r3, #8]
 8003050:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8003054:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8003058:	ee77 7a67 	vsub.f32	s15, s14, s15
 800305c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003060:	ee17 3a90 	vmov	r3, s15
 8003064:	2b00      	cmp	r3, #0
 8003066:	bfb8      	it	lt
 8003068:	425b      	neglt	r3, r3
 800306a:	ee07 3a90 	vmov	s15, r3
 800306e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003072:	eeb2 2a0e 	vmov.f32	s4, #46	@ 0x41700000  15.0
 8003076:	eef3 1a0e 	vmov.f32	s3, #62	@ 0x41f00000  30.0
 800307a:	ed9f 1a4f 	vldr	s2, [pc, #316]	@ 80031b8 <_ZN9AppMotion16MotionController4turnEbbbm+0x3c8>
 800307e:	eddf 0a4f 	vldr	s1, [pc, #316]	@ 80031bc <_ZN9AppMotion16MotionController4turnEbbbm+0x3cc>
 8003082:	eeb0 0a67 	vmov.f32	s0, s15
 8003086:	f7ff fa3b 	bl	8002500 <_ZN9AppMotion16MotionController3mapEfffff>
 800308a:	eef0 7a40 	vmov.f32	s15, s0
 800308e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003092:	78bb      	ldrb	r3, [r7, #2]
 8003094:	461a      	mov	r2, r3
 8003096:	ee17 1a90 	vmov	r1, s15
 800309a:	4620      	mov	r0, r4
 800309c:	f000 fa86 	bl	80035ac <_ZN9AppMotion5Motor8setSpeedEmb>
 80030a0:	e0d2      	b.n	8003248 <_ZN9AppMotion16MotionController4turnEbbbm+0x458>
			}
			else if(fmod(abs(abs(target_yaw) - abs(cur)), 180) < 45 )
 80030a2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80030a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030aa:	ee17 3a90 	vmov	r3, s15
 80030ae:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80030b2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80030b6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80030ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030be:	ee17 3a90 	vmov	r3, s15
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bfb8      	it	lt
 80030c6:	425b      	neglt	r3, r3
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	bfb8      	it	lt
 80030ce:	425b      	neglt	r3, r3
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fd fa27 	bl	8000524 <__aeabi_i2d>
 80030d6:	4602      	mov	r2, r0
 80030d8:	460b      	mov	r3, r1
 80030da:	ed9f 1b2f 	vldr	d1, [pc, #188]	@ 8003198 <_ZN9AppMotion16MotionController4turnEbbbm+0x3a8>
 80030de:	ec43 2b10 	vmov	d0, r2, r3
 80030e2:	f00b faad 	bl	800e640 <fmod>
 80030e6:	ec51 0b10 	vmov	r0, r1, d0
 80030ea:	2301      	movs	r3, #1
 80030ec:	461c      	mov	r4, r3
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	4b33      	ldr	r3, [pc, #204]	@ (80031c0 <_ZN9AppMotion16MotionController4turnEbbbm+0x3d0>)
 80030f4:	f7fd fcf2 	bl	8000adc <__aeabi_dcmplt>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <_ZN9AppMotion16MotionController4turnEbbbm+0x312>
 80030fe:	2300      	movs	r3, #0
 8003100:	461c      	mov	r4, r3
 8003102:	b2e3      	uxtb	r3, r4
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 809f 	beq.w	8003248 <_ZN9AppMotion16MotionController4turnEbbbm+0x458>
			{
				if(isRight) lmotor->setSpeed((uint32_t)map(fmod(abs(abs(target_yaw) - abs(cur)), 180), 45, 0, 30, 15), isFwd);
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d059      	beq.n	80031c4 <_ZN9AppMotion16MotionController4turnEbbbm+0x3d4>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685c      	ldr	r4, [r3, #4]
 8003114:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003118:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800311c:	ee17 3a90 	vmov	r3, s15
 8003120:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003124:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003128:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800312c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003130:	ee17 3a90 	vmov	r3, s15
 8003134:	2b00      	cmp	r3, #0
 8003136:	bfb8      	it	lt
 8003138:	425b      	neglt	r3, r3
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	bfb8      	it	lt
 8003140:	425b      	neglt	r3, r3
 8003142:	4618      	mov	r0, r3
 8003144:	f7fd f9ee 	bl	8000524 <__aeabi_i2d>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 8003198 <_ZN9AppMotion16MotionController4turnEbbbm+0x3a8>
 8003150:	ec43 2b10 	vmov	d0, r2, r3
 8003154:	f00b fa74 	bl	800e640 <fmod>
 8003158:	ec53 2b10 	vmov	r2, r3, d0
 800315c:	4610      	mov	r0, r2
 800315e:	4619      	mov	r1, r3
 8003160:	f7fd fd42 	bl	8000be8 <__aeabi_d2f>
 8003164:	4603      	mov	r3, r0
 8003166:	eeb2 2a0e 	vmov.f32	s4, #46	@ 0x41700000  15.0
 800316a:	eef3 1a0e 	vmov.f32	s3, #62	@ 0x41f00000  30.0
 800316e:	ed9f 1a12 	vldr	s2, [pc, #72]	@ 80031b8 <_ZN9AppMotion16MotionController4turnEbbbm+0x3c8>
 8003172:	eddf 0a12 	vldr	s1, [pc, #72]	@ 80031bc <_ZN9AppMotion16MotionController4turnEbbbm+0x3cc>
 8003176:	ee00 3a10 	vmov	s0, r3
 800317a:	f7ff f9c1 	bl	8002500 <_ZN9AppMotion16MotionController3mapEfffff>
 800317e:	eef0 7a40 	vmov.f32	s15, s0
 8003182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003186:	78bb      	ldrb	r3, [r7, #2]
 8003188:	461a      	mov	r2, r3
 800318a:	ee17 1a90 	vmov	r1, s15
 800318e:	4620      	mov	r0, r4
 8003190:	f000 fa0c 	bl	80035ac <_ZN9AppMotion5Motor8setSpeedEmb>
 8003194:	e058      	b.n	8003248 <_ZN9AppMotion16MotionController4turnEbbbm+0x458>
 8003196:	bf00      	nop
 8003198:	00000000 	.word	0x00000000
 800319c:	40668000 	.word	0x40668000
 80031a0:	200001fc 	.word	0x200001fc
 80031a4:	47c34f80 	.word	0x47c34f80
 80031a8:	43330000 	.word	0x43330000
 80031ac:	43340000 	.word	0x43340000
 80031b0:	c3330000 	.word	0xc3330000
 80031b4:	c3340000 	.word	0xc3340000
 80031b8:	00000000 	.word	0x00000000
 80031bc:	42340000 	.word	0x42340000
 80031c0:	40468000 	.word	0x40468000

				else rmotor->setSpeed((uint32_t)map(fmod(abs(abs(target_yaw) - abs(cur)), 180), 45, 0, 30, 15), isFwd);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689c      	ldr	r4, [r3, #8]
 80031c8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80031cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031d0:	ee17 3a90 	vmov	r3, s15
 80031d4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80031d8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80031dc:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80031e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031e4:	ee17 3a90 	vmov	r3, s15
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	bfb8      	it	lt
 80031ec:	425b      	neglt	r3, r3
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	bfb8      	it	lt
 80031f4:	425b      	neglt	r3, r3
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fd f994 	bl	8000524 <__aeabi_i2d>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	ed9f 1b9f 	vldr	d1, [pc, #636]	@ 8003480 <_ZN9AppMotion16MotionController4turnEbbbm+0x690>
 8003204:	ec43 2b10 	vmov	d0, r2, r3
 8003208:	f00b fa1a 	bl	800e640 <fmod>
 800320c:	ec53 2b10 	vmov	r2, r3, d0
 8003210:	4610      	mov	r0, r2
 8003212:	4619      	mov	r1, r3
 8003214:	f7fd fce8 	bl	8000be8 <__aeabi_d2f>
 8003218:	4603      	mov	r3, r0
 800321a:	eeb2 2a0e 	vmov.f32	s4, #46	@ 0x41700000  15.0
 800321e:	eef3 1a0e 	vmov.f32	s3, #62	@ 0x41f00000  30.0
 8003222:	ed9f 1a99 	vldr	s2, [pc, #612]	@ 8003488 <_ZN9AppMotion16MotionController4turnEbbbm+0x698>
 8003226:	eddf 0a99 	vldr	s1, [pc, #612]	@ 800348c <_ZN9AppMotion16MotionController4turnEbbbm+0x69c>
 800322a:	ee00 3a10 	vmov	s0, r3
 800322e:	f7ff f967 	bl	8002500 <_ZN9AppMotion16MotionController3mapEfffff>
 8003232:	eef0 7a40 	vmov.f32	s15, s0
 8003236:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800323a:	78bb      	ldrb	r3, [r7, #2]
 800323c:	461a      	mov	r2, r3
 800323e:	ee17 1a90 	vmov	r1, s15
 8003242:	4620      	mov	r0, r4
 8003244:	f000 f9b2 	bl	80035ac <_ZN9AppMotion5Motor8setSpeedEmb>
			}

			timeNow = HAL_GetTick();
 8003248:	f002 fe8e 	bl	8005f68 <HAL_GetTick>
 800324c:	6378      	str	r0, [r7, #52]	@ 0x34
			 * abs(sensor_data.yaw_abs - sensor_data.yaw_abs_prev) is STEP SIZE
			 * 50 is TIME PER STEP
			 * sgn(sensor_data.yaw_abs - sensor_data.yaw_abs_prev) is DIRECTION
			 *
			 * */
			if(timeNow != sensor_data.yaw_abs_time)
 800324e:	4b90      	ldr	r3, [pc, #576]	@ (8003490 <_ZN9AppMotion16MotionController4turnEbbbm+0x6a0>)
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003254:	429a      	cmp	r2, r3
 8003256:	d028      	beq.n	80032aa <_ZN9AppMotion16MotionController4turnEbbbm+0x4ba>
				bwd_diffn_delta = abs(sensor_data.yaw_abs - sensor_data.yaw_abs_prev) * (float)(abs(timeNow - sensor_data.yaw_abs_time)/80);
 8003258:	4b8d      	ldr	r3, [pc, #564]	@ (8003490 <_ZN9AppMotion16MotionController4turnEbbbm+0x6a0>)
 800325a:	ed93 7a04 	vldr	s14, [r3, #16]
 800325e:	4b8c      	ldr	r3, [pc, #560]	@ (8003490 <_ZN9AppMotion16MotionController4turnEbbbm+0x6a0>)
 8003260:	edd3 7a05 	vldr	s15, [r3, #20]
 8003264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003268:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800326c:	ee17 3a90 	vmov	r3, s15
 8003270:	2b00      	cmp	r3, #0
 8003272:	bfb8      	it	lt
 8003274:	425b      	neglt	r3, r3
 8003276:	ee07 3a90 	vmov	s15, r3
 800327a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800327e:	4b84      	ldr	r3, [pc, #528]	@ (8003490 <_ZN9AppMotion16MotionController4turnEbbbm+0x6a0>)
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	bfb8      	it	lt
 800328a:	425b      	neglt	r3, r3
 800328c:	4a81      	ldr	r2, [pc, #516]	@ (8003494 <_ZN9AppMotion16MotionController4turnEbbbm+0x6a4>)
 800328e:	fb82 1203 	smull	r1, r2, r2, r3
 8003292:	1152      	asrs	r2, r2, #5
 8003294:	17db      	asrs	r3, r3, #31
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	ee07 3a90 	vmov	s15, r3
 800329c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
 80032a8:	e002      	b.n	80032b0 <_ZN9AppMotion16MotionController4turnEbbbm+0x4c0>
			else
				bwd_diffn_delta = 0;
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	63bb      	str	r3, [r7, #56]	@ 0x38
			cur = sensor_data.yaw_abs +  (bwd_diffn_delta * sgn(sensor_data.yaw_abs - sensor_data.yaw_abs_prev)); // already dlpf and qtn filtered
 80032b0:	4b77      	ldr	r3, [pc, #476]	@ (8003490 <_ZN9AppMotion16MotionController4turnEbbbm+0x6a0>)
 80032b2:	ed93 8a04 	vldr	s16, [r3, #16]
 80032b6:	4b76      	ldr	r3, [pc, #472]	@ (8003490 <_ZN9AppMotion16MotionController4turnEbbbm+0x6a0>)
 80032b8:	ed93 7a04 	vldr	s14, [r3, #16]
 80032bc:	4b74      	ldr	r3, [pc, #464]	@ (8003490 <_ZN9AppMotion16MotionController4turnEbbbm+0x6a0>)
 80032be:	edd3 7a05 	vldr	s15, [r3, #20]
 80032c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032c6:	eeb0 0a67 	vmov.f32	s0, s15
 80032ca:	f000 fb72 	bl	80039b2 <_ZN9AppMotion16MotionController3sgnIfEEiT_>
 80032ce:	ee07 0a90 	vmov	s15, r0
 80032d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032d6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80032da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032de:	ee78 7a27 	vadd.f32	s15, s16, s15
 80032e2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
			sensor_data.yaw_cur_dbg = cur;
 80032e6:	4a6a      	ldr	r2, [pc, #424]	@ (8003490 <_ZN9AppMotion16MotionController4turnEbbbm+0x6a0>)
 80032e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032ea:	61d3      	str	r3, [r2, #28]
			prev_yaw = cur;
 80032ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032ee:	62bb      	str	r3, [r7, #40]	@ 0x28
			//break off immediately if overshoot
			if (last_target_dist < abs(target_yaw - cur) && abs(target_yaw - cur) < 15) {
 80032f0:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80032f4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80032f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003300:	ee17 3a90 	vmov	r3, s15
 8003304:	2b00      	cmp	r3, #0
 8003306:	bfb8      	it	lt
 8003308:	425b      	neglt	r3, r3
 800330a:	ee07 3a90 	vmov	s15, r3
 800330e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003312:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003316:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800331a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331e:	d519      	bpl.n	8003354 <_ZN9AppMotion16MotionController4turnEbbbm+0x564>
 8003320:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8003324:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8003328:	ee77 7a67 	vsub.f32	s15, s14, s15
 800332c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003330:	ee17 3a90 	vmov	r3, s15
 8003334:	2b00      	cmp	r3, #0
 8003336:	bfb8      	it	lt
 8003338:	425b      	neglt	r3, r3
 800333a:	2b0e      	cmp	r3, #14
 800333c:	dc0a      	bgt.n	8003354 <_ZN9AppMotion16MotionController4turnEbbbm+0x564>
				lmotor->halt();
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	4618      	mov	r0, r3
 8003344:	f000 fa8c 	bl	8003860 <_ZN9AppMotion5Motor4haltEv>
				rmotor->halt();
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	4618      	mov	r0, r3
 800334e:	f000 fa87 	bl	8003860 <_ZN9AppMotion5Motor4haltEv>
				break;
 8003352:	e080      	b.n	8003456 <_ZN9AppMotion16MotionController4turnEbbbm+0x666>
			}
			else last_target_dist = abs(target_yaw - cur);
 8003354:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8003358:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800335c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003360:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003364:	ee17 3a90 	vmov	r3, s15
 8003368:	2b00      	cmp	r3, #0
 800336a:	bfb8      	it	lt
 800336c:	425b      	neglt	r3, r3
 800336e:	ee07 3a90 	vmov	s15, r3
 8003372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003376:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

			if (abs(target_yaw - cur) <= 0.375 || (abs(target_yaw - cur) <= 1.5 && arc) || (HAL_GetTick() - timeStart) > 10000)
 800337a:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800337e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8003382:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003386:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800338a:	ee17 3a90 	vmov	r3, s15
 800338e:	2b00      	cmp	r3, #0
 8003390:	bfb8      	it	lt
 8003392:	425b      	neglt	r3, r3
 8003394:	4618      	mov	r0, r3
 8003396:	f7fd f8c5 	bl	8000524 <__aeabi_i2d>
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	4b3e      	ldr	r3, [pc, #248]	@ (8003498 <_ZN9AppMotion16MotionController4turnEbbbm+0x6a8>)
 80033a0:	f7fd fba6 	bl	8000af0 <__aeabi_dcmple>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d123      	bne.n	80033f2 <_ZN9AppMotion16MotionController4turnEbbbm+0x602>
 80033aa:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80033ae:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80033b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033ba:	ee17 3a90 	vmov	r3, s15
 80033be:	2b00      	cmp	r3, #0
 80033c0:	bfb8      	it	lt
 80033c2:	425b      	neglt	r3, r3
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fd f8ad 	bl	8000524 <__aeabi_i2d>
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	4b33      	ldr	r3, [pc, #204]	@ (800349c <_ZN9AppMotion16MotionController4turnEbbbm+0x6ac>)
 80033d0:	f7fd fb8e 	bl	8000af0 <__aeabi_dcmple>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <_ZN9AppMotion16MotionController4turnEbbbm+0x5f0>
 80033da:	787b      	ldrb	r3, [r7, #1]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d108      	bne.n	80033f2 <_ZN9AppMotion16MotionController4turnEbbbm+0x602>
 80033e0:	f002 fdc2 	bl	8005f68 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	f242 7210 	movw	r2, #10000	@ 0x2710
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d901      	bls.n	80033f6 <_ZN9AppMotion16MotionController4turnEbbbm+0x606>
 80033f2:	2301      	movs	r3, #1
 80033f4:	e000      	b.n	80033f8 <_ZN9AppMotion16MotionController4turnEbbbm+0x608>
 80033f6:	2300      	movs	r3, #0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d023      	beq.n	8003444 <_ZN9AppMotion16MotionController4turnEbbbm+0x654>
			{
				sensor_data.last_halt_val = ((uint32_t)abs(target_yaw - cur)) %180;
 80033fc:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8003400:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8003404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003408:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800340c:	ee17 3a90 	vmov	r3, s15
 8003410:	2b00      	cmp	r3, #0
 8003412:	bfb8      	it	lt
 8003414:	425b      	neglt	r3, r3
 8003416:	461a      	mov	r2, r3
 8003418:	0893      	lsrs	r3, r2, #2
 800341a:	4921      	ldr	r1, [pc, #132]	@ (80034a0 <_ZN9AppMotion16MotionController4turnEbbbm+0x6b0>)
 800341c:	fba1 1303 	umull	r1, r3, r1, r3
 8003420:	089b      	lsrs	r3, r3, #2
 8003422:	21b4      	movs	r1, #180	@ 0xb4
 8003424:	fb01 f303 	mul.w	r3, r1, r3
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	4a19      	ldr	r2, [pc, #100]	@ (8003490 <_ZN9AppMotion16MotionController4turnEbbbm+0x6a0>)
 800342c:	6353      	str	r3, [r2, #52]	@ 0x34
				lmotor->halt();
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	4618      	mov	r0, r3
 8003434:	f000 fa14 	bl	8003860 <_ZN9AppMotion5Motor4haltEv>
				rmotor->halt();
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	4618      	mov	r0, r3
 800343e:	f000 fa0f 	bl	8003860 <_ZN9AppMotion5Motor4haltEv>
				break;
 8003442:	e008      	b.n	8003456 <_ZN9AppMotion16MotionController4turnEbbbm+0x666>
			}

			sensor_data.last_halt_val = arg;
 8003444:	4a12      	ldr	r2, [pc, #72]	@ (8003490 <_ZN9AppMotion16MotionController4turnEbbbm+0x6a0>)
 8003446:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003448:	6353      	str	r3, [r2, #52]	@ 0x34
			osDelay(2);
 800344a:	2002      	movs	r0, #2
 800344c:	f008 f9cc 	bl	800b7e8 <osDelay>
			osThreadYield(); // need to ensure yield for the sensortask
 8003450:	f008 f9aa 	bl	800b7a8 <osThreadYield>
			if (abs(target_yaw - cur) < 45 ) {
 8003454:	e5bd      	b.n	8002fd2 <_ZN9AppMotion16MotionController4turnEbbbm+0x1e2>

		} while (1);

		emergency = false;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
		lmotor->halt();
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	4618      	mov	r0, r3
 8003464:	f000 f9fc 	bl	8003860 <_ZN9AppMotion5Motor4haltEv>
		rmotor->halt();
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	4618      	mov	r0, r3
 800346e:	f000 f9f7 	bl	8003860 <_ZN9AppMotion5Motor4haltEv>
	}
 8003472:	bf00      	nop
 8003474:	374c      	adds	r7, #76	@ 0x4c
 8003476:	46bd      	mov	sp, r7
 8003478:	ecbd 8b02 	vpop	{d8}
 800347c:	bd90      	pop	{r4, r7, pc}
 800347e:	bf00      	nop
 8003480:	00000000 	.word	0x00000000
 8003484:	40668000 	.word	0x40668000
 8003488:	00000000 	.word	0x00000000
 800348c:	42340000 	.word	0x42340000
 8003490:	200001fc 	.word	0x200001fc
 8003494:	66666667 	.word	0x66666667
 8003498:	3fd80000 	.word	0x3fd80000
 800349c:	3ff80000 	.word	0x3ff80000
 80034a0:	16c16c17 	.word	0x16c16c17

080034a4 <_ZN9AppMotion16MotionController13emergencyStopEv>:

	void MotionController::emergencyStop() {
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
		emergency = true;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
	}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <_ZN9AppMotion5ServoC1EP17TIM_HandleTypeDefmmmm>:

	/* SERVO LOGIC */
	Servo::Servo(TIM_HandleTypeDef *ctrl, uint32_t channel, uint32_t min,
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
 80034cc:	603b      	str	r3, [r7, #0]
			uint32_t max, uint32_t center) {
		this->htimer = ctrl;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	601a      	str	r2, [r3, #0]
		this->channel = channel;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	605a      	str	r2, [r3, #4]
		this->MIN_PWM = min;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	60da      	str	r2, [r3, #12]
		this->MAX_PWM = max;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	611a      	str	r2, [r3, #16]
		this->CTR_PWM = center;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	69fa      	ldr	r2, [r7, #28]
 80034ea:	615a      	str	r2, [r3, #20]
		HAL_TIM_PWM_Start(ctrl, channel);
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	68b8      	ldr	r0, [r7, #8]
 80034f0:	f005 fa62 	bl	80089b8 <HAL_TIM_PWM_Start>
	}
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <_ZN9AppMotion5Servo8turnLeftEv>:

	void Servo::turnLeft() {
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
		this->htimer->Instance->CCR1 = MIN_PWM;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	68d2      	ldr	r2, [r2, #12]
 8003510:	635a      	str	r2, [r3, #52]	@ 0x34
		osDelay(TURN_DELAY_MS);
 8003512:	20fa      	movs	r0, #250	@ 0xfa
 8003514:	f008 f968 	bl	800b7e8 <osDelay>

	}
 8003518:	bf00      	nop
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <_ZN9AppMotion5Servo9turnRightEv>:
	void Servo::turnRight() {
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
		this->htimer->Instance->CCR1 = MAX_PWM;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6912      	ldr	r2, [r2, #16]
 8003532:	635a      	str	r2, [r3, #52]	@ 0x34
		osDelay(TURN_DELAY_MS);
 8003534:	20fa      	movs	r0, #250	@ 0xfa
 8003536:	f008 f957 	bl	800b7e8 <osDelay>
	}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <_ZN9AppMotion5Servo9turnFrontEv>:

	void Servo::turnFront() {
 8003542:	b580      	push	{r7, lr}
 8003544:	b082      	sub	sp, #8
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
		this->htimer->Instance->CCR1 = CTR_PWM;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6952      	ldr	r2, [r2, #20]
 8003554:	635a      	str	r2, [r3, #52]	@ 0x34
		osDelay(TURN_DELAY_MS);
 8003556:	20fa      	movs	r0, #250	@ 0xfa
 8003558:	f008 f946 	bl	800b7e8 <osDelay>
	}
 800355c:	bf00      	nop
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <_ZN9AppMotion5MotorC1EP17TIM_HandleTypeDefmmm>:


	/* MOTOR LOGIC */
	Motor::Motor(TIM_HandleTypeDef *ctrl,
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
 8003570:	603b      	str	r3, [r7, #0]
			uint32_t channelA,
			uint32_t channelB,
			uint32_t max_period
	) {

		this->htimer = ctrl;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	601a      	str	r2, [r3, #0]
		this->channelA = channelA;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	605a      	str	r2, [r3, #4]
		this->channelB = channelB;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	609a      	str	r2, [r3, #8]
		this->max_period = max_period;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	60da      	str	r2, [r3, #12]
		this->cur_value = max_period;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	611a      	str	r2, [r3, #16]

		HAL_TIM_PWM_Start(ctrl, channelA);
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	68b8      	ldr	r0, [r7, #8]
 8003594:	f005 fa10 	bl	80089b8 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(ctrl, channelB);
 8003598:	6839      	ldr	r1, [r7, #0]
 800359a:	68b8      	ldr	r0, [r7, #8]
 800359c:	f005 fa0c 	bl	80089b8 <HAL_TIM_PWM_Start>
	}
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <_ZN9AppMotion5Motor8setSpeedEmb>:

	bool Motor::setSpeed(uint32_t percent, bool isFwd) {
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	4613      	mov	r3, r2
 80035b8:	71fb      	strb	r3, [r7, #7]
		if (percent > 100){
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2b64      	cmp	r3, #100	@ 0x64
 80035be:	d901      	bls.n	80035c4 <_ZN9AppMotion5Motor8setSpeedEmb+0x18>
			return false;
 80035c0:	2300      	movs	r3, #0
 80035c2:	e09d      	b.n	8003700 <_ZN9AppMotion5Motor8setSpeedEmb+0x154>
		}
		uint32_t value = this->max_period / 100 * percent;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	4a50      	ldr	r2, [pc, #320]	@ (800370c <_ZN9AppMotion5Motor8setSpeedEmb+0x160>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	095a      	lsrs	r2, r3, #5
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	fb02 f303 	mul.w	r3, r2, r3
 80035d6:	617b      	str	r3, [r7, #20]
		this->cur_value = value;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	611a      	str	r2, [r3, #16]

		if (isFwd){
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d046      	beq.n	8003672 <_ZN9AppMotion5Motor8setSpeedEmb+0xc6>
			__HAL_TIM_SetCompare(this->htimer, this->channelA, value);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d105      	bne.n	80035f8 <_ZN9AppMotion5Motor8setSpeedEmb+0x4c>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80035f6:	e018      	b.n	800362a <_ZN9AppMotion5Motor8setSpeedEmb+0x7e>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d105      	bne.n	800360c <_ZN9AppMotion5Motor8setSpeedEmb+0x60>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	639a      	str	r2, [r3, #56]	@ 0x38
 800360a:	e00e      	b.n	800362a <_ZN9AppMotion5Motor8setSpeedEmb+0x7e>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b08      	cmp	r3, #8
 8003612:	d105      	bne.n	8003620 <_ZN9AppMotion5Motor8setSpeedEmb+0x74>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800361e:	e004      	b.n	800362a <_ZN9AppMotion5Motor8setSpeedEmb+0x7e>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	641a      	str	r2, [r3, #64]	@ 0x40
			__HAL_TIM_SetCompare(this->htimer, this->channelB, 1);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d105      	bne.n	800363e <_ZN9AppMotion5Motor8setSpeedEmb+0x92>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2201      	movs	r2, #1
 800363a:	635a      	str	r2, [r3, #52]	@ 0x34
 800363c:	e05f      	b.n	80036fe <_ZN9AppMotion5Motor8setSpeedEmb+0x152>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2b04      	cmp	r3, #4
 8003644:	d105      	bne.n	8003652 <_ZN9AppMotion5Motor8setSpeedEmb+0xa6>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2201      	movs	r2, #1
 800364e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003650:	e055      	b.n	80036fe <_ZN9AppMotion5Motor8setSpeedEmb+0x152>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	2b08      	cmp	r3, #8
 8003658:	d105      	bne.n	8003666 <_ZN9AppMotion5Motor8setSpeedEmb+0xba>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2201      	movs	r2, #1
 8003662:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003664:	e04b      	b.n	80036fe <_ZN9AppMotion5Motor8setSpeedEmb+0x152>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2201      	movs	r2, #1
 800366e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003670:	e045      	b.n	80036fe <_ZN9AppMotion5Motor8setSpeedEmb+0x152>
		} else {
			__HAL_TIM_SetCompare(this->htimer, this->channelA, 1);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d105      	bne.n	8003686 <_ZN9AppMotion5Motor8setSpeedEmb+0xda>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2201      	movs	r2, #1
 8003682:	635a      	str	r2, [r3, #52]	@ 0x34
 8003684:	e018      	b.n	80036b8 <_ZN9AppMotion5Motor8setSpeedEmb+0x10c>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b04      	cmp	r3, #4
 800368c:	d105      	bne.n	800369a <_ZN9AppMotion5Motor8setSpeedEmb+0xee>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2201      	movs	r2, #1
 8003696:	639a      	str	r2, [r3, #56]	@ 0x38
 8003698:	e00e      	b.n	80036b8 <_ZN9AppMotion5Motor8setSpeedEmb+0x10c>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d105      	bne.n	80036ae <_ZN9AppMotion5Motor8setSpeedEmb+0x102>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2201      	movs	r2, #1
 80036aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80036ac:	e004      	b.n	80036b8 <_ZN9AppMotion5Motor8setSpeedEmb+0x10c>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2201      	movs	r2, #1
 80036b6:	641a      	str	r2, [r3, #64]	@ 0x40
			__HAL_TIM_SetCompare(this->htimer, this->channelB, value);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d105      	bne.n	80036cc <_ZN9AppMotion5Motor8setSpeedEmb+0x120>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80036ca:	e018      	b.n	80036fe <_ZN9AppMotion5Motor8setSpeedEmb+0x152>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d105      	bne.n	80036e0 <_ZN9AppMotion5Motor8setSpeedEmb+0x134>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80036de:	e00e      	b.n	80036fe <_ZN9AppMotion5Motor8setSpeedEmb+0x152>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d105      	bne.n	80036f4 <_ZN9AppMotion5Motor8setSpeedEmb+0x148>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80036f2:	e004      	b.n	80036fe <_ZN9AppMotion5Motor8setSpeedEmb+0x152>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	641a      	str	r2, [r3, #64]	@ 0x40
		}

		return true;
 80036fe:	2301      	movs	r3, #1
	}
 8003700:	4618      	mov	r0, r3
 8003702:	371c      	adds	r7, #28
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	51eb851f 	.word	0x51eb851f

08003710 <_ZN9AppMotion5Motor16_setDutyCycleValEmb>:

	bool Motor::_setDutyCycleVal(uint32_t dc, bool isFwd) {
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	4613      	mov	r3, r2
 800371c:	71fb      	strb	r3, [r7, #7]
		if (dc > this->max_period){
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	429a      	cmp	r2, r3
 8003726:	d901      	bls.n	800372c <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x1c>
			return false;
 8003728:	2300      	movs	r3, #0
 800372a:	e093      	b.n	8003854 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x144>
		}
		this->cur_value = dc;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	611a      	str	r2, [r3, #16]

		if (isFwd){
 8003732:	79fb      	ldrb	r3, [r7, #7]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d046      	beq.n	80037c6 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0xb6>
			__HAL_TIM_SetCompare(this->htimer, this->channelA, dc);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d105      	bne.n	800374c <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x3c>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	635a      	str	r2, [r3, #52]	@ 0x34
 800374a:	e018      	b.n	800377e <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x6e>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b04      	cmp	r3, #4
 8003752:	d105      	bne.n	8003760 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x50>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	639a      	str	r2, [r3, #56]	@ 0x38
 800375e:	e00e      	b.n	800377e <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x6e>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b08      	cmp	r3, #8
 8003766:	d105      	bne.n	8003774 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x64>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003772:	e004      	b.n	800377e <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x6e>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	641a      	str	r2, [r3, #64]	@ 0x40
			__HAL_TIM_SetCompare(this->htimer, this->channelB, 1);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d105      	bne.n	8003792 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x82>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2201      	movs	r2, #1
 800378e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003790:	e05f      	b.n	8003852 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x142>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	2b04      	cmp	r3, #4
 8003798:	d105      	bne.n	80037a6 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x96>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2201      	movs	r2, #1
 80037a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80037a4:	e055      	b.n	8003852 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x142>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d105      	bne.n	80037ba <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0xaa>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2201      	movs	r2, #1
 80037b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80037b8:	e04b      	b.n	8003852 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x142>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2201      	movs	r2, #1
 80037c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80037c4:	e045      	b.n	8003852 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x142>
		} else {
			__HAL_TIM_SetCompare(this->htimer, this->channelA, 1);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d105      	bne.n	80037da <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0xca>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2201      	movs	r2, #1
 80037d6:	635a      	str	r2, [r3, #52]	@ 0x34
 80037d8:	e018      	b.n	800380c <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0xfc>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d105      	bne.n	80037ee <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0xde>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2201      	movs	r2, #1
 80037ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80037ec:	e00e      	b.n	800380c <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0xfc>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d105      	bne.n	8003802 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0xf2>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2201      	movs	r2, #1
 80037fe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003800:	e004      	b.n	800380c <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0xfc>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2201      	movs	r2, #1
 800380a:	641a      	str	r2, [r3, #64]	@ 0x40
			__HAL_TIM_SetCompare(this->htimer, this->channelB, dc);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d105      	bne.n	8003820 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x110>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	635a      	str	r2, [r3, #52]	@ 0x34
 800381e:	e018      	b.n	8003852 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x142>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	2b04      	cmp	r3, #4
 8003826:	d105      	bne.n	8003834 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x124>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	639a      	str	r2, [r3, #56]	@ 0x38
 8003832:	e00e      	b.n	8003852 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x142>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b08      	cmp	r3, #8
 800383a:	d105      	bne.n	8003848 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x138>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003846:	e004      	b.n	8003852 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x142>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	641a      	str	r2, [r3, #64]	@ 0x40
		}

		return true;
 8003852:	2301      	movs	r3, #1
	}
 8003854:	4618      	mov	r0, r3
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <_ZN9AppMotion5Motor4haltEv>:

	void Motor::halt() {
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SET_COMPARE(this->htimer, this->channelA, 1);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d105      	bne.n	800387c <_ZN9AppMotion5Motor4haltEv+0x1c>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2201      	movs	r2, #1
 8003878:	635a      	str	r2, [r3, #52]	@ 0x34
 800387a:	e018      	b.n	80038ae <_ZN9AppMotion5Motor4haltEv+0x4e>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b04      	cmp	r3, #4
 8003882:	d105      	bne.n	8003890 <_ZN9AppMotion5Motor4haltEv+0x30>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2201      	movs	r2, #1
 800388c:	639a      	str	r2, [r3, #56]	@ 0x38
 800388e:	e00e      	b.n	80038ae <_ZN9AppMotion5Motor4haltEv+0x4e>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b08      	cmp	r3, #8
 8003896:	d105      	bne.n	80038a4 <_ZN9AppMotion5Motor4haltEv+0x44>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2201      	movs	r2, #1
 80038a0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80038a2:	e004      	b.n	80038ae <_ZN9AppMotion5Motor4haltEv+0x4e>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2201      	movs	r2, #1
 80038ac:	641a      	str	r2, [r3, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(this->htimer, this->channelB, 1);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d105      	bne.n	80038c2 <_ZN9AppMotion5Motor4haltEv+0x62>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2201      	movs	r2, #1
 80038be:	635a      	str	r2, [r3, #52]	@ 0x34
	}
 80038c0:	e018      	b.n	80038f4 <_ZN9AppMotion5Motor4haltEv+0x94>
		__HAL_TIM_SET_COMPARE(this->htimer, this->channelB, 1);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d105      	bne.n	80038d6 <_ZN9AppMotion5Motor4haltEv+0x76>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2201      	movs	r2, #1
 80038d2:	639a      	str	r2, [r3, #56]	@ 0x38
	}
 80038d4:	e00e      	b.n	80038f4 <_ZN9AppMotion5Motor4haltEv+0x94>
		__HAL_TIM_SET_COMPARE(this->htimer, this->channelB, 1);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d105      	bne.n	80038ea <_ZN9AppMotion5Motor4haltEv+0x8a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2201      	movs	r2, #1
 80038e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
 80038e8:	e004      	b.n	80038f4 <_ZN9AppMotion5Motor4haltEv+0x94>
		__HAL_TIM_SET_COMPARE(this->htimer, this->channelB, 1);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2201      	movs	r2, #1
 80038f2:	641a      	str	r2, [r3, #64]	@ 0x40
	}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <_ZN9AppMotion7EncoderC1EP17TIM_HandleTypeDefm>:
		__HAL_TIM_SetCompare(this->htimer, this->channelB, this->max_period);
	}


	/* ENCODER LOGIC */
	Encoder::Encoder(TIM_HandleTypeDef *ctrl, uint32_t channel) {
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]

		this->htimer = ctrl;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	601a      	str	r2, [r3, #0]
		this->channel = channel;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	605a      	str	r2, [r3, #4]
		HAL_TIM_Encoder_Start(ctrl, channel);
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	68b8      	ldr	r0, [r7, #8]
 800391c:	f005 fac2 	bl	8008ea4 <HAL_TIM_Encoder_Start>

	}
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <_ZN9AppMotion7Encoder8getCountEv>:

	uint32_t Encoder::getCount(void) {
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
		return (uint32_t) __HAL_TIM_GET_COUNTER(this->htimer);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	}
 800393a:	4618      	mov	r0, r3
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <_ZN9AppMotion7Encoder8getDeltaEmm>:

	uint32_t Encoder::getDelta(uint32_t ct1, uint32_t ct2) {
 8003946:	b480      	push	{r7}
 8003948:	b085      	sub	sp, #20
 800394a:	af00      	add	r7, sp, #0
 800394c:	60f8      	str	r0, [r7, #12]
 800394e:	60b9      	str	r1, [r7, #8]
 8003950:	607a      	str	r2, [r7, #4]
		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(this->htimer)) {
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	2b10      	cmp	r3, #16
 8003960:	bf0c      	ite	eq
 8003962:	2301      	moveq	r3, #1
 8003964:	2300      	movne	r3, #0
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00e      	beq.n	800398a <_ZN9AppMotion7Encoder8getDeltaEmm+0x44>
			if (ct2 <= ct1) {
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	429a      	cmp	r2, r3
 8003972:	d803      	bhi.n	800397c <_ZN9AppMotion7Encoder8getDeltaEmm+0x36>
				return ct1 - ct2;
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	e014      	b.n	80039a6 <_ZN9AppMotion7Encoder8getDeltaEmm+0x60>
			} else {
				return (65535 - ct2) + ct1;
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003986:	33ff      	adds	r3, #255	@ 0xff
 8003988:	e00d      	b.n	80039a6 <_ZN9AppMotion7Encoder8getDeltaEmm+0x60>
			}
		} else {
			if (ct2 >= ct1) {
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	429a      	cmp	r2, r3
 8003990:	d303      	bcc.n	800399a <_ZN9AppMotion7Encoder8getDeltaEmm+0x54>
				return ct2 - ct1;
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	e005      	b.n	80039a6 <_ZN9AppMotion7Encoder8getDeltaEmm+0x60>
			} else {
				return (65535 - ct1) + ct2;
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80039a4:	33ff      	adds	r3, #255	@ 0xff
			}
		}
	}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <_ZN9AppMotion16MotionController3sgnIfEEiT_>:
			template <typename T> static int sgn(T val) {
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	ed87 0a01 	vstr	s0, [r7, #4]
				return (T(0) < val) - (val < T(0));
 80039bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80039c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c8:	bfcc      	ite	gt
 80039ca:	2301      	movgt	r3, #1
 80039cc:	2300      	movle	r3, #0
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	461a      	mov	r2, r3
 80039d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80039d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039de:	bf4c      	ite	mi
 80039e0:	2301      	movmi	r3, #1
 80039e2:	2300      	movpl	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	1ad3      	subs	r3, r2, r3
			}
 80039e8:	4618      	mov	r0, r3
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <_ZN9AppParser8ListenerC1EP5u_ctx>:
	bool Processor::_signal_obstr = false;
	bool Processor::_obstr_txed = false;

	static volatile BUF_CMP_t uartRxBuf[10];
	static volatile BUF_CMP_t uartOKBuf[10];
	Listener::Listener(u_ctx *ctx) {
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
		this->ctx = ctx;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	601a      	str	r2, [r3, #0]
	}
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4618      	mov	r0, r3
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <_ZN9AppParser8ListenerD1Ev>:

	Listener::~Listener() {
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
	}
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <_ZN9AppParser8Listener6invokeEv>:
	;
	// not needed

	/*! called from ISR */
	volatile void Listener::invoke() {
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b088      	sub	sp, #32
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
		AppMessage_t msg;
		memcpy(&msg.buffer, (const BUF_CMP_t*) &uartRxBuf, 10);
 8003a30:	4a0c      	ldr	r2, [pc, #48]	@ (8003a64 <_ZN9AppParser8Listener6invokeEv+0x3c>)
 8003a32:	f107 030c 	add.w	r3, r7, #12
 8003a36:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a38:	c303      	stmia	r3!, {r0, r1}
 8003a3a:	801a      	strh	r2, [r3, #0]
		memset((BUF_CMP_t*) &uartRxBuf, 0, 10);
 8003a3c:	220a      	movs	r2, #10
 8003a3e:	2100      	movs	r1, #0
 8003a40:	4808      	ldr	r0, [pc, #32]	@ (8003a64 <_ZN9AppParser8Listener6invokeEv+0x3c>)
 8003a42:	f00c fa85 	bl	800ff50 <memset>
		osStatus_t tmp = osMessageQueuePut(
				ctx->mailbox.queue,    // queue ID
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
		osStatus_t tmp = osMessageQueuePut(
 8003a4a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003a4c:	f107 010c 	add.w	r1, r7, #12
 8003a50:	2300      	movs	r3, #0
 8003a52:	2200      	movs	r2, #0
 8003a54:	f007 ff56 	bl	800b904 <osMessageQueuePut>
 8003a58:	61f8      	str	r0, [r7, #28]
//						111.11
//						);
//
//		HAL_UART_Transmit(&huart3, (uint8_t*) sbuf, len, 10);
//		HAL_UART_Transmit(&huart3, (uint8_t *)msg.buffer, sizeof(msg.buffer), 10);
}
 8003a5a:	bf00      	nop
 8003a5c:	3720      	adds	r7, #32
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	20000438 	.word	0x20000438

08003a68 <_ZN9AppParser9ProcessorC1EP5u_ctxS2_>:

Processor::Processor(u_ctx *rx_ctx, u_ctx *tx_ctx) {
 8003a68:	b590      	push	{r4, r7, lr}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
	this->this_ctx = rx_ctx;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	601a      	str	r2, [r3, #0]
	this->o_ctx = tx_ctx;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	605a      	str	r2, [r3, #4]
	this->this_ctx->mailbox.queue = osMessageQueueNew(10, sizeof(AppMessage_t),
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681c      	ldr	r4, [r3, #0]
 8003a84:	2200      	movs	r2, #0
 8003a86:	2110      	movs	r1, #16
 8003a88:	200a      	movs	r0, #10
 8003a8a:	f007 fec8 	bl	800b81e <osMessageQueueNew>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	62a3      	str	r3, [r4, #40]	@ 0x28
	NULL);
}
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4618      	mov	r0, r3
 8003a96:	3714      	adds	r7, #20
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd90      	pop	{r4, r7, pc}

08003a9c <_ZN9AppParser9ProcessorD1Ev>:

Processor::~Processor() {
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
}
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
	...

08003ab4 <_ZN9AppParser9Processor5startEv>:
void Processor::startImpl(void *_this) // hardfaults on queue for some reason so made static
		{
	//static_cast<Processor *>(_this)->processorTask();
}

void Processor::start(void) {
 8003ab4:	b590      	push	{r4, r7, lr}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
	ctx_wrapper *wrapper_instance = new ctx_wrapper();
 8003abc:	2008      	movs	r0, #8
 8003abe:	f00a fda3 	bl	800e608 <_Znwj>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	605a      	str	r2, [r3, #4]
 8003acc:	60fb      	str	r3, [r7, #12]
	wrapper_instance->rx_ctx = this_ctx;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	601a      	str	r2, [r3, #0]
	wrapper_instance->tx_ctx = o_ctx;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	605a      	str	r2, [r3, #4]
// pass context information to the thread fn since there is some issue with making the fn a class instance.
// note that this_ctx refers to this class and o_ctx refers to the (o)ther class, i.e. the destination, MotionController
	this->this_ctx->runner = osThreadNew(
			(osThreadFunc_t) Processor::processorTask,
			wrapper_instance,
			&(this_ctx->attr));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	1d1a      	adds	r2, r3, #4
	this->this_ctx->runner = osThreadNew(
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681c      	ldr	r4, [r3, #0]
 8003ae8:	68f9      	ldr	r1, [r7, #12]
 8003aea:	4804      	ldr	r0, [pc, #16]	@ (8003afc <_ZN9AppParser9Processor5startEv+0x48>)
 8003aec:	f007 fdca 	bl	800b684 <osThreadNew>
 8003af0:	4603      	mov	r3, r0
 8003af2:	6023      	str	r3, [r4, #0]

	return;
 8003af4:	bf00      	nop
}
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd90      	pop	{r4, r7, pc}
 8003afc:	08003b01 	.word	0x08003b01

08003b00 <_ZN9AppParser9Processor13processorTaskEPv>:

void Processor::processorTask(void *pv) {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b098      	sub	sp, #96	@ 0x60
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart3, (BUF_CMP_t*) uartRxBuf, 10);
 8003b08:	220a      	movs	r2, #10
 8003b0a:	49a3      	ldr	r1, [pc, #652]	@ (8003d98 <_ZN9AppParser9Processor13processorTaskEPv+0x298>)
 8003b0c:	48a3      	ldr	r0, [pc, #652]	@ (8003d9c <_ZN9AppParser9Processor13processorTaskEPv+0x29c>)
 8003b0e:	f006 fb9a 	bl	800a246 <HAL_UART_Receive_DMA>

	ctx_wrapper *wrapper = static_cast<ctx_wrapper*>(pv);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	65bb      	str	r3, [r7, #88]	@ 0x58

	// Access rx_ctx and tx_ctx pointers from the wrapper
	u_ctx *rx_ctx = wrapper->rx_ctx;
 8003b16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	657b      	str	r3, [r7, #84]	@ 0x54
	u_ctx *tx_ctx = wrapper->tx_ctx;
 8003b1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	653b      	str	r3, [r7, #80]	@ 0x50

	for (;;) {
		is_task_alive_struct.proc = true;
 8003b22:	4b9f      	ldr	r3, [pc, #636]	@ (8003da0 <_ZN9AppParser9Processor13processorTaskEPv+0x2a0>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	701a      	strb	r2, [r3, #0]

//		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);

		osDelay(10);
 8003b28:	200a      	movs	r0, #10
 8003b2a:	f007 fe5d 	bl	800b7e8 <osDelay>
		osThreadYield();
 8003b2e:	f007 fe3b 	bl	800b7a8 <osThreadYield>
		 * enough for this purpose..
		 *
		 * Any alternative to get per-byte interrupt etc., will require rewriting of the HAL funcs
		 * or polling mechanism.
		 */
		uint32_t buf_fill = 0;
 8003b32:	2300      	movs	r3, #0
 8003b34:	64fb      	str	r3, [r7, #76]	@ 0x4c
		for (uint32_t i = 0; i < sizeof(uartRxBuf); i++) {
 8003b36:	2300      	movs	r3, #0
 8003b38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b3a:	e01c      	b.n	8003b76 <_ZN9AppParser9Processor13processorTaskEPv+0x76>
			if (uartRxBuf[i] != 0) {
 8003b3c:	4a96      	ldr	r2, [pc, #600]	@ (8003d98 <_ZN9AppParser9Processor13processorTaskEPv+0x298>)
 8003b3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b40:	4413      	add	r3, r2
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	bf14      	ite	ne
 8003b4a:	2301      	movne	r3, #1
 8003b4c:	2300      	moveq	r3, #0
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00d      	beq.n	8003b70 <_ZN9AppParser9Processor13processorTaskEPv+0x70>
				HAL_UART_DMAStop(&huart3);
 8003b54:	4891      	ldr	r0, [pc, #580]	@ (8003d9c <_ZN9AppParser9Processor13processorTaskEPv+0x29c>)
 8003b56:	f006 fba6 	bl	800a2a6 <HAL_UART_DMAStop>
				HAL_UART_Receive_DMA(&huart3, (BUF_CMP_t*) uartRxBuf, 10);
 8003b5a:	220a      	movs	r2, #10
 8003b5c:	498e      	ldr	r1, [pc, #568]	@ (8003d98 <_ZN9AppParser9Processor13processorTaskEPv+0x298>)
 8003b5e:	488f      	ldr	r0, [pc, #572]	@ (8003d9c <_ZN9AppParser9Processor13processorTaskEPv+0x29c>)
 8003b60:	f006 fb71 	bl	800a246 <HAL_UART_Receive_DMA>
				memset((BUF_CMP_t*) &uartRxBuf, 0, 10);
 8003b64:	220a      	movs	r2, #10
 8003b66:	2100      	movs	r1, #0
 8003b68:	488b      	ldr	r0, [pc, #556]	@ (8003d98 <_ZN9AppParser9Processor13processorTaskEPv+0x298>)
 8003b6a:	f00c f9f1 	bl	800ff50 <memset>
				break;
 8003b6e:	e005      	b.n	8003b7c <_ZN9AppParser9Processor13processorTaskEPv+0x7c>
		for (uint32_t i = 0; i < sizeof(uartRxBuf); i++) {
 8003b70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b72:	3301      	adds	r3, #1
 8003b74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b78:	2b09      	cmp	r3, #9
 8003b7a:	d9df      	bls.n	8003b3c <_ZN9AppParser9Processor13processorTaskEPv+0x3c>
			}
		}

		/* end buffer cleaning algorithm */
		sensor_data.ql = osMessageQueueGetCount(rx_ctx->mailbox.queue);
 8003b7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b80:	4618      	mov	r0, r3
 8003b82:	f007 ff7d 	bl	800ba80 <osMessageQueueGetCount>
 8003b86:	4603      	mov	r3, r0
 8003b88:	4a86      	ldr	r2, [pc, #536]	@ (8003da4 <_ZN9AppParser9Processor13processorTaskEPv+0x2a4>)
 8003b8a:	6253      	str	r3, [r2, #36]	@ 0x24
		if (uxQueueMessagesWaiting((QueueHandle_t) rx_ctx->mailbox.queue)) {
 8003b8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b90:	4618      	mov	r0, r3
 8003b92:	f008 fce9 	bl	800c568 <uxQueueMessagesWaiting>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	bf14      	ite	ne
 8003b9c:	2301      	movne	r3, #1
 8003b9e:	2300      	moveq	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 81c6 	beq.w	8003f34 <_ZN9AppParser9Processor13processorTaskEPv+0x434>

			AppMessage_t msg;
			osMessageQueueGet(
 8003ba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003baa:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003bac:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003bb0:	2305      	movs	r3, #5
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f007 ff06 	bl	800b9c4 <osMessageQueueGet>
					0,                      // optional pointer
					5                       // timeout
				);

			/* DATA VALIDATION */
			if (!isEq<BUF_CMP_t>(START_CHAR, msg.buffer[0])) {
 8003bb8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	487a      	ldr	r0, [pc, #488]	@ (8003da8 <_ZN9AppParser9Processor13processorTaskEPv+0x2a8>)
 8003bc0:	f000 fbc8 	bl	8004354 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f083 0301 	eor.w	r3, r3, #1
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d005      	beq.n	8003bdc <_ZN9AppParser9Processor13processorTaskEPv+0xdc>
				HAL_UART_Transmit(&huart3, (BUF_CMP_t*) nack, sizeof(nack), 10);
 8003bd0:	230a      	movs	r3, #10
 8003bd2:	2204      	movs	r2, #4
 8003bd4:	4975      	ldr	r1, [pc, #468]	@ (8003dac <_ZN9AppParser9Processor13processorTaskEPv+0x2ac>)
 8003bd6:	4871      	ldr	r0, [pc, #452]	@ (8003d9c <_ZN9AppParser9Processor13processorTaskEPv+0x29c>)
 8003bd8:	f006 faa3 	bl	800a122 <HAL_UART_Transmit>
			}
			if (!isEq<BUF_CMP_t>(END_CHAR, msg.buffer[9])) {
 8003bdc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003be0:	3309      	adds	r3, #9
 8003be2:	4619      	mov	r1, r3
 8003be4:	4872      	ldr	r0, [pc, #456]	@ (8003db0 <_ZN9AppParser9Processor13processorTaskEPv+0x2b0>)
 8003be6:	f000 fbb5 	bl	8004354 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8003bea:	4603      	mov	r3, r0
 8003bec:	f083 0301 	eor.w	r3, r3, #1
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d005      	beq.n	8003c02 <_ZN9AppParser9Processor13processorTaskEPv+0x102>
				HAL_UART_Transmit(&huart3, (BUF_CMP_t*) nack, sizeof(nack), 10);
 8003bf6:	230a      	movs	r3, #10
 8003bf8:	2204      	movs	r2, #4
 8003bfa:	496c      	ldr	r1, [pc, #432]	@ (8003dac <_ZN9AppParser9Processor13processorTaskEPv+0x2ac>)
 8003bfc:	4867      	ldr	r0, [pc, #412]	@ (8003d9c <_ZN9AppParser9Processor13processorTaskEPv+0x29c>)
 8003bfe:	f006 fa90 	bl	800a122 <HAL_UART_Transmit>
			}
			/******************/

			// do request stuff
			if (isEq<BUF_CMP_t>(REQ_CHAR, msg.buffer[1])) {
 8003c02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c06:	3301      	adds	r3, #1
 8003c08:	4619      	mov	r1, r3
 8003c0a:	486a      	ldr	r0, [pc, #424]	@ (8003db4 <_ZN9AppParser9Processor13processorTaskEPv+0x2b4>)
 8003c0c:	f000 fba2 	bl	8004354 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d045      	beq.n	8003ca2 <_ZN9AppParser9Processor13processorTaskEPv+0x1a2>
				if (isEq(SENSOR_CHAR, msg.buffer[2])) {
 8003c16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c1a:	3302      	adds	r3, #2
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4866      	ldr	r0, [pc, #408]	@ (8003db8 <_ZN9AppParser9Processor13processorTaskEPv+0x2b8>)
 8003c20:	f000 fb98 	bl	8004354 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d005      	beq.n	8003c36 <_ZN9AppParser9Processor13processorTaskEPv+0x136>
					returnSensorRequestCmd(msg.buffer[3]);
 8003c2a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 f9ae 	bl	8003f90 <_ZN9AppParser9Processor22returnSensorRequestCmdEh>
 8003c34:	e178      	b.n	8003f28 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
				}

				else if (isEq(AUX_CHAR, msg.buffer[2])) {
 8003c36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c3a:	3302      	adds	r3, #2
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	485f      	ldr	r0, [pc, #380]	@ (8003dbc <_ZN9AppParser9Processor13processorTaskEPv+0x2bc>)
 8003c40:	f000 fb88 	bl	8004354 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 816e 	beq.w	8003f28 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
					if (isEq(LAST_HALT_CHAR, msg.buffer[3])) {
 8003c4c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c50:	3303      	adds	r3, #3
 8003c52:	4619      	mov	r1, r3
 8003c54:	485a      	ldr	r0, [pc, #360]	@ (8003dc0 <_ZN9AppParser9Processor13processorTaskEPv+0x2c0>)
 8003c56:	f000 fb7d 	bl	8004354 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 8163 	beq.w	8003f28 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
						uint8_t tx_buf[25] = { 0 };
 8003c62:	f107 030c 	add.w	r3, r7, #12
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	605a      	str	r2, [r3, #4]
 8003c6c:	609a      	str	r2, [r3, #8]
 8003c6e:	60da      	str	r2, [r3, #12]
 8003c70:	611a      	str	r2, [r3, #16]
 8003c72:	615a      	str	r2, [r3, #20]
 8003c74:	761a      	strb	r2, [r3, #24]
						snprintf((char*) &tx_buf, sizeof(tx_buf), "%ld",
 8003c76:	4b4b      	ldr	r3, [pc, #300]	@ (8003da4 <_ZN9AppParser9Processor13processorTaskEPv+0x2a4>)
 8003c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c7a:	f107 000c 	add.w	r0, r7, #12
 8003c7e:	4a51      	ldr	r2, [pc, #324]	@ (8003dc4 <_ZN9AppParser9Processor13processorTaskEPv+0x2c4>)
 8003c80:	2119      	movs	r1, #25
 8003c82:	f00c f835 	bl	800fcf0 <sniprintf>
										sensor_data.last_halt_val);
								HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 8003c86:	f107 030c 	add.w	r3, r7, #12
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fc faf0 	bl	8000270 <strlen>
 8003c90:	4603      	mov	r3, r0
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	f107 010c 	add.w	r1, r7, #12
 8003c98:	230a      	movs	r3, #10
 8003c9a:	4840      	ldr	r0, [pc, #256]	@ (8003d9c <_ZN9AppParser9Processor13processorTaskEPv+0x29c>)
 8003c9c:	f006 fa41 	bl	800a122 <HAL_UART_Transmit>
 8003ca0:	e142      	b.n	8003f28 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
										10);
					}
				}

			} else if (isEq<BUF_CMP_t>(CMD_CHAR, msg.buffer[1])) {
 8003ca2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4847      	ldr	r0, [pc, #284]	@ (8003dc8 <_ZN9AppParser9Processor13processorTaskEPv+0x2c8>)
 8003cac:	f000 fb52 	bl	8004354 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 8130 	beq.w	8003f18 <_ZN9AppParser9Processor13processorTaskEPv+0x418>
				// do command stuff

				switch (msg.buffer[2]) {
 8003cb8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003cbc:	2b73      	cmp	r3, #115	@ 0x73
 8003cbe:	d03e      	beq.n	8003d3e <_ZN9AppParser9Processor13processorTaskEPv+0x23e>
 8003cc0:	2b73      	cmp	r3, #115	@ 0x73
 8003cc2:	f300 8131 	bgt.w	8003f28 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
 8003cc6:	2b61      	cmp	r3, #97	@ 0x61
 8003cc8:	f000 809c 	beq.w	8003e04 <_ZN9AppParser9Processor13processorTaskEPv+0x304>
 8003ccc:	2b6d      	cmp	r3, #109	@ 0x6d
 8003cce:	f040 812b 	bne.w	8003f28 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
				case MOTOR_CHAR: {
					if (isEq(HALT_CHAR, msg.buffer[3])) {
 8003cd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003cd6:	3303      	adds	r3, #3
 8003cd8:	4619      	mov	r1, r3
 8003cda:	483c      	ldr	r0, [pc, #240]	@ (8003dcc <_ZN9AppParser9Processor13processorTaskEPv+0x2cc>)
 8003cdc:	f000 fb3a 	bl	8004354 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00d      	beq.n	8003d02 <_ZN9AppParser9Processor13processorTaskEPv+0x202>
						_ext_sig_halt();
 8003ce6:	f7fe faeb 	bl	80022c0 <_ext_sig_halt>
						osMessageQueueReset(rx_ctx->mailbox.queue); // remove all movement from queue such that it works async
 8003cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f007 fee6 	bl	800bac0 <osMessageQueueReset>
						HAL_UART_Transmit(&huart3, (BUF_CMP_t*) ack, sizeof(ack), 10);
 8003cf4:	230a      	movs	r3, #10
 8003cf6:	2204      	movs	r2, #4
 8003cf8:	4935      	ldr	r1, [pc, #212]	@ (8003dd0 <_ZN9AppParser9Processor13processorTaskEPv+0x2d0>)
 8003cfa:	4828      	ldr	r0, [pc, #160]	@ (8003d9c <_ZN9AppParser9Processor13processorTaskEPv+0x29c>)
 8003cfc:	f006 fa11 	bl	800a122 <HAL_UART_Transmit>
						break;
 8003d00:	e112      	b.n	8003f28 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
					}
					MOTION_PKT_t *pkt = getMotionCmdFromBytes(
 8003d02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 fa68 	bl	80041dc <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh>
 8003d0c:	6478      	str	r0, [r7, #68]	@ 0x44
							(uint8_t*) &msg.buffer);
					if (pkt == NULL) {
 8003d0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d106      	bne.n	8003d22 <_ZN9AppParser9Processor13processorTaskEPv+0x222>
						HAL_UART_Transmit(&huart3, (BUF_CMP_t*) nack, sizeof(nack), 10);
 8003d14:	230a      	movs	r3, #10
 8003d16:	2204      	movs	r2, #4
 8003d18:	4924      	ldr	r1, [pc, #144]	@ (8003dac <_ZN9AppParser9Processor13processorTaskEPv+0x2ac>)
 8003d1a:	4820      	ldr	r0, [pc, #128]	@ (8003d9c <_ZN9AppParser9Processor13processorTaskEPv+0x29c>)
 8003d1c:	f006 fa01 	bl	800a122 <HAL_UART_Transmit>
						break;
 8003d20:	e102      	b.n	8003f28 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
					}

					osMessageQueuePut(tx_ctx->mailbox.queue, pkt, 0, 0);
 8003d22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d24:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003d26:	2300      	movs	r3, #0
 8003d28:	2200      	movs	r2, #0
 8003d2a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003d2c:	f007 fdea 	bl	800b904 <osMessageQueuePut>
					HAL_UART_Transmit(&huart3, (BUF_CMP_t*) ack, sizeof(ack),
 8003d30:	230a      	movs	r3, #10
 8003d32:	2204      	movs	r2, #4
 8003d34:	4926      	ldr	r1, [pc, #152]	@ (8003dd0 <_ZN9AppParser9Processor13processorTaskEPv+0x2d0>)
 8003d36:	4819      	ldr	r0, [pc, #100]	@ (8003d9c <_ZN9AppParser9Processor13processorTaskEPv+0x29c>)
 8003d38:	f006 f9f3 	bl	800a122 <HAL_UART_Transmit>
							10);
					break;
 8003d3c:	e0f4      	b.n	8003f28 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
				}
				case SENSOR_CHAR: {
					uint32_t val = strtol((const char*) &msg.buffer[4], NULL,
 8003d3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003d42:	3304      	adds	r3, #4
 8003d44:	220a      	movs	r2, #10
 8003d46:	2100      	movs	r1, #0
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f00b fa51 	bl	800f1f0 <strtol>
 8003d4e:	4603      	mov	r3, r0
							10);
 8003d50:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (val == 0)
 8003d52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 80e6 	beq.w	8003f26 <_ZN9AppParser9Processor13processorTaskEPv+0x426>
						break;

					switch (msg.buffer[3]) {
 8003d5a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003d5e:	2b65      	cmp	r3, #101	@ 0x65
 8003d60:	d038      	beq.n	8003dd4 <_ZN9AppParser9Processor13processorTaskEPv+0x2d4>
 8003d62:	2b77      	cmp	r3, #119	@ 0x77
 8003d64:	d14e      	bne.n	8003e04 <_ZN9AppParser9Processor13processorTaskEPv+0x304>

					case IR_L_CHAR: {
						sensor_data.ir_dist_th_L = (float) val;
 8003d66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d68:	ee07 3a90 	vmov	s15, r3
 8003d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d70:	4b0c      	ldr	r3, [pc, #48]	@ (8003da4 <_ZN9AppParser9Processor13processorTaskEPv+0x2a4>)
 8003d72:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
						if (val == 999)
 8003d76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d78:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d103      	bne.n	8003d88 <_ZN9AppParser9Processor13processorTaskEPv+0x288>
							sensor_data.ir_dist_th_L = 0;
 8003d80:	4b08      	ldr	r3, [pc, #32]	@ (8003da4 <_ZN9AppParser9Processor13processorTaskEPv+0x2a4>)
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	62da      	str	r2, [r3, #44]	@ 0x2c
						HAL_UART_Transmit(&huart3, (BUF_CMP_t*) ack,
 8003d88:	230a      	movs	r3, #10
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	4910      	ldr	r1, [pc, #64]	@ (8003dd0 <_ZN9AppParser9Processor13processorTaskEPv+0x2d0>)
 8003d8e:	4803      	ldr	r0, [pc, #12]	@ (8003d9c <_ZN9AppParser9Processor13processorTaskEPv+0x29c>)
 8003d90:	f006 f9c7 	bl	800a122 <HAL_UART_Transmit>
								sizeof(ack), 10);
						break;
 8003d94:	e036      	b.n	8003e04 <_ZN9AppParser9Processor13processorTaskEPv+0x304>
 8003d96:	bf00      	nop
 8003d98:	20000438 	.word	0x20000438
 8003d9c:	200006f8 	.word	0x200006f8
 8003da0:	20000240 	.word	0x20000240
 8003da4:	200001fc 	.word	0x200001fc
 8003da8:	08012024 	.word	0x08012024
 8003dac:	08011f84 	.word	0x08011f84
 8003db0:	08012032 	.word	0x08012032
 8003db4:	08012026 	.word	0x08012026
 8003db8:	08012027 	.word	0x08012027
 8003dbc:	08012028 	.word	0x08012028
 8003dc0:	0801202e 	.word	0x0801202e
 8003dc4:	08011f94 	.word	0x08011f94
 8003dc8:	08012025 	.word	0x08012025
 8003dcc:	0801202b 	.word	0x0801202b
 8003dd0:	08011f80 	.word	0x08011f80
					}
					case IR_R_CHAR: {
						sensor_data.ir_dist_th_R = (float) val;
 8003dd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dd6:	ee07 3a90 	vmov	s15, r3
 8003dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dde:	4b60      	ldr	r3, [pc, #384]	@ (8003f60 <_ZN9AppParser9Processor13processorTaskEPv+0x460>)
 8003de0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
						if (val == 999)
 8003de4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003de6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d103      	bne.n	8003df6 <_ZN9AppParser9Processor13processorTaskEPv+0x2f6>
							sensor_data.ir_dist_th_R = 0;
 8003dee:	4b5c      	ldr	r3, [pc, #368]	@ (8003f60 <_ZN9AppParser9Processor13processorTaskEPv+0x460>)
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	631a      	str	r2, [r3, #48]	@ 0x30
						HAL_UART_Transmit(&huart3, (BUF_CMP_t*) ack,
 8003df6:	230a      	movs	r3, #10
 8003df8:	2204      	movs	r2, #4
 8003dfa:	495a      	ldr	r1, [pc, #360]	@ (8003f64 <_ZN9AppParser9Processor13processorTaskEPv+0x464>)
 8003dfc:	485a      	ldr	r0, [pc, #360]	@ (8003f68 <_ZN9AppParser9Processor13processorTaskEPv+0x468>)
 8003dfe:	f006 f990 	bl	800a122 <HAL_UART_Transmit>
								sizeof(ack), 10);
						break;
 8003e02:	bf00      	nop

					}

				}
				case AUX_CHAR: {
					if (isEq(T2_180R_CHAR, msg.buffer[3])) {
 8003e04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003e08:	3303      	adds	r3, #3
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	4857      	ldr	r0, [pc, #348]	@ (8003f6c <_ZN9AppParser9Processor13processorTaskEPv+0x46c>)
 8003e0e:	f000 faa1 	bl	8004354 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d023      	beq.n	8003e60 <_ZN9AppParser9Processor13processorTaskEPv+0x360>
						MOTION_PKT_t *pkt = new MOTION_PKT_t();
 8003e18:	200c      	movs	r0, #12
 8003e1a:	f00a fbf5 	bl	800e608 <_Znwj>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	4619      	mov	r1, r3
 8003e22:	460a      	mov	r2, r1
 8003e24:	2300      	movs	r3, #0
 8003e26:	6013      	str	r3, [r2, #0]
 8003e28:	6053      	str	r3, [r2, #4]
 8003e2a:	6093      	str	r3, [r2, #8]
 8003e2c:	63b9      	str	r1, [r7, #56]	@ 0x38
						pkt->turn_opt = isEq(LEFT_CHAR, msg.buffer[4]);
 8003e2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003e32:	3304      	adds	r3, #4
 8003e34:	4619      	mov	r1, r3
 8003e36:	484e      	ldr	r0, [pc, #312]	@ (8003f70 <_ZN9AppParser9Processor13processorTaskEPv+0x470>)
 8003e38:	f000 fa8c 	bl	8004354 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	461a      	mov	r2, r3
 8003e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e42:	725a      	strb	r2, [r3, #9]
						osMessageQueuePut(tx_ctx->mailbox.queue, pkt, 0, 0);
 8003e44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e46:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003e48:	2300      	movs	r3, #0
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003e4e:	f007 fd59 	bl	800b904 <osMessageQueuePut>
						HAL_UART_Transmit(&huart3, (BUF_CMP_t*) ack,
 8003e52:	230a      	movs	r3, #10
 8003e54:	2204      	movs	r2, #4
 8003e56:	4943      	ldr	r1, [pc, #268]	@ (8003f64 <_ZN9AppParser9Processor13processorTaskEPv+0x464>)
 8003e58:	4843      	ldr	r0, [pc, #268]	@ (8003f68 <_ZN9AppParser9Processor13processorTaskEPv+0x468>)
 8003e5a:	f006 f962 	bl	800a122 <HAL_UART_Transmit>
 8003e5e:	e063      	b.n	8003f28 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
								sizeof(ack), 10);
					} else if (isEq(T2_90R_CHAR, msg.buffer[3])) {
 8003e60:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003e64:	3303      	adds	r3, #3
 8003e66:	4619      	mov	r1, r3
 8003e68:	4842      	ldr	r0, [pc, #264]	@ (8003f74 <_ZN9AppParser9Processor13processorTaskEPv+0x474>)
 8003e6a:	f000 fa73 	bl	8004354 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d023      	beq.n	8003ebc <_ZN9AppParser9Processor13processorTaskEPv+0x3bc>
						MOTION_PKT_t *pkt = new MOTION_PKT_t();
 8003e74:	200c      	movs	r0, #12
 8003e76:	f00a fbc7 	bl	800e608 <_Znwj>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	460a      	mov	r2, r1
 8003e80:	2300      	movs	r3, #0
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	6053      	str	r3, [r2, #4]
 8003e86:	6093      	str	r3, [r2, #8]
 8003e88:	63f9      	str	r1, [r7, #60]	@ 0x3c
						pkt->turn_opt = isEq(LEFT_CHAR, msg.buffer[4]);
 8003e8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003e8e:	3304      	adds	r3, #4
 8003e90:	4619      	mov	r1, r3
 8003e92:	4837      	ldr	r0, [pc, #220]	@ (8003f70 <_ZN9AppParser9Processor13processorTaskEPv+0x470>)
 8003e94:	f000 fa5e 	bl	8004354 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e9e:	725a      	strb	r2, [r3, #9]
						osMessageQueuePut(tx_ctx->mailbox.queue, pkt, 0, 0);
 8003ea0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ea2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003eaa:	f007 fd2b 	bl	800b904 <osMessageQueuePut>
						HAL_UART_Transmit(&huart3, (BUF_CMP_t*) ack,
 8003eae:	230a      	movs	r3, #10
 8003eb0:	2204      	movs	r2, #4
 8003eb2:	492c      	ldr	r1, [pc, #176]	@ (8003f64 <_ZN9AppParser9Processor13processorTaskEPv+0x464>)
 8003eb4:	482c      	ldr	r0, [pc, #176]	@ (8003f68 <_ZN9AppParser9Processor13processorTaskEPv+0x468>)
 8003eb6:	f006 f934 	bl	800a122 <HAL_UART_Transmit>
 8003eba:	e035      	b.n	8003f28 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
								sizeof(ack), 10);
					}
					else if (isEq(T2_O1_CHAR, msg.buffer[3])) {
 8003ebc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ec0:	3303      	adds	r3, #3
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	482c      	ldr	r0, [pc, #176]	@ (8003f78 <_ZN9AppParser9Processor13processorTaskEPv+0x478>)
 8003ec6:	f000 fa45 	bl	8004354 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d02b      	beq.n	8003f28 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
						MOTION_PKT_t *pkt = new MOTION_PKT_t();
 8003ed0:	200c      	movs	r0, #12
 8003ed2:	f00a fb99 	bl	800e608 <_Znwj>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	4619      	mov	r1, r3
 8003eda:	460a      	mov	r2, r1
 8003edc:	2300      	movs	r3, #0
 8003ede:	6013      	str	r3, [r2, #0]
 8003ee0:	6053      	str	r3, [r2, #4]
 8003ee2:	6093      	str	r3, [r2, #8]
 8003ee4:	6439      	str	r1, [r7, #64]	@ 0x40
						pkt->turn_opt = isEq(LEFT_CHAR, msg.buffer[4]);
 8003ee6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003eea:	3304      	adds	r3, #4
 8003eec:	4619      	mov	r1, r3
 8003eee:	4820      	ldr	r0, [pc, #128]	@ (8003f70 <_ZN9AppParser9Processor13processorTaskEPv+0x470>)
 8003ef0:	f000 fa30 	bl	8004354 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003efa:	725a      	strb	r2, [r3, #9]
						osMessageQueuePut(tx_ctx->mailbox.queue, pkt, 0, 0);
 8003efc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003efe:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003f00:	2300      	movs	r3, #0
 8003f02:	2200      	movs	r2, #0
 8003f04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f06:	f007 fcfd 	bl	800b904 <osMessageQueuePut>
						HAL_UART_Transmit(&huart3, (BUF_CMP_t*) ack,
 8003f0a:	230a      	movs	r3, #10
 8003f0c:	2204      	movs	r2, #4
 8003f0e:	4915      	ldr	r1, [pc, #84]	@ (8003f64 <_ZN9AppParser9Processor13processorTaskEPv+0x464>)
 8003f10:	4815      	ldr	r0, [pc, #84]	@ (8003f68 <_ZN9AppParser9Processor13processorTaskEPv+0x468>)
 8003f12:	f006 f906 	bl	800a122 <HAL_UART_Transmit>
 8003f16:	e007      	b.n	8003f28 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
				default: {
					// something went wrong..
				}
				}
			} else {
				HAL_UART_Transmit(&huart3, (BUF_CMP_t*) nack, sizeof(nack), 10);
 8003f18:	230a      	movs	r3, #10
 8003f1a:	2204      	movs	r2, #4
 8003f1c:	4917      	ldr	r1, [pc, #92]	@ (8003f7c <_ZN9AppParser9Processor13processorTaskEPv+0x47c>)
 8003f1e:	4812      	ldr	r0, [pc, #72]	@ (8003f68 <_ZN9AppParser9Processor13processorTaskEPv+0x468>)
 8003f20:	f006 f8ff 	bl	800a122 <HAL_UART_Transmit>
 8003f24:	e000      	b.n	8003f28 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
						break;
 8003f26:	bf00      	nop
			}

			HAL_UART_Receive_DMA(&huart3, (BUF_CMP_t*) uartRxBuf, 10); // re-enable DMA buf for rx
 8003f28:	220a      	movs	r2, #10
 8003f2a:	4915      	ldr	r1, [pc, #84]	@ (8003f80 <_ZN9AppParser9Processor13processorTaskEPv+0x480>)
 8003f2c:	480e      	ldr	r0, [pc, #56]	@ (8003f68 <_ZN9AppParser9Processor13processorTaskEPv+0x468>)
 8003f2e:	f006 f98a 	bl	800a246 <HAL_UART_Receive_DMA>
 8003f32:	e5f6      	b.n	8003b22 <_ZN9AppParser9Processor13processorTaskEPv+0x22>
		} else if (_signal_obstr) // specifically lower priority than RX
 8003f34:	4b13      	ldr	r3, [pc, #76]	@ (8003f84 <_ZN9AppParser9Processor13processorTaskEPv+0x484>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f43f adf2 	beq.w	8003b22 <_ZN9AppParser9Processor13processorTaskEPv+0x22>
		{
			if (!_obstr_txed)
 8003f3e:	4b12      	ldr	r3, [pc, #72]	@ (8003f88 <_ZN9AppParser9Processor13processorTaskEPv+0x488>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	f083 0301 	eor.w	r3, r3, #1
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d005      	beq.n	8003f58 <_ZN9AppParser9Processor13processorTaskEPv+0x458>
				HAL_UART_Transmit(&huart3, (BUF_CMP_t*) obstr, sizeof(obstr), 10);
 8003f4c:	230a      	movs	r3, #10
 8003f4e:	2204      	movs	r2, #4
 8003f50:	490e      	ldr	r1, [pc, #56]	@ (8003f8c <_ZN9AppParser9Processor13processorTaskEPv+0x48c>)
 8003f52:	4805      	ldr	r0, [pc, #20]	@ (8003f68 <_ZN9AppParser9Processor13processorTaskEPv+0x468>)
 8003f54:	f006 f8e5 	bl	800a122 <HAL_UART_Transmit>
			_obstr_txed = true;
 8003f58:	4b0b      	ldr	r3, [pc, #44]	@ (8003f88 <_ZN9AppParser9Processor13processorTaskEPv+0x488>)
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	701a      	strb	r2, [r3, #0]
		}
	}
 8003f5e:	e5e0      	b.n	8003b22 <_ZN9AppParser9Processor13processorTaskEPv+0x22>
 8003f60:	200001fc 	.word	0x200001fc
 8003f64:	08011f80 	.word	0x08011f80
 8003f68:	200006f8 	.word	0x200006f8
 8003f6c:	0801202f 	.word	0x0801202f
 8003f70:	0801202a 	.word	0x0801202a
 8003f74:	08012030 	.word	0x08012030
 8003f78:	08012031 	.word	0x08012031
 8003f7c:	08011f84 	.word	0x08011f84
 8003f80:	20000438 	.word	0x20000438
 8003f84:	20000434 	.word	0x20000434
 8003f88:	20000435 	.word	0x20000435
 8003f8c:	08011f8c 	.word	0x08011f8c

08003f90 <_ZN9AppParser9Processor22returnSensorRequestCmdEh>:

}

void Processor::returnSensorRequestCmd(BUF_CMP_t id) {
 8003f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f94:	b092      	sub	sp, #72	@ 0x48
 8003f96:	af08      	add	r7, sp, #32
 8003f98:	4603      	mov	r3, r0
 8003f9a:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buf[25] = { 0 };
 8003f9c:	f107 030c 	add.w	r3, r7, #12
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	605a      	str	r2, [r3, #4]
 8003fa6:	609a      	str	r2, [r3, #8]
 8003fa8:	60da      	str	r2, [r3, #12]
 8003faa:	611a      	str	r2, [r3, #16]
 8003fac:	615a      	str	r2, [r3, #20]
 8003fae:	761a      	strb	r2, [r3, #24]

	switch (id) {
 8003fb0:	79fb      	ldrb	r3, [r7, #7]
 8003fb2:	3b65      	subs	r3, #101	@ 0x65
 8003fb4:	2b14      	cmp	r3, #20
 8003fb6:	f200 80fb 	bhi.w	80041b0 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x220>
 8003fba:	a201      	add	r2, pc, #4	@ (adr r2, 8003fc0 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x30>)
 8003fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc0:	0800404f 	.word	0x0800404f
 8003fc4:	080041b1 	.word	0x080041b1
 8003fc8:	080040c3 	.word	0x080040c3
 8003fcc:	080041b1 	.word	0x080041b1
 8003fd0:	080041b1 	.word	0x080041b1
 8003fd4:	080041b1 	.word	0x080041b1
 8003fd8:	08004139 	.word	0x08004139
 8003fdc:	080041b1 	.word	0x080041b1
 8003fe0:	080041b1 	.word	0x080041b1
 8003fe4:	080041b1 	.word	0x080041b1
 8003fe8:	080041b1 	.word	0x080041b1
 8003fec:	080041b1 	.word	0x080041b1
 8003ff0:	080041b1 	.word	0x080041b1
 8003ff4:	080041b1 	.word	0x080041b1
 8003ff8:	080041b1 	.word	0x080041b1
 8003ffc:	080041b1 	.word	0x080041b1
 8004000:	08004089 	.word	0x08004089
 8004004:	080041b1 	.word	0x080041b1
 8004008:	08004015 	.word	0x08004015
 800400c:	080041b1 	.word	0x080041b1
 8004010:	080040ff 	.word	0x080040ff
	case IR_L_CHAR: {
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
				sensor_data.ir_distL);
 8004014:	4b6c      	ldr	r3, [pc, #432]	@ (80041c8 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x238>)
 8004016:	685b      	ldr	r3, [r3, #4]
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
 8004018:	4618      	mov	r0, r3
 800401a:	f7fc fa95 	bl	8000548 <__aeabi_f2d>
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	f107 000c 	add.w	r0, r7, #12
 8004026:	e9cd 2300 	strd	r2, r3, [sp]
 800402a:	4a68      	ldr	r2, [pc, #416]	@ (80041cc <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 800402c:	2119      	movs	r1, #25
 800402e:	f00b fe5f 	bl	800fcf0 <sniprintf>
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 8004032:	f107 030c 	add.w	r3, r7, #12
 8004036:	4618      	mov	r0, r3
 8004038:	f7fc f91a 	bl	8000270 <strlen>
 800403c:	4603      	mov	r3, r0
 800403e:	b29a      	uxth	r2, r3
 8004040:	f107 010c 	add.w	r1, r7, #12
 8004044:	230a      	movs	r3, #10
 8004046:	4862      	ldr	r0, [pc, #392]	@ (80041d0 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x240>)
 8004048:	f006 f86b 	bl	800a122 <HAL_UART_Transmit>
				10);
		break;
 800404c:	e0b7      	b.n	80041be <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x22e>
	}
	case IR_R_CHAR: {
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
				sensor_data.ir_distR);
 800404e:	4b5e      	ldr	r3, [pc, #376]	@ (80041c8 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x238>)
 8004050:	689b      	ldr	r3, [r3, #8]
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
 8004052:	4618      	mov	r0, r3
 8004054:	f7fc fa78 	bl	8000548 <__aeabi_f2d>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	f107 000c 	add.w	r0, r7, #12
 8004060:	e9cd 2300 	strd	r2, r3, [sp]
 8004064:	4a59      	ldr	r2, [pc, #356]	@ (80041cc <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 8004066:	2119      	movs	r1, #25
 8004068:	f00b fe42 	bl	800fcf0 <sniprintf>
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 800406c:	f107 030c 	add.w	r3, r7, #12
 8004070:	4618      	mov	r0, r3
 8004072:	f7fc f8fd 	bl	8000270 <strlen>
 8004076:	4603      	mov	r3, r0
 8004078:	b29a      	uxth	r2, r3
 800407a:	f107 010c 	add.w	r1, r7, #12
 800407e:	230a      	movs	r3, #10
 8004080:	4853      	ldr	r0, [pc, #332]	@ (80041d0 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x240>)
 8004082:	f006 f84e 	bl	800a122 <HAL_UART_Transmit>
				10);
		break;
 8004086:	e09a      	b.n	80041be <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x22e>
	}
	case USOUND_CHAR: {
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
				sensor_data.usonic_dist);
 8004088:	4b4f      	ldr	r3, [pc, #316]	@ (80041c8 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x238>)
 800408a:	68db      	ldr	r3, [r3, #12]
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
 800408c:	4618      	mov	r0, r3
 800408e:	f7fc fa5b 	bl	8000548 <__aeabi_f2d>
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	f107 000c 	add.w	r0, r7, #12
 800409a:	e9cd 2300 	strd	r2, r3, [sp]
 800409e:	4a4b      	ldr	r2, [pc, #300]	@ (80041cc <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 80040a0:	2119      	movs	r1, #25
 80040a2:	f00b fe25 	bl	800fcf0 <sniprintf>
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 80040a6:	f107 030c 	add.w	r3, r7, #12
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fc f8e0 	bl	8000270 <strlen>
 80040b0:	4603      	mov	r3, r0
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	f107 010c 	add.w	r1, r7, #12
 80040b8:	230a      	movs	r3, #10
 80040ba:	4845      	ldr	r0, [pc, #276]	@ (80041d0 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x240>)
 80040bc:	f006 f831 	bl	800a122 <HAL_UART_Transmit>
				10);
		break;
 80040c0:	e07d      	b.n	80041be <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x22e>
	}
	case GY_Z_CHAR: {
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
				sensor_data.imu->gyro[2]);
 80040c2:	4b41      	ldr	r3, [pc, #260]	@ (80041c8 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x238>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fc fa3d 	bl	8000548 <__aeabi_f2d>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	f107 000c 	add.w	r0, r7, #12
 80040d6:	e9cd 2300 	strd	r2, r3, [sp]
 80040da:	4a3c      	ldr	r2, [pc, #240]	@ (80041cc <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 80040dc:	2119      	movs	r1, #25
 80040de:	f00b fe07 	bl	800fcf0 <sniprintf>
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 80040e2:	f107 030c 	add.w	r3, r7, #12
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fc f8c2 	bl	8000270 <strlen>
 80040ec:	4603      	mov	r3, r0
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	f107 010c 	add.w	r1, r7, #12
 80040f4:	230a      	movs	r3, #10
 80040f6:	4836      	ldr	r0, [pc, #216]	@ (80041d0 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x240>)
 80040f8:	f006 f813 	bl	800a122 <HAL_UART_Transmit>
				10);
		break;
 80040fc:	e05f      	b.n	80041be <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x22e>
	}
	case QTRN_YAW_CHAR: {
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f", sensor_data.yaw_abs);
 80040fe:	4b32      	ldr	r3, [pc, #200]	@ (80041c8 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x238>)
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	4618      	mov	r0, r3
 8004104:	f7fc fa20 	bl	8000548 <__aeabi_f2d>
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
 800410c:	f107 000c 	add.w	r0, r7, #12
 8004110:	e9cd 2300 	strd	r2, r3, [sp]
 8004114:	4a2d      	ldr	r2, [pc, #180]	@ (80041cc <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 8004116:	2119      	movs	r1, #25
 8004118:	f00b fdea 	bl	800fcf0 <sniprintf>
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf), 10);
 800411c:	f107 030c 	add.w	r3, r7, #12
 8004120:	4618      	mov	r0, r3
 8004122:	f7fc f8a5 	bl	8000270 <strlen>
 8004126:	4603      	mov	r3, r0
 8004128:	b29a      	uxth	r2, r3
 800412a:	f107 010c 	add.w	r1, r7, #12
 800412e:	230a      	movs	r3, #10
 8004130:	4827      	ldr	r0, [pc, #156]	@ (80041d0 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x240>)
 8004132:	f005 fff6 	bl	800a122 <HAL_UART_Transmit>
		break;
 8004136:	e042      	b.n	80041be <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x22e>
	}
	case QTRN_ALL_CHAR: {
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.1f;%4.1f;%4.1f;%4.1f",
				sensor_data.imu->q[0], sensor_data.imu->q[1],
 8004138:	4b23      	ldr	r3, [pc, #140]	@ (80041c8 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x238>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.1f;%4.1f;%4.1f;%4.1f",
 800413e:	4618      	mov	r0, r3
 8004140:	f7fc fa02 	bl	8000548 <__aeabi_f2d>
 8004144:	4604      	mov	r4, r0
 8004146:	460d      	mov	r5, r1
				sensor_data.imu->q[0], sensor_data.imu->q[1],
 8004148:	4b1f      	ldr	r3, [pc, #124]	@ (80041c8 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x238>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.1f;%4.1f;%4.1f;%4.1f",
 800414e:	4618      	mov	r0, r3
 8004150:	f7fc f9fa 	bl	8000548 <__aeabi_f2d>
 8004154:	4680      	mov	r8, r0
 8004156:	4689      	mov	r9, r1
				sensor_data.imu->q[2], sensor_data.imu->q[3]);
 8004158:	4b1b      	ldr	r3, [pc, #108]	@ (80041c8 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x238>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.1f;%4.1f;%4.1f;%4.1f",
 800415e:	4618      	mov	r0, r3
 8004160:	f7fc f9f2 	bl	8000548 <__aeabi_f2d>
 8004164:	4682      	mov	sl, r0
 8004166:	468b      	mov	fp, r1
				sensor_data.imu->q[2], sensor_data.imu->q[3]);
 8004168:	4b17      	ldr	r3, [pc, #92]	@ (80041c8 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x238>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.1f;%4.1f;%4.1f;%4.1f",
 800416e:	4618      	mov	r0, r3
 8004170:	f7fc f9ea 	bl	8000548 <__aeabi_f2d>
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	f107 000c 	add.w	r0, r7, #12
 800417c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004180:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8004184:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004188:	e9cd 4500 	strd	r4, r5, [sp]
 800418c:	4a11      	ldr	r2, [pc, #68]	@ (80041d4 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x244>)
 800418e:	2119      	movs	r1, #25
 8004190:	f00b fdae 	bl	800fcf0 <sniprintf>
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 8004194:	f107 030c 	add.w	r3, r7, #12
 8004198:	4618      	mov	r0, r3
 800419a:	f7fc f869 	bl	8000270 <strlen>
 800419e:	4603      	mov	r3, r0
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	f107 010c 	add.w	r1, r7, #12
 80041a6:	230a      	movs	r3, #10
 80041a8:	4809      	ldr	r0, [pc, #36]	@ (80041d0 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x240>)
 80041aa:	f005 ffba 	bl	800a122 <HAL_UART_Transmit>
				10);
		break;
 80041ae:	e006      	b.n	80041be <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x22e>
	}
	default: {
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) nack, sizeof(nack), 10);
 80041b0:	230a      	movs	r3, #10
 80041b2:	2204      	movs	r2, #4
 80041b4:	4908      	ldr	r1, [pc, #32]	@ (80041d8 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x248>)
 80041b6:	4806      	ldr	r0, [pc, #24]	@ (80041d0 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x240>)
 80041b8:	f005 ffb3 	bl	800a122 <HAL_UART_Transmit>
	}
	}
}
 80041bc:	bf00      	nop
 80041be:	bf00      	nop
 80041c0:	3728      	adds	r7, #40	@ 0x28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041c8:	200001fc 	.word	0x200001fc
 80041cc:	08011f98 	.word	0x08011f98
 80041d0:	200006f8 	.word	0x200006f8
 80041d4:	08011fa0 	.word	0x08011fa0
 80041d8:	08011f84 	.word	0x08011f84

080041dc <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh>:

MOTION_PKT_t* Processor::getMotionCmdFromBytes(BUF_CMP_t *bytes) {
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]

	uint32_t val = strtol((const char*) &bytes[4], NULL, 10);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3304      	adds	r3, #4
 80041e8:	220a      	movs	r2, #10
 80041ea:	2100      	movs	r1, #0
 80041ec:	4618      	mov	r0, r3
 80041ee:	f00a ffff 	bl	800f1f0 <strtol>
 80041f2:	4603      	mov	r3, r0
 80041f4:	60fb      	str	r3, [r7, #12]
	if (val == 0)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x24>
		return NULL; // invalid input or no action
 80041fc:	2300      	movs	r3, #0
 80041fe:	e09e      	b.n	800433e <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x162>
	MOTION_PKT_t *pkt = new MOTION_PKT_t();
 8004200:	200c      	movs	r0, #12
 8004202:	f00a fa01 	bl	800e608 <_Znwj>
 8004206:	4603      	mov	r3, r0
 8004208:	4619      	mov	r1, r3
 800420a:	460a      	mov	r2, r1
 800420c:	2300      	movs	r3, #0
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	6053      	str	r3, [r2, #4]
 8004212:	6093      	str	r3, [r2, #8]
 8004214:	60b9      	str	r1, [r7, #8]
	pkt->arg = val;
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	605a      	str	r2, [r3, #4]

	switch (bytes[3]) {
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3303      	adds	r3, #3
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	3b62      	subs	r3, #98	@ 0x62
 8004224:	2b10      	cmp	r3, #16
 8004226:	f200 8087 	bhi.w	8004338 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x15c>
 800422a:	a201      	add	r2, pc, #4	@ (adr r2, 8004230 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x54>)
 800422c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004230:	080042a5 	.word	0x080042a5
 8004234:	08004339 	.word	0x08004339
 8004238:	08004339 	.word	0x08004339
 800423c:	08004339 	.word	0x08004339
 8004240:	08004275 	.word	0x08004275
 8004244:	08004339 	.word	0x08004339
 8004248:	08004339 	.word	0x08004339
 800424c:	08004339 	.word	0x08004339
 8004250:	08004339 	.word	0x08004339
 8004254:	08004339 	.word	0x08004339
 8004258:	080042d5 	.word	0x080042d5
 800425c:	08004339 	.word	0x08004339
 8004260:	08004339 	.word	0x08004339
 8004264:	08004339 	.word	0x08004339
 8004268:	08004339 	.word	0x08004339
 800426c:	08004339 	.word	0x08004339
 8004270:	08004307 	.word	0x08004307
	case FWD_CHAR: {
		pkt->cmd = MOVE_FWD;
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2200      	movs	r2, #0
 8004278:	601a      	str	r2, [r3, #0]
		pkt->is_crawl =(bool) (isEq<BUF_CMP_t>(CRAWL_CHAR, bytes[7]));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3307      	adds	r3, #7
 800427e:	4619      	mov	r1, r3
 8004280:	4831      	ldr	r0, [pc, #196]	@ (8004348 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x16c>)
 8004282:	f000 f867 	bl	8004354 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8004286:	4603      	mov	r3, r0
 8004288:	461a      	mov	r2, r3
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	729a      	strb	r2, [r3, #10]
		pkt->linear =(bool) (isEq<BUF_CMP_t>(LINEAR_CHAR, bytes[8]));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	3308      	adds	r3, #8
 8004292:	4619      	mov	r1, r3
 8004294:	482d      	ldr	r0, [pc, #180]	@ (800434c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x170>)
 8004296:	f000 f85d 	bl	8004354 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 800429a:	4603      	mov	r3, r0
 800429c:	461a      	mov	r2, r3
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	72da      	strb	r2, [r3, #11]
		break;
 80042a2:	e04b      	b.n	800433c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x160>
	}
	case BWD_CHAR: {
		pkt->cmd = MOVE_BWD;
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2201      	movs	r2, #1
 80042a8:	601a      	str	r2, [r3, #0]
		pkt->is_crawl =(bool) (isEq<BUF_CMP_t>(CRAWL_CHAR, bytes[7]));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	3307      	adds	r3, #7
 80042ae:	4619      	mov	r1, r3
 80042b0:	4825      	ldr	r0, [pc, #148]	@ (8004348 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x16c>)
 80042b2:	f000 f84f 	bl	8004354 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80042b6:	4603      	mov	r3, r0
 80042b8:	461a      	mov	r2, r3
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	729a      	strb	r2, [r3, #10]
		pkt->linear =(bool) (isEq<BUF_CMP_t>(LINEAR_CHAR, bytes[8]));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3308      	adds	r3, #8
 80042c2:	4619      	mov	r1, r3
 80042c4:	4821      	ldr	r0, [pc, #132]	@ (800434c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x170>)
 80042c6:	f000 f845 	bl	8004354 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80042ca:	4603      	mov	r3, r0
 80042cc:	461a      	mov	r2, r3
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	72da      	strb	r2, [r3, #11]
		break;
 80042d2:	e033      	b.n	800433c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x160>
	}
	case LEFT_CHAR: {
		pkt->cmd =
				(bool) (isEq<BUF_CMP_t>(BWD_CHAR, bytes[7])) ?
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	3307      	adds	r3, #7
 80042d8:	4619      	mov	r1, r3
 80042da:	481d      	ldr	r0, [pc, #116]	@ (8004350 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x174>)
 80042dc:	f000 f83a 	bl	8004354 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x10e>
 80042e6:	2205      	movs	r2, #5
 80042e8:	e000      	b.n	80042ec <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x110>
 80042ea:	2203      	movs	r2, #3
		pkt->cmd =
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	601a      	str	r2, [r3, #0]
						MOVE_LEFT_BWD : MOVE_LEFT_FWD;
		pkt->linear =(bool) (isEq<BUF_CMP_t>(LINEAR_CHAR, bytes[8]));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3308      	adds	r3, #8
 80042f4:	4619      	mov	r1, r3
 80042f6:	4815      	ldr	r0, [pc, #84]	@ (800434c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x170>)
 80042f8:	f000 f82c 	bl	8004354 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80042fc:	4603      	mov	r3, r0
 80042fe:	461a      	mov	r2, r3
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	72da      	strb	r2, [r3, #11]
		break;
 8004304:	e01a      	b.n	800433c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x160>
	}
	case RIGHT_CHAR: {
		pkt->cmd =
				(bool) (isEq<BUF_CMP_t>(BWD_CHAR, bytes[7])) ?
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	3307      	adds	r3, #7
 800430a:	4619      	mov	r1, r3
 800430c:	4810      	ldr	r0, [pc, #64]	@ (8004350 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x174>)
 800430e:	f000 f821 	bl	8004354 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x140>
 8004318:	2204      	movs	r2, #4
 800431a:	e000      	b.n	800431e <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x142>
 800431c:	2202      	movs	r2, #2
		pkt->cmd =
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	601a      	str	r2, [r3, #0]
						MOVE_RIGHT_BWD : MOVE_RIGHT_FWD;
		pkt->linear =(bool) (isEq<BUF_CMP_t>(LINEAR_CHAR, bytes[8]));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3308      	adds	r3, #8
 8004326:	4619      	mov	r1, r3
 8004328:	4808      	ldr	r0, [pc, #32]	@ (800434c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x170>)
 800432a:	f000 f813 	bl	8004354 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 800432e:	4603      	mov	r3, r0
 8004330:	461a      	mov	r2, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	72da      	strb	r2, [r3, #11]
		break;
 8004336:	e001      	b.n	800433c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x160>

	}

	default:
		// something went wrong..
		return NULL;
 8004338:	2300      	movs	r3, #0
 800433a:	e000      	b.n	800433e <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x162>
	}

	return pkt;
 800433c:	68bb      	ldr	r3, [r7, #8]

}
 800433e:	4618      	mov	r0, r3
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	0801202c 	.word	0x0801202c
 800434c:	0801202d 	.word	0x0801202d
 8004350:	08012029 	.word	0x08012029

08004354 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>:

	private:
	// static all to workaround the queue in instance error
		static void startImpl(void * _this); //unused
		template <typename T> // no type bounds enforcement, must be uint8_t, char etc.
		static bool isEq(const T &a, const T &b)
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
		{
			return a == b;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	781a      	ldrb	r2, [r3, #0]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	bf0c      	ite	eq
 800436a:	2301      	moveq	r3, #1
 800436c:	2300      	movne	r3, #0
 800436e:	b2db      	uxtb	r3, r3
		}
 8004370:	4618      	mov	r0, r3
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004380:	f001 fd8c 	bl	8005e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004384:	f000 f82c 	bl	80043e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004388:	f000 fbae 	bl	8004ae8 <MX_GPIO_Init>
  MX_DMA_Init();
 800438c:	f000 fb84 	bl	8004a98 <MX_DMA_Init>
  MX_TIM6_Init();
 8004390:	f000 f9dc 	bl	800474c <MX_TIM6_Init>
  MX_TIM8_Init();
 8004394:	f000 fa10 	bl	80047b8 <MX_TIM8_Init>
  MX_TIM4_Init();
 8004398:	f000 f956 	bl	8004648 <MX_TIM4_Init>
  MX_TIM9_Init();
 800439c:	f000 fa80 	bl	80048a0 <MX_TIM9_Init>
  MX_TIM12_Init();
 80043a0:	f000 faec 	bl	800497c <MX_TIM12_Init>
  MX_I2C2_Init();
 80043a4:	f000 f87a 	bl	800449c <MX_I2C2_Init>
  MX_USART3_UART_Init();
 80043a8:	f000 fb4c 	bl	8004a44 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80043ac:	f000 f8a4 	bl	80044f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80043b0:	f000 f8f6 	bl	80045a0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  initializeCPPconstructs();
 80043b4:	f7fd face 	bl	8001954 <initializeCPPconstructs>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80043b8:	f007 f91a 	bl	800b5f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80043bc:	4a05      	ldr	r2, [pc, #20]	@ (80043d4 <main+0x58>)
 80043be:	2100      	movs	r1, #0
 80043c0:	4805      	ldr	r0, [pc, #20]	@ (80043d8 <main+0x5c>)
 80043c2:	f007 f95f 	bl	800b684 <osThreadNew>
 80043c6:	4603      	mov	r3, r0
 80043c8:	4a04      	ldr	r2, [pc, #16]	@ (80043dc <main+0x60>)
 80043ca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80043cc:	f007 f934 	bl	800b638 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 80043d0:	bf00      	nop
 80043d2:	e7fd      	b.n	80043d0 <main+0x54>
 80043d4:	08012034 	.word	0x08012034
 80043d8:	08004c63 	.word	0x08004c63
 80043dc:	200007fc 	.word	0x200007fc

080043e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b094      	sub	sp, #80	@ 0x50
 80043e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043e6:	f107 0320 	add.w	r3, r7, #32
 80043ea:	2230      	movs	r2, #48	@ 0x30
 80043ec:	2100      	movs	r1, #0
 80043ee:	4618      	mov	r0, r3
 80043f0:	f00b fdae 	bl	800ff50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80043f4:	f107 030c 	add.w	r3, r7, #12
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	605a      	str	r2, [r3, #4]
 80043fe:	609a      	str	r2, [r3, #8]
 8004400:	60da      	str	r2, [r3, #12]
 8004402:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004404:	2300      	movs	r3, #0
 8004406:	60bb      	str	r3, [r7, #8]
 8004408:	4b22      	ldr	r3, [pc, #136]	@ (8004494 <SystemClock_Config+0xb4>)
 800440a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440c:	4a21      	ldr	r2, [pc, #132]	@ (8004494 <SystemClock_Config+0xb4>)
 800440e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004412:	6413      	str	r3, [r2, #64]	@ 0x40
 8004414:	4b1f      	ldr	r3, [pc, #124]	@ (8004494 <SystemClock_Config+0xb4>)
 8004416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004418:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800441c:	60bb      	str	r3, [r7, #8]
 800441e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004420:	2300      	movs	r3, #0
 8004422:	607b      	str	r3, [r7, #4]
 8004424:	4b1c      	ldr	r3, [pc, #112]	@ (8004498 <SystemClock_Config+0xb8>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a1b      	ldr	r2, [pc, #108]	@ (8004498 <SystemClock_Config+0xb8>)
 800442a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	4b19      	ldr	r3, [pc, #100]	@ (8004498 <SystemClock_Config+0xb8>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004438:	607b      	str	r3, [r7, #4]
 800443a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800443c:	2302      	movs	r3, #2
 800443e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004440:	2301      	movs	r3, #1
 8004442:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004444:	2310      	movs	r3, #16
 8004446:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004448:	2300      	movs	r3, #0
 800444a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800444c:	f107 0320 	add.w	r3, r7, #32
 8004450:	4618      	mov	r0, r3
 8004452:	f003 fdb1 	bl	8007fb8 <HAL_RCC_OscConfig>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800445c:	f000 fc09 	bl	8004c72 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004460:	230f      	movs	r3, #15
 8004462:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004464:	2300      	movs	r3, #0
 8004466:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004468:	2300      	movs	r3, #0
 800446a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800446c:	2300      	movs	r3, #0
 800446e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004470:	2300      	movs	r3, #0
 8004472:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004474:	f107 030c 	add.w	r3, r7, #12
 8004478:	2100      	movs	r1, #0
 800447a:	4618      	mov	r0, r3
 800447c:	f004 f814 	bl	80084a8 <HAL_RCC_ClockConfig>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8004486:	f000 fbf4 	bl	8004c72 <Error_Handler>
  }
}
 800448a:	bf00      	nop
 800448c:	3750      	adds	r7, #80	@ 0x50
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40023800 	.word	0x40023800
 8004498:	40007000 	.word	0x40007000

0800449c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80044a0:	4b12      	ldr	r3, [pc, #72]	@ (80044ec <MX_I2C2_Init+0x50>)
 80044a2:	4a13      	ldr	r2, [pc, #76]	@ (80044f0 <MX_I2C2_Init+0x54>)
 80044a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80044a6:	4b11      	ldr	r3, [pc, #68]	@ (80044ec <MX_I2C2_Init+0x50>)
 80044a8:	4a12      	ldr	r2, [pc, #72]	@ (80044f4 <MX_I2C2_Init+0x58>)
 80044aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80044ac:	4b0f      	ldr	r3, [pc, #60]	@ (80044ec <MX_I2C2_Init+0x50>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80044b2:	4b0e      	ldr	r3, [pc, #56]	@ (80044ec <MX_I2C2_Init+0x50>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80044b8:	4b0c      	ldr	r3, [pc, #48]	@ (80044ec <MX_I2C2_Init+0x50>)
 80044ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80044be:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80044c0:	4b0a      	ldr	r3, [pc, #40]	@ (80044ec <MX_I2C2_Init+0x50>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80044c6:	4b09      	ldr	r3, [pc, #36]	@ (80044ec <MX_I2C2_Init+0x50>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80044cc:	4b07      	ldr	r3, [pc, #28]	@ (80044ec <MX_I2C2_Init+0x50>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80044d2:	4b06      	ldr	r3, [pc, #24]	@ (80044ec <MX_I2C2_Init+0x50>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80044d8:	4804      	ldr	r0, [pc, #16]	@ (80044ec <MX_I2C2_Init+0x50>)
 80044da:	f002 fc57 	bl	8006d8c <HAL_I2C_Init>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80044e4:	f000 fbc5 	bl	8004c72 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80044e8:	bf00      	nop
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	200004ac 	.word	0x200004ac
 80044f0:	40005800 	.word	0x40005800
 80044f4:	000186a0 	.word	0x000186a0

080044f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08c      	sub	sp, #48	@ 0x30
 80044fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80044fe:	f107 030c 	add.w	r3, r7, #12
 8004502:	2224      	movs	r2, #36	@ 0x24
 8004504:	2100      	movs	r1, #0
 8004506:	4618      	mov	r0, r3
 8004508:	f00b fd22 	bl	800ff50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800450c:	1d3b      	adds	r3, r7, #4
 800450e:	2200      	movs	r2, #0
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004514:	4b21      	ldr	r3, [pc, #132]	@ (800459c <MX_TIM2_Init+0xa4>)
 8004516:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800451a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800451c:	4b1f      	ldr	r3, [pc, #124]	@ (800459c <MX_TIM2_Init+0xa4>)
 800451e:	2200      	movs	r2, #0
 8004520:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004522:	4b1e      	ldr	r3, [pc, #120]	@ (800459c <MX_TIM2_Init+0xa4>)
 8004524:	2200      	movs	r2, #0
 8004526:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8004528:	4b1c      	ldr	r3, [pc, #112]	@ (800459c <MX_TIM2_Init+0xa4>)
 800452a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800452e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004530:	4b1a      	ldr	r3, [pc, #104]	@ (800459c <MX_TIM2_Init+0xa4>)
 8004532:	2200      	movs	r2, #0
 8004534:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004536:	4b19      	ldr	r3, [pc, #100]	@ (800459c <MX_TIM2_Init+0xa4>)
 8004538:	2200      	movs	r2, #0
 800453a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800453c:	2303      	movs	r3, #3
 800453e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004540:	2300      	movs	r3, #0
 8004542:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004544:	2301      	movs	r3, #1
 8004546:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004548:	2300      	movs	r3, #0
 800454a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800454c:	2300      	movs	r3, #0
 800454e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004550:	2300      	movs	r3, #0
 8004552:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004554:	2301      	movs	r3, #1
 8004556:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004558:	2300      	movs	r3, #0
 800455a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800455c:	2300      	movs	r3, #0
 800455e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004560:	f107 030c 	add.w	r3, r7, #12
 8004564:	4619      	mov	r1, r3
 8004566:	480d      	ldr	r0, [pc, #52]	@ (800459c <MX_TIM2_Init+0xa4>)
 8004568:	f004 fbf6 	bl	8008d58 <HAL_TIM_Encoder_Init>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8004572:	f000 fb7e 	bl	8004c72 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004576:	2300      	movs	r3, #0
 8004578:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800457a:	2300      	movs	r3, #0
 800457c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800457e:	1d3b      	adds	r3, r7, #4
 8004580:	4619      	mov	r1, r3
 8004582:	4806      	ldr	r0, [pc, #24]	@ (800459c <MX_TIM2_Init+0xa4>)
 8004584:	f005 fcf0 	bl	8009f68 <HAL_TIMEx_MasterConfigSynchronization>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800458e:	f000 fb70 	bl	8004c72 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004592:	bf00      	nop
 8004594:	3730      	adds	r7, #48	@ 0x30
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	20000500 	.word	0x20000500

080045a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08c      	sub	sp, #48	@ 0x30
 80045a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80045a6:	f107 030c 	add.w	r3, r7, #12
 80045aa:	2224      	movs	r2, #36	@ 0x24
 80045ac:	2100      	movs	r1, #0
 80045ae:	4618      	mov	r0, r3
 80045b0:	f00b fcce 	bl	800ff50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045b4:	1d3b      	adds	r3, r7, #4
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80045bc:	4b20      	ldr	r3, [pc, #128]	@ (8004640 <MX_TIM3_Init+0xa0>)
 80045be:	4a21      	ldr	r2, [pc, #132]	@ (8004644 <MX_TIM3_Init+0xa4>)
 80045c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80045c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004640 <MX_TIM3_Init+0xa0>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004640 <MX_TIM3_Init+0xa0>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80045ce:	4b1c      	ldr	r3, [pc, #112]	@ (8004640 <MX_TIM3_Init+0xa0>)
 80045d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004640 <MX_TIM3_Init+0xa0>)
 80045d8:	2200      	movs	r2, #0
 80045da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045dc:	4b18      	ldr	r3, [pc, #96]	@ (8004640 <MX_TIM3_Init+0xa0>)
 80045de:	2200      	movs	r2, #0
 80045e0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80045e2:	2303      	movs	r3, #3
 80045e4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80045e6:	2300      	movs	r3, #0
 80045e8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80045ea:	2301      	movs	r3, #1
 80045ec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80045f2:	2300      	movs	r3, #0
 80045f4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80045f6:	2300      	movs	r3, #0
 80045f8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80045fa:	2301      	movs	r3, #1
 80045fc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80045fe:	2300      	movs	r3, #0
 8004600:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004602:	2300      	movs	r3, #0
 8004604:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004606:	f107 030c 	add.w	r3, r7, #12
 800460a:	4619      	mov	r1, r3
 800460c:	480c      	ldr	r0, [pc, #48]	@ (8004640 <MX_TIM3_Init+0xa0>)
 800460e:	f004 fba3 	bl	8008d58 <HAL_TIM_Encoder_Init>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004618:	f000 fb2b 	bl	8004c72 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800461c:	2300      	movs	r3, #0
 800461e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004620:	2300      	movs	r3, #0
 8004622:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004624:	1d3b      	adds	r3, r7, #4
 8004626:	4619      	mov	r1, r3
 8004628:	4805      	ldr	r0, [pc, #20]	@ (8004640 <MX_TIM3_Init+0xa0>)
 800462a:	f005 fc9d 	bl	8009f68 <HAL_TIMEx_MasterConfigSynchronization>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004634:	f000 fb1d 	bl	8004c72 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004638:	bf00      	nop
 800463a:	3730      	adds	r7, #48	@ 0x30
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	20000548 	.word	0x20000548
 8004644:	40000400 	.word	0x40000400

08004648 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b08e      	sub	sp, #56	@ 0x38
 800464c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800464e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	605a      	str	r2, [r3, #4]
 8004658:	609a      	str	r2, [r3, #8]
 800465a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800465c:	f107 0320 	add.w	r3, r7, #32
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004666:	1d3b      	adds	r3, r7, #4
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	605a      	str	r2, [r3, #4]
 800466e:	609a      	str	r2, [r3, #8]
 8004670:	60da      	str	r2, [r3, #12]
 8004672:	611a      	str	r2, [r3, #16]
 8004674:	615a      	str	r2, [r3, #20]
 8004676:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004678:	4b32      	ldr	r3, [pc, #200]	@ (8004744 <MX_TIM4_Init+0xfc>)
 800467a:	4a33      	ldr	r2, [pc, #204]	@ (8004748 <MX_TIM4_Init+0x100>)
 800467c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800467e:	4b31      	ldr	r3, [pc, #196]	@ (8004744 <MX_TIM4_Init+0xfc>)
 8004680:	2200      	movs	r2, #0
 8004682:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004684:	4b2f      	ldr	r3, [pc, #188]	@ (8004744 <MX_TIM4_Init+0xfc>)
 8004686:	2200      	movs	r2, #0
 8004688:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7199;
 800468a:	4b2e      	ldr	r3, [pc, #184]	@ (8004744 <MX_TIM4_Init+0xfc>)
 800468c:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8004690:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004692:	4b2c      	ldr	r3, [pc, #176]	@ (8004744 <MX_TIM4_Init+0xfc>)
 8004694:	2200      	movs	r2, #0
 8004696:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004698:	4b2a      	ldr	r3, [pc, #168]	@ (8004744 <MX_TIM4_Init+0xfc>)
 800469a:	2200      	movs	r2, #0
 800469c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800469e:	4829      	ldr	r0, [pc, #164]	@ (8004744 <MX_TIM4_Init+0xfc>)
 80046a0:	f004 f8e2 	bl	8008868 <HAL_TIM_Base_Init>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80046aa:	f000 fae2 	bl	8004c72 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80046b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80046b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80046b8:	4619      	mov	r1, r3
 80046ba:	4822      	ldr	r0, [pc, #136]	@ (8004744 <MX_TIM4_Init+0xfc>)
 80046bc:	f004 fee6 	bl	800948c <HAL_TIM_ConfigClockSource>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80046c6:	f000 fad4 	bl	8004c72 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80046ca:	481e      	ldr	r0, [pc, #120]	@ (8004744 <MX_TIM4_Init+0xfc>)
 80046cc:	f004 f91b 	bl	8008906 <HAL_TIM_PWM_Init>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80046d6:	f000 facc 	bl	8004c72 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046da:	2300      	movs	r3, #0
 80046dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046de:	2300      	movs	r3, #0
 80046e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80046e2:	f107 0320 	add.w	r3, r7, #32
 80046e6:	4619      	mov	r1, r3
 80046e8:	4816      	ldr	r0, [pc, #88]	@ (8004744 <MX_TIM4_Init+0xfc>)
 80046ea:	f005 fc3d 	bl	8009f68 <HAL_TIMEx_MasterConfigSynchronization>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80046f4:	f000 fabd 	bl	8004c72 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046f8:	2360      	movs	r3, #96	@ 0x60
 80046fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80046fc:	2300      	movs	r3, #0
 80046fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8004700:	2302      	movs	r3, #2
 8004702:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004704:	2300      	movs	r3, #0
 8004706:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004708:	1d3b      	adds	r3, r7, #4
 800470a:	2208      	movs	r2, #8
 800470c:	4619      	mov	r1, r3
 800470e:	480d      	ldr	r0, [pc, #52]	@ (8004744 <MX_TIM4_Init+0xfc>)
 8004710:	f004 fdfa 	bl	8009308 <HAL_TIM_PWM_ConfigChannel>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800471a:	f000 faaa 	bl	8004c72 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800471e:	1d3b      	adds	r3, r7, #4
 8004720:	220c      	movs	r2, #12
 8004722:	4619      	mov	r1, r3
 8004724:	4807      	ldr	r0, [pc, #28]	@ (8004744 <MX_TIM4_Init+0xfc>)
 8004726:	f004 fdef 	bl	8009308 <HAL_TIM_PWM_ConfigChannel>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8004730:	f000 fa9f 	bl	8004c72 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004734:	4803      	ldr	r0, [pc, #12]	@ (8004744 <MX_TIM4_Init+0xfc>)
 8004736:	f001 f907 	bl	8005948 <HAL_TIM_MspPostInit>

}
 800473a:	bf00      	nop
 800473c:	3738      	adds	r7, #56	@ 0x38
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	20000590 	.word	0x20000590
 8004748:	40000800 	.word	0x40000800

0800474c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004752:	463b      	mov	r3, r7
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800475a:	4b15      	ldr	r3, [pc, #84]	@ (80047b0 <MX_TIM6_Init+0x64>)
 800475c:	4a15      	ldr	r2, [pc, #84]	@ (80047b4 <MX_TIM6_Init+0x68>)
 800475e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8004760:	4b13      	ldr	r3, [pc, #76]	@ (80047b0 <MX_TIM6_Init+0x64>)
 8004762:	2200      	movs	r2, #0
 8004764:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004766:	4b12      	ldr	r3, [pc, #72]	@ (80047b0 <MX_TIM6_Init+0x64>)
 8004768:	2200      	movs	r2, #0
 800476a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800476c:	4b10      	ldr	r3, [pc, #64]	@ (80047b0 <MX_TIM6_Init+0x64>)
 800476e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004772:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004774:	4b0e      	ldr	r3, [pc, #56]	@ (80047b0 <MX_TIM6_Init+0x64>)
 8004776:	2200      	movs	r2, #0
 8004778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800477a:	480d      	ldr	r0, [pc, #52]	@ (80047b0 <MX_TIM6_Init+0x64>)
 800477c:	f004 f874 	bl	8008868 <HAL_TIM_Base_Init>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004786:	f000 fa74 	bl	8004c72 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800478a:	2300      	movs	r3, #0
 800478c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800478e:	2300      	movs	r3, #0
 8004790:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004792:	463b      	mov	r3, r7
 8004794:	4619      	mov	r1, r3
 8004796:	4806      	ldr	r0, [pc, #24]	@ (80047b0 <MX_TIM6_Init+0x64>)
 8004798:	f005 fbe6 	bl	8009f68 <HAL_TIMEx_MasterConfigSynchronization>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80047a2:	f000 fa66 	bl	8004c72 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80047a6:	bf00      	nop
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	200005d8 	.word	0x200005d8
 80047b4:	40001000 	.word	0x40001000

080047b8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08a      	sub	sp, #40	@ 0x28
 80047bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80047be:	f107 0318 	add.w	r3, r7, #24
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	605a      	str	r2, [r3, #4]
 80047c8:	609a      	str	r2, [r3, #8]
 80047ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047cc:	f107 0310 	add.w	r3, r7, #16
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80047d6:	463b      	mov	r3, r7
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	605a      	str	r2, [r3, #4]
 80047de:	609a      	str	r2, [r3, #8]
 80047e0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80047e2:	4b2d      	ldr	r3, [pc, #180]	@ (8004898 <MX_TIM8_Init+0xe0>)
 80047e4:	4a2d      	ldr	r2, [pc, #180]	@ (800489c <MX_TIM8_Init+0xe4>)
 80047e6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16-1;
 80047e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004898 <MX_TIM8_Init+0xe0>)
 80047ea:	220f      	movs	r2, #15
 80047ec:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047ee:	4b2a      	ldr	r3, [pc, #168]	@ (8004898 <MX_TIM8_Init+0xe0>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80047f4:	4b28      	ldr	r3, [pc, #160]	@ (8004898 <MX_TIM8_Init+0xe0>)
 80047f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80047fa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047fc:	4b26      	ldr	r3, [pc, #152]	@ (8004898 <MX_TIM8_Init+0xe0>)
 80047fe:	2200      	movs	r2, #0
 8004800:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004802:	4b25      	ldr	r3, [pc, #148]	@ (8004898 <MX_TIM8_Init+0xe0>)
 8004804:	2200      	movs	r2, #0
 8004806:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004808:	4b23      	ldr	r3, [pc, #140]	@ (8004898 <MX_TIM8_Init+0xe0>)
 800480a:	2200      	movs	r2, #0
 800480c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800480e:	4822      	ldr	r0, [pc, #136]	@ (8004898 <MX_TIM8_Init+0xe0>)
 8004810:	f004 f82a 	bl	8008868 <HAL_TIM_Base_Init>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 800481a:	f000 fa2a 	bl	8004c72 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800481e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004822:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004824:	f107 0318 	add.w	r3, r7, #24
 8004828:	4619      	mov	r1, r3
 800482a:	481b      	ldr	r0, [pc, #108]	@ (8004898 <MX_TIM8_Init+0xe0>)
 800482c:	f004 fe2e 	bl	800948c <HAL_TIM_ConfigClockSource>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8004836:	f000 fa1c 	bl	8004c72 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800483a:	4817      	ldr	r0, [pc, #92]	@ (8004898 <MX_TIM8_Init+0xe0>)
 800483c:	f004 f984 	bl	8008b48 <HAL_TIM_IC_Init>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8004846:	f000 fa14 	bl	8004c72 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800484a:	2300      	movs	r3, #0
 800484c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800484e:	2300      	movs	r3, #0
 8004850:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004852:	f107 0310 	add.w	r3, r7, #16
 8004856:	4619      	mov	r1, r3
 8004858:	480f      	ldr	r0, [pc, #60]	@ (8004898 <MX_TIM8_Init+0xe0>)
 800485a:	f005 fb85 	bl	8009f68 <HAL_TIMEx_MasterConfigSynchronization>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 8004864:	f000 fa05 	bl	8004c72 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004868:	230a      	movs	r3, #10
 800486a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800486c:	2301      	movs	r3, #1
 800486e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004870:	2300      	movs	r3, #0
 8004872:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8004874:	2300      	movs	r3, #0
 8004876:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8004878:	463b      	mov	r3, r7
 800487a:	2204      	movs	r2, #4
 800487c:	4619      	mov	r1, r3
 800487e:	4806      	ldr	r0, [pc, #24]	@ (8004898 <MX_TIM8_Init+0xe0>)
 8004880:	f004 fca6 	bl	80091d0 <HAL_TIM_IC_ConfigChannel>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800488a:	f000 f9f2 	bl	8004c72 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800488e:	bf00      	nop
 8004890:	3728      	adds	r7, #40	@ 0x28
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20000620 	.word	0x20000620
 800489c:	40010400 	.word	0x40010400

080048a0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08c      	sub	sp, #48	@ 0x30
 80048a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048a6:	f107 0320 	add.w	r3, r7, #32
 80048aa:	2200      	movs	r2, #0
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	605a      	str	r2, [r3, #4]
 80048b0:	609a      	str	r2, [r3, #8]
 80048b2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048b4:	1d3b      	adds	r3, r7, #4
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	605a      	str	r2, [r3, #4]
 80048bc:	609a      	str	r2, [r3, #8]
 80048be:	60da      	str	r2, [r3, #12]
 80048c0:	611a      	str	r2, [r3, #16]
 80048c2:	615a      	str	r2, [r3, #20]
 80048c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80048c6:	4b2b      	ldr	r3, [pc, #172]	@ (8004974 <MX_TIM9_Init+0xd4>)
 80048c8:	4a2b      	ldr	r2, [pc, #172]	@ (8004978 <MX_TIM9_Init+0xd8>)
 80048ca:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 80048cc:	4b29      	ldr	r3, [pc, #164]	@ (8004974 <MX_TIM9_Init+0xd4>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048d2:	4b28      	ldr	r3, [pc, #160]	@ (8004974 <MX_TIM9_Init+0xd4>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 7199;
 80048d8:	4b26      	ldr	r3, [pc, #152]	@ (8004974 <MX_TIM9_Init+0xd4>)
 80048da:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80048de:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048e0:	4b24      	ldr	r3, [pc, #144]	@ (8004974 <MX_TIM9_Init+0xd4>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048e6:	4b23      	ldr	r3, [pc, #140]	@ (8004974 <MX_TIM9_Init+0xd4>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80048ec:	4821      	ldr	r0, [pc, #132]	@ (8004974 <MX_TIM9_Init+0xd4>)
 80048ee:	f003 ffbb 	bl	8008868 <HAL_TIM_Base_Init>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 80048f8:	f000 f9bb 	bl	8004c72 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80048fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004900:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8004902:	f107 0320 	add.w	r3, r7, #32
 8004906:	4619      	mov	r1, r3
 8004908:	481a      	ldr	r0, [pc, #104]	@ (8004974 <MX_TIM9_Init+0xd4>)
 800490a:	f004 fdbf 	bl	800948c <HAL_TIM_ConfigClockSource>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8004914:	f000 f9ad 	bl	8004c72 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8004918:	4816      	ldr	r0, [pc, #88]	@ (8004974 <MX_TIM9_Init+0xd4>)
 800491a:	f003 fff4 	bl	8008906 <HAL_TIM_PWM_Init>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8004924:	f000 f9a5 	bl	8004c72 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004928:	2360      	movs	r3, #96	@ 0x60
 800492a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800492c:	2300      	movs	r3, #0
 800492e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8004930:	2302      	movs	r3, #2
 8004932:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004934:	2300      	movs	r3, #0
 8004936:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004938:	1d3b      	adds	r3, r7, #4
 800493a:	2200      	movs	r2, #0
 800493c:	4619      	mov	r1, r3
 800493e:	480d      	ldr	r0, [pc, #52]	@ (8004974 <MX_TIM9_Init+0xd4>)
 8004940:	f004 fce2 	bl	8009308 <HAL_TIM_PWM_ConfigChannel>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 800494a:	f000 f992 	bl	8004c72 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800494e:	1d3b      	adds	r3, r7, #4
 8004950:	2204      	movs	r2, #4
 8004952:	4619      	mov	r1, r3
 8004954:	4807      	ldr	r0, [pc, #28]	@ (8004974 <MX_TIM9_Init+0xd4>)
 8004956:	f004 fcd7 	bl	8009308 <HAL_TIM_PWM_ConfigChannel>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 8004960:	f000 f987 	bl	8004c72 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8004964:	4803      	ldr	r0, [pc, #12]	@ (8004974 <MX_TIM9_Init+0xd4>)
 8004966:	f000 ffef 	bl	8005948 <HAL_TIM_MspPostInit>

}
 800496a:	bf00      	nop
 800496c:	3730      	adds	r7, #48	@ 0x30
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20000668 	.word	0x20000668
 8004978:	40014000 	.word	0x40014000

0800497c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b08c      	sub	sp, #48	@ 0x30
 8004980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004982:	f107 0320 	add.w	r3, r7, #32
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	605a      	str	r2, [r3, #4]
 800498c:	609a      	str	r2, [r3, #8]
 800498e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004990:	1d3b      	adds	r3, r7, #4
 8004992:	2200      	movs	r2, #0
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	605a      	str	r2, [r3, #4]
 8004998:	609a      	str	r2, [r3, #8]
 800499a:	60da      	str	r2, [r3, #12]
 800499c:	611a      	str	r2, [r3, #16]
 800499e:	615a      	str	r2, [r3, #20]
 80049a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80049a2:	4b26      	ldr	r3, [pc, #152]	@ (8004a3c <MX_TIM12_Init+0xc0>)
 80049a4:	4a26      	ldr	r2, [pc, #152]	@ (8004a40 <MX_TIM12_Init+0xc4>)
 80049a6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 720;
 80049a8:	4b24      	ldr	r3, [pc, #144]	@ (8004a3c <MX_TIM12_Init+0xc0>)
 80049aa:	f44f 7234 	mov.w	r2, #720	@ 0x2d0
 80049ae:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049b0:	4b22      	ldr	r3, [pc, #136]	@ (8004a3c <MX_TIM12_Init+0xc0>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 2000;
 80049b6:	4b21      	ldr	r3, [pc, #132]	@ (8004a3c <MX_TIM12_Init+0xc0>)
 80049b8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80049bc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049be:	4b1f      	ldr	r3, [pc, #124]	@ (8004a3c <MX_TIM12_Init+0xc0>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049c4:	4b1d      	ldr	r3, [pc, #116]	@ (8004a3c <MX_TIM12_Init+0xc0>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80049ca:	481c      	ldr	r0, [pc, #112]	@ (8004a3c <MX_TIM12_Init+0xc0>)
 80049cc:	f003 ff4c 	bl	8008868 <HAL_TIM_Base_Init>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 80049d6:	f000 f94c 	bl	8004c72 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80049de:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80049e0:	f107 0320 	add.w	r3, r7, #32
 80049e4:	4619      	mov	r1, r3
 80049e6:	4815      	ldr	r0, [pc, #84]	@ (8004a3c <MX_TIM12_Init+0xc0>)
 80049e8:	f004 fd50 	bl	800948c <HAL_TIM_ConfigClockSource>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 80049f2:	f000 f93e 	bl	8004c72 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80049f6:	4811      	ldr	r0, [pc, #68]	@ (8004a3c <MX_TIM12_Init+0xc0>)
 80049f8:	f003 ff85 	bl	8008906 <HAL_TIM_PWM_Init>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8004a02:	f000 f936 	bl	8004c72 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a06:	2360      	movs	r3, #96	@ 0x60
 8004a08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a12:	2300      	movs	r3, #0
 8004a14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a16:	1d3b      	adds	r3, r7, #4
 8004a18:	2200      	movs	r2, #0
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	4807      	ldr	r0, [pc, #28]	@ (8004a3c <MX_TIM12_Init+0xc0>)
 8004a1e:	f004 fc73 	bl	8009308 <HAL_TIM_PWM_ConfigChannel>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8004a28:	f000 f923 	bl	8004c72 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8004a2c:	4803      	ldr	r0, [pc, #12]	@ (8004a3c <MX_TIM12_Init+0xc0>)
 8004a2e:	f000 ff8b 	bl	8005948 <HAL_TIM_MspPostInit>

}
 8004a32:	bf00      	nop
 8004a34:	3730      	adds	r7, #48	@ 0x30
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	200006b0 	.word	0x200006b0
 8004a40:	40001800 	.word	0x40001800

08004a44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004a48:	4b11      	ldr	r3, [pc, #68]	@ (8004a90 <MX_USART3_UART_Init+0x4c>)
 8004a4a:	4a12      	ldr	r2, [pc, #72]	@ (8004a94 <MX_USART3_UART_Init+0x50>)
 8004a4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004a4e:	4b10      	ldr	r3, [pc, #64]	@ (8004a90 <MX_USART3_UART_Init+0x4c>)
 8004a50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004a54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004a56:	4b0e      	ldr	r3, [pc, #56]	@ (8004a90 <MX_USART3_UART_Init+0x4c>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a90 <MX_USART3_UART_Init+0x4c>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004a62:	4b0b      	ldr	r3, [pc, #44]	@ (8004a90 <MX_USART3_UART_Init+0x4c>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004a68:	4b09      	ldr	r3, [pc, #36]	@ (8004a90 <MX_USART3_UART_Init+0x4c>)
 8004a6a:	220c      	movs	r2, #12
 8004a6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a6e:	4b08      	ldr	r3, [pc, #32]	@ (8004a90 <MX_USART3_UART_Init+0x4c>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a74:	4b06      	ldr	r3, [pc, #24]	@ (8004a90 <MX_USART3_UART_Init+0x4c>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004a7a:	4805      	ldr	r0, [pc, #20]	@ (8004a90 <MX_USART3_UART_Init+0x4c>)
 8004a7c:	f005 fb04 	bl	800a088 <HAL_UART_Init>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004a86:	f000 f8f4 	bl	8004c72 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004a8a:	bf00      	nop
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	200006f8 	.word	0x200006f8
 8004a94:	40004800 	.word	0x40004800

08004a98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	607b      	str	r3, [r7, #4]
 8004aa2:	4b10      	ldr	r3, [pc, #64]	@ (8004ae4 <MX_DMA_Init+0x4c>)
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa6:	4a0f      	ldr	r2, [pc, #60]	@ (8004ae4 <MX_DMA_Init+0x4c>)
 8004aa8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8004aae:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae4 <MX_DMA_Init+0x4c>)
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ab6:	607b      	str	r3, [r7, #4]
 8004ab8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8004aba:	2200      	movs	r2, #0
 8004abc:	2105      	movs	r1, #5
 8004abe:	200c      	movs	r0, #12
 8004ac0:	f001 fb5d 	bl	800617e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004ac4:	200c      	movs	r0, #12
 8004ac6:	f001 fb76 	bl	80061b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8004aca:	2200      	movs	r2, #0
 8004acc:	2105      	movs	r1, #5
 8004ace:	200e      	movs	r0, #14
 8004ad0:	f001 fb55 	bl	800617e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8004ad4:	200e      	movs	r0, #14
 8004ad6:	f001 fb6e 	bl	80061b6 <HAL_NVIC_EnableIRQ>

}
 8004ada:	bf00      	nop
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40023800 	.word	0x40023800

08004ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b08a      	sub	sp, #40	@ 0x28
 8004aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aee:	f107 0314 	add.w	r3, r7, #20
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	605a      	str	r2, [r3, #4]
 8004af8:	609a      	str	r2, [r3, #8]
 8004afa:	60da      	str	r2, [r3, #12]
 8004afc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004afe:	2300      	movs	r3, #0
 8004b00:	613b      	str	r3, [r7, #16]
 8004b02:	4b4e      	ldr	r3, [pc, #312]	@ (8004c3c <MX_GPIO_Init+0x154>)
 8004b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b06:	4a4d      	ldr	r2, [pc, #308]	@ (8004c3c <MX_GPIO_Init+0x154>)
 8004b08:	f043 0310 	orr.w	r3, r3, #16
 8004b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b0e:	4b4b      	ldr	r3, [pc, #300]	@ (8004c3c <MX_GPIO_Init+0x154>)
 8004b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b12:	f003 0310 	and.w	r3, r3, #16
 8004b16:	613b      	str	r3, [r7, #16]
 8004b18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	4b47      	ldr	r3, [pc, #284]	@ (8004c3c <MX_GPIO_Init+0x154>)
 8004b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b22:	4a46      	ldr	r2, [pc, #280]	@ (8004c3c <MX_GPIO_Init+0x154>)
 8004b24:	f043 0302 	orr.w	r3, r3, #2
 8004b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b2a:	4b44      	ldr	r3, [pc, #272]	@ (8004c3c <MX_GPIO_Init+0x154>)
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b36:	2300      	movs	r3, #0
 8004b38:	60bb      	str	r3, [r7, #8]
 8004b3a:	4b40      	ldr	r3, [pc, #256]	@ (8004c3c <MX_GPIO_Init+0x154>)
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3e:	4a3f      	ldr	r2, [pc, #252]	@ (8004c3c <MX_GPIO_Init+0x154>)
 8004b40:	f043 0308 	orr.w	r3, r3, #8
 8004b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b46:	4b3d      	ldr	r3, [pc, #244]	@ (8004c3c <MX_GPIO_Init+0x154>)
 8004b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b4a:	f003 0308 	and.w	r3, r3, #8
 8004b4e:	60bb      	str	r3, [r7, #8]
 8004b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b52:	2300      	movs	r3, #0
 8004b54:	607b      	str	r3, [r7, #4]
 8004b56:	4b39      	ldr	r3, [pc, #228]	@ (8004c3c <MX_GPIO_Init+0x154>)
 8004b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b5a:	4a38      	ldr	r2, [pc, #224]	@ (8004c3c <MX_GPIO_Init+0x154>)
 8004b5c:	f043 0304 	orr.w	r3, r3, #4
 8004b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b62:	4b36      	ldr	r3, [pc, #216]	@ (8004c3c <MX_GPIO_Init+0x154>)
 8004b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b66:	f003 0304 	and.w	r3, r3, #4
 8004b6a:	607b      	str	r3, [r7, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b6e:	2300      	movs	r3, #0
 8004b70:	603b      	str	r3, [r7, #0]
 8004b72:	4b32      	ldr	r3, [pc, #200]	@ (8004c3c <MX_GPIO_Init+0x154>)
 8004b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b76:	4a31      	ldr	r2, [pc, #196]	@ (8004c3c <MX_GPIO_Init+0x154>)
 8004b78:	f043 0301 	orr.w	r3, r3, #1
 8004b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b7e:	4b2f      	ldr	r3, [pc, #188]	@ (8004c3c <MX_GPIO_Init+0x154>)
 8004b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	603b      	str	r3, [r7, #0]
 8004b88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004b90:	482b      	ldr	r0, [pc, #172]	@ (8004c40 <MX_GPIO_Init+0x158>)
 8004b92:	f002 f8c9 	bl	8006d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SN_US_TRIG_GPIO_Port, SN_US_TRIG_Pin, GPIO_PIN_RESET);
 8004b96:	2200      	movs	r2, #0
 8004b98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004b9c:	4829      	ldr	r0, [pc, #164]	@ (8004c44 <MX_GPIO_Init+0x15c>)
 8004b9e:	f002 f8c3 	bl	8006d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OLED_DC_Pin|OLED_RST_Pin|OLED_SDA_Pin|OLED_SCL_Pin, GPIO_PIN_RESET);
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 8004ba8:	4827      	ldr	r0, [pc, #156]	@ (8004c48 <MX_GPIO_Init+0x160>)
 8004baa:	f002 f8bd 	bl	8006d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8004bae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8004bc0:	f107 0314 	add.w	r3, r7, #20
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	481e      	ldr	r0, [pc, #120]	@ (8004c40 <MX_GPIO_Init+0x158>)
 8004bc8:	f001 ff12 	bl	80069f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SN_US_TRIG_Pin */
  GPIO_InitStruct.Pin = SN_US_TRIG_Pin;
 8004bcc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SN_US_TRIG_GPIO_Port, &GPIO_InitStruct);
 8004bde:	f107 0314 	add.w	r3, r7, #20
 8004be2:	4619      	mov	r1, r3
 8004be4:	4817      	ldr	r0, [pc, #92]	@ (8004c44 <MX_GPIO_Init+0x15c>)
 8004be6:	f001 ff03 	bl	80069f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_DC_Pin OLED_RST_Pin OLED_SDA_Pin OLED_SCL_Pin */
  GPIO_InitStruct.Pin = OLED_DC_Pin|OLED_RST_Pin|OLED_SDA_Pin|OLED_SCL_Pin;
 8004bea:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8004bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bfc:	f107 0314 	add.w	r3, r7, #20
 8004c00:	4619      	mov	r1, r3
 8004c02:	4811      	ldr	r0, [pc, #68]	@ (8004c48 <MX_GPIO_Init+0x160>)
 8004c04:	f001 fef4 	bl	80069f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_PB_Pin */
  GPIO_InitStruct.Pin = USER_PB_Pin;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004c0c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004c10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c12:	2300      	movs	r3, #0
 8004c14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_PB_GPIO_Port, &GPIO_InitStruct);
 8004c16:	f107 0314 	add.w	r3, r7, #20
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4808      	ldr	r0, [pc, #32]	@ (8004c40 <MX_GPIO_Init+0x158>)
 8004c1e:	f001 fee7 	bl	80069f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8004c22:	2200      	movs	r2, #0
 8004c24:	2105      	movs	r1, #5
 8004c26:	2006      	movs	r0, #6
 8004c28:	f001 faa9 	bl	800617e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004c2c:	2006      	movs	r0, #6
 8004c2e:	f001 fac2 	bl	80061b6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004c32:	bf00      	nop
 8004c34:	3728      	adds	r7, #40	@ 0x28
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	40021000 	.word	0x40021000
 8004c44:	40020400 	.word	0x40020400
 8004c48:	40020c00 	.word	0x40020c00

08004c4c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin ) {
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	4603      	mov	r3, r0
 8004c54:	80fb      	strh	r3, [r7, #6]
     // see EXTI0_IRQHandler() in stm32f4xx_it.c for interrupt
	if (GPIO_Pin == USER_PB_Pin) {
//	        buttonPressed = 1;
	}
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b082      	sub	sp, #8
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
//	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); // debug
	  osDelay(50);
 8004c6a:	2032      	movs	r0, #50	@ 0x32
 8004c6c:	f006 fdbc 	bl	800b7e8 <osDelay>
 8004c70:	e7fb      	b.n	8004c6a <StartDefaultTask+0x8>

08004c72 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c72:	b480      	push	{r7}
 8004c74:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c76:	b672      	cpsid	i
}
 8004c78:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004c7a:	bf00      	nop
 8004c7c:	e7fd      	b.n	8004c7a <Error_Handler+0x8>
	...

08004c80 <OLED_WR_Byte>:
#include <oledfont.h>
#include "stdlib.h"
#include "stdbool.h"

void OLED_WR_Byte(uint8_t dat,uint8_t DataCmd)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	4603      	mov	r3, r0
 8004c88:	460a      	mov	r2, r1
 8004c8a:	71fb      	strb	r3, [r7, #7]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	if(DataCmd == 1)    // Data write
 8004c90:	79bb      	ldrb	r3, [r7, #6]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d106      	bne.n	8004ca4 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8004c96:	2201      	movs	r2, #1
 8004c98:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004c9c:	481e      	ldr	r0, [pc, #120]	@ (8004d18 <OLED_WR_Byte+0x98>)
 8004c9e:	f002 f843 	bl	8006d28 <HAL_GPIO_WritePin>
 8004ca2:	e005      	b.n	8004cb0 <OLED_WR_Byte+0x30>
	else                // Command write
	  OLED_RS_Clr();
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004caa:	481b      	ldr	r0, [pc, #108]	@ (8004d18 <OLED_WR_Byte+0x98>)
 8004cac:	f002 f83c 	bl	8006d28 <HAL_GPIO_WritePin>

	for(i=0;i<8;i++)
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	73fb      	strb	r3, [r7, #15]
 8004cb4:	e022      	b.n	8004cfc <OLED_WR_Byte+0x7c>
	{	OLED_SCLK_Clr();  // clear the clock
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004cbc:	4816      	ldr	r0, [pc, #88]	@ (8004d18 <OLED_WR_Byte+0x98>)
 8004cbe:	f002 f833 	bl	8006d28 <HAL_GPIO_WritePin>
		if(dat&0x80)      // check data bit
 8004cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	da06      	bge.n	8004cd8 <OLED_WR_Byte+0x58>
		   OLED_SDIN_Set();
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004cd0:	4811      	ldr	r0, [pc, #68]	@ (8004d18 <OLED_WR_Byte+0x98>)
 8004cd2:	f002 f829 	bl	8006d28 <HAL_GPIO_WritePin>
 8004cd6:	e005      	b.n	8004ce4 <OLED_WR_Byte+0x64>
		else 
		   OLED_SDIN_Clr();
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004cde:	480e      	ldr	r0, [pc, #56]	@ (8004d18 <OLED_WR_Byte+0x98>)
 8004ce0:	f002 f822 	bl	8006d28 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004cea:	480b      	ldr	r0, [pc, #44]	@ (8004d18 <OLED_WR_Byte+0x98>)
 8004cec:	f002 f81c 	bl	8006d28 <HAL_GPIO_WritePin>
		dat<<=1;          // check next data bit
 8004cf0:	79fb      	ldrb	r3, [r7, #7]
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	73fb      	strb	r3, [r7, #15]
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
 8004cfe:	2b07      	cmp	r3, #7
 8004d00:	d9d9      	bls.n	8004cb6 <OLED_WR_Byte+0x36>
	}

	OLED_RS_Set();   	  // Set RS=1 upon exit
 8004d02:	2201      	movs	r2, #1
 8004d04:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004d08:	4803      	ldr	r0, [pc, #12]	@ (8004d18 <OLED_WR_Byte+0x98>)
 8004d0a:	f002 f80d 	bl	8006d28 <HAL_GPIO_WritePin>
} 
 8004d0e:	bf00      	nop
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	40020c00 	.word	0x40020c00

08004d1c <OLED_Refresh_Gram>:

// Refresh the GRAM
uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 8004d22:	2300      	movs	r3, #0
 8004d24:	71fb      	strb	r3, [r7, #7]
 8004d26:	e026      	b.n	8004d76 <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);
 8004d28:	79fb      	ldrb	r3, [r7, #7]
 8004d2a:	3b50      	subs	r3, #80	@ 0x50
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2100      	movs	r1, #0
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7ff ffa5 	bl	8004c80 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);
 8004d36:	2100      	movs	r1, #0
 8004d38:	2000      	movs	r0, #0
 8004d3a:	f7ff ffa1 	bl	8004c80 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);
 8004d3e:	2100      	movs	r1, #0
 8004d40:	2010      	movs	r0, #16
 8004d42:	f7ff ff9d 	bl	8004c80 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 8004d46:	2300      	movs	r3, #0
 8004d48:	71bb      	strb	r3, [r7, #6]
 8004d4a:	e00d      	b.n	8004d68 <OLED_Refresh_Gram+0x4c>
 8004d4c:	79ba      	ldrb	r2, [r7, #6]
 8004d4e:	79fb      	ldrb	r3, [r7, #7]
 8004d50:	490d      	ldr	r1, [pc, #52]	@ (8004d88 <OLED_Refresh_Gram+0x6c>)
 8004d52:	00d2      	lsls	r2, r2, #3
 8004d54:	440a      	add	r2, r1
 8004d56:	4413      	add	r3, r2
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff ff8f 	bl	8004c80 <OLED_WR_Byte>
 8004d62:	79bb      	ldrb	r3, [r7, #6]
 8004d64:	3301      	adds	r3, #1
 8004d66:	71bb      	strb	r3, [r7, #6]
 8004d68:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	daed      	bge.n	8004d4c <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)
 8004d70:	79fb      	ldrb	r3, [r7, #7]
 8004d72:	3301      	adds	r3, #1
 8004d74:	71fb      	strb	r3, [r7, #7]
 8004d76:	79fb      	ldrb	r3, [r7, #7]
 8004d78:	2b07      	cmp	r3, #7
 8004d7a:	d9d5      	bls.n	8004d28 <OLED_Refresh_Gram+0xc>
	}
}
 8004d7c:	bf00      	nop
 8004d7e:	bf00      	nop
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	20000800 	.word	0x20000800

08004d8c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8004d92:	2300      	movs	r3, #0
 8004d94:	71fb      	strb	r3, [r7, #7]
 8004d96:	e014      	b.n	8004dc2 <OLED_Clear+0x36>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	71bb      	strb	r3, [r7, #6]
 8004d9c:	e00a      	b.n	8004db4 <OLED_Clear+0x28>
 8004d9e:	79ba      	ldrb	r2, [r7, #6]
 8004da0:	79fb      	ldrb	r3, [r7, #7]
 8004da2:	490c      	ldr	r1, [pc, #48]	@ (8004dd4 <OLED_Clear+0x48>)
 8004da4:	00d2      	lsls	r2, r2, #3
 8004da6:	440a      	add	r2, r1
 8004da8:	4413      	add	r3, r2
 8004daa:	2200      	movs	r2, #0
 8004dac:	701a      	strb	r2, [r3, #0]
 8004dae:	79bb      	ldrb	r3, [r7, #6]
 8004db0:	3301      	adds	r3, #1
 8004db2:	71bb      	strb	r3, [r7, #6]
 8004db4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	daf0      	bge.n	8004d9e <OLED_Clear+0x12>
 8004dbc:	79fb      	ldrb	r3, [r7, #7]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	71fb      	strb	r3, [r7, #7]
 8004dc2:	79fb      	ldrb	r3, [r7, #7]
 8004dc4:	2b07      	cmp	r3, #7
 8004dc6:	d9e7      	bls.n	8004d98 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8004dc8:	f7ff ffa8 	bl	8004d1c <OLED_Refresh_Gram>
}
 8004dcc:	bf00      	nop
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	20000800 	.word	0x20000800

08004dd8 <OLED_Display_On>:

 /**************************************************************************
Turn On Display
**************************************************************************/  
void OLED_Display_On(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
	OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC Command
 8004ddc:	2100      	movs	r1, #0
 8004dde:	208d      	movs	r0, #141	@ 0x8d
 8004de0:	f7ff ff4e 	bl	8004c80 <OLED_WR_Byte>
	OLED_WR_Byte(0X14,OLED_CMD);  //DCDC ON
 8004de4:	2100      	movs	r1, #0
 8004de6:	2014      	movs	r0, #20
 8004de8:	f7ff ff4a 	bl	8004c80 <OLED_WR_Byte>
	OLED_WR_Byte(0XAF,OLED_CMD);  //DISPLAY ON
 8004dec:	2100      	movs	r1, #0
 8004dee:	20af      	movs	r0, #175	@ 0xaf
 8004df0:	f7ff ff46 	bl	8004c80 <OLED_WR_Byte>
}
 8004df4:	bf00      	nop
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	4603      	mov	r3, r0
 8004e00:	71fb      	strb	r3, [r7, #7]
 8004e02:	460b      	mov	r3, r1
 8004e04:	71bb      	strb	r3, [r7, #6]
 8004e06:	4613      	mov	r3, r2
 8004e08:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8004e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	db41      	blt.n	8004e9a <OLED_DrawPoint+0xa2>
 8004e16:	79bb      	ldrb	r3, [r7, #6]
 8004e18:	2b3f      	cmp	r3, #63	@ 0x3f
 8004e1a:	d83e      	bhi.n	8004e9a <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8004e1c:	79bb      	ldrb	r3, [r7, #6]
 8004e1e:	08db      	lsrs	r3, r3, #3
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	f1c3 0307 	rsb	r3, r3, #7
 8004e26:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8004e28:	79bb      	ldrb	r3, [r7, #6]
 8004e2a:	f003 0307 	and.w	r3, r3, #7
 8004e2e:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8004e30:	7b7b      	ldrb	r3, [r7, #13]
 8004e32:	f1c3 0307 	rsb	r3, r3, #7
 8004e36:	2201      	movs	r2, #1
 8004e38:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8004e3e:	797b      	ldrb	r3, [r7, #5]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d012      	beq.n	8004e6a <OLED_DrawPoint+0x72>
 8004e44:	79fa      	ldrb	r2, [r7, #7]
 8004e46:	7bbb      	ldrb	r3, [r7, #14]
 8004e48:	4917      	ldr	r1, [pc, #92]	@ (8004ea8 <OLED_DrawPoint+0xb0>)
 8004e4a:	00d2      	lsls	r2, r2, #3
 8004e4c:	440a      	add	r2, r1
 8004e4e:	4413      	add	r3, r2
 8004e50:	7818      	ldrb	r0, [r3, #0]
 8004e52:	79fa      	ldrb	r2, [r7, #7]
 8004e54:	7bbb      	ldrb	r3, [r7, #14]
 8004e56:	7bf9      	ldrb	r1, [r7, #15]
 8004e58:	4301      	orrs	r1, r0
 8004e5a:	b2c8      	uxtb	r0, r1
 8004e5c:	4912      	ldr	r1, [pc, #72]	@ (8004ea8 <OLED_DrawPoint+0xb0>)
 8004e5e:	00d2      	lsls	r2, r2, #3
 8004e60:	440a      	add	r2, r1
 8004e62:	4413      	add	r3, r2
 8004e64:	4602      	mov	r2, r0
 8004e66:	701a      	strb	r2, [r3, #0]
 8004e68:	e018      	b.n	8004e9c <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8004e6a:	79fa      	ldrb	r2, [r7, #7]
 8004e6c:	7bbb      	ldrb	r3, [r7, #14]
 8004e6e:	490e      	ldr	r1, [pc, #56]	@ (8004ea8 <OLED_DrawPoint+0xb0>)
 8004e70:	00d2      	lsls	r2, r2, #3
 8004e72:	440a      	add	r2, r1
 8004e74:	4413      	add	r3, r2
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	b25a      	sxtb	r2, r3
 8004e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e7e:	43db      	mvns	r3, r3
 8004e80:	b25b      	sxtb	r3, r3
 8004e82:	4013      	ands	r3, r2
 8004e84:	b259      	sxtb	r1, r3
 8004e86:	79fa      	ldrb	r2, [r7, #7]
 8004e88:	7bbb      	ldrb	r3, [r7, #14]
 8004e8a:	b2c8      	uxtb	r0, r1
 8004e8c:	4906      	ldr	r1, [pc, #24]	@ (8004ea8 <OLED_DrawPoint+0xb0>)
 8004e8e:	00d2      	lsls	r2, r2, #3
 8004e90:	440a      	add	r2, r1
 8004e92:	4413      	add	r3, r2
 8004e94:	4602      	mov	r2, r0
 8004e96:	701a      	strb	r2, [r3, #0]
 8004e98:	e000      	b.n	8004e9c <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8004e9a:	bf00      	nop
}
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	20000800 	.word	0x20000800

08004eac <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8004eac:	b590      	push	{r4, r7, lr}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	4604      	mov	r4, r0
 8004eb4:	4608      	mov	r0, r1
 8004eb6:	4611      	mov	r1, r2
 8004eb8:	461a      	mov	r2, r3
 8004eba:	4623      	mov	r3, r4
 8004ebc:	71fb      	strb	r3, [r7, #7]
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	71bb      	strb	r3, [r7, #6]
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	717b      	strb	r3, [r7, #5]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8004eca:	79bb      	ldrb	r3, [r7, #6]
 8004ecc:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8004ece:	797b      	ldrb	r3, [r7, #5]
 8004ed0:	3b20      	subs	r3, #32
 8004ed2:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	73bb      	strb	r3, [r7, #14]
 8004ed8:	e04d      	b.n	8004f76 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8004eda:	793b      	ldrb	r3, [r7, #4]
 8004edc:	2b0c      	cmp	r3, #12
 8004ede:	d10b      	bne.n	8004ef8 <OLED_ShowChar+0x4c>
 8004ee0:	797a      	ldrb	r2, [r7, #5]
 8004ee2:	7bb9      	ldrb	r1, [r7, #14]
 8004ee4:	4828      	ldr	r0, [pc, #160]	@ (8004f88 <OLED_ShowChar+0xdc>)
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	4413      	add	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4403      	add	r3, r0
 8004ef0:	440b      	add	r3, r1
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	73fb      	strb	r3, [r7, #15]
 8004ef6:	e007      	b.n	8004f08 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8004ef8:	797a      	ldrb	r2, [r7, #5]
 8004efa:	7bbb      	ldrb	r3, [r7, #14]
 8004efc:	4923      	ldr	r1, [pc, #140]	@ (8004f8c <OLED_ShowChar+0xe0>)
 8004efe:	0112      	lsls	r2, r2, #4
 8004f00:	440a      	add	r2, r1
 8004f02:	4413      	add	r3, r2
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8004f08:	2300      	movs	r3, #0
 8004f0a:	737b      	strb	r3, [r7, #13]
 8004f0c:	e02d      	b.n	8004f6a <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8004f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	da07      	bge.n	8004f26 <OLED_ShowChar+0x7a>
 8004f16:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004f1a:	79b9      	ldrb	r1, [r7, #6]
 8004f1c:	79fb      	ldrb	r3, [r7, #7]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7ff ff6a 	bl	8004df8 <OLED_DrawPoint>
 8004f24:	e00c      	b.n	8004f40 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8004f26:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	bf0c      	ite	eq
 8004f2e:	2301      	moveq	r3, #1
 8004f30:	2300      	movne	r3, #0
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	461a      	mov	r2, r3
 8004f36:	79b9      	ldrb	r1, [r7, #6]
 8004f38:	79fb      	ldrb	r3, [r7, #7]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7ff ff5c 	bl	8004df8 <OLED_DrawPoint>
			temp<<=1;
 8004f40:	7bfb      	ldrb	r3, [r7, #15]
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	73fb      	strb	r3, [r7, #15]
			y++;
 8004f46:	79bb      	ldrb	r3, [r7, #6]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8004f4c:	79ba      	ldrb	r2, [r7, #6]
 8004f4e:	7b3b      	ldrb	r3, [r7, #12]
 8004f50:	1ad2      	subs	r2, r2, r3
 8004f52:	793b      	ldrb	r3, [r7, #4]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d105      	bne.n	8004f64 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8004f58:	7b3b      	ldrb	r3, [r7, #12]
 8004f5a:	71bb      	strb	r3, [r7, #6]
				x++;
 8004f5c:	79fb      	ldrb	r3, [r7, #7]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	71fb      	strb	r3, [r7, #7]
				break;
 8004f62:	e005      	b.n	8004f70 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8004f64:	7b7b      	ldrb	r3, [r7, #13]
 8004f66:	3301      	adds	r3, #1
 8004f68:	737b      	strb	r3, [r7, #13]
 8004f6a:	7b7b      	ldrb	r3, [r7, #13]
 8004f6c:	2b07      	cmp	r3, #7
 8004f6e:	d9ce      	bls.n	8004f0e <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8004f70:	7bbb      	ldrb	r3, [r7, #14]
 8004f72:	3301      	adds	r3, #1
 8004f74:	73bb      	strb	r3, [r7, #14]
 8004f76:	7bba      	ldrb	r2, [r7, #14]
 8004f78:	793b      	ldrb	r3, [r7, #4]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d3ad      	bcc.n	8004eda <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8004f7e:	bf00      	nop
 8004f80:	bf00      	nop
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd90      	pop	{r4, r7, pc}
 8004f88:	08012058 	.word	0x08012058
 8004f8c:	080124cc 	.word	0x080124cc

08004f90 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af02      	add	r7, sp, #8
 8004f96:	4603      	mov	r3, r0
 8004f98:	603a      	str	r2, [r7, #0]
 8004f9a:	71fb      	strb	r3, [r7, #7]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8004fa0:	e01f      	b.n	8004fe2 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8004fa2:	79fb      	ldrb	r3, [r7, #7]
 8004fa4:	2b7a      	cmp	r3, #122	@ 0x7a
 8004fa6:	d904      	bls.n	8004fb2 <OLED_ShowString+0x22>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	71fb      	strb	r3, [r7, #7]
 8004fac:	79bb      	ldrb	r3, [r7, #6]
 8004fae:	3310      	adds	r3, #16
 8004fb0:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8004fb2:	79bb      	ldrb	r3, [r7, #6]
 8004fb4:	2b3a      	cmp	r3, #58	@ 0x3a
 8004fb6:	d905      	bls.n	8004fc4 <OLED_ShowString+0x34>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	71fb      	strb	r3, [r7, #7]
 8004fbc:	79fb      	ldrb	r3, [r7, #7]
 8004fbe:	71bb      	strb	r3, [r7, #6]
 8004fc0:	f7ff fee4 	bl	8004d8c <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	781a      	ldrb	r2, [r3, #0]
 8004fc8:	79b9      	ldrb	r1, [r7, #6]
 8004fca:	79f8      	ldrb	r0, [r7, #7]
 8004fcc:	2301      	movs	r3, #1
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	230c      	movs	r3, #12
 8004fd2:	f7ff ff6b 	bl	8004eac <OLED_ShowChar>
        x+=8;
 8004fd6:	79fb      	ldrb	r3, [r7, #7]
 8004fd8:	3308      	adds	r3, #8
 8004fda:	71fb      	strb	r3, [r7, #7]
        p++;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1db      	bne.n	8004fa2 <OLED_ShowString+0x12>
    }  
}	 
 8004fea:	bf00      	nop
 8004fec:	bf00      	nop
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <OLED_DrawRect>:
/**************************************************************************
Show The Shape
**************************************************************************/
void OLED_DrawRect(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, bool color) {
 8004ff4:	b590      	push	{r4, r7, lr}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	4604      	mov	r4, r0
 8004ffc:	4608      	mov	r0, r1
 8004ffe:	4611      	mov	r1, r2
 8005000:	461a      	mov	r2, r3
 8005002:	4623      	mov	r3, r4
 8005004:	71fb      	strb	r3, [r7, #7]
 8005006:	4603      	mov	r3, r0
 8005008:	71bb      	strb	r3, [r7, #6]
 800500a:	460b      	mov	r3, r1
 800500c:	717b      	strb	r3, [r7, #5]
 800500e:	4613      	mov	r3, r2
 8005010:	713b      	strb	r3, [r7, #4]
    // Draw horizontal lines
    for (uint8_t x = x1; x <= x2; x++) {
 8005012:	79fb      	ldrb	r3, [r7, #7]
 8005014:	73fb      	strb	r3, [r7, #15]
 8005016:	e010      	b.n	800503a <OLED_DrawRect+0x46>
        OLED_DrawPoint(x, y1, color); // Draw top border
 8005018:	f897 2020 	ldrb.w	r2, [r7, #32]
 800501c:	79b9      	ldrb	r1, [r7, #6]
 800501e:	7bfb      	ldrb	r3, [r7, #15]
 8005020:	4618      	mov	r0, r3
 8005022:	f7ff fee9 	bl	8004df8 <OLED_DrawPoint>
        OLED_DrawPoint(x, y2, color); // Draw bottom border
 8005026:	f897 2020 	ldrb.w	r2, [r7, #32]
 800502a:	7939      	ldrb	r1, [r7, #4]
 800502c:	7bfb      	ldrb	r3, [r7, #15]
 800502e:	4618      	mov	r0, r3
 8005030:	f7ff fee2 	bl	8004df8 <OLED_DrawPoint>
    for (uint8_t x = x1; x <= x2; x++) {
 8005034:	7bfb      	ldrb	r3, [r7, #15]
 8005036:	3301      	adds	r3, #1
 8005038:	73fb      	strb	r3, [r7, #15]
 800503a:	7bfa      	ldrb	r2, [r7, #15]
 800503c:	797b      	ldrb	r3, [r7, #5]
 800503e:	429a      	cmp	r2, r3
 8005040:	d9ea      	bls.n	8005018 <OLED_DrawRect+0x24>
    }

    // Draw vertical lines
    for (uint8_t y = y1; y <= y2; y++) {
 8005042:	79bb      	ldrb	r3, [r7, #6]
 8005044:	73bb      	strb	r3, [r7, #14]
 8005046:	e010      	b.n	800506a <OLED_DrawRect+0x76>
        OLED_DrawPoint(x1, y, color); // Draw left border
 8005048:	f897 2020 	ldrb.w	r2, [r7, #32]
 800504c:	7bb9      	ldrb	r1, [r7, #14]
 800504e:	79fb      	ldrb	r3, [r7, #7]
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff fed1 	bl	8004df8 <OLED_DrawPoint>
        OLED_DrawPoint(x2, y, color); // Draw right border
 8005056:	f897 2020 	ldrb.w	r2, [r7, #32]
 800505a:	7bb9      	ldrb	r1, [r7, #14]
 800505c:	797b      	ldrb	r3, [r7, #5]
 800505e:	4618      	mov	r0, r3
 8005060:	f7ff feca 	bl	8004df8 <OLED_DrawPoint>
    for (uint8_t y = y1; y <= y2; y++) {
 8005064:	7bbb      	ldrb	r3, [r7, #14]
 8005066:	3301      	adds	r3, #1
 8005068:	73bb      	strb	r3, [r7, #14]
 800506a:	7bba      	ldrb	r2, [r7, #14]
 800506c:	793b      	ldrb	r3, [r7, #4]
 800506e:	429a      	cmp	r2, r3
 8005070:	d9ea      	bls.n	8005048 <OLED_DrawRect+0x54>
    }
}
 8005072:	bf00      	nop
 8005074:	bf00      	nop
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	bd90      	pop	{r4, r7, pc}

0800507c <OLED_DrawRectWithFill>:

void OLED_DrawRectWithFill(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, bool color) {
 800507c:	b590      	push	{r4, r7, lr}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	4604      	mov	r4, r0
 8005084:	4608      	mov	r0, r1
 8005086:	4611      	mov	r1, r2
 8005088:	461a      	mov	r2, r3
 800508a:	4623      	mov	r3, r4
 800508c:	71fb      	strb	r3, [r7, #7]
 800508e:	4603      	mov	r3, r0
 8005090:	71bb      	strb	r3, [r7, #6]
 8005092:	460b      	mov	r3, r1
 8005094:	717b      	strb	r3, [r7, #5]
 8005096:	4613      	mov	r3, r2
 8005098:	713b      	strb	r3, [r7, #4]
    // Draw borders
    for (uint8_t x = x1; x <= x2; x++) {
 800509a:	79fb      	ldrb	r3, [r7, #7]
 800509c:	73fb      	strb	r3, [r7, #15]
 800509e:	e010      	b.n	80050c2 <OLED_DrawRectWithFill+0x46>
        OLED_DrawPoint(x, y1, color); // Draw top border
 80050a0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80050a4:	79b9      	ldrb	r1, [r7, #6]
 80050a6:	7bfb      	ldrb	r3, [r7, #15]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff fea5 	bl	8004df8 <OLED_DrawPoint>
        OLED_DrawPoint(x, y2, color); // Draw bottom border
 80050ae:	f897 2020 	ldrb.w	r2, [r7, #32]
 80050b2:	7939      	ldrb	r1, [r7, #4]
 80050b4:	7bfb      	ldrb	r3, [r7, #15]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7ff fe9e 	bl	8004df8 <OLED_DrawPoint>
    for (uint8_t x = x1; x <= x2; x++) {
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
 80050be:	3301      	adds	r3, #1
 80050c0:	73fb      	strb	r3, [r7, #15]
 80050c2:	7bfa      	ldrb	r2, [r7, #15]
 80050c4:	797b      	ldrb	r3, [r7, #5]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d9ea      	bls.n	80050a0 <OLED_DrawRectWithFill+0x24>
    }

    for (uint8_t y = y1; y <= y2; y++) {
 80050ca:	79bb      	ldrb	r3, [r7, #6]
 80050cc:	73bb      	strb	r3, [r7, #14]
 80050ce:	e010      	b.n	80050f2 <OLED_DrawRectWithFill+0x76>
        OLED_DrawPoint(x1, y, color); // Draw left border
 80050d0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80050d4:	7bb9      	ldrb	r1, [r7, #14]
 80050d6:	79fb      	ldrb	r3, [r7, #7]
 80050d8:	4618      	mov	r0, r3
 80050da:	f7ff fe8d 	bl	8004df8 <OLED_DrawPoint>
        OLED_DrawPoint(x2, y, color); // Draw right border
 80050de:	f897 2020 	ldrb.w	r2, [r7, #32]
 80050e2:	7bb9      	ldrb	r1, [r7, #14]
 80050e4:	797b      	ldrb	r3, [r7, #5]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7ff fe86 	bl	8004df8 <OLED_DrawPoint>
    for (uint8_t y = y1; y <= y2; y++) {
 80050ec:	7bbb      	ldrb	r3, [r7, #14]
 80050ee:	3301      	adds	r3, #1
 80050f0:	73bb      	strb	r3, [r7, #14]
 80050f2:	7bba      	ldrb	r2, [r7, #14]
 80050f4:	793b      	ldrb	r3, [r7, #4]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d9ea      	bls.n	80050d0 <OLED_DrawRectWithFill+0x54>
    }

    // Fill the interior
    for (uint8_t y = y1 + 1; y < y2; y++) {
 80050fa:	79bb      	ldrb	r3, [r7, #6]
 80050fc:	3301      	adds	r3, #1
 80050fe:	737b      	strb	r3, [r7, #13]
 8005100:	e014      	b.n	800512c <OLED_DrawRectWithFill+0xb0>
        for (uint8_t x = x1 + 1; x < x2; x++) {
 8005102:	79fb      	ldrb	r3, [r7, #7]
 8005104:	3301      	adds	r3, #1
 8005106:	733b      	strb	r3, [r7, #12]
 8005108:	e009      	b.n	800511e <OLED_DrawRectWithFill+0xa2>
            OLED_DrawPoint(x, y, color); // Draw points within the rectangle
 800510a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800510e:	7b79      	ldrb	r1, [r7, #13]
 8005110:	7b3b      	ldrb	r3, [r7, #12]
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff fe70 	bl	8004df8 <OLED_DrawPoint>
        for (uint8_t x = x1 + 1; x < x2; x++) {
 8005118:	7b3b      	ldrb	r3, [r7, #12]
 800511a:	3301      	adds	r3, #1
 800511c:	733b      	strb	r3, [r7, #12]
 800511e:	7b3a      	ldrb	r2, [r7, #12]
 8005120:	797b      	ldrb	r3, [r7, #5]
 8005122:	429a      	cmp	r2, r3
 8005124:	d3f1      	bcc.n	800510a <OLED_DrawRectWithFill+0x8e>
    for (uint8_t y = y1 + 1; y < y2; y++) {
 8005126:	7b7b      	ldrb	r3, [r7, #13]
 8005128:	3301      	adds	r3, #1
 800512a:	737b      	strb	r3, [r7, #13]
 800512c:	7b7a      	ldrb	r2, [r7, #13]
 800512e:	793b      	ldrb	r3, [r7, #4]
 8005130:	429a      	cmp	r2, r3
 8005132:	d3e6      	bcc.n	8005102 <OLED_DrawRectWithFill+0x86>
        }
    }
}
 8005134:	bf00      	nop
 8005136:	bf00      	nop
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	bd90      	pop	{r4, r7, pc}

0800513e <OLED_DrawVerticalLine>:
    for (uint8_t i = x; i < x + length; i++) {
        OLED_DrawPoint(i, y, 1);
    }
}

void OLED_DrawVerticalLine(uint8_t x, uint8_t y, uint8_t length) {
 800513e:	b580      	push	{r7, lr}
 8005140:	b084      	sub	sp, #16
 8005142:	af00      	add	r7, sp, #0
 8005144:	4603      	mov	r3, r0
 8005146:	71fb      	strb	r3, [r7, #7]
 8005148:	460b      	mov	r3, r1
 800514a:	71bb      	strb	r3, [r7, #6]
 800514c:	4613      	mov	r3, r2
 800514e:	717b      	strb	r3, [r7, #5]
    for (uint8_t i = y; i < y + length; i++) {
 8005150:	79bb      	ldrb	r3, [r7, #6]
 8005152:	73fb      	strb	r3, [r7, #15]
 8005154:	e008      	b.n	8005168 <OLED_DrawVerticalLine+0x2a>
        OLED_DrawPoint(x, i, 1);
 8005156:	7bf9      	ldrb	r1, [r7, #15]
 8005158:	79fb      	ldrb	r3, [r7, #7]
 800515a:	2201      	movs	r2, #1
 800515c:	4618      	mov	r0, r3
 800515e:	f7ff fe4b 	bl	8004df8 <OLED_DrawPoint>
    for (uint8_t i = y; i < y + length; i++) {
 8005162:	7bfb      	ldrb	r3, [r7, #15]
 8005164:	3301      	adds	r3, #1
 8005166:	73fb      	strb	r3, [r7, #15]
 8005168:	7bfa      	ldrb	r2, [r7, #15]
 800516a:	79b9      	ldrb	r1, [r7, #6]
 800516c:	797b      	ldrb	r3, [r7, #5]
 800516e:	440b      	add	r3, r1
 8005170:	429a      	cmp	r2, r3
 8005172:	dbf0      	blt.n	8005156 <OLED_DrawVerticalLine+0x18>
    }
}
 8005174:	bf00      	nop
 8005176:	bf00      	nop
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
	...

08005180 <OLED_Init>:

void OLED_Init(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8005184:	f002 fef0 	bl	8007f68 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8005188:	4b42      	ldr	r3, [pc, #264]	@ (8005294 <OLED_Init+0x114>)
 800518a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800518c:	4a41      	ldr	r2, [pc, #260]	@ (8005294 <OLED_Init+0x114>)
 800518e:	f023 0301 	bic.w	r3, r3, #1
 8005192:	6713      	str	r3, [r2, #112]	@ 0x70
 8005194:	4b3f      	ldr	r3, [pc, #252]	@ (8005294 <OLED_Init+0x114>)
 8005196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005198:	4a3e      	ldr	r2, [pc, #248]	@ (8005294 <OLED_Init+0x114>)
 800519a:	f023 0304 	bic.w	r3, r3, #4
 800519e:	6713      	str	r3, [r2, #112]	@ 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 80051a0:	f002 fef6 	bl	8007f90 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 80051a4:	2200      	movs	r2, #0
 80051a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80051aa:	483b      	ldr	r0, [pc, #236]	@ (8005298 <OLED_Init+0x118>)
 80051ac:	f001 fdbc 	bl	8006d28 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80051b0:	2064      	movs	r0, #100	@ 0x64
 80051b2:	f000 fee5 	bl	8005f80 <HAL_Delay>
	OLED_RST_Set();
 80051b6:	2201      	movs	r2, #1
 80051b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80051bc:	4836      	ldr	r0, [pc, #216]	@ (8005298 <OLED_Init+0x118>)
 80051be:	f001 fdb3 	bl	8006d28 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 80051c2:	2100      	movs	r1, #0
 80051c4:	20ae      	movs	r0, #174	@ 0xae
 80051c6:	f7ff fd5b 	bl	8004c80 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 80051ca:	2100      	movs	r1, #0
 80051cc:	20d5      	movs	r0, #213	@ 0xd5
 80051ce:	f7ff fd57 	bl	8004c80 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80051d2:	2100      	movs	r1, #0
 80051d4:	2050      	movs	r0, #80	@ 0x50
 80051d6:	f7ff fd53 	bl	8004c80 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 80051da:	2100      	movs	r1, #0
 80051dc:	20a8      	movs	r0, #168	@ 0xa8
 80051de:	f7ff fd4f 	bl	8004c80 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 80051e2:	2100      	movs	r1, #0
 80051e4:	203f      	movs	r0, #63	@ 0x3f
 80051e6:	f7ff fd4b 	bl	8004c80 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 80051ea:	2100      	movs	r1, #0
 80051ec:	20d3      	movs	r0, #211	@ 0xd3
 80051ee:	f7ff fd47 	bl	8004c80 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 80051f2:	2100      	movs	r1, #0
 80051f4:	2000      	movs	r0, #0
 80051f6:	f7ff fd43 	bl	8004c80 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 80051fa:	2100      	movs	r1, #0
 80051fc:	2040      	movs	r0, #64	@ 0x40
 80051fe:	f7ff fd3f 	bl	8004c80 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8005202:	2100      	movs	r1, #0
 8005204:	208d      	movs	r0, #141	@ 0x8d
 8005206:	f7ff fd3b 	bl	8004c80 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800520a:	2100      	movs	r1, #0
 800520c:	2014      	movs	r0, #20
 800520e:	f7ff fd37 	bl	8004c80 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8005212:	2100      	movs	r1, #0
 8005214:	2020      	movs	r0, #32
 8005216:	f7ff fd33 	bl	8004c80 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800521a:	2100      	movs	r1, #0
 800521c:	2002      	movs	r0, #2
 800521e:	f7ff fd2f 	bl	8004c80 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8005222:	2100      	movs	r1, #0
 8005224:	20a1      	movs	r0, #161	@ 0xa1
 8005226:	f7ff fd2b 	bl	8004c80 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800522a:	2100      	movs	r1, #0
 800522c:	20c0      	movs	r0, #192	@ 0xc0
 800522e:	f7ff fd27 	bl	8004c80 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8005232:	2100      	movs	r1, #0
 8005234:	20da      	movs	r0, #218	@ 0xda
 8005236:	f7ff fd23 	bl	8004c80 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800523a:	2100      	movs	r1, #0
 800523c:	2012      	movs	r0, #18
 800523e:	f7ff fd1f 	bl	8004c80 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8005242:	2100      	movs	r1, #0
 8005244:	2081      	movs	r0, #129	@ 0x81
 8005246:	f7ff fd1b 	bl	8004c80 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800524a:	2100      	movs	r1, #0
 800524c:	20ef      	movs	r0, #239	@ 0xef
 800524e:	f7ff fd17 	bl	8004c80 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8005252:	2100      	movs	r1, #0
 8005254:	20d9      	movs	r0, #217	@ 0xd9
 8005256:	f7ff fd13 	bl	8004c80 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800525a:	2100      	movs	r1, #0
 800525c:	20f1      	movs	r0, #241	@ 0xf1
 800525e:	f7ff fd0f 	bl	8004c80 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8005262:	2100      	movs	r1, #0
 8005264:	20db      	movs	r0, #219	@ 0xdb
 8005266:	f7ff fd0b 	bl	8004c80 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800526a:	2100      	movs	r1, #0
 800526c:	2030      	movs	r0, #48	@ 0x30
 800526e:	f7ff fd07 	bl	8004c80 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8005272:	2100      	movs	r1, #0
 8005274:	20a4      	movs	r0, #164	@ 0xa4
 8005276:	f7ff fd03 	bl	8004c80 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800527a:	2100      	movs	r1, #0
 800527c:	20a6      	movs	r0, #166	@ 0xa6
 800527e:	f7ff fcff 	bl	8004c80 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8005282:	2100      	movs	r1, #0
 8005284:	20af      	movs	r0, #175	@ 0xaf
 8005286:	f7ff fcfb 	bl	8004c80 <OLED_WR_Byte>
	OLED_Clear(); 
 800528a:	f7ff fd7f 	bl	8004d8c <OLED_Clear>
}
 800528e:	bf00      	nop
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	40023800 	.word	0x40023800
 8005298:	40020c00 	.word	0x40020c00

0800529c <_Z8PID_initP12pid_type_defhPKfff>:
  * @param[in]      max_out: pid最大输出
  * @param[in]      max_iout: pid最大积分输出
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6178      	str	r0, [r7, #20]
 80052a4:	460b      	mov	r3, r1
 80052a6:	60fa      	str	r2, [r7, #12]
 80052a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80052ac:	edc7 0a01 	vstr	s1, [r7, #4]
 80052b0:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d042      	beq.n	800533e <_Z8PID_initP12pid_type_defhPKfff+0xa2>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d03f      	beq.n	800533e <_Z8PID_initP12pid_type_defhPKfff+0xa2>
    {
        return;
    }
    pid->mode = mode;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	7cfa      	ldrb	r2, [r7, #19]
 80052c2:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	3304      	adds	r3, #4
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3308      	adds	r3, #8
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f04f 0200 	mov.w	r2, #0
 80052f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	635a      	str	r2, [r3, #52]	@ 0x34
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f04f 0200 	mov.w	r2, #0
 800530a:	621a      	str	r2, [r3, #32]
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	6a1a      	ldr	r2, [r3, #32]
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	629a      	str	r2, [r3, #40]	@ 0x28
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	625a      	str	r2, [r3, #36]	@ 0x24
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	645a      	str	r2, [r3, #68]	@ 0x44
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	641a      	str	r2, [r3, #64]	@ 0x40
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800533c:	e000      	b.n	8005340 <_Z8PID_initP12pid_type_defhPKfff+0xa4>
        return;
 800533e:	bf00      	nop
}
 8005340:	371c      	adds	r7, #28
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <_Z8PID_calcP12pid_type_defff>:
  * @param[in]      ref: 反馈数据
  * @param[in]      set: 设定值
  * @retval         pid输出
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 800534a:	b480      	push	{r7}
 800534c:	b085      	sub	sp, #20
 800534e:	af00      	add	r7, sp, #0
 8005350:	60f8      	str	r0, [r7, #12]
 8005352:	ed87 0a02 	vstr	s0, [r7, #8]
 8005356:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d102      	bne.n	8005366 <_Z8PID_calcP12pid_type_defff+0x1c>
    {
        return 0.0f;
 8005360:	f04f 0300 	mov.w	r3, #0
 8005364:	e130      	b.n	80055c8 <_Z8PID_calcP12pid_type_defff+0x27e>
    }

    pid->error[2] = pid->error[1];
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->error[1] = pid->error[0];
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->set = set;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 8005382:	ed97 7a01 	vldr	s14, [r7, #4]
 8005386:	edd7 7a02 	vldr	s15, [r7, #8]
 800538a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (pid->mode == PID_POSITION)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	f040 8095 	bne.w	80054c8 <_Z8PID_calcP12pid_type_defff+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80053aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout += pid->Ki * pid->error[0];
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	edd3 6a02 	vldr	s13, [r3, #8]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80053c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80053f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	ed93 7a03 	vldr	s14, [r3, #12]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8005406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	edd3 7a05 	vldr	s15, [r3, #20]
 800541c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005424:	dd04      	ble.n	8005430 <_Z8PID_calcP12pid_type_defff+0xe6>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	695a      	ldr	r2, [r3, #20]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	629a      	str	r2, [r3, #40]	@ 0x28
 800542e:	e014      	b.n	800545a <_Z8PID_calcP12pid_type_defff+0x110>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	edd3 7a05 	vldr	s15, [r3, #20]
 800543c:	eef1 7a67 	vneg.f32	s15, s15
 8005440:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005448:	d507      	bpl.n	800545a <_Z8PID_calcP12pid_type_defff+0x110>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	edd3 7a05 	vldr	s15, [r3, #20]
 8005450:	eef1 7a67 	vneg.f32	s15, s15
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8005466:	ee37 7a27 	vadd.f32	s14, s14, s15
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	ed93 7a08 	vldr	s14, [r3, #32]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	edd3 7a04 	vldr	s15, [r3, #16]
 8005486:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800548a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800548e:	dd04      	ble.n	800549a <_Z8PID_calcP12pid_type_defff+0x150>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	691a      	ldr	r2, [r3, #16]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	621a      	str	r2, [r3, #32]
 8005498:	e094      	b.n	80055c4 <_Z8PID_calcP12pid_type_defff+0x27a>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	ed93 7a08 	vldr	s14, [r3, #32]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	edd3 7a04 	vldr	s15, [r3, #16]
 80054a6:	eef1 7a67 	vneg.f32	s15, s15
 80054aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b2:	f140 8087 	bpl.w	80055c4 <_Z8PID_calcP12pid_type_defff+0x27a>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80054bc:	eef1 7a67 	vneg.f32	s15, s15
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	edc3 7a08 	vstr	s15, [r3, #32]
 80054c6:	e07d      	b.n	80055c4 <_Z8PID_calcP12pid_type_defff+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d179      	bne.n	80055c4 <_Z8PID_calcP12pid_type_defff+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	ed93 7a01 	vldr	s14, [r3, #4]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80054e2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80054e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout = pid->Ki * pid->error[0];
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80054fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005522:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005526:	ee37 7a67 	vsub.f32	s14, s14, s15
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8005530:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	ed93 7a03 	vldr	s14, [r3, #12]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8005546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	ed93 7a08 	vldr	s14, [r3, #32]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8005562:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800556c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	ed93 7a08 	vldr	s14, [r3, #32]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	edd3 7a04 	vldr	s15, [r3, #16]
 8005586:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800558a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800558e:	dd04      	ble.n	800559a <_Z8PID_calcP12pid_type_defff+0x250>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	691a      	ldr	r2, [r3, #16]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	621a      	str	r2, [r3, #32]
 8005598:	e014      	b.n	80055c4 <_Z8PID_calcP12pid_type_defff+0x27a>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	ed93 7a08 	vldr	s14, [r3, #32]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	edd3 7a04 	vldr	s15, [r3, #16]
 80055a6:	eef1 7a67 	vneg.f32	s15, s15
 80055aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b2:	d507      	bpl.n	80055c4 <_Z8PID_calcP12pid_type_defff+0x27a>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	edd3 7a04 	vldr	s15, [r3, #16]
 80055ba:	eef1 7a67 	vneg.f32	s15, s15
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6a1b      	ldr	r3, [r3, #32]
}
 80055c8:	ee07 3a90 	vmov	s15, r3
 80055cc:	eeb0 0a67 	vmov.f32	s0, s15
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
	...

080055dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055e2:	2300      	movs	r3, #0
 80055e4:	607b      	str	r3, [r7, #4]
 80055e6:	4b12      	ldr	r3, [pc, #72]	@ (8005630 <HAL_MspInit+0x54>)
 80055e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ea:	4a11      	ldr	r2, [pc, #68]	@ (8005630 <HAL_MspInit+0x54>)
 80055ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80055f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80055f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005630 <HAL_MspInit+0x54>)
 80055f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055fa:	607b      	str	r3, [r7, #4]
 80055fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80055fe:	2300      	movs	r3, #0
 8005600:	603b      	str	r3, [r7, #0]
 8005602:	4b0b      	ldr	r3, [pc, #44]	@ (8005630 <HAL_MspInit+0x54>)
 8005604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005606:	4a0a      	ldr	r2, [pc, #40]	@ (8005630 <HAL_MspInit+0x54>)
 8005608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800560c:	6413      	str	r3, [r2, #64]	@ 0x40
 800560e:	4b08      	ldr	r3, [pc, #32]	@ (8005630 <HAL_MspInit+0x54>)
 8005610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005616:	603b      	str	r3, [r7, #0]
 8005618:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800561a:	2200      	movs	r2, #0
 800561c:	210f      	movs	r1, #15
 800561e:	f06f 0001 	mvn.w	r0, #1
 8005622:	f000 fdac 	bl	800617e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005626:	bf00      	nop
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	40023800 	.word	0x40023800

08005634 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08a      	sub	sp, #40	@ 0x28
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800563c:	f107 0314 	add.w	r3, r7, #20
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	605a      	str	r2, [r3, #4]
 8005646:	609a      	str	r2, [r3, #8]
 8005648:	60da      	str	r2, [r3, #12]
 800564a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a19      	ldr	r2, [pc, #100]	@ (80056b8 <HAL_I2C_MspInit+0x84>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d12c      	bne.n	80056b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005656:	2300      	movs	r3, #0
 8005658:	613b      	str	r3, [r7, #16]
 800565a:	4b18      	ldr	r3, [pc, #96]	@ (80056bc <HAL_I2C_MspInit+0x88>)
 800565c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800565e:	4a17      	ldr	r2, [pc, #92]	@ (80056bc <HAL_I2C_MspInit+0x88>)
 8005660:	f043 0302 	orr.w	r3, r3, #2
 8005664:	6313      	str	r3, [r2, #48]	@ 0x30
 8005666:	4b15      	ldr	r3, [pc, #84]	@ (80056bc <HAL_I2C_MspInit+0x88>)
 8005668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	613b      	str	r3, [r7, #16]
 8005670:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005672:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005678:	2312      	movs	r3, #18
 800567a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800567c:	2300      	movs	r3, #0
 800567e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005680:	2303      	movs	r3, #3
 8005682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005684:	2304      	movs	r3, #4
 8005686:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005688:	f107 0314 	add.w	r3, r7, #20
 800568c:	4619      	mov	r1, r3
 800568e:	480c      	ldr	r0, [pc, #48]	@ (80056c0 <HAL_I2C_MspInit+0x8c>)
 8005690:	f001 f9ae 	bl	80069f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005694:	2300      	movs	r3, #0
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	4b08      	ldr	r3, [pc, #32]	@ (80056bc <HAL_I2C_MspInit+0x88>)
 800569a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569c:	4a07      	ldr	r2, [pc, #28]	@ (80056bc <HAL_I2C_MspInit+0x88>)
 800569e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80056a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80056a4:	4b05      	ldr	r3, [pc, #20]	@ (80056bc <HAL_I2C_MspInit+0x88>)
 80056a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80056b0:	bf00      	nop
 80056b2:	3728      	adds	r7, #40	@ 0x28
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	40005800 	.word	0x40005800
 80056bc:	40023800 	.word	0x40023800
 80056c0:	40020400 	.word	0x40020400

080056c4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b08c      	sub	sp, #48	@ 0x30
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056cc:	f107 031c 	add.w	r3, r7, #28
 80056d0:	2200      	movs	r2, #0
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	605a      	str	r2, [r3, #4]
 80056d6:	609a      	str	r2, [r3, #8]
 80056d8:	60da      	str	r2, [r3, #12]
 80056da:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056e4:	d14b      	bne.n	800577e <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80056e6:	2300      	movs	r3, #0
 80056e8:	61bb      	str	r3, [r7, #24]
 80056ea:	4b3f      	ldr	r3, [pc, #252]	@ (80057e8 <HAL_TIM_Encoder_MspInit+0x124>)
 80056ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ee:	4a3e      	ldr	r2, [pc, #248]	@ (80057e8 <HAL_TIM_Encoder_MspInit+0x124>)
 80056f0:	f043 0301 	orr.w	r3, r3, #1
 80056f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80056f6:	4b3c      	ldr	r3, [pc, #240]	@ (80057e8 <HAL_TIM_Encoder_MspInit+0x124>)
 80056f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	61bb      	str	r3, [r7, #24]
 8005700:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005702:	2300      	movs	r3, #0
 8005704:	617b      	str	r3, [r7, #20]
 8005706:	4b38      	ldr	r3, [pc, #224]	@ (80057e8 <HAL_TIM_Encoder_MspInit+0x124>)
 8005708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800570a:	4a37      	ldr	r2, [pc, #220]	@ (80057e8 <HAL_TIM_Encoder_MspInit+0x124>)
 800570c:	f043 0301 	orr.w	r3, r3, #1
 8005710:	6313      	str	r3, [r2, #48]	@ 0x30
 8005712:	4b35      	ldr	r3, [pc, #212]	@ (80057e8 <HAL_TIM_Encoder_MspInit+0x124>)
 8005714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	617b      	str	r3, [r7, #20]
 800571c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800571e:	2300      	movs	r3, #0
 8005720:	613b      	str	r3, [r7, #16]
 8005722:	4b31      	ldr	r3, [pc, #196]	@ (80057e8 <HAL_TIM_Encoder_MspInit+0x124>)
 8005724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005726:	4a30      	ldr	r2, [pc, #192]	@ (80057e8 <HAL_TIM_Encoder_MspInit+0x124>)
 8005728:	f043 0302 	orr.w	r3, r3, #2
 800572c:	6313      	str	r3, [r2, #48]	@ 0x30
 800572e:	4b2e      	ldr	r3, [pc, #184]	@ (80057e8 <HAL_TIM_Encoder_MspInit+0x124>)
 8005730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	613b      	str	r3, [r7, #16]
 8005738:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800573a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800573e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005740:	2302      	movs	r3, #2
 8005742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005744:	2300      	movs	r3, #0
 8005746:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005748:	2300      	movs	r3, #0
 800574a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800574c:	2301      	movs	r3, #1
 800574e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005750:	f107 031c 	add.w	r3, r7, #28
 8005754:	4619      	mov	r1, r3
 8005756:	4825      	ldr	r0, [pc, #148]	@ (80057ec <HAL_TIM_Encoder_MspInit+0x128>)
 8005758:	f001 f94a 	bl	80069f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800575c:	2308      	movs	r3, #8
 800575e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005760:	2302      	movs	r3, #2
 8005762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005764:	2300      	movs	r3, #0
 8005766:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005768:	2300      	movs	r3, #0
 800576a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800576c:	2301      	movs	r3, #1
 800576e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005770:	f107 031c 	add.w	r3, r7, #28
 8005774:	4619      	mov	r1, r3
 8005776:	481e      	ldr	r0, [pc, #120]	@ (80057f0 <HAL_TIM_Encoder_MspInit+0x12c>)
 8005778:	f001 f93a 	bl	80069f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800577c:	e030      	b.n	80057e0 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a1c      	ldr	r2, [pc, #112]	@ (80057f4 <HAL_TIM_Encoder_MspInit+0x130>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d12b      	bne.n	80057e0 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005788:	2300      	movs	r3, #0
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	4b16      	ldr	r3, [pc, #88]	@ (80057e8 <HAL_TIM_Encoder_MspInit+0x124>)
 800578e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005790:	4a15      	ldr	r2, [pc, #84]	@ (80057e8 <HAL_TIM_Encoder_MspInit+0x124>)
 8005792:	f043 0302 	orr.w	r3, r3, #2
 8005796:	6413      	str	r3, [r2, #64]	@ 0x40
 8005798:	4b13      	ldr	r3, [pc, #76]	@ (80057e8 <HAL_TIM_Encoder_MspInit+0x124>)
 800579a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	60fb      	str	r3, [r7, #12]
 80057a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057a4:	2300      	movs	r3, #0
 80057a6:	60bb      	str	r3, [r7, #8]
 80057a8:	4b0f      	ldr	r3, [pc, #60]	@ (80057e8 <HAL_TIM_Encoder_MspInit+0x124>)
 80057aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ac:	4a0e      	ldr	r2, [pc, #56]	@ (80057e8 <HAL_TIM_Encoder_MspInit+0x124>)
 80057ae:	f043 0302 	orr.w	r3, r3, #2
 80057b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80057b4:	4b0c      	ldr	r3, [pc, #48]	@ (80057e8 <HAL_TIM_Encoder_MspInit+0x124>)
 80057b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b8:	f003 0302 	and.w	r3, r3, #2
 80057bc:	60bb      	str	r3, [r7, #8]
 80057be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80057c0:	2330      	movs	r3, #48	@ 0x30
 80057c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057c4:	2302      	movs	r3, #2
 80057c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057c8:	2300      	movs	r3, #0
 80057ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057cc:	2300      	movs	r3, #0
 80057ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80057d0:	2302      	movs	r3, #2
 80057d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057d4:	f107 031c 	add.w	r3, r7, #28
 80057d8:	4619      	mov	r1, r3
 80057da:	4805      	ldr	r0, [pc, #20]	@ (80057f0 <HAL_TIM_Encoder_MspInit+0x12c>)
 80057dc:	f001 f908 	bl	80069f0 <HAL_GPIO_Init>
}
 80057e0:	bf00      	nop
 80057e2:	3730      	adds	r7, #48	@ 0x30
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	40023800 	.word	0x40023800
 80057ec:	40020000 	.word	0x40020000
 80057f0:	40020400 	.word	0x40020400
 80057f4:	40000400 	.word	0x40000400

080057f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08e      	sub	sp, #56	@ 0x38
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005800:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005804:	2200      	movs	r2, #0
 8005806:	601a      	str	r2, [r3, #0]
 8005808:	605a      	str	r2, [r3, #4]
 800580a:	609a      	str	r2, [r3, #8]
 800580c:	60da      	str	r2, [r3, #12]
 800580e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a45      	ldr	r2, [pc, #276]	@ (800592c <HAL_TIM_Base_MspInit+0x134>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d10e      	bne.n	8005838 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800581a:	2300      	movs	r3, #0
 800581c:	623b      	str	r3, [r7, #32]
 800581e:	4b44      	ldr	r3, [pc, #272]	@ (8005930 <HAL_TIM_Base_MspInit+0x138>)
 8005820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005822:	4a43      	ldr	r2, [pc, #268]	@ (8005930 <HAL_TIM_Base_MspInit+0x138>)
 8005824:	f043 0304 	orr.w	r3, r3, #4
 8005828:	6413      	str	r3, [r2, #64]	@ 0x40
 800582a:	4b41      	ldr	r3, [pc, #260]	@ (8005930 <HAL_TIM_Base_MspInit+0x138>)
 800582c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800582e:	f003 0304 	and.w	r3, r3, #4
 8005832:	623b      	str	r3, [r7, #32]
 8005834:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8005836:	e074      	b.n	8005922 <HAL_TIM_Base_MspInit+0x12a>
  else if(htim_base->Instance==TIM6)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a3d      	ldr	r2, [pc, #244]	@ (8005934 <HAL_TIM_Base_MspInit+0x13c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d10e      	bne.n	8005860 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005842:	2300      	movs	r3, #0
 8005844:	61fb      	str	r3, [r7, #28]
 8005846:	4b3a      	ldr	r3, [pc, #232]	@ (8005930 <HAL_TIM_Base_MspInit+0x138>)
 8005848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800584a:	4a39      	ldr	r2, [pc, #228]	@ (8005930 <HAL_TIM_Base_MspInit+0x138>)
 800584c:	f043 0310 	orr.w	r3, r3, #16
 8005850:	6413      	str	r3, [r2, #64]	@ 0x40
 8005852:	4b37      	ldr	r3, [pc, #220]	@ (8005930 <HAL_TIM_Base_MspInit+0x138>)
 8005854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005856:	f003 0310 	and.w	r3, r3, #16
 800585a:	61fb      	str	r3, [r7, #28]
 800585c:	69fb      	ldr	r3, [r7, #28]
}
 800585e:	e060      	b.n	8005922 <HAL_TIM_Base_MspInit+0x12a>
  else if(htim_base->Instance==TIM8)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a34      	ldr	r2, [pc, #208]	@ (8005938 <HAL_TIM_Base_MspInit+0x140>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d134      	bne.n	80058d4 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800586a:	2300      	movs	r3, #0
 800586c:	61bb      	str	r3, [r7, #24]
 800586e:	4b30      	ldr	r3, [pc, #192]	@ (8005930 <HAL_TIM_Base_MspInit+0x138>)
 8005870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005872:	4a2f      	ldr	r2, [pc, #188]	@ (8005930 <HAL_TIM_Base_MspInit+0x138>)
 8005874:	f043 0302 	orr.w	r3, r3, #2
 8005878:	6453      	str	r3, [r2, #68]	@ 0x44
 800587a:	4b2d      	ldr	r3, [pc, #180]	@ (8005930 <HAL_TIM_Base_MspInit+0x138>)
 800587c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	61bb      	str	r3, [r7, #24]
 8005884:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005886:	2300      	movs	r3, #0
 8005888:	617b      	str	r3, [r7, #20]
 800588a:	4b29      	ldr	r3, [pc, #164]	@ (8005930 <HAL_TIM_Base_MspInit+0x138>)
 800588c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588e:	4a28      	ldr	r2, [pc, #160]	@ (8005930 <HAL_TIM_Base_MspInit+0x138>)
 8005890:	f043 0304 	orr.w	r3, r3, #4
 8005894:	6313      	str	r3, [r2, #48]	@ 0x30
 8005896:	4b26      	ldr	r3, [pc, #152]	@ (8005930 <HAL_TIM_Base_MspInit+0x138>)
 8005898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589a:	f003 0304 	and.w	r3, r3, #4
 800589e:	617b      	str	r3, [r7, #20]
 80058a0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SN_US_ECHO_Pin;
 80058a2:	2380      	movs	r3, #128	@ 0x80
 80058a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058a6:	2302      	movs	r3, #2
 80058a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058aa:	2300      	movs	r3, #0
 80058ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058ae:	2300      	movs	r3, #0
 80058b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80058b2:	2303      	movs	r3, #3
 80058b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SN_US_ECHO_GPIO_Port, &GPIO_InitStruct);
 80058b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058ba:	4619      	mov	r1, r3
 80058bc:	481f      	ldr	r0, [pc, #124]	@ (800593c <HAL_TIM_Base_MspInit+0x144>)
 80058be:	f001 f897 	bl	80069f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 80058c2:	2200      	movs	r2, #0
 80058c4:	2105      	movs	r1, #5
 80058c6:	202e      	movs	r0, #46	@ 0x2e
 80058c8:	f000 fc59 	bl	800617e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80058cc:	202e      	movs	r0, #46	@ 0x2e
 80058ce:	f000 fc72 	bl	80061b6 <HAL_NVIC_EnableIRQ>
}
 80058d2:	e026      	b.n	8005922 <HAL_TIM_Base_MspInit+0x12a>
  else if(htim_base->Instance==TIM9)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a19      	ldr	r2, [pc, #100]	@ (8005940 <HAL_TIM_Base_MspInit+0x148>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d10e      	bne.n	80058fc <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80058de:	2300      	movs	r3, #0
 80058e0:	613b      	str	r3, [r7, #16]
 80058e2:	4b13      	ldr	r3, [pc, #76]	@ (8005930 <HAL_TIM_Base_MspInit+0x138>)
 80058e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e6:	4a12      	ldr	r2, [pc, #72]	@ (8005930 <HAL_TIM_Base_MspInit+0x138>)
 80058e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80058ee:	4b10      	ldr	r3, [pc, #64]	@ (8005930 <HAL_TIM_Base_MspInit+0x138>)
 80058f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058f6:	613b      	str	r3, [r7, #16]
 80058f8:	693b      	ldr	r3, [r7, #16]
}
 80058fa:	e012      	b.n	8005922 <HAL_TIM_Base_MspInit+0x12a>
  else if(htim_base->Instance==TIM12)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a10      	ldr	r2, [pc, #64]	@ (8005944 <HAL_TIM_Base_MspInit+0x14c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d10d      	bne.n	8005922 <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8005906:	2300      	movs	r3, #0
 8005908:	60fb      	str	r3, [r7, #12]
 800590a:	4b09      	ldr	r3, [pc, #36]	@ (8005930 <HAL_TIM_Base_MspInit+0x138>)
 800590c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590e:	4a08      	ldr	r2, [pc, #32]	@ (8005930 <HAL_TIM_Base_MspInit+0x138>)
 8005910:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005914:	6413      	str	r3, [r2, #64]	@ 0x40
 8005916:	4b06      	ldr	r3, [pc, #24]	@ (8005930 <HAL_TIM_Base_MspInit+0x138>)
 8005918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800591a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800591e:	60fb      	str	r3, [r7, #12]
 8005920:	68fb      	ldr	r3, [r7, #12]
}
 8005922:	bf00      	nop
 8005924:	3738      	adds	r7, #56	@ 0x38
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	40000800 	.word	0x40000800
 8005930:	40023800 	.word	0x40023800
 8005934:	40001000 	.word	0x40001000
 8005938:	40010400 	.word	0x40010400
 800593c:	40020800 	.word	0x40020800
 8005940:	40014000 	.word	0x40014000
 8005944:	40001800 	.word	0x40001800

08005948 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b08a      	sub	sp, #40	@ 0x28
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005950:	f107 0314 	add.w	r3, r7, #20
 8005954:	2200      	movs	r2, #0
 8005956:	601a      	str	r2, [r3, #0]
 8005958:	605a      	str	r2, [r3, #4]
 800595a:	609a      	str	r2, [r3, #8]
 800595c:	60da      	str	r2, [r3, #12]
 800595e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a37      	ldr	r2, [pc, #220]	@ (8005a44 <HAL_TIM_MspPostInit+0xfc>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d11f      	bne.n	80059aa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800596a:	2300      	movs	r3, #0
 800596c:	613b      	str	r3, [r7, #16]
 800596e:	4b36      	ldr	r3, [pc, #216]	@ (8005a48 <HAL_TIM_MspPostInit+0x100>)
 8005970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005972:	4a35      	ldr	r2, [pc, #212]	@ (8005a48 <HAL_TIM_MspPostInit+0x100>)
 8005974:	f043 0302 	orr.w	r3, r3, #2
 8005978:	6313      	str	r3, [r2, #48]	@ 0x30
 800597a:	4b33      	ldr	r3, [pc, #204]	@ (8005a48 <HAL_TIM_MspPostInit+0x100>)
 800597c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	613b      	str	r3, [r7, #16]
 8005984:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_A_IN2_Pin|PWM_A_IN1_Pin;
 8005986:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800598a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800598c:	2302      	movs	r3, #2
 800598e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005990:	2300      	movs	r3, #0
 8005992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005994:	2300      	movs	r3, #0
 8005996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005998:	2302      	movs	r3, #2
 800599a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800599c:	f107 0314 	add.w	r3, r7, #20
 80059a0:	4619      	mov	r1, r3
 80059a2:	482a      	ldr	r0, [pc, #168]	@ (8005a4c <HAL_TIM_MspPostInit+0x104>)
 80059a4:	f001 f824 	bl	80069f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80059a8:	e047      	b.n	8005a3a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM9)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a28      	ldr	r2, [pc, #160]	@ (8005a50 <HAL_TIM_MspPostInit+0x108>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d11e      	bne.n	80059f2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80059b4:	2300      	movs	r3, #0
 80059b6:	60fb      	str	r3, [r7, #12]
 80059b8:	4b23      	ldr	r3, [pc, #140]	@ (8005a48 <HAL_TIM_MspPostInit+0x100>)
 80059ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059bc:	4a22      	ldr	r2, [pc, #136]	@ (8005a48 <HAL_TIM_MspPostInit+0x100>)
 80059be:	f043 0310 	orr.w	r3, r3, #16
 80059c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80059c4:	4b20      	ldr	r3, [pc, #128]	@ (8005a48 <HAL_TIM_MspPostInit+0x100>)
 80059c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c8:	f003 0310 	and.w	r3, r3, #16
 80059cc:	60fb      	str	r3, [r7, #12]
 80059ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_B_IN1_Pin|PWM_B_IN2_Pin;
 80059d0:	2360      	movs	r3, #96	@ 0x60
 80059d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059d4:	2302      	movs	r3, #2
 80059d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059d8:	2300      	movs	r3, #0
 80059da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059dc:	2300      	movs	r3, #0
 80059de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80059e0:	2303      	movs	r3, #3
 80059e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80059e4:	f107 0314 	add.w	r3, r7, #20
 80059e8:	4619      	mov	r1, r3
 80059ea:	481a      	ldr	r0, [pc, #104]	@ (8005a54 <HAL_TIM_MspPostInit+0x10c>)
 80059ec:	f001 f800 	bl	80069f0 <HAL_GPIO_Init>
}
 80059f0:	e023      	b.n	8005a3a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM12)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a18      	ldr	r2, [pc, #96]	@ (8005a58 <HAL_TIM_MspPostInit+0x110>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d11e      	bne.n	8005a3a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059fc:	2300      	movs	r3, #0
 80059fe:	60bb      	str	r3, [r7, #8]
 8005a00:	4b11      	ldr	r3, [pc, #68]	@ (8005a48 <HAL_TIM_MspPostInit+0x100>)
 8005a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a04:	4a10      	ldr	r2, [pc, #64]	@ (8005a48 <HAL_TIM_MspPostInit+0x100>)
 8005a06:	f043 0302 	orr.w	r3, r3, #2
 8005a0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8005a48 <HAL_TIM_MspPostInit+0x100>)
 8005a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	60bb      	str	r3, [r7, #8]
 8005a16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 8005a18:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a1e:	2302      	movs	r3, #2
 8005a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a22:	2300      	movs	r3, #0
 8005a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a26:	2300      	movs	r3, #0
 8005a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8005a2a:	2309      	movs	r3, #9
 8005a2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 8005a2e:	f107 0314 	add.w	r3, r7, #20
 8005a32:	4619      	mov	r1, r3
 8005a34:	4805      	ldr	r0, [pc, #20]	@ (8005a4c <HAL_TIM_MspPostInit+0x104>)
 8005a36:	f000 ffdb 	bl	80069f0 <HAL_GPIO_Init>
}
 8005a3a:	bf00      	nop
 8005a3c:	3728      	adds	r7, #40	@ 0x28
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	40000800 	.word	0x40000800
 8005a48:	40023800 	.word	0x40023800
 8005a4c:	40020400 	.word	0x40020400
 8005a50:	40014000 	.word	0x40014000
 8005a54:	40021000 	.word	0x40021000
 8005a58:	40001800 	.word	0x40001800

08005a5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b08a      	sub	sp, #40	@ 0x28
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a64:	f107 0314 	add.w	r3, r7, #20
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	605a      	str	r2, [r3, #4]
 8005a6e:	609a      	str	r2, [r3, #8]
 8005a70:	60da      	str	r2, [r3, #12]
 8005a72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a54      	ldr	r2, [pc, #336]	@ (8005bcc <HAL_UART_MspInit+0x170>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	f040 80a2 	bne.w	8005bc4 <HAL_UART_MspInit+0x168>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005a80:	2300      	movs	r3, #0
 8005a82:	613b      	str	r3, [r7, #16]
 8005a84:	4b52      	ldr	r3, [pc, #328]	@ (8005bd0 <HAL_UART_MspInit+0x174>)
 8005a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a88:	4a51      	ldr	r2, [pc, #324]	@ (8005bd0 <HAL_UART_MspInit+0x174>)
 8005a8a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a90:	4b4f      	ldr	r3, [pc, #316]	@ (8005bd0 <HAL_UART_MspInit+0x174>)
 8005a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a98:	613b      	str	r3, [r7, #16]
 8005a9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	4b4b      	ldr	r3, [pc, #300]	@ (8005bd0 <HAL_UART_MspInit+0x174>)
 8005aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa4:	4a4a      	ldr	r2, [pc, #296]	@ (8005bd0 <HAL_UART_MspInit+0x174>)
 8005aa6:	f043 0308 	orr.w	r3, r3, #8
 8005aaa:	6313      	str	r3, [r2, #48]	@ 0x30
 8005aac:	4b48      	ldr	r3, [pc, #288]	@ (8005bd0 <HAL_UART_MspInit+0x174>)
 8005aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab0:	f003 0308 	and.w	r3, r3, #8
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005ab8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005abe:	2302      	movs	r3, #2
 8005ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005aca:	2307      	movs	r3, #7
 8005acc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ace:	f107 0314 	add.w	r3, r7, #20
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	483f      	ldr	r0, [pc, #252]	@ (8005bd4 <HAL_UART_MspInit+0x178>)
 8005ad6:	f000 ff8b 	bl	80069f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005ada:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005aec:	2307      	movs	r3, #7
 8005aee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005af0:	f107 0314 	add.w	r3, r7, #20
 8005af4:	4619      	mov	r1, r3
 8005af6:	4837      	ldr	r0, [pc, #220]	@ (8005bd4 <HAL_UART_MspInit+0x178>)
 8005af8:	f000 ff7a 	bl	80069f0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8005afc:	4b36      	ldr	r3, [pc, #216]	@ (8005bd8 <HAL_UART_MspInit+0x17c>)
 8005afe:	4a37      	ldr	r2, [pc, #220]	@ (8005bdc <HAL_UART_MspInit+0x180>)
 8005b00:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8005b02:	4b35      	ldr	r3, [pc, #212]	@ (8005bd8 <HAL_UART_MspInit+0x17c>)
 8005b04:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005b08:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b0a:	4b33      	ldr	r3, [pc, #204]	@ (8005bd8 <HAL_UART_MspInit+0x17c>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b10:	4b31      	ldr	r3, [pc, #196]	@ (8005bd8 <HAL_UART_MspInit+0x17c>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005b16:	4b30      	ldr	r3, [pc, #192]	@ (8005bd8 <HAL_UART_MspInit+0x17c>)
 8005b18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005b1c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b1e:	4b2e      	ldr	r3, [pc, #184]	@ (8005bd8 <HAL_UART_MspInit+0x17c>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b24:	4b2c      	ldr	r3, [pc, #176]	@ (8005bd8 <HAL_UART_MspInit+0x17c>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005b2a:	4b2b      	ldr	r3, [pc, #172]	@ (8005bd8 <HAL_UART_MspInit+0x17c>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005b30:	4b29      	ldr	r3, [pc, #164]	@ (8005bd8 <HAL_UART_MspInit+0x17c>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b36:	4b28      	ldr	r3, [pc, #160]	@ (8005bd8 <HAL_UART_MspInit+0x17c>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005b3c:	4826      	ldr	r0, [pc, #152]	@ (8005bd8 <HAL_UART_MspInit+0x17c>)
 8005b3e:	f000 fb55 	bl	80061ec <HAL_DMA_Init>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8005b48:	f7ff f893 	bl	8004c72 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a22      	ldr	r2, [pc, #136]	@ (8005bd8 <HAL_UART_MspInit+0x17c>)
 8005b50:	639a      	str	r2, [r3, #56]	@ 0x38
 8005b52:	4a21      	ldr	r2, [pc, #132]	@ (8005bd8 <HAL_UART_MspInit+0x17c>)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8005b58:	4b21      	ldr	r3, [pc, #132]	@ (8005be0 <HAL_UART_MspInit+0x184>)
 8005b5a:	4a22      	ldr	r2, [pc, #136]	@ (8005be4 <HAL_UART_MspInit+0x188>)
 8005b5c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8005b5e:	4b20      	ldr	r3, [pc, #128]	@ (8005be0 <HAL_UART_MspInit+0x184>)
 8005b60:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005b64:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005b66:	4b1e      	ldr	r3, [pc, #120]	@ (8005be0 <HAL_UART_MspInit+0x184>)
 8005b68:	2240      	movs	r2, #64	@ 0x40
 8005b6a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8005be0 <HAL_UART_MspInit+0x184>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005b72:	4b1b      	ldr	r3, [pc, #108]	@ (8005be0 <HAL_UART_MspInit+0x184>)
 8005b74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005b78:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b7a:	4b19      	ldr	r3, [pc, #100]	@ (8005be0 <HAL_UART_MspInit+0x184>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b80:	4b17      	ldr	r3, [pc, #92]	@ (8005be0 <HAL_UART_MspInit+0x184>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8005b86:	4b16      	ldr	r3, [pc, #88]	@ (8005be0 <HAL_UART_MspInit+0x184>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005b8c:	4b14      	ldr	r3, [pc, #80]	@ (8005be0 <HAL_UART_MspInit+0x184>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b92:	4b13      	ldr	r3, [pc, #76]	@ (8005be0 <HAL_UART_MspInit+0x184>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005b98:	4811      	ldr	r0, [pc, #68]	@ (8005be0 <HAL_UART_MspInit+0x184>)
 8005b9a:	f000 fb27 	bl	80061ec <HAL_DMA_Init>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d001      	beq.n	8005ba8 <HAL_UART_MspInit+0x14c>
    {
      Error_Handler();
 8005ba4:	f7ff f865 	bl	8004c72 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a0d      	ldr	r2, [pc, #52]	@ (8005be0 <HAL_UART_MspInit+0x184>)
 8005bac:	635a      	str	r2, [r3, #52]	@ 0x34
 8005bae:	4a0c      	ldr	r2, [pc, #48]	@ (8005be0 <HAL_UART_MspInit+0x184>)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	2105      	movs	r1, #5
 8005bb8:	2027      	movs	r0, #39	@ 0x27
 8005bba:	f000 fae0 	bl	800617e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005bbe:	2027      	movs	r0, #39	@ 0x27
 8005bc0:	f000 faf9 	bl	80061b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005bc4:	bf00      	nop
 8005bc6:	3728      	adds	r7, #40	@ 0x28
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	40004800 	.word	0x40004800
 8005bd0:	40023800 	.word	0x40023800
 8005bd4:	40020c00 	.word	0x40020c00
 8005bd8:	2000073c 	.word	0x2000073c
 8005bdc:	40026028 	.word	0x40026028
 8005be0:	2000079c 	.word	0x2000079c
 8005be4:	40026058 	.word	0x40026058

08005be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005be8:	b480      	push	{r7}
 8005bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005bec:	bf00      	nop
 8005bee:	e7fd      	b.n	8005bec <NMI_Handler+0x4>

08005bf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005bf4:	bf00      	nop
 8005bf6:	e7fd      	b.n	8005bf4 <HardFault_Handler+0x4>

08005bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005bfc:	bf00      	nop
 8005bfe:	e7fd      	b.n	8005bfc <MemManage_Handler+0x4>

08005c00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c00:	b480      	push	{r7}
 8005c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c04:	bf00      	nop
 8005c06:	e7fd      	b.n	8005c04 <BusFault_Handler+0x4>

08005c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c0c:	bf00      	nop
 8005c0e:	e7fd      	b.n	8005c0c <UsageFault_Handler+0x4>

08005c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c10:	b480      	push	{r7}
 8005c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005c14:	bf00      	nop
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005c22:	f000 f98d 	bl	8005f40 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005c26:	f007 fc75 	bl	800d514 <xTaskGetSchedulerState>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d001      	beq.n	8005c34 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8005c30:	f008 fa6a 	bl	800e108 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c34:	bf00      	nop
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_PB_Pin);
 8005c3c:	2001      	movs	r0, #1
 8005c3e:	f001 f88d 	bl	8006d5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005c42:	bf00      	nop
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005c4c:	4802      	ldr	r0, [pc, #8]	@ (8005c58 <DMA1_Stream1_IRQHandler+0x10>)
 8005c4e:	f000 fc65 	bl	800651c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005c52:	bf00      	nop
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	2000073c 	.word	0x2000073c

08005c5c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005c60:	4802      	ldr	r0, [pc, #8]	@ (8005c6c <DMA1_Stream3_IRQHandler+0x10>)
 8005c62:	f000 fc5b 	bl	800651c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005c66:	bf00      	nop
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	2000079c 	.word	0x2000079c

08005c70 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005c74:	4802      	ldr	r0, [pc, #8]	@ (8005c80 <USART3_IRQHandler+0x10>)
 8005c76:	f004 fb95 	bl	800a3a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005c7a:	bf00      	nop
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	200006f8 	.word	0x200006f8

08005c84 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005c88:	4802      	ldr	r0, [pc, #8]	@ (8005c94 <TIM8_CC_IRQHandler+0x10>)
 8005c8a:	f003 f999 	bl	8008fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8005c8e:	bf00      	nop
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	20000620 	.word	0x20000620

08005c98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0
  return 1;
 8005c9c:	2301      	movs	r3, #1
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <_kill>:

int _kill(int pid, int sig)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005cb2:	f00a f9f3 	bl	801009c <__errno>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2216      	movs	r2, #22
 8005cba:	601a      	str	r2, [r3, #0]
  return -1;
 8005cbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3708      	adds	r7, #8
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <_exit>:

void _exit (int status)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f7ff ffe7 	bl	8005ca8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005cda:	bf00      	nop
 8005cdc:	e7fd      	b.n	8005cda <_exit+0x12>

08005cde <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b086      	sub	sp, #24
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	60f8      	str	r0, [r7, #12]
 8005ce6:	60b9      	str	r1, [r7, #8]
 8005ce8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005cea:	2300      	movs	r3, #0
 8005cec:	617b      	str	r3, [r7, #20]
 8005cee:	e00a      	b.n	8005d06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005cf0:	f3af 8000 	nop.w
 8005cf4:	4601      	mov	r1, r0
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	1c5a      	adds	r2, r3, #1
 8005cfa:	60ba      	str	r2, [r7, #8]
 8005cfc:	b2ca      	uxtb	r2, r1
 8005cfe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	3301      	adds	r3, #1
 8005d04:	617b      	str	r3, [r7, #20]
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	dbf0      	blt.n	8005cf0 <_read+0x12>
  }

  return len;
 8005d0e:	687b      	ldr	r3, [r7, #4]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3718      	adds	r7, #24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d24:	2300      	movs	r3, #0
 8005d26:	617b      	str	r3, [r7, #20]
 8005d28:	e009      	b.n	8005d3e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	60ba      	str	r2, [r7, #8]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	617b      	str	r3, [r7, #20]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	dbf1      	blt.n	8005d2a <_write+0x12>
  }
  return len;
 8005d46:	687b      	ldr	r3, [r7, #4]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3718      	adds	r7, #24
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <_close>:

int _close(int file)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005d58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005d78:	605a      	str	r2, [r3, #4]
  return 0;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <_isatty>:

int _isatty(int file)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005d90:	2301      	movs	r3, #1
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b085      	sub	sp, #20
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	60f8      	str	r0, [r7, #12]
 8005da6:	60b9      	str	r1, [r7, #8]
 8005da8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005dc0:	4a14      	ldr	r2, [pc, #80]	@ (8005e14 <_sbrk+0x5c>)
 8005dc2:	4b15      	ldr	r3, [pc, #84]	@ (8005e18 <_sbrk+0x60>)
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005dcc:	4b13      	ldr	r3, [pc, #76]	@ (8005e1c <_sbrk+0x64>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d102      	bne.n	8005dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005dd4:	4b11      	ldr	r3, [pc, #68]	@ (8005e1c <_sbrk+0x64>)
 8005dd6:	4a12      	ldr	r2, [pc, #72]	@ (8005e20 <_sbrk+0x68>)
 8005dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005dda:	4b10      	ldr	r3, [pc, #64]	@ (8005e1c <_sbrk+0x64>)
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4413      	add	r3, r2
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d207      	bcs.n	8005df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005de8:	f00a f958 	bl	801009c <__errno>
 8005dec:	4603      	mov	r3, r0
 8005dee:	220c      	movs	r2, #12
 8005df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005df2:	f04f 33ff 	mov.w	r3, #4294967295
 8005df6:	e009      	b.n	8005e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005df8:	4b08      	ldr	r3, [pc, #32]	@ (8005e1c <_sbrk+0x64>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005dfe:	4b07      	ldr	r3, [pc, #28]	@ (8005e1c <_sbrk+0x64>)
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4413      	add	r3, r2
 8005e06:	4a05      	ldr	r2, [pc, #20]	@ (8005e1c <_sbrk+0x64>)
 8005e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3718      	adds	r7, #24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	20020000 	.word	0x20020000
 8005e18:	00000400 	.word	0x00000400
 8005e1c:	20000c00 	.word	0x20000c00
 8005e20:	200056a8 	.word	0x200056a8

08005e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005e24:	b480      	push	{r7}
 8005e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005e28:	4b06      	ldr	r3, [pc, #24]	@ (8005e44 <SystemInit+0x20>)
 8005e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e2e:	4a05      	ldr	r2, [pc, #20]	@ (8005e44 <SystemInit+0x20>)
 8005e30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005e34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005e38:	bf00      	nop
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	e000ed00 	.word	0xe000ed00

08005e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005e48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005e80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005e4c:	480d      	ldr	r0, [pc, #52]	@ (8005e84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005e4e:	490e      	ldr	r1, [pc, #56]	@ (8005e88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005e50:	4a0e      	ldr	r2, [pc, #56]	@ (8005e8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005e54:	e002      	b.n	8005e5c <LoopCopyDataInit>

08005e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e5a:	3304      	adds	r3, #4

08005e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e60:	d3f9      	bcc.n	8005e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e62:	4a0b      	ldr	r2, [pc, #44]	@ (8005e90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005e64:	4c0b      	ldr	r4, [pc, #44]	@ (8005e94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e68:	e001      	b.n	8005e6e <LoopFillZerobss>

08005e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e6c:	3204      	adds	r2, #4

08005e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e70:	d3fb      	bcc.n	8005e6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005e72:	f7ff ffd7 	bl	8005e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005e76:	f00a f917 	bl	80100a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005e7a:	f7fe fa7f 	bl	800437c <main>
  bx  lr    
 8005e7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005e80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e88:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8005e8c:	08012ef8 	.word	0x08012ef8
  ldr r2, =_sbss
 8005e90:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8005e94:	200056a8 	.word	0x200056a8

08005e98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005e98:	e7fe      	b.n	8005e98 <ADC_IRQHandler>
	...

08005e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8005edc <HAL_Init+0x40>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8005edc <HAL_Init+0x40>)
 8005ea6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005eaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005eac:	4b0b      	ldr	r3, [pc, #44]	@ (8005edc <HAL_Init+0x40>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a0a      	ldr	r2, [pc, #40]	@ (8005edc <HAL_Init+0x40>)
 8005eb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005eb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005eb8:	4b08      	ldr	r3, [pc, #32]	@ (8005edc <HAL_Init+0x40>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a07      	ldr	r2, [pc, #28]	@ (8005edc <HAL_Init+0x40>)
 8005ebe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ec2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ec4:	2003      	movs	r0, #3
 8005ec6:	f000 f94f 	bl	8006168 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005eca:	200f      	movs	r0, #15
 8005ecc:	f000 f808 	bl	8005ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005ed0:	f7ff fb84 	bl	80055dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	40023c00 	.word	0x40023c00

08005ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005ee8:	4b12      	ldr	r3, [pc, #72]	@ (8005f34 <HAL_InitTick+0x54>)
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	4b12      	ldr	r3, [pc, #72]	@ (8005f38 <HAL_InitTick+0x58>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 f967 	bl	80061d2 <HAL_SYSTICK_Config>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e00e      	b.n	8005f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b0f      	cmp	r3, #15
 8005f12:	d80a      	bhi.n	8005f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f14:	2200      	movs	r2, #0
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	f04f 30ff 	mov.w	r0, #4294967295
 8005f1c:	f000 f92f 	bl	800617e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005f20:	4a06      	ldr	r2, [pc, #24]	@ (8005f3c <HAL_InitTick+0x5c>)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
 8005f28:	e000      	b.n	8005f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3708      	adds	r7, #8
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	20000004 	.word	0x20000004
 8005f38:	2000000c 	.word	0x2000000c
 8005f3c:	20000008 	.word	0x20000008

08005f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f40:	b480      	push	{r7}
 8005f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005f44:	4b06      	ldr	r3, [pc, #24]	@ (8005f60 <HAL_IncTick+0x20>)
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	4b06      	ldr	r3, [pc, #24]	@ (8005f64 <HAL_IncTick+0x24>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4413      	add	r3, r2
 8005f50:	4a04      	ldr	r2, [pc, #16]	@ (8005f64 <HAL_IncTick+0x24>)
 8005f52:	6013      	str	r3, [r2, #0]
}
 8005f54:	bf00      	nop
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	2000000c 	.word	0x2000000c
 8005f64:	20000c04 	.word	0x20000c04

08005f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8005f6c:	4b03      	ldr	r3, [pc, #12]	@ (8005f7c <HAL_GetTick+0x14>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	20000c04 	.word	0x20000c04

08005f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f88:	f7ff ffee 	bl	8005f68 <HAL_GetTick>
 8005f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f98:	d005      	beq.n	8005fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8005fc4 <HAL_Delay+0x44>)
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005fa6:	bf00      	nop
 8005fa8:	f7ff ffde 	bl	8005f68 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d8f7      	bhi.n	8005fa8 <HAL_Delay+0x28>
  {
  }
}
 8005fb8:	bf00      	nop
 8005fba:	bf00      	nop
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	2000000c 	.word	0x2000000c

08005fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f003 0307 	and.w	r3, r3, #7
 8005fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800600c <__NVIC_SetPriorityGrouping+0x44>)
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ff0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005ff4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ffa:	4a04      	ldr	r2, [pc, #16]	@ (800600c <__NVIC_SetPriorityGrouping+0x44>)
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	60d3      	str	r3, [r2, #12]
}
 8006000:	bf00      	nop
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	e000ed00 	.word	0xe000ed00

08006010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006010:	b480      	push	{r7}
 8006012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006014:	4b04      	ldr	r3, [pc, #16]	@ (8006028 <__NVIC_GetPriorityGrouping+0x18>)
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	0a1b      	lsrs	r3, r3, #8
 800601a:	f003 0307 	and.w	r3, r3, #7
}
 800601e:	4618      	mov	r0, r3
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr
 8006028:	e000ed00 	.word	0xe000ed00

0800602c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	4603      	mov	r3, r0
 8006034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800603a:	2b00      	cmp	r3, #0
 800603c:	db0b      	blt.n	8006056 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800603e:	79fb      	ldrb	r3, [r7, #7]
 8006040:	f003 021f 	and.w	r2, r3, #31
 8006044:	4907      	ldr	r1, [pc, #28]	@ (8006064 <__NVIC_EnableIRQ+0x38>)
 8006046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800604a:	095b      	lsrs	r3, r3, #5
 800604c:	2001      	movs	r0, #1
 800604e:	fa00 f202 	lsl.w	r2, r0, r2
 8006052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006056:	bf00      	nop
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	e000e100 	.word	0xe000e100

08006068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	4603      	mov	r3, r0
 8006070:	6039      	str	r1, [r7, #0]
 8006072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006078:	2b00      	cmp	r3, #0
 800607a:	db0a      	blt.n	8006092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	b2da      	uxtb	r2, r3
 8006080:	490c      	ldr	r1, [pc, #48]	@ (80060b4 <__NVIC_SetPriority+0x4c>)
 8006082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006086:	0112      	lsls	r2, r2, #4
 8006088:	b2d2      	uxtb	r2, r2
 800608a:	440b      	add	r3, r1
 800608c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006090:	e00a      	b.n	80060a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	b2da      	uxtb	r2, r3
 8006096:	4908      	ldr	r1, [pc, #32]	@ (80060b8 <__NVIC_SetPriority+0x50>)
 8006098:	79fb      	ldrb	r3, [r7, #7]
 800609a:	f003 030f 	and.w	r3, r3, #15
 800609e:	3b04      	subs	r3, #4
 80060a0:	0112      	lsls	r2, r2, #4
 80060a2:	b2d2      	uxtb	r2, r2
 80060a4:	440b      	add	r3, r1
 80060a6:	761a      	strb	r2, [r3, #24]
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	e000e100 	.word	0xe000e100
 80060b8:	e000ed00 	.word	0xe000ed00

080060bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060bc:	b480      	push	{r7}
 80060be:	b089      	sub	sp, #36	@ 0x24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f003 0307 	and.w	r3, r3, #7
 80060ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	f1c3 0307 	rsb	r3, r3, #7
 80060d6:	2b04      	cmp	r3, #4
 80060d8:	bf28      	it	cs
 80060da:	2304      	movcs	r3, #4
 80060dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	3304      	adds	r3, #4
 80060e2:	2b06      	cmp	r3, #6
 80060e4:	d902      	bls.n	80060ec <NVIC_EncodePriority+0x30>
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	3b03      	subs	r3, #3
 80060ea:	e000      	b.n	80060ee <NVIC_EncodePriority+0x32>
 80060ec:	2300      	movs	r3, #0
 80060ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060f0:	f04f 32ff 	mov.w	r2, #4294967295
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	fa02 f303 	lsl.w	r3, r2, r3
 80060fa:	43da      	mvns	r2, r3
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	401a      	ands	r2, r3
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006104:	f04f 31ff 	mov.w	r1, #4294967295
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	fa01 f303 	lsl.w	r3, r1, r3
 800610e:	43d9      	mvns	r1, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006114:	4313      	orrs	r3, r2
         );
}
 8006116:	4618      	mov	r0, r3
 8006118:	3724      	adds	r7, #36	@ 0x24
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
	...

08006124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3b01      	subs	r3, #1
 8006130:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006134:	d301      	bcc.n	800613a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006136:	2301      	movs	r3, #1
 8006138:	e00f      	b.n	800615a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800613a:	4a0a      	ldr	r2, [pc, #40]	@ (8006164 <SysTick_Config+0x40>)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	3b01      	subs	r3, #1
 8006140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006142:	210f      	movs	r1, #15
 8006144:	f04f 30ff 	mov.w	r0, #4294967295
 8006148:	f7ff ff8e 	bl	8006068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800614c:	4b05      	ldr	r3, [pc, #20]	@ (8006164 <SysTick_Config+0x40>)
 800614e:	2200      	movs	r2, #0
 8006150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006152:	4b04      	ldr	r3, [pc, #16]	@ (8006164 <SysTick_Config+0x40>)
 8006154:	2207      	movs	r2, #7
 8006156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	e000e010 	.word	0xe000e010

08006168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f7ff ff29 	bl	8005fc8 <__NVIC_SetPriorityGrouping>
}
 8006176:	bf00      	nop
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800617e:	b580      	push	{r7, lr}
 8006180:	b086      	sub	sp, #24
 8006182:	af00      	add	r7, sp, #0
 8006184:	4603      	mov	r3, r0
 8006186:	60b9      	str	r1, [r7, #8]
 8006188:	607a      	str	r2, [r7, #4]
 800618a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800618c:	2300      	movs	r3, #0
 800618e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006190:	f7ff ff3e 	bl	8006010 <__NVIC_GetPriorityGrouping>
 8006194:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	68b9      	ldr	r1, [r7, #8]
 800619a:	6978      	ldr	r0, [r7, #20]
 800619c:	f7ff ff8e 	bl	80060bc <NVIC_EncodePriority>
 80061a0:	4602      	mov	r2, r0
 80061a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061a6:	4611      	mov	r1, r2
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7ff ff5d 	bl	8006068 <__NVIC_SetPriority>
}
 80061ae:	bf00      	nop
 80061b0:	3718      	adds	r7, #24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b082      	sub	sp, #8
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	4603      	mov	r3, r0
 80061be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80061c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7ff ff31 	bl	800602c <__NVIC_EnableIRQ>
}
 80061ca:	bf00      	nop
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b082      	sub	sp, #8
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7ff ffa2 	bl	8006124 <SysTick_Config>
 80061e0:	4603      	mov	r3, r0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3708      	adds	r7, #8
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
	...

080061ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80061f4:	2300      	movs	r3, #0
 80061f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80061f8:	f7ff feb6 	bl	8005f68 <HAL_GetTick>
 80061fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d101      	bne.n	8006208 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e099      	b.n	800633c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2202      	movs	r2, #2
 800620c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 0201 	bic.w	r2, r2, #1
 8006226:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006228:	e00f      	b.n	800624a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800622a:	f7ff fe9d 	bl	8005f68 <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	2b05      	cmp	r3, #5
 8006236:	d908      	bls.n	800624a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2220      	movs	r2, #32
 800623c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2203      	movs	r2, #3
 8006242:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e078      	b.n	800633c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0301 	and.w	r3, r3, #1
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1e8      	bne.n	800622a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	4b38      	ldr	r3, [pc, #224]	@ (8006344 <HAL_DMA_Init+0x158>)
 8006264:	4013      	ands	r3, r2
 8006266:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006276:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006282:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800628e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	4313      	orrs	r3, r2
 800629a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a0:	2b04      	cmp	r3, #4
 80062a2:	d107      	bne.n	80062b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ac:	4313      	orrs	r3, r2
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f023 0307 	bic.w	r3, r3, #7
 80062ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062da:	2b04      	cmp	r3, #4
 80062dc:	d117      	bne.n	800630e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00e      	beq.n	800630e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fb01 	bl	80068f8 <DMA_CheckFifoParam>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d008      	beq.n	800630e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2240      	movs	r2, #64	@ 0x40
 8006300:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800630a:	2301      	movs	r3, #1
 800630c:	e016      	b.n	800633c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 fab8 	bl	800688c <DMA_CalcBaseAndBitshift>
 800631c:	4603      	mov	r3, r0
 800631e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006324:	223f      	movs	r2, #63	@ 0x3f
 8006326:	409a      	lsls	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3718      	adds	r7, #24
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	f010803f 	.word	0xf010803f

08006348 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
 8006354:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006356:	2300      	movs	r3, #0
 8006358:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800635e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006366:	2b01      	cmp	r3, #1
 8006368:	d101      	bne.n	800636e <HAL_DMA_Start_IT+0x26>
 800636a:	2302      	movs	r3, #2
 800636c:	e040      	b.n	80063f0 <HAL_DMA_Start_IT+0xa8>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b01      	cmp	r3, #1
 8006380:	d12f      	bne.n	80063e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2202      	movs	r2, #2
 8006386:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	68b9      	ldr	r1, [r7, #8]
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f000 fa4a 	bl	8006830 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063a0:	223f      	movs	r2, #63	@ 0x3f
 80063a2:	409a      	lsls	r2, r3
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f042 0216 	orr.w	r2, r2, #22
 80063b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d007      	beq.n	80063d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f042 0208 	orr.w	r2, r2, #8
 80063ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f042 0201 	orr.w	r2, r2, #1
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	e005      	b.n	80063ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80063ea:	2302      	movs	r3, #2
 80063ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80063ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3718      	adds	r7, #24
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006404:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006406:	f7ff fdaf 	bl	8005f68 <HAL_GetTick>
 800640a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d008      	beq.n	800642a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2280      	movs	r2, #128	@ 0x80
 800641c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e052      	b.n	80064d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 0216 	bic.w	r2, r2, #22
 8006438:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	695a      	ldr	r2, [r3, #20]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006448:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800644e:	2b00      	cmp	r3, #0
 8006450:	d103      	bne.n	800645a <HAL_DMA_Abort+0x62>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006456:	2b00      	cmp	r3, #0
 8006458:	d007      	beq.n	800646a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f022 0208 	bic.w	r2, r2, #8
 8006468:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f022 0201 	bic.w	r2, r2, #1
 8006478:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800647a:	e013      	b.n	80064a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800647c:	f7ff fd74 	bl	8005f68 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	2b05      	cmp	r3, #5
 8006488:	d90c      	bls.n	80064a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2220      	movs	r2, #32
 800648e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2203      	movs	r2, #3
 8006494:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e015      	b.n	80064d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1e4      	bne.n	800647c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064b6:	223f      	movs	r2, #63	@ 0x3f
 80064b8:	409a      	lsls	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d004      	beq.n	80064f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2280      	movs	r2, #128	@ 0x80
 80064f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e00c      	b.n	8006510 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2205      	movs	r2, #5
 80064fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f022 0201 	bic.w	r2, r2, #1
 800650c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006528:	4b8e      	ldr	r3, [pc, #568]	@ (8006764 <HAL_DMA_IRQHandler+0x248>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a8e      	ldr	r2, [pc, #568]	@ (8006768 <HAL_DMA_IRQHandler+0x24c>)
 800652e:	fba2 2303 	umull	r2, r3, r2, r3
 8006532:	0a9b      	lsrs	r3, r3, #10
 8006534:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800653a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006546:	2208      	movs	r2, #8
 8006548:	409a      	lsls	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	4013      	ands	r3, r2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d01a      	beq.n	8006588 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0304 	and.w	r3, r3, #4
 800655c:	2b00      	cmp	r3, #0
 800655e:	d013      	beq.n	8006588 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f022 0204 	bic.w	r2, r2, #4
 800656e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006574:	2208      	movs	r2, #8
 8006576:	409a      	lsls	r2, r3
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006580:	f043 0201 	orr.w	r2, r3, #1
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800658c:	2201      	movs	r2, #1
 800658e:	409a      	lsls	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	4013      	ands	r3, r2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d012      	beq.n	80065be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00b      	beq.n	80065be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065aa:	2201      	movs	r2, #1
 80065ac:	409a      	lsls	r2, r3
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065b6:	f043 0202 	orr.w	r2, r3, #2
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065c2:	2204      	movs	r2, #4
 80065c4:	409a      	lsls	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4013      	ands	r3, r2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d012      	beq.n	80065f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0302 	and.w	r3, r3, #2
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00b      	beq.n	80065f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065e0:	2204      	movs	r2, #4
 80065e2:	409a      	lsls	r2, r3
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ec:	f043 0204 	orr.w	r2, r3, #4
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065f8:	2210      	movs	r2, #16
 80065fa:	409a      	lsls	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	4013      	ands	r3, r2
 8006600:	2b00      	cmp	r3, #0
 8006602:	d043      	beq.n	800668c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0308 	and.w	r3, r3, #8
 800660e:	2b00      	cmp	r3, #0
 8006610:	d03c      	beq.n	800668c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006616:	2210      	movs	r2, #16
 8006618:	409a      	lsls	r2, r3
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d018      	beq.n	800665e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d108      	bne.n	800664c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800663e:	2b00      	cmp	r3, #0
 8006640:	d024      	beq.n	800668c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	4798      	blx	r3
 800664a:	e01f      	b.n	800668c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006650:	2b00      	cmp	r3, #0
 8006652:	d01b      	beq.n	800668c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	4798      	blx	r3
 800665c:	e016      	b.n	800668c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006668:	2b00      	cmp	r3, #0
 800666a:	d107      	bne.n	800667c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f022 0208 	bic.w	r2, r2, #8
 800667a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006680:	2b00      	cmp	r3, #0
 8006682:	d003      	beq.n	800668c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006690:	2220      	movs	r2, #32
 8006692:	409a      	lsls	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	4013      	ands	r3, r2
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 808f 	beq.w	80067bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0310 	and.w	r3, r3, #16
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 8087 	beq.w	80067bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066b2:	2220      	movs	r2, #32
 80066b4:	409a      	lsls	r2, r3
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b05      	cmp	r3, #5
 80066c4:	d136      	bne.n	8006734 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 0216 	bic.w	r2, r2, #22
 80066d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	695a      	ldr	r2, [r3, #20]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d103      	bne.n	80066f6 <HAL_DMA_IRQHandler+0x1da>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d007      	beq.n	8006706 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f022 0208 	bic.w	r2, r2, #8
 8006704:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800670a:	223f      	movs	r2, #63	@ 0x3f
 800670c:	409a      	lsls	r2, r3
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006726:	2b00      	cmp	r3, #0
 8006728:	d07e      	beq.n	8006828 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	4798      	blx	r3
        }
        return;
 8006732:	e079      	b.n	8006828 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d01d      	beq.n	800677e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10d      	bne.n	800676c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006754:	2b00      	cmp	r3, #0
 8006756:	d031      	beq.n	80067bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	4798      	blx	r3
 8006760:	e02c      	b.n	80067bc <HAL_DMA_IRQHandler+0x2a0>
 8006762:	bf00      	nop
 8006764:	20000004 	.word	0x20000004
 8006768:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006770:	2b00      	cmp	r3, #0
 8006772:	d023      	beq.n	80067bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	4798      	blx	r3
 800677c:	e01e      	b.n	80067bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10f      	bne.n	80067ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 0210 	bic.w	r2, r2, #16
 800679a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d003      	beq.n	80067bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d032      	beq.n	800682a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067c8:	f003 0301 	and.w	r3, r3, #1
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d022      	beq.n	8006816 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2205      	movs	r2, #5
 80067d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f022 0201 	bic.w	r2, r2, #1
 80067e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	3301      	adds	r3, #1
 80067ec:	60bb      	str	r3, [r7, #8]
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d307      	bcc.n	8006804 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1f2      	bne.n	80067e8 <HAL_DMA_IRQHandler+0x2cc>
 8006802:	e000      	b.n	8006806 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006804:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800681a:	2b00      	cmp	r3, #0
 800681c:	d005      	beq.n	800682a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	4798      	blx	r3
 8006826:	e000      	b.n	800682a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006828:	bf00      	nop
    }
  }
}
 800682a:	3718      	adds	r7, #24
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
 800683c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800684c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	2b40      	cmp	r3, #64	@ 0x40
 800685c:	d108      	bne.n	8006870 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800686e:	e007      	b.n	8006880 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	60da      	str	r2, [r3, #12]
}
 8006880:	bf00      	nop
 8006882:	3714      	adds	r7, #20
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	b2db      	uxtb	r3, r3
 800689a:	3b10      	subs	r3, #16
 800689c:	4a14      	ldr	r2, [pc, #80]	@ (80068f0 <DMA_CalcBaseAndBitshift+0x64>)
 800689e:	fba2 2303 	umull	r2, r3, r2, r3
 80068a2:	091b      	lsrs	r3, r3, #4
 80068a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80068a6:	4a13      	ldr	r2, [pc, #76]	@ (80068f4 <DMA_CalcBaseAndBitshift+0x68>)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	4413      	add	r3, r2
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	461a      	mov	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b03      	cmp	r3, #3
 80068b8:	d909      	bls.n	80068ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80068c2:	f023 0303 	bic.w	r3, r3, #3
 80068c6:	1d1a      	adds	r2, r3, #4
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80068cc:	e007      	b.n	80068de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80068d6:	f023 0303 	bic.w	r3, r3, #3
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	aaaaaaab 	.word	0xaaaaaaab
 80068f4:	08012ad4 	.word	0x08012ad4

080068f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006900:	2300      	movs	r3, #0
 8006902:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006908:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d11f      	bne.n	8006952 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	2b03      	cmp	r3, #3
 8006916:	d856      	bhi.n	80069c6 <DMA_CheckFifoParam+0xce>
 8006918:	a201      	add	r2, pc, #4	@ (adr r2, 8006920 <DMA_CheckFifoParam+0x28>)
 800691a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691e:	bf00      	nop
 8006920:	08006931 	.word	0x08006931
 8006924:	08006943 	.word	0x08006943
 8006928:	08006931 	.word	0x08006931
 800692c:	080069c7 	.word	0x080069c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006934:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d046      	beq.n	80069ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006940:	e043      	b.n	80069ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006946:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800694a:	d140      	bne.n	80069ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006950:	e03d      	b.n	80069ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800695a:	d121      	bne.n	80069a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	2b03      	cmp	r3, #3
 8006960:	d837      	bhi.n	80069d2 <DMA_CheckFifoParam+0xda>
 8006962:	a201      	add	r2, pc, #4	@ (adr r2, 8006968 <DMA_CheckFifoParam+0x70>)
 8006964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006968:	08006979 	.word	0x08006979
 800696c:	0800697f 	.word	0x0800697f
 8006970:	08006979 	.word	0x08006979
 8006974:	08006991 	.word	0x08006991
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	73fb      	strb	r3, [r7, #15]
      break;
 800697c:	e030      	b.n	80069e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006982:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d025      	beq.n	80069d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800698e:	e022      	b.n	80069d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006994:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006998:	d11f      	bne.n	80069da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800699e:	e01c      	b.n	80069da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d903      	bls.n	80069ae <DMA_CheckFifoParam+0xb6>
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2b03      	cmp	r3, #3
 80069aa:	d003      	beq.n	80069b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80069ac:	e018      	b.n	80069e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	73fb      	strb	r3, [r7, #15]
      break;
 80069b2:	e015      	b.n	80069e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00e      	beq.n	80069de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	73fb      	strb	r3, [r7, #15]
      break;
 80069c4:	e00b      	b.n	80069de <DMA_CheckFifoParam+0xe6>
      break;
 80069c6:	bf00      	nop
 80069c8:	e00a      	b.n	80069e0 <DMA_CheckFifoParam+0xe8>
      break;
 80069ca:	bf00      	nop
 80069cc:	e008      	b.n	80069e0 <DMA_CheckFifoParam+0xe8>
      break;
 80069ce:	bf00      	nop
 80069d0:	e006      	b.n	80069e0 <DMA_CheckFifoParam+0xe8>
      break;
 80069d2:	bf00      	nop
 80069d4:	e004      	b.n	80069e0 <DMA_CheckFifoParam+0xe8>
      break;
 80069d6:	bf00      	nop
 80069d8:	e002      	b.n	80069e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80069da:	bf00      	nop
 80069dc:	e000      	b.n	80069e0 <DMA_CheckFifoParam+0xe8>
      break;
 80069de:	bf00      	nop
    }
  } 
  
  return status; 
 80069e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop

080069f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b089      	sub	sp, #36	@ 0x24
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80069fa:	2300      	movs	r3, #0
 80069fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80069fe:	2300      	movs	r3, #0
 8006a00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006a02:	2300      	movs	r3, #0
 8006a04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006a06:	2300      	movs	r3, #0
 8006a08:	61fb      	str	r3, [r7, #28]
 8006a0a:	e16b      	b.n	8006ce4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	fa02 f303 	lsl.w	r3, r2, r3
 8006a14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	f040 815a 	bne.w	8006cde <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	f003 0303 	and.w	r3, r3, #3
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d005      	beq.n	8006a42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d130      	bne.n	8006aa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	005b      	lsls	r3, r3, #1
 8006a4c:	2203      	movs	r2, #3
 8006a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a52:	43db      	mvns	r3, r3
 8006a54:	69ba      	ldr	r2, [r7, #24]
 8006a56:	4013      	ands	r3, r2
 8006a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	68da      	ldr	r2, [r3, #12]
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	005b      	lsls	r3, r3, #1
 8006a62:	fa02 f303 	lsl.w	r3, r2, r3
 8006a66:	69ba      	ldr	r2, [r7, #24]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	69ba      	ldr	r2, [r7, #24]
 8006a70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a78:	2201      	movs	r2, #1
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a80:	43db      	mvns	r3, r3
 8006a82:	69ba      	ldr	r2, [r7, #24]
 8006a84:	4013      	ands	r3, r2
 8006a86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	091b      	lsrs	r3, r3, #4
 8006a8e:	f003 0201 	and.w	r2, r3, #1
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	fa02 f303 	lsl.w	r3, r2, r3
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f003 0303 	and.w	r3, r3, #3
 8006aac:	2b03      	cmp	r3, #3
 8006aae:	d017      	beq.n	8006ae0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	2203      	movs	r2, #3
 8006abc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac0:	43db      	mvns	r3, r3
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	689a      	ldr	r2, [r3, #8]
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	005b      	lsls	r3, r3, #1
 8006ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad4:	69ba      	ldr	r2, [r7, #24]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	69ba      	ldr	r2, [r7, #24]
 8006ade:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f003 0303 	and.w	r3, r3, #3
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d123      	bne.n	8006b34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	08da      	lsrs	r2, r3, #3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	3208      	adds	r2, #8
 8006af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	f003 0307 	and.w	r3, r3, #7
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	220f      	movs	r2, #15
 8006b04:	fa02 f303 	lsl.w	r3, r2, r3
 8006b08:	43db      	mvns	r3, r3
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	691a      	ldr	r2, [r3, #16]
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	f003 0307 	and.w	r3, r3, #7
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	08da      	lsrs	r2, r3, #3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	3208      	adds	r2, #8
 8006b2e:	69b9      	ldr	r1, [r7, #24]
 8006b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	005b      	lsls	r3, r3, #1
 8006b3e:	2203      	movs	r2, #3
 8006b40:	fa02 f303 	lsl.w	r3, r2, r3
 8006b44:	43db      	mvns	r3, r3
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	4013      	ands	r3, r2
 8006b4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f003 0203 	and.w	r2, r3, #3
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	005b      	lsls	r3, r3, #1
 8006b58:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	69ba      	ldr	r2, [r7, #24]
 8006b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f000 80b4 	beq.w	8006cde <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b76:	2300      	movs	r3, #0
 8006b78:	60fb      	str	r3, [r7, #12]
 8006b7a:	4b60      	ldr	r3, [pc, #384]	@ (8006cfc <HAL_GPIO_Init+0x30c>)
 8006b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b7e:	4a5f      	ldr	r2, [pc, #380]	@ (8006cfc <HAL_GPIO_Init+0x30c>)
 8006b80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006b84:	6453      	str	r3, [r2, #68]	@ 0x44
 8006b86:	4b5d      	ldr	r3, [pc, #372]	@ (8006cfc <HAL_GPIO_Init+0x30c>)
 8006b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b8e:	60fb      	str	r3, [r7, #12]
 8006b90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b92:	4a5b      	ldr	r2, [pc, #364]	@ (8006d00 <HAL_GPIO_Init+0x310>)
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	089b      	lsrs	r3, r3, #2
 8006b98:	3302      	adds	r3, #2
 8006b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	f003 0303 	and.w	r3, r3, #3
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	220f      	movs	r2, #15
 8006baa:	fa02 f303 	lsl.w	r3, r2, r3
 8006bae:	43db      	mvns	r3, r3
 8006bb0:	69ba      	ldr	r2, [r7, #24]
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a52      	ldr	r2, [pc, #328]	@ (8006d04 <HAL_GPIO_Init+0x314>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d02b      	beq.n	8006c16 <HAL_GPIO_Init+0x226>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a51      	ldr	r2, [pc, #324]	@ (8006d08 <HAL_GPIO_Init+0x318>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d025      	beq.n	8006c12 <HAL_GPIO_Init+0x222>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a50      	ldr	r2, [pc, #320]	@ (8006d0c <HAL_GPIO_Init+0x31c>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d01f      	beq.n	8006c0e <HAL_GPIO_Init+0x21e>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a4f      	ldr	r2, [pc, #316]	@ (8006d10 <HAL_GPIO_Init+0x320>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d019      	beq.n	8006c0a <HAL_GPIO_Init+0x21a>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a4e      	ldr	r2, [pc, #312]	@ (8006d14 <HAL_GPIO_Init+0x324>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d013      	beq.n	8006c06 <HAL_GPIO_Init+0x216>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a4d      	ldr	r2, [pc, #308]	@ (8006d18 <HAL_GPIO_Init+0x328>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d00d      	beq.n	8006c02 <HAL_GPIO_Init+0x212>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a4c      	ldr	r2, [pc, #304]	@ (8006d1c <HAL_GPIO_Init+0x32c>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d007      	beq.n	8006bfe <HAL_GPIO_Init+0x20e>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a4b      	ldr	r2, [pc, #300]	@ (8006d20 <HAL_GPIO_Init+0x330>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d101      	bne.n	8006bfa <HAL_GPIO_Init+0x20a>
 8006bf6:	2307      	movs	r3, #7
 8006bf8:	e00e      	b.n	8006c18 <HAL_GPIO_Init+0x228>
 8006bfa:	2308      	movs	r3, #8
 8006bfc:	e00c      	b.n	8006c18 <HAL_GPIO_Init+0x228>
 8006bfe:	2306      	movs	r3, #6
 8006c00:	e00a      	b.n	8006c18 <HAL_GPIO_Init+0x228>
 8006c02:	2305      	movs	r3, #5
 8006c04:	e008      	b.n	8006c18 <HAL_GPIO_Init+0x228>
 8006c06:	2304      	movs	r3, #4
 8006c08:	e006      	b.n	8006c18 <HAL_GPIO_Init+0x228>
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e004      	b.n	8006c18 <HAL_GPIO_Init+0x228>
 8006c0e:	2302      	movs	r3, #2
 8006c10:	e002      	b.n	8006c18 <HAL_GPIO_Init+0x228>
 8006c12:	2301      	movs	r3, #1
 8006c14:	e000      	b.n	8006c18 <HAL_GPIO_Init+0x228>
 8006c16:	2300      	movs	r3, #0
 8006c18:	69fa      	ldr	r2, [r7, #28]
 8006c1a:	f002 0203 	and.w	r2, r2, #3
 8006c1e:	0092      	lsls	r2, r2, #2
 8006c20:	4093      	lsls	r3, r2
 8006c22:	69ba      	ldr	r2, [r7, #24]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c28:	4935      	ldr	r1, [pc, #212]	@ (8006d00 <HAL_GPIO_Init+0x310>)
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	089b      	lsrs	r3, r3, #2
 8006c2e:	3302      	adds	r3, #2
 8006c30:	69ba      	ldr	r2, [r7, #24]
 8006c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006c36:	4b3b      	ldr	r3, [pc, #236]	@ (8006d24 <HAL_GPIO_Init+0x334>)
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	43db      	mvns	r3, r3
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	4013      	ands	r3, r2
 8006c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006c52:	69ba      	ldr	r2, [r7, #24]
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006c5a:	4a32      	ldr	r2, [pc, #200]	@ (8006d24 <HAL_GPIO_Init+0x334>)
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c60:	4b30      	ldr	r3, [pc, #192]	@ (8006d24 <HAL_GPIO_Init+0x334>)
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	43db      	mvns	r3, r3
 8006c6a:	69ba      	ldr	r2, [r7, #24]
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d003      	beq.n	8006c84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006c7c:	69ba      	ldr	r2, [r7, #24]
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006c84:	4a27      	ldr	r2, [pc, #156]	@ (8006d24 <HAL_GPIO_Init+0x334>)
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006c8a:	4b26      	ldr	r3, [pc, #152]	@ (8006d24 <HAL_GPIO_Init+0x334>)
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	43db      	mvns	r3, r3
 8006c94:	69ba      	ldr	r2, [r7, #24]
 8006c96:	4013      	ands	r3, r2
 8006c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006ca6:	69ba      	ldr	r2, [r7, #24]
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006cae:	4a1d      	ldr	r2, [pc, #116]	@ (8006d24 <HAL_GPIO_Init+0x334>)
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8006d24 <HAL_GPIO_Init+0x334>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	43db      	mvns	r3, r3
 8006cbe:	69ba      	ldr	r2, [r7, #24]
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d003      	beq.n	8006cd8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006cd0:	69ba      	ldr	r2, [r7, #24]
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006cd8:	4a12      	ldr	r2, [pc, #72]	@ (8006d24 <HAL_GPIO_Init+0x334>)
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	61fb      	str	r3, [r7, #28]
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	2b0f      	cmp	r3, #15
 8006ce8:	f67f ae90 	bls.w	8006a0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006cec:	bf00      	nop
 8006cee:	bf00      	nop
 8006cf0:	3724      	adds	r7, #36	@ 0x24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	40023800 	.word	0x40023800
 8006d00:	40013800 	.word	0x40013800
 8006d04:	40020000 	.word	0x40020000
 8006d08:	40020400 	.word	0x40020400
 8006d0c:	40020800 	.word	0x40020800
 8006d10:	40020c00 	.word	0x40020c00
 8006d14:	40021000 	.word	0x40021000
 8006d18:	40021400 	.word	0x40021400
 8006d1c:	40021800 	.word	0x40021800
 8006d20:	40021c00 	.word	0x40021c00
 8006d24:	40013c00 	.word	0x40013c00

08006d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	460b      	mov	r3, r1
 8006d32:	807b      	strh	r3, [r7, #2]
 8006d34:	4613      	mov	r3, r2
 8006d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006d38:	787b      	ldrb	r3, [r7, #1]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d3e:	887a      	ldrh	r2, [r7, #2]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006d44:	e003      	b.n	8006d4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006d46:	887b      	ldrh	r3, [r7, #2]
 8006d48:	041a      	lsls	r2, r3, #16
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	619a      	str	r2, [r3, #24]
}
 8006d4e:	bf00      	nop
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
	...

08006d5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	4603      	mov	r3, r0
 8006d64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006d66:	4b08      	ldr	r3, [pc, #32]	@ (8006d88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d68:	695a      	ldr	r2, [r3, #20]
 8006d6a:	88fb      	ldrh	r3, [r7, #6]
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d006      	beq.n	8006d80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006d72:	4a05      	ldr	r2, [pc, #20]	@ (8006d88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d74:	88fb      	ldrh	r3, [r7, #6]
 8006d76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006d78:	88fb      	ldrh	r3, [r7, #6]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fd ff66 	bl	8004c4c <HAL_GPIO_EXTI_Callback>
  }
}
 8006d80:	bf00      	nop
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	40013c00 	.word	0x40013c00

08006d8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e12b      	b.n	8006ff6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d106      	bne.n	8006db8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f7fe fc3e 	bl	8005634 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2224      	movs	r2, #36	@ 0x24
 8006dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f022 0201 	bic.w	r2, r2, #1
 8006dce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006dde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006dee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006df0:	f001 fd12 	bl	8008818 <HAL_RCC_GetPCLK1Freq>
 8006df4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	4a81      	ldr	r2, [pc, #516]	@ (8007000 <HAL_I2C_Init+0x274>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d807      	bhi.n	8006e10 <HAL_I2C_Init+0x84>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	4a80      	ldr	r2, [pc, #512]	@ (8007004 <HAL_I2C_Init+0x278>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	bf94      	ite	ls
 8006e08:	2301      	movls	r3, #1
 8006e0a:	2300      	movhi	r3, #0
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	e006      	b.n	8006e1e <HAL_I2C_Init+0x92>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	4a7d      	ldr	r2, [pc, #500]	@ (8007008 <HAL_I2C_Init+0x27c>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	bf94      	ite	ls
 8006e18:	2301      	movls	r3, #1
 8006e1a:	2300      	movhi	r3, #0
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e0e7      	b.n	8006ff6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	4a78      	ldr	r2, [pc, #480]	@ (800700c <HAL_I2C_Init+0x280>)
 8006e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e2e:	0c9b      	lsrs	r3, r3, #18
 8006e30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	6a1b      	ldr	r3, [r3, #32]
 8006e4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	4a6a      	ldr	r2, [pc, #424]	@ (8007000 <HAL_I2C_Init+0x274>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d802      	bhi.n	8006e60 <HAL_I2C_Init+0xd4>
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	e009      	b.n	8006e74 <HAL_I2C_Init+0xe8>
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006e66:	fb02 f303 	mul.w	r3, r2, r3
 8006e6a:	4a69      	ldr	r2, [pc, #420]	@ (8007010 <HAL_I2C_Init+0x284>)
 8006e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e70:	099b      	lsrs	r3, r3, #6
 8006e72:	3301      	adds	r3, #1
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	6812      	ldr	r2, [r2, #0]
 8006e78:	430b      	orrs	r3, r1
 8006e7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006e86:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	495c      	ldr	r1, [pc, #368]	@ (8007000 <HAL_I2C_Init+0x274>)
 8006e90:	428b      	cmp	r3, r1
 8006e92:	d819      	bhi.n	8006ec8 <HAL_I2C_Init+0x13c>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	1e59      	subs	r1, r3, #1
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	005b      	lsls	r3, r3, #1
 8006e9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ea2:	1c59      	adds	r1, r3, #1
 8006ea4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006ea8:	400b      	ands	r3, r1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00a      	beq.n	8006ec4 <HAL_I2C_Init+0x138>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	1e59      	subs	r1, r3, #1
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	005b      	lsls	r3, r3, #1
 8006eb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ec2:	e051      	b.n	8006f68 <HAL_I2C_Init+0x1dc>
 8006ec4:	2304      	movs	r3, #4
 8006ec6:	e04f      	b.n	8006f68 <HAL_I2C_Init+0x1dc>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d111      	bne.n	8006ef4 <HAL_I2C_Init+0x168>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	1e58      	subs	r0, r3, #1
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6859      	ldr	r1, [r3, #4]
 8006ed8:	460b      	mov	r3, r1
 8006eda:	005b      	lsls	r3, r3, #1
 8006edc:	440b      	add	r3, r1
 8006ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	bf0c      	ite	eq
 8006eec:	2301      	moveq	r3, #1
 8006eee:	2300      	movne	r3, #0
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	e012      	b.n	8006f1a <HAL_I2C_Init+0x18e>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	1e58      	subs	r0, r3, #1
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6859      	ldr	r1, [r3, #4]
 8006efc:	460b      	mov	r3, r1
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	440b      	add	r3, r1
 8006f02:	0099      	lsls	r1, r3, #2
 8006f04:	440b      	add	r3, r1
 8006f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	bf0c      	ite	eq
 8006f14:	2301      	moveq	r3, #1
 8006f16:	2300      	movne	r3, #0
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d001      	beq.n	8006f22 <HAL_I2C_Init+0x196>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e022      	b.n	8006f68 <HAL_I2C_Init+0x1dc>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10e      	bne.n	8006f48 <HAL_I2C_Init+0x1bc>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	1e58      	subs	r0, r3, #1
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6859      	ldr	r1, [r3, #4]
 8006f32:	460b      	mov	r3, r1
 8006f34:	005b      	lsls	r3, r3, #1
 8006f36:	440b      	add	r3, r1
 8006f38:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f46:	e00f      	b.n	8006f68 <HAL_I2C_Init+0x1dc>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	1e58      	subs	r0, r3, #1
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6859      	ldr	r1, [r3, #4]
 8006f50:	460b      	mov	r3, r1
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	440b      	add	r3, r1
 8006f56:	0099      	lsls	r1, r3, #2
 8006f58:	440b      	add	r3, r1
 8006f5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f5e:	3301      	adds	r3, #1
 8006f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f68:	6879      	ldr	r1, [r7, #4]
 8006f6a:	6809      	ldr	r1, [r1, #0]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	69da      	ldr	r2, [r3, #28]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	431a      	orrs	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006f96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	6911      	ldr	r1, [r2, #16]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	68d2      	ldr	r2, [r2, #12]
 8006fa2:	4311      	orrs	r1, r2
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	6812      	ldr	r2, [r2, #0]
 8006fa8:	430b      	orrs	r3, r1
 8006faa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	695a      	ldr	r2, [r3, #20]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f042 0201 	orr.w	r2, r2, #1
 8006fd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	000186a0 	.word	0x000186a0
 8007004:	001e847f 	.word	0x001e847f
 8007008:	003d08ff 	.word	0x003d08ff
 800700c:	431bde83 	.word	0x431bde83
 8007010:	10624dd3 	.word	0x10624dd3

08007014 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b088      	sub	sp, #32
 8007018:	af02      	add	r7, sp, #8
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	4608      	mov	r0, r1
 800701e:	4611      	mov	r1, r2
 8007020:	461a      	mov	r2, r3
 8007022:	4603      	mov	r3, r0
 8007024:	817b      	strh	r3, [r7, #10]
 8007026:	460b      	mov	r3, r1
 8007028:	813b      	strh	r3, [r7, #8]
 800702a:	4613      	mov	r3, r2
 800702c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800702e:	f7fe ff9b 	bl	8005f68 <HAL_GetTick>
 8007032:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b20      	cmp	r3, #32
 800703e:	f040 80d9 	bne.w	80071f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	9300      	str	r3, [sp, #0]
 8007046:	2319      	movs	r3, #25
 8007048:	2201      	movs	r2, #1
 800704a:	496d      	ldr	r1, [pc, #436]	@ (8007200 <HAL_I2C_Mem_Write+0x1ec>)
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f000 fdad 	bl	8007bac <I2C_WaitOnFlagUntilTimeout>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007058:	2302      	movs	r3, #2
 800705a:	e0cc      	b.n	80071f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007062:	2b01      	cmp	r3, #1
 8007064:	d101      	bne.n	800706a <HAL_I2C_Mem_Write+0x56>
 8007066:	2302      	movs	r3, #2
 8007068:	e0c5      	b.n	80071f6 <HAL_I2C_Mem_Write+0x1e2>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	2b01      	cmp	r3, #1
 800707e:	d007      	beq.n	8007090 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f042 0201 	orr.w	r2, r2, #1
 800708e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800709e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2221      	movs	r2, #33	@ 0x21
 80070a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2240      	movs	r2, #64	@ 0x40
 80070ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6a3a      	ldr	r2, [r7, #32]
 80070ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80070c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	4a4d      	ldr	r2, [pc, #308]	@ (8007204 <HAL_I2C_Mem_Write+0x1f0>)
 80070d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80070d2:	88f8      	ldrh	r0, [r7, #6]
 80070d4:	893a      	ldrh	r2, [r7, #8]
 80070d6:	8979      	ldrh	r1, [r7, #10]
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	9301      	str	r3, [sp, #4]
 80070dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070de:	9300      	str	r3, [sp, #0]
 80070e0:	4603      	mov	r3, r0
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f000 fbe4 	bl	80078b0 <I2C_RequestMemoryWrite>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d052      	beq.n	8007194 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e081      	b.n	80071f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 fe2e 	bl	8007d58 <I2C_WaitOnTXEFlagUntilTimeout>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00d      	beq.n	800711e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007106:	2b04      	cmp	r3, #4
 8007108:	d107      	bne.n	800711a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007118:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e06b      	b.n	80071f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007122:	781a      	ldrb	r2, [r3, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800712e:	1c5a      	adds	r2, r3, #1
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007138:	3b01      	subs	r3, #1
 800713a:	b29a      	uxth	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007144:	b29b      	uxth	r3, r3
 8007146:	3b01      	subs	r3, #1
 8007148:	b29a      	uxth	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	f003 0304 	and.w	r3, r3, #4
 8007158:	2b04      	cmp	r3, #4
 800715a:	d11b      	bne.n	8007194 <HAL_I2C_Mem_Write+0x180>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007160:	2b00      	cmp	r3, #0
 8007162:	d017      	beq.n	8007194 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007168:	781a      	ldrb	r2, [r3, #0]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007174:	1c5a      	adds	r2, r3, #1
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800717e:	3b01      	subs	r3, #1
 8007180:	b29a      	uxth	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800718a:	b29b      	uxth	r3, r3
 800718c:	3b01      	subs	r3, #1
 800718e:	b29a      	uxth	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1aa      	bne.n	80070f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f000 fe1a 	bl	8007dda <I2C_WaitOnBTFFlagUntilTimeout>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00d      	beq.n	80071c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b0:	2b04      	cmp	r3, #4
 80071b2:	d107      	bne.n	80071c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e016      	b.n	80071f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2220      	movs	r2, #32
 80071dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80071f0:	2300      	movs	r3, #0
 80071f2:	e000      	b.n	80071f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80071f4:	2302      	movs	r3, #2
  }
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3718      	adds	r7, #24
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	00100002 	.word	0x00100002
 8007204:	ffff0000 	.word	0xffff0000

08007208 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b08c      	sub	sp, #48	@ 0x30
 800720c:	af02      	add	r7, sp, #8
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	4608      	mov	r0, r1
 8007212:	4611      	mov	r1, r2
 8007214:	461a      	mov	r2, r3
 8007216:	4603      	mov	r3, r0
 8007218:	817b      	strh	r3, [r7, #10]
 800721a:	460b      	mov	r3, r1
 800721c:	813b      	strh	r3, [r7, #8]
 800721e:	4613      	mov	r3, r2
 8007220:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007222:	f7fe fea1 	bl	8005f68 <HAL_GetTick>
 8007226:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b20      	cmp	r3, #32
 8007232:	f040 8208 	bne.w	8007646 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	2319      	movs	r3, #25
 800723c:	2201      	movs	r2, #1
 800723e:	497b      	ldr	r1, [pc, #492]	@ (800742c <HAL_I2C_Mem_Read+0x224>)
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 fcb3 	bl	8007bac <I2C_WaitOnFlagUntilTimeout>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d001      	beq.n	8007250 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800724c:	2302      	movs	r3, #2
 800724e:	e1fb      	b.n	8007648 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007256:	2b01      	cmp	r3, #1
 8007258:	d101      	bne.n	800725e <HAL_I2C_Mem_Read+0x56>
 800725a:	2302      	movs	r3, #2
 800725c:	e1f4      	b.n	8007648 <HAL_I2C_Mem_Read+0x440>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2201      	movs	r2, #1
 8007262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	2b01      	cmp	r3, #1
 8007272:	d007      	beq.n	8007284 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f042 0201 	orr.w	r2, r2, #1
 8007282:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007292:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2222      	movs	r2, #34	@ 0x22
 8007298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2240      	movs	r2, #64	@ 0x40
 80072a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80072b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	4a5b      	ldr	r2, [pc, #364]	@ (8007430 <HAL_I2C_Mem_Read+0x228>)
 80072c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072c6:	88f8      	ldrh	r0, [r7, #6]
 80072c8:	893a      	ldrh	r2, [r7, #8]
 80072ca:	8979      	ldrh	r1, [r7, #10]
 80072cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ce:	9301      	str	r3, [sp, #4]
 80072d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	4603      	mov	r3, r0
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 fb80 	bl	80079dc <I2C_RequestMemoryRead>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e1b0      	b.n	8007648 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d113      	bne.n	8007316 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072ee:	2300      	movs	r3, #0
 80072f0:	623b      	str	r3, [r7, #32]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	695b      	ldr	r3, [r3, #20]
 80072f8:	623b      	str	r3, [r7, #32]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	623b      	str	r3, [r7, #32]
 8007302:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007312:	601a      	str	r2, [r3, #0]
 8007314:	e184      	b.n	8007620 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800731a:	2b01      	cmp	r3, #1
 800731c:	d11b      	bne.n	8007356 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800732c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800732e:	2300      	movs	r3, #0
 8007330:	61fb      	str	r3, [r7, #28]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	61fb      	str	r3, [r7, #28]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	61fb      	str	r3, [r7, #28]
 8007342:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	e164      	b.n	8007620 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800735a:	2b02      	cmp	r3, #2
 800735c:	d11b      	bne.n	8007396 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800736c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800737c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800737e:	2300      	movs	r3, #0
 8007380:	61bb      	str	r3, [r7, #24]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	695b      	ldr	r3, [r3, #20]
 8007388:	61bb      	str	r3, [r7, #24]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	61bb      	str	r3, [r7, #24]
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	e144      	b.n	8007620 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007396:	2300      	movs	r3, #0
 8007398:	617b      	str	r3, [r7, #20]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	695b      	ldr	r3, [r3, #20]
 80073a0:	617b      	str	r3, [r7, #20]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	617b      	str	r3, [r7, #20]
 80073aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80073ac:	e138      	b.n	8007620 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	f200 80f1 	bhi.w	800759a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d123      	bne.n	8007408 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f000 fd49 	bl	8007e5c <I2C_WaitOnRXNEFlagUntilTimeout>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d001      	beq.n	80073d4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e139      	b.n	8007648 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	691a      	ldr	r2, [r3, #16]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073de:	b2d2      	uxtb	r2, r2
 80073e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e6:	1c5a      	adds	r2, r3, #1
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073f0:	3b01      	subs	r3, #1
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	3b01      	subs	r3, #1
 8007400:	b29a      	uxth	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007406:	e10b      	b.n	8007620 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800740c:	2b02      	cmp	r3, #2
 800740e:	d14e      	bne.n	80074ae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007416:	2200      	movs	r2, #0
 8007418:	4906      	ldr	r1, [pc, #24]	@ (8007434 <HAL_I2C_Mem_Read+0x22c>)
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 fbc6 	bl	8007bac <I2C_WaitOnFlagUntilTimeout>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d008      	beq.n	8007438 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e10e      	b.n	8007648 <HAL_I2C_Mem_Read+0x440>
 800742a:	bf00      	nop
 800742c:	00100002 	.word	0x00100002
 8007430:	ffff0000 	.word	0xffff0000
 8007434:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007446:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	691a      	ldr	r2, [r3, #16]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007452:	b2d2      	uxtb	r2, r2
 8007454:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800745a:	1c5a      	adds	r2, r3, #1
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007464:	3b01      	subs	r3, #1
 8007466:	b29a      	uxth	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007470:	b29b      	uxth	r3, r3
 8007472:	3b01      	subs	r3, #1
 8007474:	b29a      	uxth	r2, r3
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	691a      	ldr	r2, [r3, #16]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007484:	b2d2      	uxtb	r2, r2
 8007486:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800748c:	1c5a      	adds	r2, r3, #1
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007496:	3b01      	subs	r3, #1
 8007498:	b29a      	uxth	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	3b01      	subs	r3, #1
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80074ac:	e0b8      	b.n	8007620 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074b4:	2200      	movs	r2, #0
 80074b6:	4966      	ldr	r1, [pc, #408]	@ (8007650 <HAL_I2C_Mem_Read+0x448>)
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f000 fb77 	bl	8007bac <I2C_WaitOnFlagUntilTimeout>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d001      	beq.n	80074c8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e0bf      	b.n	8007648 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	691a      	ldr	r2, [r3, #16]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e2:	b2d2      	uxtb	r2, r2
 80074e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ea:	1c5a      	adds	r2, r3, #1
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074f4:	3b01      	subs	r3, #1
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007500:	b29b      	uxth	r3, r3
 8007502:	3b01      	subs	r3, #1
 8007504:	b29a      	uxth	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800750a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007510:	2200      	movs	r2, #0
 8007512:	494f      	ldr	r1, [pc, #316]	@ (8007650 <HAL_I2C_Mem_Read+0x448>)
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f000 fb49 	bl	8007bac <I2C_WaitOnFlagUntilTimeout>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d001      	beq.n	8007524 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	e091      	b.n	8007648 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007532:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	691a      	ldr	r2, [r3, #16]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800753e:	b2d2      	uxtb	r2, r2
 8007540:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007546:	1c5a      	adds	r2, r3, #1
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007550:	3b01      	subs	r3, #1
 8007552:	b29a      	uxth	r2, r3
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800755c:	b29b      	uxth	r3, r3
 800755e:	3b01      	subs	r3, #1
 8007560:	b29a      	uxth	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	691a      	ldr	r2, [r3, #16]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007570:	b2d2      	uxtb	r2, r2
 8007572:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007578:	1c5a      	adds	r2, r3, #1
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007582:	3b01      	subs	r3, #1
 8007584:	b29a      	uxth	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800758e:	b29b      	uxth	r3, r3
 8007590:	3b01      	subs	r3, #1
 8007592:	b29a      	uxth	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007598:	e042      	b.n	8007620 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800759a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800759c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f000 fc5c 	bl	8007e5c <I2C_WaitOnRXNEFlagUntilTimeout>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e04c      	b.n	8007648 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	691a      	ldr	r2, [r3, #16]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b8:	b2d2      	uxtb	r2, r2
 80075ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c0:	1c5a      	adds	r2, r3, #1
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075ca:	3b01      	subs	r3, #1
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	3b01      	subs	r3, #1
 80075da:	b29a      	uxth	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	f003 0304 	and.w	r3, r3, #4
 80075ea:	2b04      	cmp	r3, #4
 80075ec:	d118      	bne.n	8007620 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	691a      	ldr	r2, [r3, #16]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f8:	b2d2      	uxtb	r2, r2
 80075fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007600:	1c5a      	adds	r2, r3, #1
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800760a:	3b01      	subs	r3, #1
 800760c:	b29a      	uxth	r2, r3
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007616:	b29b      	uxth	r3, r3
 8007618:	3b01      	subs	r3, #1
 800761a:	b29a      	uxth	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007624:	2b00      	cmp	r3, #0
 8007626:	f47f aec2 	bne.w	80073ae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2220      	movs	r2, #32
 800762e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007642:	2300      	movs	r3, #0
 8007644:	e000      	b.n	8007648 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007646:	2302      	movs	r3, #2
  }
}
 8007648:	4618      	mov	r0, r3
 800764a:	3728      	adds	r7, #40	@ 0x28
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	00010004 	.word	0x00010004

08007654 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b08a      	sub	sp, #40	@ 0x28
 8007658:	af02      	add	r7, sp, #8
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	607a      	str	r2, [r7, #4]
 800765e:	603b      	str	r3, [r7, #0]
 8007660:	460b      	mov	r3, r1
 8007662:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007664:	f7fe fc80 	bl	8005f68 <HAL_GetTick>
 8007668:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800766a:	2300      	movs	r3, #0
 800766c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b20      	cmp	r3, #32
 8007678:	f040 8111 	bne.w	800789e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	2319      	movs	r3, #25
 8007682:	2201      	movs	r2, #1
 8007684:	4988      	ldr	r1, [pc, #544]	@ (80078a8 <HAL_I2C_IsDeviceReady+0x254>)
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f000 fa90 	bl	8007bac <I2C_WaitOnFlagUntilTimeout>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d001      	beq.n	8007696 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8007692:	2302      	movs	r3, #2
 8007694:	e104      	b.n	80078a0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800769c:	2b01      	cmp	r3, #1
 800769e:	d101      	bne.n	80076a4 <HAL_I2C_IsDeviceReady+0x50>
 80076a0:	2302      	movs	r3, #2
 80076a2:	e0fd      	b.n	80078a0 <HAL_I2C_IsDeviceReady+0x24c>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0301 	and.w	r3, r3, #1
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d007      	beq.n	80076ca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f042 0201 	orr.w	r2, r2, #1
 80076c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80076d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2224      	movs	r2, #36	@ 0x24
 80076de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	4a70      	ldr	r2, [pc, #448]	@ (80078ac <HAL_I2C_IsDeviceReady+0x258>)
 80076ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80076fc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	2200      	movs	r2, #0
 8007706:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f000 fa4e 	bl	8007bac <I2C_WaitOnFlagUntilTimeout>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00d      	beq.n	8007732 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007720:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007724:	d103      	bne.n	800772e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800772c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800772e:	2303      	movs	r3, #3
 8007730:	e0b6      	b.n	80078a0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007732:	897b      	ldrh	r3, [r7, #10]
 8007734:	b2db      	uxtb	r3, r3
 8007736:	461a      	mov	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007740:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8007742:	f7fe fc11 	bl	8005f68 <HAL_GetTick>
 8007746:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	f003 0302 	and.w	r3, r3, #2
 8007752:	2b02      	cmp	r3, #2
 8007754:	bf0c      	ite	eq
 8007756:	2301      	moveq	r3, #1
 8007758:	2300      	movne	r3, #0
 800775a:	b2db      	uxtb	r3, r3
 800775c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	695b      	ldr	r3, [r3, #20]
 8007764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007768:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800776c:	bf0c      	ite	eq
 800776e:	2301      	moveq	r3, #1
 8007770:	2300      	movne	r3, #0
 8007772:	b2db      	uxtb	r3, r3
 8007774:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007776:	e025      	b.n	80077c4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007778:	f7fe fbf6 	bl	8005f68 <HAL_GetTick>
 800777c:	4602      	mov	r2, r0
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	683a      	ldr	r2, [r7, #0]
 8007784:	429a      	cmp	r2, r3
 8007786:	d302      	bcc.n	800778e <HAL_I2C_IsDeviceReady+0x13a>
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d103      	bne.n	8007796 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	22a0      	movs	r2, #160	@ 0xa0
 8007792:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	f003 0302 	and.w	r3, r3, #2
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	bf0c      	ite	eq
 80077a4:	2301      	moveq	r3, #1
 80077a6:	2300      	movne	r3, #0
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	695b      	ldr	r3, [r3, #20]
 80077b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077ba:	bf0c      	ite	eq
 80077bc:	2301      	moveq	r3, #1
 80077be:	2300      	movne	r3, #0
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2ba0      	cmp	r3, #160	@ 0xa0
 80077ce:	d005      	beq.n	80077dc <HAL_I2C_IsDeviceReady+0x188>
 80077d0:	7dfb      	ldrb	r3, [r7, #23]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d102      	bne.n	80077dc <HAL_I2C_IsDeviceReady+0x188>
 80077d6:	7dbb      	ldrb	r3, [r7, #22]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d0cd      	beq.n	8007778 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2220      	movs	r2, #32
 80077e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	695b      	ldr	r3, [r3, #20]
 80077ea:	f003 0302 	and.w	r3, r3, #2
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d129      	bne.n	8007846 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007800:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007802:	2300      	movs	r3, #0
 8007804:	613b      	str	r3, [r7, #16]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	695b      	ldr	r3, [r3, #20]
 800780c:	613b      	str	r3, [r7, #16]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	613b      	str	r3, [r7, #16]
 8007816:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	2319      	movs	r3, #25
 800781e:	2201      	movs	r2, #1
 8007820:	4921      	ldr	r1, [pc, #132]	@ (80078a8 <HAL_I2C_IsDeviceReady+0x254>)
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 f9c2 	bl	8007bac <I2C_WaitOnFlagUntilTimeout>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d001      	beq.n	8007832 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	e036      	b.n	80078a0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2220      	movs	r2, #32
 8007836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8007842:	2300      	movs	r3, #0
 8007844:	e02c      	b.n	80078a0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007854:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800785e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	9300      	str	r3, [sp, #0]
 8007864:	2319      	movs	r3, #25
 8007866:	2201      	movs	r2, #1
 8007868:	490f      	ldr	r1, [pc, #60]	@ (80078a8 <HAL_I2C_IsDeviceReady+0x254>)
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f000 f99e 	bl	8007bac <I2C_WaitOnFlagUntilTimeout>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e012      	b.n	80078a0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	3301      	adds	r3, #1
 800787e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007880:	69ba      	ldr	r2, [r7, #24]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	429a      	cmp	r2, r3
 8007886:	f4ff af32 	bcc.w	80076ee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2220      	movs	r2, #32
 800788e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e000      	b.n	80078a0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800789e:	2302      	movs	r3, #2
  }
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3720      	adds	r7, #32
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	00100002 	.word	0x00100002
 80078ac:	ffff0000 	.word	0xffff0000

080078b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b088      	sub	sp, #32
 80078b4:	af02      	add	r7, sp, #8
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	4608      	mov	r0, r1
 80078ba:	4611      	mov	r1, r2
 80078bc:	461a      	mov	r2, r3
 80078be:	4603      	mov	r3, r0
 80078c0:	817b      	strh	r3, [r7, #10]
 80078c2:	460b      	mov	r3, r1
 80078c4:	813b      	strh	r3, [r7, #8]
 80078c6:	4613      	mov	r3, r2
 80078c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80078d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f000 f960 	bl	8007bac <I2C_WaitOnFlagUntilTimeout>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00d      	beq.n	800790e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007900:	d103      	bne.n	800790a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007908:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e05f      	b.n	80079ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800790e:	897b      	ldrh	r3, [r7, #10]
 8007910:	b2db      	uxtb	r3, r3
 8007912:	461a      	mov	r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800791c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800791e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007920:	6a3a      	ldr	r2, [r7, #32]
 8007922:	492d      	ldr	r1, [pc, #180]	@ (80079d8 <I2C_RequestMemoryWrite+0x128>)
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f000 f998 	bl	8007c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	e04c      	b.n	80079ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007934:	2300      	movs	r3, #0
 8007936:	617b      	str	r3, [r7, #20]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	617b      	str	r3, [r7, #20]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	617b      	str	r3, [r7, #20]
 8007948:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800794a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800794c:	6a39      	ldr	r1, [r7, #32]
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f000 fa02 	bl	8007d58 <I2C_WaitOnTXEFlagUntilTimeout>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00d      	beq.n	8007976 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800795e:	2b04      	cmp	r3, #4
 8007960:	d107      	bne.n	8007972 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007970:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e02b      	b.n	80079ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007976:	88fb      	ldrh	r3, [r7, #6]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d105      	bne.n	8007988 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800797c:	893b      	ldrh	r3, [r7, #8]
 800797e:	b2da      	uxtb	r2, r3
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	611a      	str	r2, [r3, #16]
 8007986:	e021      	b.n	80079cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007988:	893b      	ldrh	r3, [r7, #8]
 800798a:	0a1b      	lsrs	r3, r3, #8
 800798c:	b29b      	uxth	r3, r3
 800798e:	b2da      	uxtb	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007998:	6a39      	ldr	r1, [r7, #32]
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f000 f9dc 	bl	8007d58 <I2C_WaitOnTXEFlagUntilTimeout>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00d      	beq.n	80079c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079aa:	2b04      	cmp	r3, #4
 80079ac:	d107      	bne.n	80079be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80079bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e005      	b.n	80079ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80079c2:	893b      	ldrh	r3, [r7, #8]
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3718      	adds	r7, #24
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	00010002 	.word	0x00010002

080079dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b088      	sub	sp, #32
 80079e0:	af02      	add	r7, sp, #8
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	4608      	mov	r0, r1
 80079e6:	4611      	mov	r1, r2
 80079e8:	461a      	mov	r2, r3
 80079ea:	4603      	mov	r3, r0
 80079ec:	817b      	strh	r3, [r7, #10]
 80079ee:	460b      	mov	r3, r1
 80079f0:	813b      	strh	r3, [r7, #8]
 80079f2:	4613      	mov	r3, r2
 80079f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007a04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f000 f8c2 	bl	8007bac <I2C_WaitOnFlagUntilTimeout>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00d      	beq.n	8007a4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a3c:	d103      	bne.n	8007a46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a44:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e0aa      	b.n	8007ba0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007a4a:	897b      	ldrh	r3, [r7, #10]
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	461a      	mov	r2, r3
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007a58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5c:	6a3a      	ldr	r2, [r7, #32]
 8007a5e:	4952      	ldr	r1, [pc, #328]	@ (8007ba8 <I2C_RequestMemoryRead+0x1cc>)
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f000 f8fa 	bl	8007c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e097      	b.n	8007ba0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a70:	2300      	movs	r3, #0
 8007a72:	617b      	str	r3, [r7, #20]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	617b      	str	r3, [r7, #20]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	617b      	str	r3, [r7, #20]
 8007a84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a88:	6a39      	ldr	r1, [r7, #32]
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f000 f964 	bl	8007d58 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00d      	beq.n	8007ab2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a9a:	2b04      	cmp	r3, #4
 8007a9c:	d107      	bne.n	8007aae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007aac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e076      	b.n	8007ba0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ab2:	88fb      	ldrh	r3, [r7, #6]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d105      	bne.n	8007ac4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ab8:	893b      	ldrh	r3, [r7, #8]
 8007aba:	b2da      	uxtb	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	611a      	str	r2, [r3, #16]
 8007ac2:	e021      	b.n	8007b08 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007ac4:	893b      	ldrh	r3, [r7, #8]
 8007ac6:	0a1b      	lsrs	r3, r3, #8
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ad4:	6a39      	ldr	r1, [r7, #32]
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 f93e 	bl	8007d58 <I2C_WaitOnTXEFlagUntilTimeout>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00d      	beq.n	8007afe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ae6:	2b04      	cmp	r3, #4
 8007ae8:	d107      	bne.n	8007afa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007af8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e050      	b.n	8007ba0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007afe:	893b      	ldrh	r3, [r7, #8]
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b0a:	6a39      	ldr	r1, [r7, #32]
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f000 f923 	bl	8007d58 <I2C_WaitOnTXEFlagUntilTimeout>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00d      	beq.n	8007b34 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b1c:	2b04      	cmp	r3, #4
 8007b1e:	d107      	bne.n	8007b30 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e035      	b.n	8007ba0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007b42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	6a3b      	ldr	r3, [r7, #32]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f000 f82b 	bl	8007bac <I2C_WaitOnFlagUntilTimeout>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00d      	beq.n	8007b78 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b6a:	d103      	bne.n	8007b74 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b72:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e013      	b.n	8007ba0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007b78:	897b      	ldrh	r3, [r7, #10]
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	f043 0301 	orr.w	r3, r3, #1
 8007b80:	b2da      	uxtb	r2, r3
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b8a:	6a3a      	ldr	r2, [r7, #32]
 8007b8c:	4906      	ldr	r1, [pc, #24]	@ (8007ba8 <I2C_RequestMemoryRead+0x1cc>)
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f000 f863 	bl	8007c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e000      	b.n	8007ba0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3718      	adds	r7, #24
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	00010002 	.word	0x00010002

08007bac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	603b      	str	r3, [r7, #0]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007bbc:	e025      	b.n	8007c0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc4:	d021      	beq.n	8007c0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bc6:	f7fe f9cf 	bl	8005f68 <HAL_GetTick>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	683a      	ldr	r2, [r7, #0]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d302      	bcc.n	8007bdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d116      	bne.n	8007c0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2220      	movs	r2, #32
 8007be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bf6:	f043 0220 	orr.w	r2, r3, #32
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e023      	b.n	8007c52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	0c1b      	lsrs	r3, r3, #16
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d10d      	bne.n	8007c30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	43da      	mvns	r2, r3
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	4013      	ands	r3, r2
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	bf0c      	ite	eq
 8007c26:	2301      	moveq	r3, #1
 8007c28:	2300      	movne	r3, #0
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	e00c      	b.n	8007c4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	699b      	ldr	r3, [r3, #24]
 8007c36:	43da      	mvns	r2, r3
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	bf0c      	ite	eq
 8007c42:	2301      	moveq	r3, #1
 8007c44:	2300      	movne	r3, #0
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	461a      	mov	r2, r3
 8007c4a:	79fb      	ldrb	r3, [r7, #7]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d0b6      	beq.n	8007bbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b084      	sub	sp, #16
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	60f8      	str	r0, [r7, #12]
 8007c62:	60b9      	str	r1, [r7, #8]
 8007c64:	607a      	str	r2, [r7, #4]
 8007c66:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c68:	e051      	b.n	8007d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	695b      	ldr	r3, [r3, #20]
 8007c70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c78:	d123      	bne.n	8007cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007c92:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2220      	movs	r2, #32
 8007c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cae:	f043 0204 	orr.w	r2, r3, #4
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e046      	b.n	8007d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc8:	d021      	beq.n	8007d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cca:	f7fe f94d 	bl	8005f68 <HAL_GetTick>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d302      	bcc.n	8007ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d116      	bne.n	8007d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2220      	movs	r2, #32
 8007cea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cfa:	f043 0220 	orr.w	r2, r3, #32
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e020      	b.n	8007d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	0c1b      	lsrs	r3, r3, #16
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d10c      	bne.n	8007d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	43da      	mvns	r2, r3
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	4013      	ands	r3, r2
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	bf14      	ite	ne
 8007d2a:	2301      	movne	r3, #1
 8007d2c:	2300      	moveq	r3, #0
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	e00b      	b.n	8007d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	43da      	mvns	r2, r3
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	bf14      	ite	ne
 8007d44:	2301      	movne	r3, #1
 8007d46:	2300      	moveq	r3, #0
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d18d      	bne.n	8007c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d64:	e02d      	b.n	8007dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	f000 f8ce 	bl	8007f08 <I2C_IsAcknowledgeFailed>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d001      	beq.n	8007d76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e02d      	b.n	8007dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d7c:	d021      	beq.n	8007dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d7e:	f7fe f8f3 	bl	8005f68 <HAL_GetTick>
 8007d82:	4602      	mov	r2, r0
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	1ad3      	subs	r3, r2, r3
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d302      	bcc.n	8007d94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d116      	bne.n	8007dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2220      	movs	r2, #32
 8007d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dae:	f043 0220 	orr.w	r2, r3, #32
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e007      	b.n	8007dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	695b      	ldr	r3, [r3, #20]
 8007dc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dcc:	2b80      	cmp	r3, #128	@ 0x80
 8007dce:	d1ca      	bne.n	8007d66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b084      	sub	sp, #16
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	60f8      	str	r0, [r7, #12]
 8007de2:	60b9      	str	r1, [r7, #8]
 8007de4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007de6:	e02d      	b.n	8007e44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f000 f88d 	bl	8007f08 <I2C_IsAcknowledgeFailed>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d001      	beq.n	8007df8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e02d      	b.n	8007e54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfe:	d021      	beq.n	8007e44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e00:	f7fe f8b2 	bl	8005f68 <HAL_GetTick>
 8007e04:	4602      	mov	r2, r0
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d302      	bcc.n	8007e16 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d116      	bne.n	8007e44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2220      	movs	r2, #32
 8007e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e30:	f043 0220 	orr.w	r2, r3, #32
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	e007      	b.n	8007e54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	695b      	ldr	r3, [r3, #20]
 8007e4a:	f003 0304 	and.w	r3, r3, #4
 8007e4e:	2b04      	cmp	r3, #4
 8007e50:	d1ca      	bne.n	8007de8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e52:	2300      	movs	r3, #0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3710      	adds	r7, #16
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e68:	e042      	b.n	8007ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	695b      	ldr	r3, [r3, #20]
 8007e70:	f003 0310 	and.w	r3, r3, #16
 8007e74:	2b10      	cmp	r3, #16
 8007e76:	d119      	bne.n	8007eac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f06f 0210 	mvn.w	r2, #16
 8007e80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2220      	movs	r2, #32
 8007e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e029      	b.n	8007f00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eac:	f7fe f85c 	bl	8005f68 <HAL_GetTick>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d302      	bcc.n	8007ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d116      	bne.n	8007ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2220      	movs	r2, #32
 8007ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007edc:	f043 0220 	orr.w	r2, r3, #32
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	e007      	b.n	8007f00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	695b      	ldr	r3, [r3, #20]
 8007ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007efa:	2b40      	cmp	r3, #64	@ 0x40
 8007efc:	d1b5      	bne.n	8007e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	695b      	ldr	r3, [r3, #20]
 8007f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f1e:	d11b      	bne.n	8007f58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007f28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2220      	movs	r2, #32
 8007f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f44:	f043 0204 	orr.w	r2, r3, #4
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e000      	b.n	8007f5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
	...

08007f68 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8007f6e:	4b06      	ldr	r3, [pc, #24]	@ (8007f88 <HAL_PWR_EnableBkUpAccess+0x20>)
 8007f70:	2201      	movs	r2, #1
 8007f72:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8007f74:	4b05      	ldr	r3, [pc, #20]	@ (8007f8c <HAL_PWR_EnableBkUpAccess+0x24>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8007f7a:	687b      	ldr	r3, [r7, #4]
}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr
 8007f88:	420e0020 	.word	0x420e0020
 8007f8c:	40007000 	.word	0x40007000

08007f90 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8007f96:	4b06      	ldr	r3, [pc, #24]	@ (8007fb0 <HAL_PWR_DisableBkUpAccess+0x20>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8007f9c:	4b05      	ldr	r3, [pc, #20]	@ (8007fb4 <HAL_PWR_DisableBkUpAccess+0x24>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8007fa2:	687b      	ldr	r3, [r7, #4]
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr
 8007fb0:	420e0020 	.word	0x420e0020
 8007fb4:	40007000 	.word	0x40007000

08007fb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b086      	sub	sp, #24
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d101      	bne.n	8007fca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e267      	b.n	800849a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 0301 	and.w	r3, r3, #1
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d075      	beq.n	80080c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007fd6:	4b88      	ldr	r3, [pc, #544]	@ (80081f8 <HAL_RCC_OscConfig+0x240>)
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	f003 030c 	and.w	r3, r3, #12
 8007fde:	2b04      	cmp	r3, #4
 8007fe0:	d00c      	beq.n	8007ffc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007fe2:	4b85      	ldr	r3, [pc, #532]	@ (80081f8 <HAL_RCC_OscConfig+0x240>)
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007fea:	2b08      	cmp	r3, #8
 8007fec:	d112      	bne.n	8008014 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007fee:	4b82      	ldr	r3, [pc, #520]	@ (80081f8 <HAL_RCC_OscConfig+0x240>)
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ff6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ffa:	d10b      	bne.n	8008014 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ffc:	4b7e      	ldr	r3, [pc, #504]	@ (80081f8 <HAL_RCC_OscConfig+0x240>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008004:	2b00      	cmp	r3, #0
 8008006:	d05b      	beq.n	80080c0 <HAL_RCC_OscConfig+0x108>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d157      	bne.n	80080c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e242      	b.n	800849a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800801c:	d106      	bne.n	800802c <HAL_RCC_OscConfig+0x74>
 800801e:	4b76      	ldr	r3, [pc, #472]	@ (80081f8 <HAL_RCC_OscConfig+0x240>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a75      	ldr	r2, [pc, #468]	@ (80081f8 <HAL_RCC_OscConfig+0x240>)
 8008024:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008028:	6013      	str	r3, [r2, #0]
 800802a:	e01d      	b.n	8008068 <HAL_RCC_OscConfig+0xb0>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008034:	d10c      	bne.n	8008050 <HAL_RCC_OscConfig+0x98>
 8008036:	4b70      	ldr	r3, [pc, #448]	@ (80081f8 <HAL_RCC_OscConfig+0x240>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a6f      	ldr	r2, [pc, #444]	@ (80081f8 <HAL_RCC_OscConfig+0x240>)
 800803c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008040:	6013      	str	r3, [r2, #0]
 8008042:	4b6d      	ldr	r3, [pc, #436]	@ (80081f8 <HAL_RCC_OscConfig+0x240>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a6c      	ldr	r2, [pc, #432]	@ (80081f8 <HAL_RCC_OscConfig+0x240>)
 8008048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800804c:	6013      	str	r3, [r2, #0]
 800804e:	e00b      	b.n	8008068 <HAL_RCC_OscConfig+0xb0>
 8008050:	4b69      	ldr	r3, [pc, #420]	@ (80081f8 <HAL_RCC_OscConfig+0x240>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a68      	ldr	r2, [pc, #416]	@ (80081f8 <HAL_RCC_OscConfig+0x240>)
 8008056:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800805a:	6013      	str	r3, [r2, #0]
 800805c:	4b66      	ldr	r3, [pc, #408]	@ (80081f8 <HAL_RCC_OscConfig+0x240>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a65      	ldr	r2, [pc, #404]	@ (80081f8 <HAL_RCC_OscConfig+0x240>)
 8008062:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d013      	beq.n	8008098 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008070:	f7fd ff7a 	bl	8005f68 <HAL_GetTick>
 8008074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008076:	e008      	b.n	800808a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008078:	f7fd ff76 	bl	8005f68 <HAL_GetTick>
 800807c:	4602      	mov	r2, r0
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	2b64      	cmp	r3, #100	@ 0x64
 8008084:	d901      	bls.n	800808a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e207      	b.n	800849a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800808a:	4b5b      	ldr	r3, [pc, #364]	@ (80081f8 <HAL_RCC_OscConfig+0x240>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d0f0      	beq.n	8008078 <HAL_RCC_OscConfig+0xc0>
 8008096:	e014      	b.n	80080c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008098:	f7fd ff66 	bl	8005f68 <HAL_GetTick>
 800809c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800809e:	e008      	b.n	80080b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80080a0:	f7fd ff62 	bl	8005f68 <HAL_GetTick>
 80080a4:	4602      	mov	r2, r0
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	2b64      	cmp	r3, #100	@ 0x64
 80080ac:	d901      	bls.n	80080b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e1f3      	b.n	800849a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080b2:	4b51      	ldr	r3, [pc, #324]	@ (80081f8 <HAL_RCC_OscConfig+0x240>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1f0      	bne.n	80080a0 <HAL_RCC_OscConfig+0xe8>
 80080be:	e000      	b.n	80080c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0302 	and.w	r3, r3, #2
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d063      	beq.n	8008196 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80080ce:	4b4a      	ldr	r3, [pc, #296]	@ (80081f8 <HAL_RCC_OscConfig+0x240>)
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	f003 030c 	and.w	r3, r3, #12
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00b      	beq.n	80080f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080da:	4b47      	ldr	r3, [pc, #284]	@ (80081f8 <HAL_RCC_OscConfig+0x240>)
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80080e2:	2b08      	cmp	r3, #8
 80080e4:	d11c      	bne.n	8008120 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080e6:	4b44      	ldr	r3, [pc, #272]	@ (80081f8 <HAL_RCC_OscConfig+0x240>)
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d116      	bne.n	8008120 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080f2:	4b41      	ldr	r3, [pc, #260]	@ (80081f8 <HAL_RCC_OscConfig+0x240>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d005      	beq.n	800810a <HAL_RCC_OscConfig+0x152>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	2b01      	cmp	r3, #1
 8008104:	d001      	beq.n	800810a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e1c7      	b.n	800849a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800810a:	4b3b      	ldr	r3, [pc, #236]	@ (80081f8 <HAL_RCC_OscConfig+0x240>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	00db      	lsls	r3, r3, #3
 8008118:	4937      	ldr	r1, [pc, #220]	@ (80081f8 <HAL_RCC_OscConfig+0x240>)
 800811a:	4313      	orrs	r3, r2
 800811c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800811e:	e03a      	b.n	8008196 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d020      	beq.n	800816a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008128:	4b34      	ldr	r3, [pc, #208]	@ (80081fc <HAL_RCC_OscConfig+0x244>)
 800812a:	2201      	movs	r2, #1
 800812c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800812e:	f7fd ff1b 	bl	8005f68 <HAL_GetTick>
 8008132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008134:	e008      	b.n	8008148 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008136:	f7fd ff17 	bl	8005f68 <HAL_GetTick>
 800813a:	4602      	mov	r2, r0
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	1ad3      	subs	r3, r2, r3
 8008140:	2b02      	cmp	r3, #2
 8008142:	d901      	bls.n	8008148 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008144:	2303      	movs	r3, #3
 8008146:	e1a8      	b.n	800849a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008148:	4b2b      	ldr	r3, [pc, #172]	@ (80081f8 <HAL_RCC_OscConfig+0x240>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f003 0302 	and.w	r3, r3, #2
 8008150:	2b00      	cmp	r3, #0
 8008152:	d0f0      	beq.n	8008136 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008154:	4b28      	ldr	r3, [pc, #160]	@ (80081f8 <HAL_RCC_OscConfig+0x240>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	00db      	lsls	r3, r3, #3
 8008162:	4925      	ldr	r1, [pc, #148]	@ (80081f8 <HAL_RCC_OscConfig+0x240>)
 8008164:	4313      	orrs	r3, r2
 8008166:	600b      	str	r3, [r1, #0]
 8008168:	e015      	b.n	8008196 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800816a:	4b24      	ldr	r3, [pc, #144]	@ (80081fc <HAL_RCC_OscConfig+0x244>)
 800816c:	2200      	movs	r2, #0
 800816e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008170:	f7fd fefa 	bl	8005f68 <HAL_GetTick>
 8008174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008176:	e008      	b.n	800818a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008178:	f7fd fef6 	bl	8005f68 <HAL_GetTick>
 800817c:	4602      	mov	r2, r0
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	2b02      	cmp	r3, #2
 8008184:	d901      	bls.n	800818a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	e187      	b.n	800849a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800818a:	4b1b      	ldr	r3, [pc, #108]	@ (80081f8 <HAL_RCC_OscConfig+0x240>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 0302 	and.w	r3, r3, #2
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1f0      	bne.n	8008178 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 0308 	and.w	r3, r3, #8
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d036      	beq.n	8008210 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	695b      	ldr	r3, [r3, #20]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d016      	beq.n	80081d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80081aa:	4b15      	ldr	r3, [pc, #84]	@ (8008200 <HAL_RCC_OscConfig+0x248>)
 80081ac:	2201      	movs	r2, #1
 80081ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081b0:	f7fd feda 	bl	8005f68 <HAL_GetTick>
 80081b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081b6:	e008      	b.n	80081ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081b8:	f7fd fed6 	bl	8005f68 <HAL_GetTick>
 80081bc:	4602      	mov	r2, r0
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	1ad3      	subs	r3, r2, r3
 80081c2:	2b02      	cmp	r3, #2
 80081c4:	d901      	bls.n	80081ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80081c6:	2303      	movs	r3, #3
 80081c8:	e167      	b.n	800849a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081ca:	4b0b      	ldr	r3, [pc, #44]	@ (80081f8 <HAL_RCC_OscConfig+0x240>)
 80081cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081ce:	f003 0302 	and.w	r3, r3, #2
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d0f0      	beq.n	80081b8 <HAL_RCC_OscConfig+0x200>
 80081d6:	e01b      	b.n	8008210 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80081d8:	4b09      	ldr	r3, [pc, #36]	@ (8008200 <HAL_RCC_OscConfig+0x248>)
 80081da:	2200      	movs	r2, #0
 80081dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081de:	f7fd fec3 	bl	8005f68 <HAL_GetTick>
 80081e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081e4:	e00e      	b.n	8008204 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081e6:	f7fd febf 	bl	8005f68 <HAL_GetTick>
 80081ea:	4602      	mov	r2, r0
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d907      	bls.n	8008204 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80081f4:	2303      	movs	r3, #3
 80081f6:	e150      	b.n	800849a <HAL_RCC_OscConfig+0x4e2>
 80081f8:	40023800 	.word	0x40023800
 80081fc:	42470000 	.word	0x42470000
 8008200:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008204:	4b88      	ldr	r3, [pc, #544]	@ (8008428 <HAL_RCC_OscConfig+0x470>)
 8008206:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008208:	f003 0302 	and.w	r3, r3, #2
 800820c:	2b00      	cmp	r3, #0
 800820e:	d1ea      	bne.n	80081e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 0304 	and.w	r3, r3, #4
 8008218:	2b00      	cmp	r3, #0
 800821a:	f000 8097 	beq.w	800834c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800821e:	2300      	movs	r3, #0
 8008220:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008222:	4b81      	ldr	r3, [pc, #516]	@ (8008428 <HAL_RCC_OscConfig+0x470>)
 8008224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10f      	bne.n	800824e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800822e:	2300      	movs	r3, #0
 8008230:	60bb      	str	r3, [r7, #8]
 8008232:	4b7d      	ldr	r3, [pc, #500]	@ (8008428 <HAL_RCC_OscConfig+0x470>)
 8008234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008236:	4a7c      	ldr	r2, [pc, #496]	@ (8008428 <HAL_RCC_OscConfig+0x470>)
 8008238:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800823c:	6413      	str	r3, [r2, #64]	@ 0x40
 800823e:	4b7a      	ldr	r3, [pc, #488]	@ (8008428 <HAL_RCC_OscConfig+0x470>)
 8008240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008246:	60bb      	str	r3, [r7, #8]
 8008248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800824a:	2301      	movs	r3, #1
 800824c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800824e:	4b77      	ldr	r3, [pc, #476]	@ (800842c <HAL_RCC_OscConfig+0x474>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008256:	2b00      	cmp	r3, #0
 8008258:	d118      	bne.n	800828c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800825a:	4b74      	ldr	r3, [pc, #464]	@ (800842c <HAL_RCC_OscConfig+0x474>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a73      	ldr	r2, [pc, #460]	@ (800842c <HAL_RCC_OscConfig+0x474>)
 8008260:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008266:	f7fd fe7f 	bl	8005f68 <HAL_GetTick>
 800826a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800826c:	e008      	b.n	8008280 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800826e:	f7fd fe7b 	bl	8005f68 <HAL_GetTick>
 8008272:	4602      	mov	r2, r0
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	2b02      	cmp	r3, #2
 800827a:	d901      	bls.n	8008280 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800827c:	2303      	movs	r3, #3
 800827e:	e10c      	b.n	800849a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008280:	4b6a      	ldr	r3, [pc, #424]	@ (800842c <HAL_RCC_OscConfig+0x474>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008288:	2b00      	cmp	r3, #0
 800828a:	d0f0      	beq.n	800826e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	2b01      	cmp	r3, #1
 8008292:	d106      	bne.n	80082a2 <HAL_RCC_OscConfig+0x2ea>
 8008294:	4b64      	ldr	r3, [pc, #400]	@ (8008428 <HAL_RCC_OscConfig+0x470>)
 8008296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008298:	4a63      	ldr	r2, [pc, #396]	@ (8008428 <HAL_RCC_OscConfig+0x470>)
 800829a:	f043 0301 	orr.w	r3, r3, #1
 800829e:	6713      	str	r3, [r2, #112]	@ 0x70
 80082a0:	e01c      	b.n	80082dc <HAL_RCC_OscConfig+0x324>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	2b05      	cmp	r3, #5
 80082a8:	d10c      	bne.n	80082c4 <HAL_RCC_OscConfig+0x30c>
 80082aa:	4b5f      	ldr	r3, [pc, #380]	@ (8008428 <HAL_RCC_OscConfig+0x470>)
 80082ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082ae:	4a5e      	ldr	r2, [pc, #376]	@ (8008428 <HAL_RCC_OscConfig+0x470>)
 80082b0:	f043 0304 	orr.w	r3, r3, #4
 80082b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80082b6:	4b5c      	ldr	r3, [pc, #368]	@ (8008428 <HAL_RCC_OscConfig+0x470>)
 80082b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082ba:	4a5b      	ldr	r2, [pc, #364]	@ (8008428 <HAL_RCC_OscConfig+0x470>)
 80082bc:	f043 0301 	orr.w	r3, r3, #1
 80082c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80082c2:	e00b      	b.n	80082dc <HAL_RCC_OscConfig+0x324>
 80082c4:	4b58      	ldr	r3, [pc, #352]	@ (8008428 <HAL_RCC_OscConfig+0x470>)
 80082c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082c8:	4a57      	ldr	r2, [pc, #348]	@ (8008428 <HAL_RCC_OscConfig+0x470>)
 80082ca:	f023 0301 	bic.w	r3, r3, #1
 80082ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80082d0:	4b55      	ldr	r3, [pc, #340]	@ (8008428 <HAL_RCC_OscConfig+0x470>)
 80082d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082d4:	4a54      	ldr	r2, [pc, #336]	@ (8008428 <HAL_RCC_OscConfig+0x470>)
 80082d6:	f023 0304 	bic.w	r3, r3, #4
 80082da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d015      	beq.n	8008310 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082e4:	f7fd fe40 	bl	8005f68 <HAL_GetTick>
 80082e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082ea:	e00a      	b.n	8008302 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082ec:	f7fd fe3c 	bl	8005f68 <HAL_GetTick>
 80082f0:	4602      	mov	r2, r0
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d901      	bls.n	8008302 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80082fe:	2303      	movs	r3, #3
 8008300:	e0cb      	b.n	800849a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008302:	4b49      	ldr	r3, [pc, #292]	@ (8008428 <HAL_RCC_OscConfig+0x470>)
 8008304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008306:	f003 0302 	and.w	r3, r3, #2
 800830a:	2b00      	cmp	r3, #0
 800830c:	d0ee      	beq.n	80082ec <HAL_RCC_OscConfig+0x334>
 800830e:	e014      	b.n	800833a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008310:	f7fd fe2a 	bl	8005f68 <HAL_GetTick>
 8008314:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008316:	e00a      	b.n	800832e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008318:	f7fd fe26 	bl	8005f68 <HAL_GetTick>
 800831c:	4602      	mov	r2, r0
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008326:	4293      	cmp	r3, r2
 8008328:	d901      	bls.n	800832e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800832a:	2303      	movs	r3, #3
 800832c:	e0b5      	b.n	800849a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800832e:	4b3e      	ldr	r3, [pc, #248]	@ (8008428 <HAL_RCC_OscConfig+0x470>)
 8008330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008332:	f003 0302 	and.w	r3, r3, #2
 8008336:	2b00      	cmp	r3, #0
 8008338:	d1ee      	bne.n	8008318 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800833a:	7dfb      	ldrb	r3, [r7, #23]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d105      	bne.n	800834c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008340:	4b39      	ldr	r3, [pc, #228]	@ (8008428 <HAL_RCC_OscConfig+0x470>)
 8008342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008344:	4a38      	ldr	r2, [pc, #224]	@ (8008428 <HAL_RCC_OscConfig+0x470>)
 8008346:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800834a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 80a1 	beq.w	8008498 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008356:	4b34      	ldr	r3, [pc, #208]	@ (8008428 <HAL_RCC_OscConfig+0x470>)
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	f003 030c 	and.w	r3, r3, #12
 800835e:	2b08      	cmp	r3, #8
 8008360:	d05c      	beq.n	800841c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	2b02      	cmp	r3, #2
 8008368:	d141      	bne.n	80083ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800836a:	4b31      	ldr	r3, [pc, #196]	@ (8008430 <HAL_RCC_OscConfig+0x478>)
 800836c:	2200      	movs	r2, #0
 800836e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008370:	f7fd fdfa 	bl	8005f68 <HAL_GetTick>
 8008374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008376:	e008      	b.n	800838a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008378:	f7fd fdf6 	bl	8005f68 <HAL_GetTick>
 800837c:	4602      	mov	r2, r0
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	2b02      	cmp	r3, #2
 8008384:	d901      	bls.n	800838a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008386:	2303      	movs	r3, #3
 8008388:	e087      	b.n	800849a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800838a:	4b27      	ldr	r3, [pc, #156]	@ (8008428 <HAL_RCC_OscConfig+0x470>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1f0      	bne.n	8008378 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	69da      	ldr	r2, [r3, #28]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a1b      	ldr	r3, [r3, #32]
 800839e:	431a      	orrs	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a4:	019b      	lsls	r3, r3, #6
 80083a6:	431a      	orrs	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ac:	085b      	lsrs	r3, r3, #1
 80083ae:	3b01      	subs	r3, #1
 80083b0:	041b      	lsls	r3, r3, #16
 80083b2:	431a      	orrs	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b8:	061b      	lsls	r3, r3, #24
 80083ba:	491b      	ldr	r1, [pc, #108]	@ (8008428 <HAL_RCC_OscConfig+0x470>)
 80083bc:	4313      	orrs	r3, r2
 80083be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083c0:	4b1b      	ldr	r3, [pc, #108]	@ (8008430 <HAL_RCC_OscConfig+0x478>)
 80083c2:	2201      	movs	r2, #1
 80083c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083c6:	f7fd fdcf 	bl	8005f68 <HAL_GetTick>
 80083ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083cc:	e008      	b.n	80083e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083ce:	f7fd fdcb 	bl	8005f68 <HAL_GetTick>
 80083d2:	4602      	mov	r2, r0
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	1ad3      	subs	r3, r2, r3
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d901      	bls.n	80083e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80083dc:	2303      	movs	r3, #3
 80083de:	e05c      	b.n	800849a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083e0:	4b11      	ldr	r3, [pc, #68]	@ (8008428 <HAL_RCC_OscConfig+0x470>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d0f0      	beq.n	80083ce <HAL_RCC_OscConfig+0x416>
 80083ec:	e054      	b.n	8008498 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083ee:	4b10      	ldr	r3, [pc, #64]	@ (8008430 <HAL_RCC_OscConfig+0x478>)
 80083f0:	2200      	movs	r2, #0
 80083f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083f4:	f7fd fdb8 	bl	8005f68 <HAL_GetTick>
 80083f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083fa:	e008      	b.n	800840e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083fc:	f7fd fdb4 	bl	8005f68 <HAL_GetTick>
 8008400:	4602      	mov	r2, r0
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	1ad3      	subs	r3, r2, r3
 8008406:	2b02      	cmp	r3, #2
 8008408:	d901      	bls.n	800840e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800840a:	2303      	movs	r3, #3
 800840c:	e045      	b.n	800849a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800840e:	4b06      	ldr	r3, [pc, #24]	@ (8008428 <HAL_RCC_OscConfig+0x470>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1f0      	bne.n	80083fc <HAL_RCC_OscConfig+0x444>
 800841a:	e03d      	b.n	8008498 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d107      	bne.n	8008434 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	e038      	b.n	800849a <HAL_RCC_OscConfig+0x4e2>
 8008428:	40023800 	.word	0x40023800
 800842c:	40007000 	.word	0x40007000
 8008430:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008434:	4b1b      	ldr	r3, [pc, #108]	@ (80084a4 <HAL_RCC_OscConfig+0x4ec>)
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	2b01      	cmp	r3, #1
 8008440:	d028      	beq.n	8008494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800844c:	429a      	cmp	r2, r3
 800844e:	d121      	bne.n	8008494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800845a:	429a      	cmp	r2, r3
 800845c:	d11a      	bne.n	8008494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008464:	4013      	ands	r3, r2
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800846a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800846c:	4293      	cmp	r3, r2
 800846e:	d111      	bne.n	8008494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800847a:	085b      	lsrs	r3, r3, #1
 800847c:	3b01      	subs	r3, #1
 800847e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008480:	429a      	cmp	r2, r3
 8008482:	d107      	bne.n	8008494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800848e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008490:	429a      	cmp	r2, r3
 8008492:	d001      	beq.n	8008498 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	e000      	b.n	800849a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3718      	adds	r7, #24
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	40023800 	.word	0x40023800

080084a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d101      	bne.n	80084bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e0cc      	b.n	8008656 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80084bc:	4b68      	ldr	r3, [pc, #416]	@ (8008660 <HAL_RCC_ClockConfig+0x1b8>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 0307 	and.w	r3, r3, #7
 80084c4:	683a      	ldr	r2, [r7, #0]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d90c      	bls.n	80084e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084ca:	4b65      	ldr	r3, [pc, #404]	@ (8008660 <HAL_RCC_ClockConfig+0x1b8>)
 80084cc:	683a      	ldr	r2, [r7, #0]
 80084ce:	b2d2      	uxtb	r2, r2
 80084d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084d2:	4b63      	ldr	r3, [pc, #396]	@ (8008660 <HAL_RCC_ClockConfig+0x1b8>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 0307 	and.w	r3, r3, #7
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d001      	beq.n	80084e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e0b8      	b.n	8008656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 0302 	and.w	r3, r3, #2
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d020      	beq.n	8008532 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f003 0304 	and.w	r3, r3, #4
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d005      	beq.n	8008508 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80084fc:	4b59      	ldr	r3, [pc, #356]	@ (8008664 <HAL_RCC_ClockConfig+0x1bc>)
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	4a58      	ldr	r2, [pc, #352]	@ (8008664 <HAL_RCC_ClockConfig+0x1bc>)
 8008502:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008506:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0308 	and.w	r3, r3, #8
 8008510:	2b00      	cmp	r3, #0
 8008512:	d005      	beq.n	8008520 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008514:	4b53      	ldr	r3, [pc, #332]	@ (8008664 <HAL_RCC_ClockConfig+0x1bc>)
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	4a52      	ldr	r2, [pc, #328]	@ (8008664 <HAL_RCC_ClockConfig+0x1bc>)
 800851a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800851e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008520:	4b50      	ldr	r3, [pc, #320]	@ (8008664 <HAL_RCC_ClockConfig+0x1bc>)
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	494d      	ldr	r1, [pc, #308]	@ (8008664 <HAL_RCC_ClockConfig+0x1bc>)
 800852e:	4313      	orrs	r3, r2
 8008530:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 0301 	and.w	r3, r3, #1
 800853a:	2b00      	cmp	r3, #0
 800853c:	d044      	beq.n	80085c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	2b01      	cmp	r3, #1
 8008544:	d107      	bne.n	8008556 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008546:	4b47      	ldr	r3, [pc, #284]	@ (8008664 <HAL_RCC_ClockConfig+0x1bc>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800854e:	2b00      	cmp	r3, #0
 8008550:	d119      	bne.n	8008586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	e07f      	b.n	8008656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	2b02      	cmp	r3, #2
 800855c:	d003      	beq.n	8008566 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008562:	2b03      	cmp	r3, #3
 8008564:	d107      	bne.n	8008576 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008566:	4b3f      	ldr	r3, [pc, #252]	@ (8008664 <HAL_RCC_ClockConfig+0x1bc>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800856e:	2b00      	cmp	r3, #0
 8008570:	d109      	bne.n	8008586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e06f      	b.n	8008656 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008576:	4b3b      	ldr	r3, [pc, #236]	@ (8008664 <HAL_RCC_ClockConfig+0x1bc>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0302 	and.w	r3, r3, #2
 800857e:	2b00      	cmp	r3, #0
 8008580:	d101      	bne.n	8008586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e067      	b.n	8008656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008586:	4b37      	ldr	r3, [pc, #220]	@ (8008664 <HAL_RCC_ClockConfig+0x1bc>)
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	f023 0203 	bic.w	r2, r3, #3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	4934      	ldr	r1, [pc, #208]	@ (8008664 <HAL_RCC_ClockConfig+0x1bc>)
 8008594:	4313      	orrs	r3, r2
 8008596:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008598:	f7fd fce6 	bl	8005f68 <HAL_GetTick>
 800859c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800859e:	e00a      	b.n	80085b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085a0:	f7fd fce2 	bl	8005f68 <HAL_GetTick>
 80085a4:	4602      	mov	r2, r0
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	1ad3      	subs	r3, r2, r3
 80085aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d901      	bls.n	80085b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e04f      	b.n	8008656 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085b6:	4b2b      	ldr	r3, [pc, #172]	@ (8008664 <HAL_RCC_ClockConfig+0x1bc>)
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	f003 020c 	and.w	r2, r3, #12
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d1eb      	bne.n	80085a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80085c8:	4b25      	ldr	r3, [pc, #148]	@ (8008660 <HAL_RCC_ClockConfig+0x1b8>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 0307 	and.w	r3, r3, #7
 80085d0:	683a      	ldr	r2, [r7, #0]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d20c      	bcs.n	80085f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085d6:	4b22      	ldr	r3, [pc, #136]	@ (8008660 <HAL_RCC_ClockConfig+0x1b8>)
 80085d8:	683a      	ldr	r2, [r7, #0]
 80085da:	b2d2      	uxtb	r2, r2
 80085dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085de:	4b20      	ldr	r3, [pc, #128]	@ (8008660 <HAL_RCC_ClockConfig+0x1b8>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 0307 	and.w	r3, r3, #7
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d001      	beq.n	80085f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e032      	b.n	8008656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 0304 	and.w	r3, r3, #4
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d008      	beq.n	800860e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80085fc:	4b19      	ldr	r3, [pc, #100]	@ (8008664 <HAL_RCC_ClockConfig+0x1bc>)
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	4916      	ldr	r1, [pc, #88]	@ (8008664 <HAL_RCC_ClockConfig+0x1bc>)
 800860a:	4313      	orrs	r3, r2
 800860c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 0308 	and.w	r3, r3, #8
 8008616:	2b00      	cmp	r3, #0
 8008618:	d009      	beq.n	800862e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800861a:	4b12      	ldr	r3, [pc, #72]	@ (8008664 <HAL_RCC_ClockConfig+0x1bc>)
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	00db      	lsls	r3, r3, #3
 8008628:	490e      	ldr	r1, [pc, #56]	@ (8008664 <HAL_RCC_ClockConfig+0x1bc>)
 800862a:	4313      	orrs	r3, r2
 800862c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800862e:	f000 f821 	bl	8008674 <HAL_RCC_GetSysClockFreq>
 8008632:	4602      	mov	r2, r0
 8008634:	4b0b      	ldr	r3, [pc, #44]	@ (8008664 <HAL_RCC_ClockConfig+0x1bc>)
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	091b      	lsrs	r3, r3, #4
 800863a:	f003 030f 	and.w	r3, r3, #15
 800863e:	490a      	ldr	r1, [pc, #40]	@ (8008668 <HAL_RCC_ClockConfig+0x1c0>)
 8008640:	5ccb      	ldrb	r3, [r1, r3]
 8008642:	fa22 f303 	lsr.w	r3, r2, r3
 8008646:	4a09      	ldr	r2, [pc, #36]	@ (800866c <HAL_RCC_ClockConfig+0x1c4>)
 8008648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800864a:	4b09      	ldr	r3, [pc, #36]	@ (8008670 <HAL_RCC_ClockConfig+0x1c8>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4618      	mov	r0, r3
 8008650:	f7fd fc46 	bl	8005ee0 <HAL_InitTick>

  return HAL_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	40023c00 	.word	0x40023c00
 8008664:	40023800 	.word	0x40023800
 8008668:	08012abc 	.word	0x08012abc
 800866c:	20000004 	.word	0x20000004
 8008670:	20000008 	.word	0x20000008

08008674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008678:	b090      	sub	sp, #64	@ 0x40
 800867a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800867c:	2300      	movs	r3, #0
 800867e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008680:	2300      	movs	r3, #0
 8008682:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008684:	2300      	movs	r3, #0
 8008686:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008688:	2300      	movs	r3, #0
 800868a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800868c:	4b59      	ldr	r3, [pc, #356]	@ (80087f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	f003 030c 	and.w	r3, r3, #12
 8008694:	2b08      	cmp	r3, #8
 8008696:	d00d      	beq.n	80086b4 <HAL_RCC_GetSysClockFreq+0x40>
 8008698:	2b08      	cmp	r3, #8
 800869a:	f200 80a1 	bhi.w	80087e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d002      	beq.n	80086a8 <HAL_RCC_GetSysClockFreq+0x34>
 80086a2:	2b04      	cmp	r3, #4
 80086a4:	d003      	beq.n	80086ae <HAL_RCC_GetSysClockFreq+0x3a>
 80086a6:	e09b      	b.n	80087e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80086a8:	4b53      	ldr	r3, [pc, #332]	@ (80087f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80086aa:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80086ac:	e09b      	b.n	80087e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80086ae:	4b53      	ldr	r3, [pc, #332]	@ (80087fc <HAL_RCC_GetSysClockFreq+0x188>)
 80086b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80086b2:	e098      	b.n	80087e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80086b4:	4b4f      	ldr	r3, [pc, #316]	@ (80087f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80086bc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80086be:	4b4d      	ldr	r3, [pc, #308]	@ (80087f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d028      	beq.n	800871c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086ca:	4b4a      	ldr	r3, [pc, #296]	@ (80087f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	099b      	lsrs	r3, r3, #6
 80086d0:	2200      	movs	r2, #0
 80086d2:	623b      	str	r3, [r7, #32]
 80086d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80086d6:	6a3b      	ldr	r3, [r7, #32]
 80086d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80086dc:	2100      	movs	r1, #0
 80086de:	4b47      	ldr	r3, [pc, #284]	@ (80087fc <HAL_RCC_GetSysClockFreq+0x188>)
 80086e0:	fb03 f201 	mul.w	r2, r3, r1
 80086e4:	2300      	movs	r3, #0
 80086e6:	fb00 f303 	mul.w	r3, r0, r3
 80086ea:	4413      	add	r3, r2
 80086ec:	4a43      	ldr	r2, [pc, #268]	@ (80087fc <HAL_RCC_GetSysClockFreq+0x188>)
 80086ee:	fba0 1202 	umull	r1, r2, r0, r2
 80086f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80086f4:	460a      	mov	r2, r1
 80086f6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80086f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086fa:	4413      	add	r3, r2
 80086fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008700:	2200      	movs	r2, #0
 8008702:	61bb      	str	r3, [r7, #24]
 8008704:	61fa      	str	r2, [r7, #28]
 8008706:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800870a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800870e:	f7f8 fabb 	bl	8000c88 <__aeabi_uldivmod>
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	4613      	mov	r3, r2
 8008718:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800871a:	e053      	b.n	80087c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800871c:	4b35      	ldr	r3, [pc, #212]	@ (80087f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	099b      	lsrs	r3, r3, #6
 8008722:	2200      	movs	r2, #0
 8008724:	613b      	str	r3, [r7, #16]
 8008726:	617a      	str	r2, [r7, #20]
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800872e:	f04f 0b00 	mov.w	fp, #0
 8008732:	4652      	mov	r2, sl
 8008734:	465b      	mov	r3, fp
 8008736:	f04f 0000 	mov.w	r0, #0
 800873a:	f04f 0100 	mov.w	r1, #0
 800873e:	0159      	lsls	r1, r3, #5
 8008740:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008744:	0150      	lsls	r0, r2, #5
 8008746:	4602      	mov	r2, r0
 8008748:	460b      	mov	r3, r1
 800874a:	ebb2 080a 	subs.w	r8, r2, sl
 800874e:	eb63 090b 	sbc.w	r9, r3, fp
 8008752:	f04f 0200 	mov.w	r2, #0
 8008756:	f04f 0300 	mov.w	r3, #0
 800875a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800875e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008762:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008766:	ebb2 0408 	subs.w	r4, r2, r8
 800876a:	eb63 0509 	sbc.w	r5, r3, r9
 800876e:	f04f 0200 	mov.w	r2, #0
 8008772:	f04f 0300 	mov.w	r3, #0
 8008776:	00eb      	lsls	r3, r5, #3
 8008778:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800877c:	00e2      	lsls	r2, r4, #3
 800877e:	4614      	mov	r4, r2
 8008780:	461d      	mov	r5, r3
 8008782:	eb14 030a 	adds.w	r3, r4, sl
 8008786:	603b      	str	r3, [r7, #0]
 8008788:	eb45 030b 	adc.w	r3, r5, fp
 800878c:	607b      	str	r3, [r7, #4]
 800878e:	f04f 0200 	mov.w	r2, #0
 8008792:	f04f 0300 	mov.w	r3, #0
 8008796:	e9d7 4500 	ldrd	r4, r5, [r7]
 800879a:	4629      	mov	r1, r5
 800879c:	028b      	lsls	r3, r1, #10
 800879e:	4621      	mov	r1, r4
 80087a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80087a4:	4621      	mov	r1, r4
 80087a6:	028a      	lsls	r2, r1, #10
 80087a8:	4610      	mov	r0, r2
 80087aa:	4619      	mov	r1, r3
 80087ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ae:	2200      	movs	r2, #0
 80087b0:	60bb      	str	r3, [r7, #8]
 80087b2:	60fa      	str	r2, [r7, #12]
 80087b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80087b8:	f7f8 fa66 	bl	8000c88 <__aeabi_uldivmod>
 80087bc:	4602      	mov	r2, r0
 80087be:	460b      	mov	r3, r1
 80087c0:	4613      	mov	r3, r2
 80087c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80087c4:	4b0b      	ldr	r3, [pc, #44]	@ (80087f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	0c1b      	lsrs	r3, r3, #16
 80087ca:	f003 0303 	and.w	r3, r3, #3
 80087ce:	3301      	adds	r3, #1
 80087d0:	005b      	lsls	r3, r3, #1
 80087d2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80087d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80087d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80087dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80087de:	e002      	b.n	80087e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80087e0:	4b05      	ldr	r3, [pc, #20]	@ (80087f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80087e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80087e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80087e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3740      	adds	r7, #64	@ 0x40
 80087ec:	46bd      	mov	sp, r7
 80087ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087f2:	bf00      	nop
 80087f4:	40023800 	.word	0x40023800
 80087f8:	00f42400 	.word	0x00f42400
 80087fc:	017d7840 	.word	0x017d7840

08008800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008800:	b480      	push	{r7}
 8008802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008804:	4b03      	ldr	r3, [pc, #12]	@ (8008814 <HAL_RCC_GetHCLKFreq+0x14>)
 8008806:	681b      	ldr	r3, [r3, #0]
}
 8008808:	4618      	mov	r0, r3
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	20000004 	.word	0x20000004

08008818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800881c:	f7ff fff0 	bl	8008800 <HAL_RCC_GetHCLKFreq>
 8008820:	4602      	mov	r2, r0
 8008822:	4b05      	ldr	r3, [pc, #20]	@ (8008838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	0a9b      	lsrs	r3, r3, #10
 8008828:	f003 0307 	and.w	r3, r3, #7
 800882c:	4903      	ldr	r1, [pc, #12]	@ (800883c <HAL_RCC_GetPCLK1Freq+0x24>)
 800882e:	5ccb      	ldrb	r3, [r1, r3]
 8008830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008834:	4618      	mov	r0, r3
 8008836:	bd80      	pop	{r7, pc}
 8008838:	40023800 	.word	0x40023800
 800883c:	08012acc 	.word	0x08012acc

08008840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008844:	f7ff ffdc 	bl	8008800 <HAL_RCC_GetHCLKFreq>
 8008848:	4602      	mov	r2, r0
 800884a:	4b05      	ldr	r3, [pc, #20]	@ (8008860 <HAL_RCC_GetPCLK2Freq+0x20>)
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	0b5b      	lsrs	r3, r3, #13
 8008850:	f003 0307 	and.w	r3, r3, #7
 8008854:	4903      	ldr	r1, [pc, #12]	@ (8008864 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008856:	5ccb      	ldrb	r3, [r1, r3]
 8008858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800885c:	4618      	mov	r0, r3
 800885e:	bd80      	pop	{r7, pc}
 8008860:	40023800 	.word	0x40023800
 8008864:	08012acc 	.word	0x08012acc

08008868 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d101      	bne.n	800887a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e041      	b.n	80088fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008880:	b2db      	uxtb	r3, r3
 8008882:	2b00      	cmp	r3, #0
 8008884:	d106      	bne.n	8008894 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f7fc ffb2 	bl	80057f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2202      	movs	r2, #2
 8008898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	3304      	adds	r3, #4
 80088a4:	4619      	mov	r1, r3
 80088a6:	4610      	mov	r0, r2
 80088a8:	f000 ff24 	bl	80096f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b082      	sub	sp, #8
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d101      	bne.n	8008918 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	e041      	b.n	800899c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800891e:	b2db      	uxtb	r3, r3
 8008920:	2b00      	cmp	r3, #0
 8008922:	d106      	bne.n	8008932 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f839 	bl	80089a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2202      	movs	r2, #2
 8008936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	3304      	adds	r3, #4
 8008942:	4619      	mov	r1, r3
 8008944:	4610      	mov	r0, r2
 8008946:	f000 fed5 	bl	80096f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2201      	movs	r2, #1
 800894e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2201      	movs	r2, #1
 8008956:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2201      	movs	r2, #1
 800895e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2201      	movs	r2, #1
 8008966:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2201      	movs	r2, #1
 800896e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2201      	movs	r2, #1
 800897e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2201      	movs	r2, #1
 8008986:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2201      	movs	r2, #1
 8008996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80089ac:	bf00      	nop
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d109      	bne.n	80089dc <HAL_TIM_PWM_Start+0x24>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	bf14      	ite	ne
 80089d4:	2301      	movne	r3, #1
 80089d6:	2300      	moveq	r3, #0
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	e022      	b.n	8008a22 <HAL_TIM_PWM_Start+0x6a>
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	2b04      	cmp	r3, #4
 80089e0:	d109      	bne.n	80089f6 <HAL_TIM_PWM_Start+0x3e>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	bf14      	ite	ne
 80089ee:	2301      	movne	r3, #1
 80089f0:	2300      	moveq	r3, #0
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	e015      	b.n	8008a22 <HAL_TIM_PWM_Start+0x6a>
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	2b08      	cmp	r3, #8
 80089fa:	d109      	bne.n	8008a10 <HAL_TIM_PWM_Start+0x58>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	bf14      	ite	ne
 8008a08:	2301      	movne	r3, #1
 8008a0a:	2300      	moveq	r3, #0
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	e008      	b.n	8008a22 <HAL_TIM_PWM_Start+0x6a>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	bf14      	ite	ne
 8008a1c:	2301      	movne	r3, #1
 8008a1e:	2300      	moveq	r3, #0
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d001      	beq.n	8008a2a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	e07c      	b.n	8008b24 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d104      	bne.n	8008a3a <HAL_TIM_PWM_Start+0x82>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2202      	movs	r2, #2
 8008a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a38:	e013      	b.n	8008a62 <HAL_TIM_PWM_Start+0xaa>
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	2b04      	cmp	r3, #4
 8008a3e:	d104      	bne.n	8008a4a <HAL_TIM_PWM_Start+0x92>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2202      	movs	r2, #2
 8008a44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a48:	e00b      	b.n	8008a62 <HAL_TIM_PWM_Start+0xaa>
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	2b08      	cmp	r3, #8
 8008a4e:	d104      	bne.n	8008a5a <HAL_TIM_PWM_Start+0xa2>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2202      	movs	r2, #2
 8008a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a58:	e003      	b.n	8008a62 <HAL_TIM_PWM_Start+0xaa>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2202      	movs	r2, #2
 8008a5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2201      	movs	r2, #1
 8008a68:	6839      	ldr	r1, [r7, #0]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f001 fa56 	bl	8009f1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a2d      	ldr	r2, [pc, #180]	@ (8008b2c <HAL_TIM_PWM_Start+0x174>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d004      	beq.n	8008a84 <HAL_TIM_PWM_Start+0xcc>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a2c      	ldr	r2, [pc, #176]	@ (8008b30 <HAL_TIM_PWM_Start+0x178>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d101      	bne.n	8008a88 <HAL_TIM_PWM_Start+0xd0>
 8008a84:	2301      	movs	r3, #1
 8008a86:	e000      	b.n	8008a8a <HAL_TIM_PWM_Start+0xd2>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d007      	beq.n	8008a9e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008a9c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a22      	ldr	r2, [pc, #136]	@ (8008b2c <HAL_TIM_PWM_Start+0x174>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d022      	beq.n	8008aee <HAL_TIM_PWM_Start+0x136>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ab0:	d01d      	beq.n	8008aee <HAL_TIM_PWM_Start+0x136>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a1f      	ldr	r2, [pc, #124]	@ (8008b34 <HAL_TIM_PWM_Start+0x17c>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d018      	beq.n	8008aee <HAL_TIM_PWM_Start+0x136>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a1d      	ldr	r2, [pc, #116]	@ (8008b38 <HAL_TIM_PWM_Start+0x180>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d013      	beq.n	8008aee <HAL_TIM_PWM_Start+0x136>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a1c      	ldr	r2, [pc, #112]	@ (8008b3c <HAL_TIM_PWM_Start+0x184>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d00e      	beq.n	8008aee <HAL_TIM_PWM_Start+0x136>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a16      	ldr	r2, [pc, #88]	@ (8008b30 <HAL_TIM_PWM_Start+0x178>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d009      	beq.n	8008aee <HAL_TIM_PWM_Start+0x136>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a18      	ldr	r2, [pc, #96]	@ (8008b40 <HAL_TIM_PWM_Start+0x188>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d004      	beq.n	8008aee <HAL_TIM_PWM_Start+0x136>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a16      	ldr	r2, [pc, #88]	@ (8008b44 <HAL_TIM_PWM_Start+0x18c>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d111      	bne.n	8008b12 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	f003 0307 	and.w	r3, r3, #7
 8008af8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2b06      	cmp	r3, #6
 8008afe:	d010      	beq.n	8008b22 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f042 0201 	orr.w	r2, r2, #1
 8008b0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b10:	e007      	b.n	8008b22 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f042 0201 	orr.w	r2, r2, #1
 8008b20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	40010000 	.word	0x40010000
 8008b30:	40010400 	.word	0x40010400
 8008b34:	40000400 	.word	0x40000400
 8008b38:	40000800 	.word	0x40000800
 8008b3c:	40000c00 	.word	0x40000c00
 8008b40:	40014000 	.word	0x40014000
 8008b44:	40001800 	.word	0x40001800

08008b48 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d101      	bne.n	8008b5a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e041      	b.n	8008bde <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d106      	bne.n	8008b74 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f839 	bl	8008be6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2202      	movs	r2, #2
 8008b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	3304      	adds	r3, #4
 8008b84:	4619      	mov	r1, r3
 8008b86:	4610      	mov	r0, r2
 8008b88:	f000 fdb4 	bl	80096f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3708      	adds	r7, #8
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008be6:	b480      	push	{r7}
 8008be8:	b083      	sub	sp, #12
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008bee:	bf00      	nop
 8008bf0:	370c      	adds	r7, #12
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr
	...

08008bfc <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	2b0c      	cmp	r3, #12
 8008c0e:	d841      	bhi.n	8008c94 <HAL_TIM_IC_Stop_IT+0x98>
 8008c10:	a201      	add	r2, pc, #4	@ (adr r2, 8008c18 <HAL_TIM_IC_Stop_IT+0x1c>)
 8008c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c16:	bf00      	nop
 8008c18:	08008c4d 	.word	0x08008c4d
 8008c1c:	08008c95 	.word	0x08008c95
 8008c20:	08008c95 	.word	0x08008c95
 8008c24:	08008c95 	.word	0x08008c95
 8008c28:	08008c5f 	.word	0x08008c5f
 8008c2c:	08008c95 	.word	0x08008c95
 8008c30:	08008c95 	.word	0x08008c95
 8008c34:	08008c95 	.word	0x08008c95
 8008c38:	08008c71 	.word	0x08008c71
 8008c3c:	08008c95 	.word	0x08008c95
 8008c40:	08008c95 	.word	0x08008c95
 8008c44:	08008c95 	.word	0x08008c95
 8008c48:	08008c83 	.word	0x08008c83
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	68da      	ldr	r2, [r3, #12]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f022 0202 	bic.w	r2, r2, #2
 8008c5a:	60da      	str	r2, [r3, #12]
      break;
 8008c5c:	e01d      	b.n	8008c9a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68da      	ldr	r2, [r3, #12]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f022 0204 	bic.w	r2, r2, #4
 8008c6c:	60da      	str	r2, [r3, #12]
      break;
 8008c6e:	e014      	b.n	8008c9a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	68da      	ldr	r2, [r3, #12]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f022 0208 	bic.w	r2, r2, #8
 8008c7e:	60da      	str	r2, [r3, #12]
      break;
 8008c80:	e00b      	b.n	8008c9a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68da      	ldr	r2, [r3, #12]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f022 0210 	bic.w	r2, r2, #16
 8008c90:	60da      	str	r2, [r3, #12]
      break;
 8008c92:	e002      	b.n	8008c9a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8008c94:	2301      	movs	r3, #1
 8008c96:	73fb      	strb	r3, [r7, #15]
      break;
 8008c98:	bf00      	nop
  }

  if (status == HAL_OK)
 8008c9a:	7bfb      	ldrb	r3, [r7, #15]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d156      	bne.n	8008d4e <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	6839      	ldr	r1, [r7, #0]
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f001 f937 	bl	8009f1c <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	6a1a      	ldr	r2, [r3, #32]
 8008cb4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008cb8:	4013      	ands	r3, r2
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10f      	bne.n	8008cde <HAL_TIM_IC_Stop_IT+0xe2>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	6a1a      	ldr	r2, [r3, #32]
 8008cc4:	f240 4344 	movw	r3, #1092	@ 0x444
 8008cc8:	4013      	ands	r3, r2
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d107      	bne.n	8008cde <HAL_TIM_IC_Stop_IT+0xe2>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f022 0201 	bic.w	r2, r2, #1
 8008cdc:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d104      	bne.n	8008cee <HAL_TIM_IC_Stop_IT+0xf2>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008cec:	e013      	b.n	8008d16 <HAL_TIM_IC_Stop_IT+0x11a>
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2b04      	cmp	r3, #4
 8008cf2:	d104      	bne.n	8008cfe <HAL_TIM_IC_Stop_IT+0x102>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008cfc:	e00b      	b.n	8008d16 <HAL_TIM_IC_Stop_IT+0x11a>
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	2b08      	cmp	r3, #8
 8008d02:	d104      	bne.n	8008d0e <HAL_TIM_IC_Stop_IT+0x112>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d0c:	e003      	b.n	8008d16 <HAL_TIM_IC_Stop_IT+0x11a>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2201      	movs	r2, #1
 8008d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d104      	bne.n	8008d26 <HAL_TIM_IC_Stop_IT+0x12a>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d24:	e013      	b.n	8008d4e <HAL_TIM_IC_Stop_IT+0x152>
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	2b04      	cmp	r3, #4
 8008d2a:	d104      	bne.n	8008d36 <HAL_TIM_IC_Stop_IT+0x13a>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008d34:	e00b      	b.n	8008d4e <HAL_TIM_IC_Stop_IT+0x152>
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	2b08      	cmp	r3, #8
 8008d3a:	d104      	bne.n	8008d46 <HAL_TIM_IC_Stop_IT+0x14a>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d44:	e003      	b.n	8008d4e <HAL_TIM_IC_Stop_IT+0x152>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8008d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3710      	adds	r7, #16
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b086      	sub	sp, #24
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d101      	bne.n	8008d6c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e097      	b.n	8008e9c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d106      	bne.n	8008d86 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f7fc fc9f 	bl	80056c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2202      	movs	r2, #2
 8008d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	6812      	ldr	r2, [r2, #0]
 8008d98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d9c:	f023 0307 	bic.w	r3, r3, #7
 8008da0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	3304      	adds	r3, #4
 8008daa:	4619      	mov	r1, r3
 8008dac:	4610      	mov	r0, r2
 8008dae:	f000 fca1 	bl	80096f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	699b      	ldr	r3, [r3, #24]
 8008dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	6a1b      	ldr	r3, [r3, #32]
 8008dc8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	697a      	ldr	r2, [r7, #20]
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008dda:	f023 0303 	bic.w	r3, r3, #3
 8008dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	689a      	ldr	r2, [r3, #8]
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	021b      	lsls	r3, r3, #8
 8008dea:	4313      	orrs	r3, r2
 8008dec:	693a      	ldr	r2, [r7, #16]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008df8:	f023 030c 	bic.w	r3, r3, #12
 8008dfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008e04:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	68da      	ldr	r2, [r3, #12]
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	69db      	ldr	r3, [r3, #28]
 8008e12:	021b      	lsls	r3, r3, #8
 8008e14:	4313      	orrs	r3, r2
 8008e16:	693a      	ldr	r2, [r7, #16]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	011a      	lsls	r2, r3, #4
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	6a1b      	ldr	r3, [r3, #32]
 8008e26:	031b      	lsls	r3, r3, #12
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	693a      	ldr	r2, [r7, #16]
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008e36:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008e3e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	685a      	ldr	r2, [r3, #4]
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	695b      	ldr	r3, [r3, #20]
 8008e48:	011b      	lsls	r3, r3, #4
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	697a      	ldr	r2, [r7, #20]
 8008e58:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	693a      	ldr	r2, [r7, #16]
 8008e60:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2201      	movs	r2, #1
 8008e76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2201      	movs	r2, #1
 8008e86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2201      	movs	r2, #1
 8008e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3718      	adds	r7, #24
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008eb4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008ebc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ec4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008ecc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d110      	bne.n	8008ef6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ed4:	7bfb      	ldrb	r3, [r7, #15]
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d102      	bne.n	8008ee0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008eda:	7b7b      	ldrb	r3, [r7, #13]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d001      	beq.n	8008ee4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e069      	b.n	8008fb8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2202      	movs	r2, #2
 8008ef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ef4:	e031      	b.n	8008f5a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	2b04      	cmp	r3, #4
 8008efa:	d110      	bne.n	8008f1e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008efc:	7bbb      	ldrb	r3, [r7, #14]
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d102      	bne.n	8008f08 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008f02:	7b3b      	ldrb	r3, [r7, #12]
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d001      	beq.n	8008f0c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e055      	b.n	8008fb8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2202      	movs	r2, #2
 8008f10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2202      	movs	r2, #2
 8008f18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008f1c:	e01d      	b.n	8008f5a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f1e:	7bfb      	ldrb	r3, [r7, #15]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d108      	bne.n	8008f36 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f24:	7bbb      	ldrb	r3, [r7, #14]
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d105      	bne.n	8008f36 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008f2a:	7b7b      	ldrb	r3, [r7, #13]
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d102      	bne.n	8008f36 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008f30:	7b3b      	ldrb	r3, [r7, #12]
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d001      	beq.n	8008f3a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e03e      	b.n	8008fb8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2202      	movs	r2, #2
 8008f3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2202      	movs	r2, #2
 8008f46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2202      	movs	r2, #2
 8008f4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2202      	movs	r2, #2
 8008f56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d003      	beq.n	8008f68 <HAL_TIM_Encoder_Start+0xc4>
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	2b04      	cmp	r3, #4
 8008f64:	d008      	beq.n	8008f78 <HAL_TIM_Encoder_Start+0xd4>
 8008f66:	e00f      	b.n	8008f88 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	2100      	movs	r1, #0
 8008f70:	4618      	mov	r0, r3
 8008f72:	f000 ffd3 	bl	8009f1c <TIM_CCxChannelCmd>
      break;
 8008f76:	e016      	b.n	8008fa6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	2104      	movs	r1, #4
 8008f80:	4618      	mov	r0, r3
 8008f82:	f000 ffcb 	bl	8009f1c <TIM_CCxChannelCmd>
      break;
 8008f86:	e00e      	b.n	8008fa6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	2100      	movs	r1, #0
 8008f90:	4618      	mov	r0, r3
 8008f92:	f000 ffc3 	bl	8009f1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	2104      	movs	r1, #4
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f000 ffbc 	bl	8009f1c <TIM_CCxChannelCmd>
      break;
 8008fa4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f042 0201 	orr.w	r2, r2, #1
 8008fb4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	f003 0302 	and.w	r3, r3, #2
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d122      	bne.n	800901c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	f003 0302 	and.w	r3, r3, #2
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	d11b      	bne.n	800901c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f06f 0202 	mvn.w	r2, #2
 8008fec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	699b      	ldr	r3, [r3, #24]
 8008ffa:	f003 0303 	and.w	r3, r3, #3
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d003      	beq.n	800900a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f7f9 f97a 	bl	80022fc <HAL_TIM_IC_CaptureCallback>
 8009008:	e005      	b.n	8009016 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 fb54 	bl	80096b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 fb5b 	bl	80096cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	691b      	ldr	r3, [r3, #16]
 8009022:	f003 0304 	and.w	r3, r3, #4
 8009026:	2b04      	cmp	r3, #4
 8009028:	d122      	bne.n	8009070 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	f003 0304 	and.w	r3, r3, #4
 8009034:	2b04      	cmp	r3, #4
 8009036:	d11b      	bne.n	8009070 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f06f 0204 	mvn.w	r2, #4
 8009040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2202      	movs	r2, #2
 8009046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	699b      	ldr	r3, [r3, #24]
 800904e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009052:	2b00      	cmp	r3, #0
 8009054:	d003      	beq.n	800905e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f7f9 f950 	bl	80022fc <HAL_TIM_IC_CaptureCallback>
 800905c:	e005      	b.n	800906a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fb2a 	bl	80096b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 fb31 	bl	80096cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	f003 0308 	and.w	r3, r3, #8
 800907a:	2b08      	cmp	r3, #8
 800907c:	d122      	bne.n	80090c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	f003 0308 	and.w	r3, r3, #8
 8009088:	2b08      	cmp	r3, #8
 800908a:	d11b      	bne.n	80090c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f06f 0208 	mvn.w	r2, #8
 8009094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2204      	movs	r2, #4
 800909a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	69db      	ldr	r3, [r3, #28]
 80090a2:	f003 0303 	and.w	r3, r3, #3
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d003      	beq.n	80090b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f7f9 f926 	bl	80022fc <HAL_TIM_IC_CaptureCallback>
 80090b0:	e005      	b.n	80090be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 fb00 	bl	80096b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 fb07 	bl	80096cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	f003 0310 	and.w	r3, r3, #16
 80090ce:	2b10      	cmp	r3, #16
 80090d0:	d122      	bne.n	8009118 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	f003 0310 	and.w	r3, r3, #16
 80090dc:	2b10      	cmp	r3, #16
 80090de:	d11b      	bne.n	8009118 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f06f 0210 	mvn.w	r2, #16
 80090e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2208      	movs	r2, #8
 80090ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	69db      	ldr	r3, [r3, #28]
 80090f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d003      	beq.n	8009106 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f7f9 f8fc 	bl	80022fc <HAL_TIM_IC_CaptureCallback>
 8009104:	e005      	b.n	8009112 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fad6 	bl	80096b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 fadd 	bl	80096cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	691b      	ldr	r3, [r3, #16]
 800911e:	f003 0301 	and.w	r3, r3, #1
 8009122:	2b01      	cmp	r3, #1
 8009124:	d10e      	bne.n	8009144 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	f003 0301 	and.w	r3, r3, #1
 8009130:	2b01      	cmp	r3, #1
 8009132:	d107      	bne.n	8009144 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f06f 0201 	mvn.w	r2, #1
 800913c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fab0 	bl	80096a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	691b      	ldr	r3, [r3, #16]
 800914a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800914e:	2b80      	cmp	r3, #128	@ 0x80
 8009150:	d10e      	bne.n	8009170 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800915c:	2b80      	cmp	r3, #128	@ 0x80
 800915e:	d107      	bne.n	8009170 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 ff82 	bl	800a074 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800917a:	2b40      	cmp	r3, #64	@ 0x40
 800917c:	d10e      	bne.n	800919c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009188:	2b40      	cmp	r3, #64	@ 0x40
 800918a:	d107      	bne.n	800919c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 faa2 	bl	80096e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	f003 0320 	and.w	r3, r3, #32
 80091a6:	2b20      	cmp	r3, #32
 80091a8:	d10e      	bne.n	80091c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	f003 0320 	and.w	r3, r3, #32
 80091b4:	2b20      	cmp	r3, #32
 80091b6:	d107      	bne.n	80091c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f06f 0220 	mvn.w	r2, #32
 80091c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 ff4c 	bl	800a060 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091c8:	bf00      	nop
 80091ca:	3708      	adds	r7, #8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b086      	sub	sp, #24
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091dc:	2300      	movs	r3, #0
 80091de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d101      	bne.n	80091ee <HAL_TIM_IC_ConfigChannel+0x1e>
 80091ea:	2302      	movs	r3, #2
 80091ec:	e088      	b.n	8009300 <HAL_TIM_IC_ConfigChannel+0x130>
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d11b      	bne.n	8009234 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6818      	ldr	r0, [r3, #0]
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	6819      	ldr	r1, [r3, #0]
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	685a      	ldr	r2, [r3, #4]
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	f000 fcc2 	bl	8009b94 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	699a      	ldr	r2, [r3, #24]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f022 020c 	bic.w	r2, r2, #12
 800921e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6999      	ldr	r1, [r3, #24]
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	689a      	ldr	r2, [r3, #8]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	430a      	orrs	r2, r1
 8009230:	619a      	str	r2, [r3, #24]
 8009232:	e060      	b.n	80092f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2b04      	cmp	r3, #4
 8009238:	d11c      	bne.n	8009274 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6818      	ldr	r0, [r3, #0]
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	6819      	ldr	r1, [r3, #0]
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	685a      	ldr	r2, [r3, #4]
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	f000 fd46 	bl	8009cda <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	699a      	ldr	r2, [r3, #24]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800925c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	6999      	ldr	r1, [r3, #24]
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	021a      	lsls	r2, r3, #8
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	430a      	orrs	r2, r1
 8009270:	619a      	str	r2, [r3, #24]
 8009272:	e040      	b.n	80092f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2b08      	cmp	r3, #8
 8009278:	d11b      	bne.n	80092b2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6818      	ldr	r0, [r3, #0]
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	6819      	ldr	r1, [r3, #0]
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	685a      	ldr	r2, [r3, #4]
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	f000 fd93 	bl	8009db4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	69da      	ldr	r2, [r3, #28]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f022 020c 	bic.w	r2, r2, #12
 800929c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	69d9      	ldr	r1, [r3, #28]
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	689a      	ldr	r2, [r3, #8]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	430a      	orrs	r2, r1
 80092ae:	61da      	str	r2, [r3, #28]
 80092b0:	e021      	b.n	80092f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2b0c      	cmp	r3, #12
 80092b6:	d11c      	bne.n	80092f2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6818      	ldr	r0, [r3, #0]
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	6819      	ldr	r1, [r3, #0]
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	685a      	ldr	r2, [r3, #4]
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	f000 fdb0 	bl	8009e2c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	69da      	ldr	r2, [r3, #28]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80092da:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	69d9      	ldr	r1, [r3, #28]
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	021a      	lsls	r2, r3, #8
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	430a      	orrs	r2, r1
 80092ee:	61da      	str	r2, [r3, #28]
 80092f0:	e001      	b.n	80092f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80092fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009300:	4618      	mov	r0, r3
 8009302:	3718      	adds	r7, #24
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009314:	2300      	movs	r3, #0
 8009316:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800931e:	2b01      	cmp	r3, #1
 8009320:	d101      	bne.n	8009326 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009322:	2302      	movs	r3, #2
 8009324:	e0ae      	b.n	8009484 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2201      	movs	r2, #1
 800932a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2b0c      	cmp	r3, #12
 8009332:	f200 809f 	bhi.w	8009474 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009336:	a201      	add	r2, pc, #4	@ (adr r2, 800933c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800933c:	08009371 	.word	0x08009371
 8009340:	08009475 	.word	0x08009475
 8009344:	08009475 	.word	0x08009475
 8009348:	08009475 	.word	0x08009475
 800934c:	080093b1 	.word	0x080093b1
 8009350:	08009475 	.word	0x08009475
 8009354:	08009475 	.word	0x08009475
 8009358:	08009475 	.word	0x08009475
 800935c:	080093f3 	.word	0x080093f3
 8009360:	08009475 	.word	0x08009475
 8009364:	08009475 	.word	0x08009475
 8009368:	08009475 	.word	0x08009475
 800936c:	08009433 	.word	0x08009433
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68b9      	ldr	r1, [r7, #8]
 8009376:	4618      	mov	r0, r3
 8009378:	f000 fa5c 	bl	8009834 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	699a      	ldr	r2, [r3, #24]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f042 0208 	orr.w	r2, r2, #8
 800938a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	699a      	ldr	r2, [r3, #24]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f022 0204 	bic.w	r2, r2, #4
 800939a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	6999      	ldr	r1, [r3, #24]
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	691a      	ldr	r2, [r3, #16]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	430a      	orrs	r2, r1
 80093ac:	619a      	str	r2, [r3, #24]
      break;
 80093ae:	e064      	b.n	800947a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68b9      	ldr	r1, [r7, #8]
 80093b6:	4618      	mov	r0, r3
 80093b8:	f000 faac 	bl	8009914 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	699a      	ldr	r2, [r3, #24]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80093ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	699a      	ldr	r2, [r3, #24]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80093da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	6999      	ldr	r1, [r3, #24]
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	021a      	lsls	r2, r3, #8
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	430a      	orrs	r2, r1
 80093ee:	619a      	str	r2, [r3, #24]
      break;
 80093f0:	e043      	b.n	800947a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68b9      	ldr	r1, [r7, #8]
 80093f8:	4618      	mov	r0, r3
 80093fa:	f000 fb01 	bl	8009a00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	69da      	ldr	r2, [r3, #28]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f042 0208 	orr.w	r2, r2, #8
 800940c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	69da      	ldr	r2, [r3, #28]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f022 0204 	bic.w	r2, r2, #4
 800941c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	69d9      	ldr	r1, [r3, #28]
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	691a      	ldr	r2, [r3, #16]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	430a      	orrs	r2, r1
 800942e:	61da      	str	r2, [r3, #28]
      break;
 8009430:	e023      	b.n	800947a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	68b9      	ldr	r1, [r7, #8]
 8009438:	4618      	mov	r0, r3
 800943a:	f000 fb55 	bl	8009ae8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	69da      	ldr	r2, [r3, #28]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800944c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	69da      	ldr	r2, [r3, #28]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800945c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	69d9      	ldr	r1, [r3, #28]
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	021a      	lsls	r2, r3, #8
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	430a      	orrs	r2, r1
 8009470:	61da      	str	r2, [r3, #28]
      break;
 8009472:	e002      	b.n	800947a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	75fb      	strb	r3, [r7, #23]
      break;
 8009478:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2200      	movs	r2, #0
 800947e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009482:	7dfb      	ldrb	r3, [r7, #23]
}
 8009484:	4618      	mov	r0, r3
 8009486:	3718      	adds	r7, #24
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009496:	2300      	movs	r3, #0
 8009498:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d101      	bne.n	80094a8 <HAL_TIM_ConfigClockSource+0x1c>
 80094a4:	2302      	movs	r3, #2
 80094a6:	e0b4      	b.n	8009612 <HAL_TIM_ConfigClockSource+0x186>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2202      	movs	r2, #2
 80094b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80094c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80094ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68ba      	ldr	r2, [r7, #8]
 80094d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094e0:	d03e      	beq.n	8009560 <HAL_TIM_ConfigClockSource+0xd4>
 80094e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094e6:	f200 8087 	bhi.w	80095f8 <HAL_TIM_ConfigClockSource+0x16c>
 80094ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094ee:	f000 8086 	beq.w	80095fe <HAL_TIM_ConfigClockSource+0x172>
 80094f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094f6:	d87f      	bhi.n	80095f8 <HAL_TIM_ConfigClockSource+0x16c>
 80094f8:	2b70      	cmp	r3, #112	@ 0x70
 80094fa:	d01a      	beq.n	8009532 <HAL_TIM_ConfigClockSource+0xa6>
 80094fc:	2b70      	cmp	r3, #112	@ 0x70
 80094fe:	d87b      	bhi.n	80095f8 <HAL_TIM_ConfigClockSource+0x16c>
 8009500:	2b60      	cmp	r3, #96	@ 0x60
 8009502:	d050      	beq.n	80095a6 <HAL_TIM_ConfigClockSource+0x11a>
 8009504:	2b60      	cmp	r3, #96	@ 0x60
 8009506:	d877      	bhi.n	80095f8 <HAL_TIM_ConfigClockSource+0x16c>
 8009508:	2b50      	cmp	r3, #80	@ 0x50
 800950a:	d03c      	beq.n	8009586 <HAL_TIM_ConfigClockSource+0xfa>
 800950c:	2b50      	cmp	r3, #80	@ 0x50
 800950e:	d873      	bhi.n	80095f8 <HAL_TIM_ConfigClockSource+0x16c>
 8009510:	2b40      	cmp	r3, #64	@ 0x40
 8009512:	d058      	beq.n	80095c6 <HAL_TIM_ConfigClockSource+0x13a>
 8009514:	2b40      	cmp	r3, #64	@ 0x40
 8009516:	d86f      	bhi.n	80095f8 <HAL_TIM_ConfigClockSource+0x16c>
 8009518:	2b30      	cmp	r3, #48	@ 0x30
 800951a:	d064      	beq.n	80095e6 <HAL_TIM_ConfigClockSource+0x15a>
 800951c:	2b30      	cmp	r3, #48	@ 0x30
 800951e:	d86b      	bhi.n	80095f8 <HAL_TIM_ConfigClockSource+0x16c>
 8009520:	2b20      	cmp	r3, #32
 8009522:	d060      	beq.n	80095e6 <HAL_TIM_ConfigClockSource+0x15a>
 8009524:	2b20      	cmp	r3, #32
 8009526:	d867      	bhi.n	80095f8 <HAL_TIM_ConfigClockSource+0x16c>
 8009528:	2b00      	cmp	r3, #0
 800952a:	d05c      	beq.n	80095e6 <HAL_TIM_ConfigClockSource+0x15a>
 800952c:	2b10      	cmp	r3, #16
 800952e:	d05a      	beq.n	80095e6 <HAL_TIM_ConfigClockSource+0x15a>
 8009530:	e062      	b.n	80095f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6818      	ldr	r0, [r3, #0]
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	6899      	ldr	r1, [r3, #8]
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	685a      	ldr	r2, [r3, #4]
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	f000 fccb 	bl	8009edc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009554:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	68ba      	ldr	r2, [r7, #8]
 800955c:	609a      	str	r2, [r3, #8]
      break;
 800955e:	e04f      	b.n	8009600 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6818      	ldr	r0, [r3, #0]
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	6899      	ldr	r1, [r3, #8]
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	685a      	ldr	r2, [r3, #4]
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	f000 fcb4 	bl	8009edc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	689a      	ldr	r2, [r3, #8]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009582:	609a      	str	r2, [r3, #8]
      break;
 8009584:	e03c      	b.n	8009600 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6818      	ldr	r0, [r3, #0]
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	6859      	ldr	r1, [r3, #4]
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	461a      	mov	r2, r3
 8009594:	f000 fb72 	bl	8009c7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2150      	movs	r1, #80	@ 0x50
 800959e:	4618      	mov	r0, r3
 80095a0:	f000 fc81 	bl	8009ea6 <TIM_ITRx_SetConfig>
      break;
 80095a4:	e02c      	b.n	8009600 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6818      	ldr	r0, [r3, #0]
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	6859      	ldr	r1, [r3, #4]
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	461a      	mov	r2, r3
 80095b4:	f000 fbce 	bl	8009d54 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2160      	movs	r1, #96	@ 0x60
 80095be:	4618      	mov	r0, r3
 80095c0:	f000 fc71 	bl	8009ea6 <TIM_ITRx_SetConfig>
      break;
 80095c4:	e01c      	b.n	8009600 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6818      	ldr	r0, [r3, #0]
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	6859      	ldr	r1, [r3, #4]
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	461a      	mov	r2, r3
 80095d4:	f000 fb52 	bl	8009c7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2140      	movs	r1, #64	@ 0x40
 80095de:	4618      	mov	r0, r3
 80095e0:	f000 fc61 	bl	8009ea6 <TIM_ITRx_SetConfig>
      break;
 80095e4:	e00c      	b.n	8009600 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4619      	mov	r1, r3
 80095f0:	4610      	mov	r0, r2
 80095f2:	f000 fc58 	bl	8009ea6 <TIM_ITRx_SetConfig>
      break;
 80095f6:	e003      	b.n	8009600 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	73fb      	strb	r3, [r7, #15]
      break;
 80095fc:	e000      	b.n	8009600 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80095fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009610:	7bfb      	ldrb	r3, [r7, #15]
}
 8009612:	4618      	mov	r0, r3
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
	...

0800961c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800961c:	b480      	push	{r7}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009626:	2300      	movs	r3, #0
 8009628:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	2b0c      	cmp	r3, #12
 800962e:	d831      	bhi.n	8009694 <HAL_TIM_ReadCapturedValue+0x78>
 8009630:	a201      	add	r2, pc, #4	@ (adr r2, 8009638 <HAL_TIM_ReadCapturedValue+0x1c>)
 8009632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009636:	bf00      	nop
 8009638:	0800966d 	.word	0x0800966d
 800963c:	08009695 	.word	0x08009695
 8009640:	08009695 	.word	0x08009695
 8009644:	08009695 	.word	0x08009695
 8009648:	08009677 	.word	0x08009677
 800964c:	08009695 	.word	0x08009695
 8009650:	08009695 	.word	0x08009695
 8009654:	08009695 	.word	0x08009695
 8009658:	08009681 	.word	0x08009681
 800965c:	08009695 	.word	0x08009695
 8009660:	08009695 	.word	0x08009695
 8009664:	08009695 	.word	0x08009695
 8009668:	0800968b 	.word	0x0800968b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009672:	60fb      	str	r3, [r7, #12]

      break;
 8009674:	e00f      	b.n	8009696 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800967c:	60fb      	str	r3, [r7, #12]

      break;
 800967e:	e00a      	b.n	8009696 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009686:	60fb      	str	r3, [r7, #12]

      break;
 8009688:	e005      	b.n	8009696 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009690:	60fb      	str	r3, [r7, #12]

      break;
 8009692:	e000      	b.n	8009696 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009694:	bf00      	nop
  }

  return tmpreg;
 8009696:	68fb      	ldr	r3, [r7, #12]
}
 8009698:	4618      	mov	r0, r3
 800969a:	3714      	adds	r7, #20
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr

080096a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80096ac:	bf00      	nop
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80096c0:	bf00      	nop
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80096d4:	bf00      	nop
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80096e8:	bf00      	nop
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4a40      	ldr	r2, [pc, #256]	@ (8009808 <TIM_Base_SetConfig+0x114>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d013      	beq.n	8009734 <TIM_Base_SetConfig+0x40>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009712:	d00f      	beq.n	8009734 <TIM_Base_SetConfig+0x40>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4a3d      	ldr	r2, [pc, #244]	@ (800980c <TIM_Base_SetConfig+0x118>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d00b      	beq.n	8009734 <TIM_Base_SetConfig+0x40>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	4a3c      	ldr	r2, [pc, #240]	@ (8009810 <TIM_Base_SetConfig+0x11c>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d007      	beq.n	8009734 <TIM_Base_SetConfig+0x40>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	4a3b      	ldr	r2, [pc, #236]	@ (8009814 <TIM_Base_SetConfig+0x120>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d003      	beq.n	8009734 <TIM_Base_SetConfig+0x40>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	4a3a      	ldr	r2, [pc, #232]	@ (8009818 <TIM_Base_SetConfig+0x124>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d108      	bne.n	8009746 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800973a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	4313      	orrs	r3, r2
 8009744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a2f      	ldr	r2, [pc, #188]	@ (8009808 <TIM_Base_SetConfig+0x114>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d02b      	beq.n	80097a6 <TIM_Base_SetConfig+0xb2>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009754:	d027      	beq.n	80097a6 <TIM_Base_SetConfig+0xb2>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	4a2c      	ldr	r2, [pc, #176]	@ (800980c <TIM_Base_SetConfig+0x118>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d023      	beq.n	80097a6 <TIM_Base_SetConfig+0xb2>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4a2b      	ldr	r2, [pc, #172]	@ (8009810 <TIM_Base_SetConfig+0x11c>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d01f      	beq.n	80097a6 <TIM_Base_SetConfig+0xb2>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4a2a      	ldr	r2, [pc, #168]	@ (8009814 <TIM_Base_SetConfig+0x120>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d01b      	beq.n	80097a6 <TIM_Base_SetConfig+0xb2>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4a29      	ldr	r2, [pc, #164]	@ (8009818 <TIM_Base_SetConfig+0x124>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d017      	beq.n	80097a6 <TIM_Base_SetConfig+0xb2>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	4a28      	ldr	r2, [pc, #160]	@ (800981c <TIM_Base_SetConfig+0x128>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d013      	beq.n	80097a6 <TIM_Base_SetConfig+0xb2>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4a27      	ldr	r2, [pc, #156]	@ (8009820 <TIM_Base_SetConfig+0x12c>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d00f      	beq.n	80097a6 <TIM_Base_SetConfig+0xb2>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4a26      	ldr	r2, [pc, #152]	@ (8009824 <TIM_Base_SetConfig+0x130>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d00b      	beq.n	80097a6 <TIM_Base_SetConfig+0xb2>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4a25      	ldr	r2, [pc, #148]	@ (8009828 <TIM_Base_SetConfig+0x134>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d007      	beq.n	80097a6 <TIM_Base_SetConfig+0xb2>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4a24      	ldr	r2, [pc, #144]	@ (800982c <TIM_Base_SetConfig+0x138>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d003      	beq.n	80097a6 <TIM_Base_SetConfig+0xb2>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4a23      	ldr	r2, [pc, #140]	@ (8009830 <TIM_Base_SetConfig+0x13c>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d108      	bne.n	80097b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	68db      	ldr	r3, [r3, #12]
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	695b      	ldr	r3, [r3, #20]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	68fa      	ldr	r2, [r7, #12]
 80097ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	689a      	ldr	r2, [r3, #8]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	4a0a      	ldr	r2, [pc, #40]	@ (8009808 <TIM_Base_SetConfig+0x114>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d003      	beq.n	80097ec <TIM_Base_SetConfig+0xf8>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	4a0c      	ldr	r2, [pc, #48]	@ (8009818 <TIM_Base_SetConfig+0x124>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d103      	bne.n	80097f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	691a      	ldr	r2, [r3, #16]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	615a      	str	r2, [r3, #20]
}
 80097fa:	bf00      	nop
 80097fc:	3714      	adds	r7, #20
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	40010000 	.word	0x40010000
 800980c:	40000400 	.word	0x40000400
 8009810:	40000800 	.word	0x40000800
 8009814:	40000c00 	.word	0x40000c00
 8009818:	40010400 	.word	0x40010400
 800981c:	40014000 	.word	0x40014000
 8009820:	40014400 	.word	0x40014400
 8009824:	40014800 	.word	0x40014800
 8009828:	40001800 	.word	0x40001800
 800982c:	40001c00 	.word	0x40001c00
 8009830:	40002000 	.word	0x40002000

08009834 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009834:	b480      	push	{r7}
 8009836:	b087      	sub	sp, #28
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6a1b      	ldr	r3, [r3, #32]
 8009842:	f023 0201 	bic.w	r2, r3, #1
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6a1b      	ldr	r3, [r3, #32]
 800984e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	699b      	ldr	r3, [r3, #24]
 800985a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f023 0303 	bic.w	r3, r3, #3
 800986a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	4313      	orrs	r3, r2
 8009874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	f023 0302 	bic.w	r3, r3, #2
 800987c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	4313      	orrs	r3, r2
 8009886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a20      	ldr	r2, [pc, #128]	@ (800990c <TIM_OC1_SetConfig+0xd8>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d003      	beq.n	8009898 <TIM_OC1_SetConfig+0x64>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a1f      	ldr	r2, [pc, #124]	@ (8009910 <TIM_OC1_SetConfig+0xdc>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d10c      	bne.n	80098b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	f023 0308 	bic.w	r3, r3, #8
 800989e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	f023 0304 	bic.w	r3, r3, #4
 80098b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4a15      	ldr	r2, [pc, #84]	@ (800990c <TIM_OC1_SetConfig+0xd8>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d003      	beq.n	80098c2 <TIM_OC1_SetConfig+0x8e>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a14      	ldr	r2, [pc, #80]	@ (8009910 <TIM_OC1_SetConfig+0xdc>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d111      	bne.n	80098e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80098d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	695b      	ldr	r3, [r3, #20]
 80098d6:	693a      	ldr	r2, [r7, #16]
 80098d8:	4313      	orrs	r3, r2
 80098da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	699b      	ldr	r3, [r3, #24]
 80098e0:	693a      	ldr	r2, [r7, #16]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	693a      	ldr	r2, [r7, #16]
 80098ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	68fa      	ldr	r2, [r7, #12]
 80098f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	685a      	ldr	r2, [r3, #4]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	697a      	ldr	r2, [r7, #20]
 80098fe:	621a      	str	r2, [r3, #32]
}
 8009900:	bf00      	nop
 8009902:	371c      	adds	r7, #28
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr
 800990c:	40010000 	.word	0x40010000
 8009910:	40010400 	.word	0x40010400

08009914 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009914:	b480      	push	{r7}
 8009916:	b087      	sub	sp, #28
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6a1b      	ldr	r3, [r3, #32]
 8009922:	f023 0210 	bic.w	r2, r3, #16
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6a1b      	ldr	r3, [r3, #32]
 800992e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	699b      	ldr	r3, [r3, #24]
 800993a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800994a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	021b      	lsls	r3, r3, #8
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	4313      	orrs	r3, r2
 8009956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	f023 0320 	bic.w	r3, r3, #32
 800995e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	011b      	lsls	r3, r3, #4
 8009966:	697a      	ldr	r2, [r7, #20]
 8009968:	4313      	orrs	r3, r2
 800996a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4a22      	ldr	r2, [pc, #136]	@ (80099f8 <TIM_OC2_SetConfig+0xe4>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d003      	beq.n	800997c <TIM_OC2_SetConfig+0x68>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4a21      	ldr	r2, [pc, #132]	@ (80099fc <TIM_OC2_SetConfig+0xe8>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d10d      	bne.n	8009998 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	011b      	lsls	r3, r3, #4
 800998a:	697a      	ldr	r2, [r7, #20]
 800998c:	4313      	orrs	r3, r2
 800998e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009996:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a17      	ldr	r2, [pc, #92]	@ (80099f8 <TIM_OC2_SetConfig+0xe4>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d003      	beq.n	80099a8 <TIM_OC2_SetConfig+0x94>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a16      	ldr	r2, [pc, #88]	@ (80099fc <TIM_OC2_SetConfig+0xe8>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d113      	bne.n	80099d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80099ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80099b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	695b      	ldr	r3, [r3, #20]
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	693a      	ldr	r2, [r7, #16]
 80099c0:	4313      	orrs	r3, r2
 80099c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	699b      	ldr	r3, [r3, #24]
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	693a      	ldr	r2, [r7, #16]
 80099cc:	4313      	orrs	r3, r2
 80099ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	693a      	ldr	r2, [r7, #16]
 80099d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	685a      	ldr	r2, [r3, #4]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	697a      	ldr	r2, [r7, #20]
 80099e8:	621a      	str	r2, [r3, #32]
}
 80099ea:	bf00      	nop
 80099ec:	371c      	adds	r7, #28
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop
 80099f8:	40010000 	.word	0x40010000
 80099fc:	40010400 	.word	0x40010400

08009a00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b087      	sub	sp, #28
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6a1b      	ldr	r3, [r3, #32]
 8009a0e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6a1b      	ldr	r3, [r3, #32]
 8009a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	69db      	ldr	r3, [r3, #28]
 8009a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f023 0303 	bic.w	r3, r3, #3
 8009a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	68fa      	ldr	r2, [r7, #12]
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009a48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	021b      	lsls	r3, r3, #8
 8009a50:	697a      	ldr	r2, [r7, #20]
 8009a52:	4313      	orrs	r3, r2
 8009a54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4a21      	ldr	r2, [pc, #132]	@ (8009ae0 <TIM_OC3_SetConfig+0xe0>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d003      	beq.n	8009a66 <TIM_OC3_SetConfig+0x66>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	4a20      	ldr	r2, [pc, #128]	@ (8009ae4 <TIM_OC3_SetConfig+0xe4>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d10d      	bne.n	8009a82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009a6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	021b      	lsls	r3, r3, #8
 8009a74:	697a      	ldr	r2, [r7, #20]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4a16      	ldr	r2, [pc, #88]	@ (8009ae0 <TIM_OC3_SetConfig+0xe0>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d003      	beq.n	8009a92 <TIM_OC3_SetConfig+0x92>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4a15      	ldr	r2, [pc, #84]	@ (8009ae4 <TIM_OC3_SetConfig+0xe4>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d113      	bne.n	8009aba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	695b      	ldr	r3, [r3, #20]
 8009aa6:	011b      	lsls	r3, r3, #4
 8009aa8:	693a      	ldr	r2, [r7, #16]
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	699b      	ldr	r3, [r3, #24]
 8009ab2:	011b      	lsls	r3, r3, #4
 8009ab4:	693a      	ldr	r2, [r7, #16]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	693a      	ldr	r2, [r7, #16]
 8009abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	68fa      	ldr	r2, [r7, #12]
 8009ac4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	685a      	ldr	r2, [r3, #4]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	697a      	ldr	r2, [r7, #20]
 8009ad2:	621a      	str	r2, [r3, #32]
}
 8009ad4:	bf00      	nop
 8009ad6:	371c      	adds	r7, #28
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr
 8009ae0:	40010000 	.word	0x40010000
 8009ae4:	40010400 	.word	0x40010400

08009ae8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b087      	sub	sp, #28
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6a1b      	ldr	r3, [r3, #32]
 8009af6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6a1b      	ldr	r3, [r3, #32]
 8009b02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	69db      	ldr	r3, [r3, #28]
 8009b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	021b      	lsls	r3, r3, #8
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009b32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	031b      	lsls	r3, r3, #12
 8009b3a:	693a      	ldr	r2, [r7, #16]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4a12      	ldr	r2, [pc, #72]	@ (8009b8c <TIM_OC4_SetConfig+0xa4>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d003      	beq.n	8009b50 <TIM_OC4_SetConfig+0x68>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a11      	ldr	r2, [pc, #68]	@ (8009b90 <TIM_OC4_SetConfig+0xa8>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d109      	bne.n	8009b64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	695b      	ldr	r3, [r3, #20]
 8009b5c:	019b      	lsls	r3, r3, #6
 8009b5e:	697a      	ldr	r2, [r7, #20]
 8009b60:	4313      	orrs	r3, r2
 8009b62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	697a      	ldr	r2, [r7, #20]
 8009b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	685a      	ldr	r2, [r3, #4]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	693a      	ldr	r2, [r7, #16]
 8009b7c:	621a      	str	r2, [r3, #32]
}
 8009b7e:	bf00      	nop
 8009b80:	371c      	adds	r7, #28
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	40010000 	.word	0x40010000
 8009b90:	40010400 	.word	0x40010400

08009b94 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b087      	sub	sp, #28
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	607a      	str	r2, [r7, #4]
 8009ba0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	6a1b      	ldr	r3, [r3, #32]
 8009ba6:	f023 0201 	bic.w	r2, r3, #1
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	699b      	ldr	r3, [r3, #24]
 8009bb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	6a1b      	ldr	r3, [r3, #32]
 8009bb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	4a28      	ldr	r2, [pc, #160]	@ (8009c60 <TIM_TI1_SetConfig+0xcc>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d01b      	beq.n	8009bfa <TIM_TI1_SetConfig+0x66>
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bc8:	d017      	beq.n	8009bfa <TIM_TI1_SetConfig+0x66>
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	4a25      	ldr	r2, [pc, #148]	@ (8009c64 <TIM_TI1_SetConfig+0xd0>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d013      	beq.n	8009bfa <TIM_TI1_SetConfig+0x66>
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	4a24      	ldr	r2, [pc, #144]	@ (8009c68 <TIM_TI1_SetConfig+0xd4>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d00f      	beq.n	8009bfa <TIM_TI1_SetConfig+0x66>
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	4a23      	ldr	r2, [pc, #140]	@ (8009c6c <TIM_TI1_SetConfig+0xd8>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d00b      	beq.n	8009bfa <TIM_TI1_SetConfig+0x66>
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	4a22      	ldr	r2, [pc, #136]	@ (8009c70 <TIM_TI1_SetConfig+0xdc>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d007      	beq.n	8009bfa <TIM_TI1_SetConfig+0x66>
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	4a21      	ldr	r2, [pc, #132]	@ (8009c74 <TIM_TI1_SetConfig+0xe0>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d003      	beq.n	8009bfa <TIM_TI1_SetConfig+0x66>
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	4a20      	ldr	r2, [pc, #128]	@ (8009c78 <TIM_TI1_SetConfig+0xe4>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d101      	bne.n	8009bfe <TIM_TI1_SetConfig+0x6a>
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e000      	b.n	8009c00 <TIM_TI1_SetConfig+0x6c>
 8009bfe:	2300      	movs	r3, #0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d008      	beq.n	8009c16 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	f023 0303 	bic.w	r3, r3, #3
 8009c0a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009c0c:	697a      	ldr	r2, [r7, #20]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	4313      	orrs	r3, r2
 8009c12:	617b      	str	r3, [r7, #20]
 8009c14:	e003      	b.n	8009c1e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	f043 0301 	orr.w	r3, r3, #1
 8009c1c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009c24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	011b      	lsls	r3, r3, #4
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	697a      	ldr	r2, [r7, #20]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	f023 030a 	bic.w	r3, r3, #10
 8009c38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	f003 030a 	and.w	r3, r3, #10
 8009c40:	693a      	ldr	r2, [r7, #16]
 8009c42:	4313      	orrs	r3, r2
 8009c44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	697a      	ldr	r2, [r7, #20]
 8009c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	693a      	ldr	r2, [r7, #16]
 8009c50:	621a      	str	r2, [r3, #32]
}
 8009c52:	bf00      	nop
 8009c54:	371c      	adds	r7, #28
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop
 8009c60:	40010000 	.word	0x40010000
 8009c64:	40000400 	.word	0x40000400
 8009c68:	40000800 	.word	0x40000800
 8009c6c:	40000c00 	.word	0x40000c00
 8009c70:	40010400 	.word	0x40010400
 8009c74:	40014000 	.word	0x40014000
 8009c78:	40001800 	.word	0x40001800

08009c7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b087      	sub	sp, #28
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6a1b      	ldr	r3, [r3, #32]
 8009c8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	6a1b      	ldr	r3, [r3, #32]
 8009c92:	f023 0201 	bic.w	r2, r3, #1
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	699b      	ldr	r3, [r3, #24]
 8009c9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009ca6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	011b      	lsls	r3, r3, #4
 8009cac:	693a      	ldr	r2, [r7, #16]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	f023 030a 	bic.w	r3, r3, #10
 8009cb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009cba:	697a      	ldr	r2, [r7, #20]
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	693a      	ldr	r2, [r7, #16]
 8009cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	697a      	ldr	r2, [r7, #20]
 8009ccc:	621a      	str	r2, [r3, #32]
}
 8009cce:	bf00      	nop
 8009cd0:	371c      	adds	r7, #28
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr

08009cda <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009cda:	b480      	push	{r7}
 8009cdc:	b087      	sub	sp, #28
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	60f8      	str	r0, [r7, #12]
 8009ce2:	60b9      	str	r1, [r7, #8]
 8009ce4:	607a      	str	r2, [r7, #4]
 8009ce6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6a1b      	ldr	r3, [r3, #32]
 8009cec:	f023 0210 	bic.w	r2, r3, #16
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	699b      	ldr	r3, [r3, #24]
 8009cf8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	6a1b      	ldr	r3, [r3, #32]
 8009cfe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	021b      	lsls	r3, r3, #8
 8009d0c:	697a      	ldr	r2, [r7, #20]
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009d18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	031b      	lsls	r3, r3, #12
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	697a      	ldr	r2, [r7, #20]
 8009d22:	4313      	orrs	r3, r2
 8009d24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009d2c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	011b      	lsls	r3, r3, #4
 8009d32:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009d36:	693a      	ldr	r2, [r7, #16]
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	697a      	ldr	r2, [r7, #20]
 8009d40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	693a      	ldr	r2, [r7, #16]
 8009d46:	621a      	str	r2, [r3, #32]
}
 8009d48:	bf00      	nop
 8009d4a:	371c      	adds	r7, #28
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b087      	sub	sp, #28
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	60b9      	str	r1, [r7, #8]
 8009d5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6a1b      	ldr	r3, [r3, #32]
 8009d64:	f023 0210 	bic.w	r2, r3, #16
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	699b      	ldr	r3, [r3, #24]
 8009d70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	6a1b      	ldr	r3, [r3, #32]
 8009d76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009d7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	031b      	lsls	r3, r3, #12
 8009d84:	697a      	ldr	r2, [r7, #20]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009d90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	011b      	lsls	r3, r3, #4
 8009d96:	693a      	ldr	r2, [r7, #16]
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	697a      	ldr	r2, [r7, #20]
 8009da0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	693a      	ldr	r2, [r7, #16]
 8009da6:	621a      	str	r2, [r3, #32]
}
 8009da8:	bf00      	nop
 8009daa:	371c      	adds	r7, #28
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b087      	sub	sp, #28
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	607a      	str	r2, [r7, #4]
 8009dc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	6a1b      	ldr	r3, [r3, #32]
 8009dc6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	69db      	ldr	r3, [r3, #28]
 8009dd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	6a1b      	ldr	r3, [r3, #32]
 8009dd8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	f023 0303 	bic.w	r3, r3, #3
 8009de0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009de2:	697a      	ldr	r2, [r7, #20]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009df0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	011b      	lsls	r3, r3, #4
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	697a      	ldr	r2, [r7, #20]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009e04:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	021b      	lsls	r3, r3, #8
 8009e0a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8009e0e:	693a      	ldr	r2, [r7, #16]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	697a      	ldr	r2, [r7, #20]
 8009e18:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	693a      	ldr	r2, [r7, #16]
 8009e1e:	621a      	str	r2, [r3, #32]
}
 8009e20:	bf00      	nop
 8009e22:	371c      	adds	r7, #28
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b087      	sub	sp, #28
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	607a      	str	r2, [r7, #4]
 8009e38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6a1b      	ldr	r3, [r3, #32]
 8009e3e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	69db      	ldr	r3, [r3, #28]
 8009e4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6a1b      	ldr	r3, [r3, #32]
 8009e50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e58:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	021b      	lsls	r3, r3, #8
 8009e5e:	697a      	ldr	r2, [r7, #20]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009e6a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	031b      	lsls	r3, r3, #12
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	697a      	ldr	r2, [r7, #20]
 8009e74:	4313      	orrs	r3, r2
 8009e76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009e7e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	031b      	lsls	r3, r3, #12
 8009e84:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009e88:	693a      	ldr	r2, [r7, #16]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	697a      	ldr	r2, [r7, #20]
 8009e92:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	693a      	ldr	r2, [r7, #16]
 8009e98:	621a      	str	r2, [r3, #32]
}
 8009e9a:	bf00      	nop
 8009e9c:	371c      	adds	r7, #28
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr

08009ea6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ea6:	b480      	push	{r7}
 8009ea8:	b085      	sub	sp, #20
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
 8009eae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ebc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009ebe:	683a      	ldr	r2, [r7, #0]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	f043 0307 	orr.w	r3, r3, #7
 8009ec8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	609a      	str	r2, [r3, #8]
}
 8009ed0:	bf00      	nop
 8009ed2:	3714      	adds	r7, #20
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b087      	sub	sp, #28
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
 8009ee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009ef6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	021a      	lsls	r2, r3, #8
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	431a      	orrs	r2, r3
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	697a      	ldr	r2, [r7, #20]
 8009f06:	4313      	orrs	r3, r2
 8009f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	697a      	ldr	r2, [r7, #20]
 8009f0e:	609a      	str	r2, [r3, #8]
}
 8009f10:	bf00      	nop
 8009f12:	371c      	adds	r7, #28
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b087      	sub	sp, #28
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	f003 031f 	and.w	r3, r3, #31
 8009f2e:	2201      	movs	r2, #1
 8009f30:	fa02 f303 	lsl.w	r3, r2, r3
 8009f34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6a1a      	ldr	r2, [r3, #32]
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	43db      	mvns	r3, r3
 8009f3e:	401a      	ands	r2, r3
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6a1a      	ldr	r2, [r3, #32]
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	f003 031f 	and.w	r3, r3, #31
 8009f4e:	6879      	ldr	r1, [r7, #4]
 8009f50:	fa01 f303 	lsl.w	r3, r1, r3
 8009f54:	431a      	orrs	r2, r3
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	621a      	str	r2, [r3, #32]
}
 8009f5a:	bf00      	nop
 8009f5c:	371c      	adds	r7, #28
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr
	...

08009f68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d101      	bne.n	8009f80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f7c:	2302      	movs	r3, #2
 8009f7e:	e05a      	b.n	800a036 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2201      	movs	r2, #1
 8009f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2202      	movs	r2, #2
 8009f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	68fa      	ldr	r2, [r7, #12]
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	68fa      	ldr	r2, [r7, #12]
 8009fb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a21      	ldr	r2, [pc, #132]	@ (800a044 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d022      	beq.n	800a00a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fcc:	d01d      	beq.n	800a00a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a1d      	ldr	r2, [pc, #116]	@ (800a048 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d018      	beq.n	800a00a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800a04c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d013      	beq.n	800a00a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a1a      	ldr	r2, [pc, #104]	@ (800a050 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d00e      	beq.n	800a00a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a18      	ldr	r2, [pc, #96]	@ (800a054 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d009      	beq.n	800a00a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a17      	ldr	r2, [pc, #92]	@ (800a058 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d004      	beq.n	800a00a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a15      	ldr	r2, [pc, #84]	@ (800a05c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d10c      	bne.n	800a024 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a010:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	68ba      	ldr	r2, [r7, #8]
 800a018:	4313      	orrs	r3, r2
 800a01a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	68ba      	ldr	r2, [r7, #8]
 800a022:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a034:	2300      	movs	r3, #0
}
 800a036:	4618      	mov	r0, r3
 800a038:	3714      	adds	r7, #20
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop
 800a044:	40010000 	.word	0x40010000
 800a048:	40000400 	.word	0x40000400
 800a04c:	40000800 	.word	0x40000800
 800a050:	40000c00 	.word	0x40000c00
 800a054:	40010400 	.word	0x40010400
 800a058:	40014000 	.word	0x40014000
 800a05c:	40001800 	.word	0x40001800

0800a060 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a068:	bf00      	nop
 800a06a:	370c      	adds	r7, #12
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a07c:	bf00      	nop
 800a07e:	370c      	adds	r7, #12
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d101      	bne.n	800a09a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	e03f      	b.n	800a11a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d106      	bne.n	800a0b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f7fb fcd4 	bl	8005a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2224      	movs	r2, #36	@ 0x24
 800a0b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	68da      	ldr	r2, [r3, #12]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a0ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 ffe7 	bl	800b0a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	691a      	ldr	r2, [r3, #16]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a0e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	695a      	ldr	r2, [r3, #20]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a0f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	68da      	ldr	r2, [r3, #12]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a100:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2220      	movs	r2, #32
 800a10c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2220      	movs	r2, #32
 800a114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b08a      	sub	sp, #40	@ 0x28
 800a126:	af02      	add	r7, sp, #8
 800a128:	60f8      	str	r0, [r7, #12]
 800a12a:	60b9      	str	r1, [r7, #8]
 800a12c:	603b      	str	r3, [r7, #0]
 800a12e:	4613      	mov	r3, r2
 800a130:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a132:	2300      	movs	r3, #0
 800a134:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	2b20      	cmp	r3, #32
 800a140:	d17c      	bne.n	800a23c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d002      	beq.n	800a14e <HAL_UART_Transmit+0x2c>
 800a148:	88fb      	ldrh	r3, [r7, #6]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d101      	bne.n	800a152 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a14e:	2301      	movs	r3, #1
 800a150:	e075      	b.n	800a23e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d101      	bne.n	800a160 <HAL_UART_Transmit+0x3e>
 800a15c:	2302      	movs	r3, #2
 800a15e:	e06e      	b.n	800a23e <HAL_UART_Transmit+0x11c>
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2201      	movs	r2, #1
 800a164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2200      	movs	r2, #0
 800a16c:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2221      	movs	r2, #33	@ 0x21
 800a172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a176:	f7fb fef7 	bl	8005f68 <HAL_GetTick>
 800a17a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	88fa      	ldrh	r2, [r7, #6]
 800a180:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	88fa      	ldrh	r2, [r7, #6]
 800a186:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a190:	d108      	bne.n	800a1a4 <HAL_UART_Transmit+0x82>
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	691b      	ldr	r3, [r3, #16]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d104      	bne.n	800a1a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a19a:	2300      	movs	r3, #0
 800a19c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	61bb      	str	r3, [r7, #24]
 800a1a2:	e003      	b.n	800a1ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800a1b4:	e02a      	b.n	800a20c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	9300      	str	r3, [sp, #0]
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	2180      	movs	r1, #128	@ 0x80
 800a1c0:	68f8      	ldr	r0, [r7, #12]
 800a1c2:	f000 fc9f 	bl	800ab04 <UART_WaitOnFlagUntilTimeout>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d001      	beq.n	800a1d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a1cc:	2303      	movs	r3, #3
 800a1ce:	e036      	b.n	800a23e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d10b      	bne.n	800a1ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	881b      	ldrh	r3, [r3, #0]
 800a1da:	461a      	mov	r2, r3
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a1e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	3302      	adds	r3, #2
 800a1ea:	61bb      	str	r3, [r7, #24]
 800a1ec:	e007      	b.n	800a1fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	781a      	ldrb	r2, [r3, #0]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a202:	b29b      	uxth	r3, r3
 800a204:	3b01      	subs	r3, #1
 800a206:	b29a      	uxth	r2, r3
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a210:	b29b      	uxth	r3, r3
 800a212:	2b00      	cmp	r3, #0
 800a214:	d1cf      	bne.n	800a1b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	9300      	str	r3, [sp, #0]
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	2200      	movs	r2, #0
 800a21e:	2140      	movs	r1, #64	@ 0x40
 800a220:	68f8      	ldr	r0, [r7, #12]
 800a222:	f000 fc6f 	bl	800ab04 <UART_WaitOnFlagUntilTimeout>
 800a226:	4603      	mov	r3, r0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d001      	beq.n	800a230 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a22c:	2303      	movs	r3, #3
 800a22e:	e006      	b.n	800a23e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2220      	movs	r2, #32
 800a234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800a238:	2300      	movs	r3, #0
 800a23a:	e000      	b.n	800a23e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a23c:	2302      	movs	r3, #2
  }
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3720      	adds	r7, #32
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}

0800a246 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a246:	b580      	push	{r7, lr}
 800a248:	b084      	sub	sp, #16
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	60f8      	str	r0, [r7, #12]
 800a24e:	60b9      	str	r1, [r7, #8]
 800a250:	4613      	mov	r3, r2
 800a252:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	2b20      	cmp	r3, #32
 800a25e:	d11d      	bne.n	800a29c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d002      	beq.n	800a26c <HAL_UART_Receive_DMA+0x26>
 800a266:	88fb      	ldrh	r3, [r7, #6]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d101      	bne.n	800a270 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a26c:	2301      	movs	r3, #1
 800a26e:	e016      	b.n	800a29e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a276:	2b01      	cmp	r3, #1
 800a278:	d101      	bne.n	800a27e <HAL_UART_Receive_DMA+0x38>
 800a27a:	2302      	movs	r3, #2
 800a27c:	e00f      	b.n	800a29e <HAL_UART_Receive_DMA+0x58>
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2201      	movs	r2, #1
 800a282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2200      	movs	r2, #0
 800a28a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a28c:	88fb      	ldrh	r3, [r7, #6]
 800a28e:	461a      	mov	r2, r3
 800a290:	68b9      	ldr	r1, [r7, #8]
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	f000 fca4 	bl	800abe0 <UART_Start_Receive_DMA>
 800a298:	4603      	mov	r3, r0
 800a29a:	e000      	b.n	800a29e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a29c:	2302      	movs	r3, #2
  }
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b090      	sub	sp, #64	@ 0x40
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	695b      	ldr	r3, [r3, #20]
 800a2b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2bc:	2b80      	cmp	r3, #128	@ 0x80
 800a2be:	bf0c      	ite	eq
 800a2c0:	2301      	moveq	r3, #1
 800a2c2:	2300      	movne	r3, #0
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	2b21      	cmp	r3, #33	@ 0x21
 800a2d2:	d128      	bne.n	800a326 <HAL_UART_DMAStop+0x80>
 800a2d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d025      	beq.n	800a326 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	3314      	adds	r3, #20
 800a2e0:	627b      	str	r3, [r7, #36]	@ 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e4:	e853 3f00 	ldrex	r3, [r3]
 800a2e8:	623b      	str	r3, [r7, #32]
   return(result);
 800a2ea:	6a3b      	ldr	r3, [r7, #32]
 800a2ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a2f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	3314      	adds	r3, #20
 800a2f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a2fa:	633a      	str	r2, [r7, #48]	@ 0x30
 800a2fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a300:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a302:	e841 2300 	strex	r3, r2, [r1]
 800a306:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d1e5      	bne.n	800a2da <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a312:	2b00      	cmp	r3, #0
 800a314:	d004      	beq.n	800a320 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7fc f86c 	bl	80063f8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 fcfb 	bl	800ad1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	695b      	ldr	r3, [r3, #20]
 800a32c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a330:	2b40      	cmp	r3, #64	@ 0x40
 800a332:	bf0c      	ite	eq
 800a334:	2301      	moveq	r3, #1
 800a336:	2300      	movne	r3, #0
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a342:	b2db      	uxtb	r3, r3
 800a344:	2b22      	cmp	r3, #34	@ 0x22
 800a346:	d128      	bne.n	800a39a <HAL_UART_DMAStop+0xf4>
 800a348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d025      	beq.n	800a39a <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	3314      	adds	r3, #20
 800a354:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	e853 3f00 	ldrex	r3, [r3]
 800a35c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a364:	637b      	str	r3, [r7, #52]	@ 0x34
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	3314      	adds	r3, #20
 800a36c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a36e:	61fa      	str	r2, [r7, #28]
 800a370:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a372:	69b9      	ldr	r1, [r7, #24]
 800a374:	69fa      	ldr	r2, [r7, #28]
 800a376:	e841 2300 	strex	r3, r2, [r1]
 800a37a:	617b      	str	r3, [r7, #20]
   return(result);
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d1e5      	bne.n	800a34e <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a386:	2b00      	cmp	r3, #0
 800a388:	d004      	beq.n	800a394 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a38e:	4618      	mov	r0, r3
 800a390:	f7fc f832 	bl	80063f8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 fce9 	bl	800ad6c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800a39a:	2300      	movs	r3, #0
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3740      	adds	r7, #64	@ 0x40
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b0ba      	sub	sp, #232	@ 0xe8
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	695b      	ldr	r3, [r3, #20]
 800a3c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a3d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3da:	f003 030f 	and.w	r3, r3, #15
 800a3de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a3e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d10f      	bne.n	800a40a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a3ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3ee:	f003 0320 	and.w	r3, r3, #32
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d009      	beq.n	800a40a <HAL_UART_IRQHandler+0x66>
 800a3f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3fa:	f003 0320 	and.w	r3, r3, #32
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d003      	beq.n	800a40a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 fd91 	bl	800af2a <UART_Receive_IT>
      return;
 800a408:	e256      	b.n	800a8b8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a40a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a40e:	2b00      	cmp	r3, #0
 800a410:	f000 80de 	beq.w	800a5d0 <HAL_UART_IRQHandler+0x22c>
 800a414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a418:	f003 0301 	and.w	r3, r3, #1
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d106      	bne.n	800a42e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a424:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a428:	2b00      	cmp	r3, #0
 800a42a:	f000 80d1 	beq.w	800a5d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a42e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a432:	f003 0301 	and.w	r3, r3, #1
 800a436:	2b00      	cmp	r3, #0
 800a438:	d00b      	beq.n	800a452 <HAL_UART_IRQHandler+0xae>
 800a43a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a43e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a442:	2b00      	cmp	r3, #0
 800a444:	d005      	beq.n	800a452 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a44a:	f043 0201 	orr.w	r2, r3, #1
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a456:	f003 0304 	and.w	r3, r3, #4
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00b      	beq.n	800a476 <HAL_UART_IRQHandler+0xd2>
 800a45e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a462:	f003 0301 	and.w	r3, r3, #1
 800a466:	2b00      	cmp	r3, #0
 800a468:	d005      	beq.n	800a476 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a46e:	f043 0202 	orr.w	r2, r3, #2
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a47a:	f003 0302 	and.w	r3, r3, #2
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d00b      	beq.n	800a49a <HAL_UART_IRQHandler+0xf6>
 800a482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a486:	f003 0301 	and.w	r3, r3, #1
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d005      	beq.n	800a49a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a492:	f043 0204 	orr.w	r2, r3, #4
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a49a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a49e:	f003 0308 	and.w	r3, r3, #8
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d011      	beq.n	800a4ca <HAL_UART_IRQHandler+0x126>
 800a4a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4aa:	f003 0320 	and.w	r3, r3, #32
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d105      	bne.n	800a4be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a4b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a4b6:	f003 0301 	and.w	r3, r3, #1
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d005      	beq.n	800a4ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4c2:	f043 0208 	orr.w	r2, r3, #8
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	f000 81ed 	beq.w	800a8ae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a4d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4d8:	f003 0320 	and.w	r3, r3, #32
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d008      	beq.n	800a4f2 <HAL_UART_IRQHandler+0x14e>
 800a4e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4e4:	f003 0320 	and.w	r3, r3, #32
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d002      	beq.n	800a4f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 fd1c 	bl	800af2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	695b      	ldr	r3, [r3, #20]
 800a4f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4fc:	2b40      	cmp	r3, #64	@ 0x40
 800a4fe:	bf0c      	ite	eq
 800a500:	2301      	moveq	r3, #1
 800a502:	2300      	movne	r3, #0
 800a504:	b2db      	uxtb	r3, r3
 800a506:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a50e:	f003 0308 	and.w	r3, r3, #8
 800a512:	2b00      	cmp	r3, #0
 800a514:	d103      	bne.n	800a51e <HAL_UART_IRQHandler+0x17a>
 800a516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d04f      	beq.n	800a5be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f000 fc24 	bl	800ad6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	695b      	ldr	r3, [r3, #20]
 800a52a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a52e:	2b40      	cmp	r3, #64	@ 0x40
 800a530:	d141      	bne.n	800a5b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	3314      	adds	r3, #20
 800a538:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a53c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a540:	e853 3f00 	ldrex	r3, [r3]
 800a544:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a548:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a54c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a550:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	3314      	adds	r3, #20
 800a55a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a55e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a562:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a566:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a56a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a56e:	e841 2300 	strex	r3, r2, [r1]
 800a572:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a576:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d1d9      	bne.n	800a532 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a582:	2b00      	cmp	r3, #0
 800a584:	d013      	beq.n	800a5ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a58a:	4a7d      	ldr	r2, [pc, #500]	@ (800a780 <HAL_UART_IRQHandler+0x3dc>)
 800a58c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a592:	4618      	mov	r0, r3
 800a594:	f7fb ffa0 	bl	80064d8 <HAL_DMA_Abort_IT>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d016      	beq.n	800a5cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a5a8:	4610      	mov	r0, r2
 800a5aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5ac:	e00e      	b.n	800a5cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 f99a 	bl	800a8e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5b4:	e00a      	b.n	800a5cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 f996 	bl	800a8e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5bc:	e006      	b.n	800a5cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 f992 	bl	800a8e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800a5ca:	e170      	b.n	800a8ae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5cc:	bf00      	nop
    return;
 800a5ce:	e16e      	b.n	800a8ae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	f040 814a 	bne.w	800a86e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a5da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5de:	f003 0310 	and.w	r3, r3, #16
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f000 8143 	beq.w	800a86e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a5e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5ec:	f003 0310 	and.w	r3, r3, #16
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f000 813c 	beq.w	800a86e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	60bb      	str	r3, [r7, #8]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	60bb      	str	r3, [r7, #8]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	60bb      	str	r3, [r7, #8]
 800a60a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	695b      	ldr	r3, [r3, #20]
 800a612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a616:	2b40      	cmp	r3, #64	@ 0x40
 800a618:	f040 80b4 	bne.w	800a784 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a628:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	f000 8140 	beq.w	800a8b2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a63a:	429a      	cmp	r2, r3
 800a63c:	f080 8139 	bcs.w	800a8b2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a646:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a64c:	69db      	ldr	r3, [r3, #28]
 800a64e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a652:	f000 8088 	beq.w	800a766 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	330c      	adds	r3, #12
 800a65c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a660:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a664:	e853 3f00 	ldrex	r3, [r3]
 800a668:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a66c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a670:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a674:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	330c      	adds	r3, #12
 800a67e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a682:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a686:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a68a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a68e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a692:	e841 2300 	strex	r3, r2, [r1]
 800a696:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a69a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d1d9      	bne.n	800a656 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	3314      	adds	r3, #20
 800a6a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a6ac:	e853 3f00 	ldrex	r3, [r3]
 800a6b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a6b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a6b4:	f023 0301 	bic.w	r3, r3, #1
 800a6b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	3314      	adds	r3, #20
 800a6c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a6c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a6ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a6ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a6d2:	e841 2300 	strex	r3, r2, [r1]
 800a6d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a6d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d1e1      	bne.n	800a6a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	3314      	adds	r3, #20
 800a6e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a6e8:	e853 3f00 	ldrex	r3, [r3]
 800a6ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a6ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a6f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	3314      	adds	r3, #20
 800a6fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a702:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a704:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a706:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a708:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a70a:	e841 2300 	strex	r3, r2, [r1]
 800a70e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a710:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a712:	2b00      	cmp	r3, #0
 800a714:	d1e3      	bne.n	800a6de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2220      	movs	r2, #32
 800a71a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2200      	movs	r2, #0
 800a722:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	330c      	adds	r3, #12
 800a72a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a72e:	e853 3f00 	ldrex	r3, [r3]
 800a732:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a734:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a736:	f023 0310 	bic.w	r3, r3, #16
 800a73a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	330c      	adds	r3, #12
 800a744:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a748:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a74a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a74e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a750:	e841 2300 	strex	r3, r2, [r1]
 800a754:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a756:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d1e3      	bne.n	800a724 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a760:	4618      	mov	r0, r3
 800a762:	f7fb fe49 	bl	80063f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a76e:	b29b      	uxth	r3, r3
 800a770:	1ad3      	subs	r3, r2, r3
 800a772:	b29b      	uxth	r3, r3
 800a774:	4619      	mov	r1, r3
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 f8c0 	bl	800a8fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a77c:	e099      	b.n	800a8b2 <HAL_UART_IRQHandler+0x50e>
 800a77e:	bf00      	nop
 800a780:	0800ae33 	.word	0x0800ae33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	1ad3      	subs	r3, r2, r3
 800a790:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a798:	b29b      	uxth	r3, r3
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	f000 808b 	beq.w	800a8b6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a7a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	f000 8086 	beq.w	800a8b6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	330c      	adds	r3, #12
 800a7b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b4:	e853 3f00 	ldrex	r3, [r3]
 800a7b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a7ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	330c      	adds	r3, #12
 800a7ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a7ce:	647a      	str	r2, [r7, #68]	@ 0x44
 800a7d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a7d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a7d6:	e841 2300 	strex	r3, r2, [r1]
 800a7da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a7dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d1e3      	bne.n	800a7aa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	3314      	adds	r3, #20
 800a7e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ec:	e853 3f00 	ldrex	r3, [r3]
 800a7f0:	623b      	str	r3, [r7, #32]
   return(result);
 800a7f2:	6a3b      	ldr	r3, [r7, #32]
 800a7f4:	f023 0301 	bic.w	r3, r3, #1
 800a7f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	3314      	adds	r3, #20
 800a802:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a806:	633a      	str	r2, [r7, #48]	@ 0x30
 800a808:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a80a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a80c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a80e:	e841 2300 	strex	r3, r2, [r1]
 800a812:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a816:	2b00      	cmp	r3, #0
 800a818:	d1e3      	bne.n	800a7e2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2220      	movs	r2, #32
 800a81e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2200      	movs	r2, #0
 800a826:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	330c      	adds	r3, #12
 800a82e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	e853 3f00 	ldrex	r3, [r3]
 800a836:	60fb      	str	r3, [r7, #12]
   return(result);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f023 0310 	bic.w	r3, r3, #16
 800a83e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	330c      	adds	r3, #12
 800a848:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a84c:	61fa      	str	r2, [r7, #28]
 800a84e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a850:	69b9      	ldr	r1, [r7, #24]
 800a852:	69fa      	ldr	r2, [r7, #28]
 800a854:	e841 2300 	strex	r3, r2, [r1]
 800a858:	617b      	str	r3, [r7, #20]
   return(result);
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1e3      	bne.n	800a828 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a860:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a864:	4619      	mov	r1, r3
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 f848 	bl	800a8fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a86c:	e023      	b.n	800a8b6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a86e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a876:	2b00      	cmp	r3, #0
 800a878:	d009      	beq.n	800a88e <HAL_UART_IRQHandler+0x4ea>
 800a87a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a87e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a882:	2b00      	cmp	r3, #0
 800a884:	d003      	beq.n	800a88e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 fae7 	bl	800ae5a <UART_Transmit_IT>
    return;
 800a88c:	e014      	b.n	800a8b8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a88e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a896:	2b00      	cmp	r3, #0
 800a898:	d00e      	beq.n	800a8b8 <HAL_UART_IRQHandler+0x514>
 800a89a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a89e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d008      	beq.n	800a8b8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 fb27 	bl	800aefa <UART_EndTransmit_IT>
    return;
 800a8ac:	e004      	b.n	800a8b8 <HAL_UART_IRQHandler+0x514>
    return;
 800a8ae:	bf00      	nop
 800a8b0:	e002      	b.n	800a8b8 <HAL_UART_IRQHandler+0x514>
      return;
 800a8b2:	bf00      	nop
 800a8b4:	e000      	b.n	800a8b8 <HAL_UART_IRQHandler+0x514>
      return;
 800a8b6:	bf00      	nop
  }
}
 800a8b8:	37e8      	adds	r7, #232	@ 0xe8
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop

0800a8c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a8c8:	bf00      	nop
 800a8ca:	370c      	adds	r7, #12
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a8dc:	bf00      	nop
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr

0800a8e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a8f0:	bf00      	nop
 800a8f2:	370c      	adds	r7, #12
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	460b      	mov	r3, r1
 800a906:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a908:	bf00      	nop
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b09c      	sub	sp, #112	@ 0x70
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a920:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d172      	bne.n	800aa16 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a930:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a932:	2200      	movs	r2, #0
 800a934:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a936:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	330c      	adds	r3, #12
 800a93c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a93e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a940:	e853 3f00 	ldrex	r3, [r3]
 800a944:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a946:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a948:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a94c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a94e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	330c      	adds	r3, #12
 800a954:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a956:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a958:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a95a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a95c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a95e:	e841 2300 	strex	r3, r2, [r1]
 800a962:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a964:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a966:	2b00      	cmp	r3, #0
 800a968:	d1e5      	bne.n	800a936 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a96a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	3314      	adds	r3, #20
 800a970:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a974:	e853 3f00 	ldrex	r3, [r3]
 800a978:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a97a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a97c:	f023 0301 	bic.w	r3, r3, #1
 800a980:	667b      	str	r3, [r7, #100]	@ 0x64
 800a982:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	3314      	adds	r3, #20
 800a988:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a98a:	647a      	str	r2, [r7, #68]	@ 0x44
 800a98c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a98e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a990:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a992:	e841 2300 	strex	r3, r2, [r1]
 800a996:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d1e5      	bne.n	800a96a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a99e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	3314      	adds	r3, #20
 800a9a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a8:	e853 3f00 	ldrex	r3, [r3]
 800a9ac:	623b      	str	r3, [r7, #32]
   return(result);
 800a9ae:	6a3b      	ldr	r3, [r7, #32]
 800a9b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9b4:	663b      	str	r3, [r7, #96]	@ 0x60
 800a9b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	3314      	adds	r3, #20
 800a9bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a9be:	633a      	str	r2, [r7, #48]	@ 0x30
 800a9c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9c6:	e841 2300 	strex	r3, r2, [r1]
 800a9ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a9cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d1e5      	bne.n	800a99e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a9d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9d4:	2220      	movs	r2, #32
 800a9d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d119      	bne.n	800aa16 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	330c      	adds	r3, #12
 800a9e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	e853 3f00 	ldrex	r3, [r3]
 800a9f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f023 0310 	bic.w	r3, r3, #16
 800a9f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a9fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	330c      	adds	r3, #12
 800aa00:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800aa02:	61fa      	str	r2, [r7, #28]
 800aa04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa06:	69b9      	ldr	r1, [r7, #24]
 800aa08:	69fa      	ldr	r2, [r7, #28]
 800aa0a:	e841 2300 	strex	r3, r2, [r1]
 800aa0e:	617b      	str	r3, [r7, #20]
   return(result);
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d1e5      	bne.n	800a9e2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d106      	bne.n	800aa2c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800aa22:	4619      	mov	r1, r3
 800aa24:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800aa26:	f7ff ff69 	bl	800a8fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa2a:	e002      	b.n	800aa32 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800aa2c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800aa2e:	f7f7 fc51 	bl	80022d4 <HAL_UART_RxCpltCallback>
}
 800aa32:	bf00      	nop
 800aa34:	3770      	adds	r7, #112	@ 0x70
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b084      	sub	sp, #16
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa46:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d108      	bne.n	800aa62 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800aa54:	085b      	lsrs	r3, r3, #1
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	4619      	mov	r1, r3
 800aa5a:	68f8      	ldr	r0, [r7, #12]
 800aa5c:	f7ff ff4e 	bl	800a8fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa60:	e002      	b.n	800aa68 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800aa62:	68f8      	ldr	r0, [r7, #12]
 800aa64:	f7ff ff36 	bl	800a8d4 <HAL_UART_RxHalfCpltCallback>
}
 800aa68:	bf00      	nop
 800aa6a:	3710      	adds	r7, #16
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa80:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	695b      	ldr	r3, [r3, #20]
 800aa88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa8c:	2b80      	cmp	r3, #128	@ 0x80
 800aa8e:	bf0c      	ite	eq
 800aa90:	2301      	moveq	r3, #1
 800aa92:	2300      	movne	r3, #0
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	2b21      	cmp	r3, #33	@ 0x21
 800aaa2:	d108      	bne.n	800aab6 <UART_DMAError+0x46>
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d005      	beq.n	800aab6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	2200      	movs	r2, #0
 800aaae:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800aab0:	68b8      	ldr	r0, [r7, #8]
 800aab2:	f000 f933 	bl	800ad1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	695b      	ldr	r3, [r3, #20]
 800aabc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aac0:	2b40      	cmp	r3, #64	@ 0x40
 800aac2:	bf0c      	ite	eq
 800aac4:	2301      	moveq	r3, #1
 800aac6:	2300      	movne	r3, #0
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	2b22      	cmp	r3, #34	@ 0x22
 800aad6:	d108      	bne.n	800aaea <UART_DMAError+0x7a>
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d005      	beq.n	800aaea <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	2200      	movs	r2, #0
 800aae2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800aae4:	68b8      	ldr	r0, [r7, #8]
 800aae6:	f000 f941 	bl	800ad6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaee:	f043 0210 	orr.w	r2, r3, #16
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aaf6:	68b8      	ldr	r0, [r7, #8]
 800aaf8:	f7ff fef6 	bl	800a8e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aafc:	bf00      	nop
 800aafe:	3710      	adds	r7, #16
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b090      	sub	sp, #64	@ 0x40
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	603b      	str	r3, [r7, #0]
 800ab10:	4613      	mov	r3, r2
 800ab12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab14:	e050      	b.n	800abb8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab1c:	d04c      	beq.n	800abb8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ab1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d007      	beq.n	800ab34 <UART_WaitOnFlagUntilTimeout+0x30>
 800ab24:	f7fb fa20 	bl	8005f68 <HAL_GetTick>
 800ab28:	4602      	mov	r2, r0
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	1ad3      	subs	r3, r2, r3
 800ab2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d241      	bcs.n	800abb8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	330c      	adds	r3, #12
 800ab3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab3e:	e853 3f00 	ldrex	r3, [r3]
 800ab42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ab44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab46:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800ab4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	330c      	adds	r3, #12
 800ab52:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ab54:	637a      	str	r2, [r7, #52]	@ 0x34
 800ab56:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab58:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ab5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ab5c:	e841 2300 	strex	r3, r2, [r1]
 800ab60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ab62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d1e5      	bne.n	800ab34 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	3314      	adds	r3, #20
 800ab6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	e853 3f00 	ldrex	r3, [r3]
 800ab76:	613b      	str	r3, [r7, #16]
   return(result);
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	f023 0301 	bic.w	r3, r3, #1
 800ab7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	3314      	adds	r3, #20
 800ab86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ab88:	623a      	str	r2, [r7, #32]
 800ab8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab8c:	69f9      	ldr	r1, [r7, #28]
 800ab8e:	6a3a      	ldr	r2, [r7, #32]
 800ab90:	e841 2300 	strex	r3, r2, [r1]
 800ab94:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d1e5      	bne.n	800ab68 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2220      	movs	r2, #32
 800aba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2220      	movs	r2, #32
 800aba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2200      	movs	r2, #0
 800abb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800abb4:	2303      	movs	r3, #3
 800abb6:	e00f      	b.n	800abd8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	681a      	ldr	r2, [r3, #0]
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	4013      	ands	r3, r2
 800abc2:	68ba      	ldr	r2, [r7, #8]
 800abc4:	429a      	cmp	r2, r3
 800abc6:	bf0c      	ite	eq
 800abc8:	2301      	moveq	r3, #1
 800abca:	2300      	movne	r3, #0
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	461a      	mov	r2, r3
 800abd0:	79fb      	ldrb	r3, [r7, #7]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d09f      	beq.n	800ab16 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800abd6:	2300      	movs	r3, #0
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3740      	adds	r7, #64	@ 0x40
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b098      	sub	sp, #96	@ 0x60
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	60f8      	str	r0, [r7, #12]
 800abe8:	60b9      	str	r1, [r7, #8]
 800abea:	4613      	mov	r3, r2
 800abec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800abee:	68ba      	ldr	r2, [r7, #8]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	88fa      	ldrh	r2, [r7, #6]
 800abf8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2200      	movs	r2, #0
 800abfe:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2222      	movs	r2, #34	@ 0x22
 800ac04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac0c:	4a40      	ldr	r2, [pc, #256]	@ (800ad10 <UART_Start_Receive_DMA+0x130>)
 800ac0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac14:	4a3f      	ldr	r2, [pc, #252]	@ (800ad14 <UART_Start_Receive_DMA+0x134>)
 800ac16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac1c:	4a3e      	ldr	r2, [pc, #248]	@ (800ad18 <UART_Start_Receive_DMA+0x138>)
 800ac1e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac24:	2200      	movs	r2, #0
 800ac26:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ac28:	f107 0308 	add.w	r3, r7, #8
 800ac2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	3304      	adds	r3, #4
 800ac38:	4619      	mov	r1, r3
 800ac3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac3c:	681a      	ldr	r2, [r3, #0]
 800ac3e:	88fb      	ldrh	r3, [r7, #6]
 800ac40:	f7fb fb82 	bl	8006348 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ac44:	2300      	movs	r3, #0
 800ac46:	613b      	str	r3, [r7, #16]
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	613b      	str	r3, [r7, #16]
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	613b      	str	r3, [r7, #16]
 800ac58:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d019      	beq.n	800ac9e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	330c      	adds	r3, #12
 800ac70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac74:	e853 3f00 	ldrex	r3, [r3]
 800ac78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac80:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	330c      	adds	r3, #12
 800ac88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ac8a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800ac8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac8e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ac90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ac92:	e841 2300 	strex	r3, r2, [r1]
 800ac96:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ac98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d1e5      	bne.n	800ac6a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	3314      	adds	r3, #20
 800aca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aca8:	e853 3f00 	ldrex	r3, [r3]
 800acac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800acae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acb0:	f043 0301 	orr.w	r3, r3, #1
 800acb4:	657b      	str	r3, [r7, #84]	@ 0x54
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	3314      	adds	r3, #20
 800acbc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800acbe:	63ba      	str	r2, [r7, #56]	@ 0x38
 800acc0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800acc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800acc6:	e841 2300 	strex	r3, r2, [r1]
 800acca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800accc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d1e5      	bne.n	800ac9e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	3314      	adds	r3, #20
 800acd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acda:	69bb      	ldr	r3, [r7, #24]
 800acdc:	e853 3f00 	ldrex	r3, [r3]
 800ace0:	617b      	str	r3, [r7, #20]
   return(result);
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ace8:	653b      	str	r3, [r7, #80]	@ 0x50
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	3314      	adds	r3, #20
 800acf0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800acf2:	627a      	str	r2, [r7, #36]	@ 0x24
 800acf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf6:	6a39      	ldr	r1, [r7, #32]
 800acf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acfa:	e841 2300 	strex	r3, r2, [r1]
 800acfe:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad00:	69fb      	ldr	r3, [r7, #28]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d1e5      	bne.n	800acd2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3760      	adds	r7, #96	@ 0x60
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	0800a915 	.word	0x0800a915
 800ad14:	0800aa3b 	.word	0x0800aa3b
 800ad18:	0800aa71 	.word	0x0800aa71

0800ad1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b089      	sub	sp, #36	@ 0x24
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	330c      	adds	r3, #12
 800ad2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	e853 3f00 	ldrex	r3, [r3]
 800ad32:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ad3a:	61fb      	str	r3, [r7, #28]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	330c      	adds	r3, #12
 800ad42:	69fa      	ldr	r2, [r7, #28]
 800ad44:	61ba      	str	r2, [r7, #24]
 800ad46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad48:	6979      	ldr	r1, [r7, #20]
 800ad4a:	69ba      	ldr	r2, [r7, #24]
 800ad4c:	e841 2300 	strex	r3, r2, [r1]
 800ad50:	613b      	str	r3, [r7, #16]
   return(result);
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d1e5      	bne.n	800ad24 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2220      	movs	r2, #32
 800ad5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 800ad60:	bf00      	nop
 800ad62:	3724      	adds	r7, #36	@ 0x24
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr

0800ad6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b095      	sub	sp, #84	@ 0x54
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	330c      	adds	r3, #12
 800ad7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad7e:	e853 3f00 	ldrex	r3, [r3]
 800ad82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ad84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	330c      	adds	r3, #12
 800ad92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ad94:	643a      	str	r2, [r7, #64]	@ 0x40
 800ad96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ad9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad9c:	e841 2300 	strex	r3, r2, [r1]
 800ada0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ada2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d1e5      	bne.n	800ad74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	3314      	adds	r3, #20
 800adae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb0:	6a3b      	ldr	r3, [r7, #32]
 800adb2:	e853 3f00 	ldrex	r3, [r3]
 800adb6:	61fb      	str	r3, [r7, #28]
   return(result);
 800adb8:	69fb      	ldr	r3, [r7, #28]
 800adba:	f023 0301 	bic.w	r3, r3, #1
 800adbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	3314      	adds	r3, #20
 800adc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800adc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800adca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800adce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800add0:	e841 2300 	strex	r3, r2, [r1]
 800add4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800add6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add8:	2b00      	cmp	r3, #0
 800adda:	d1e5      	bne.n	800ada8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	d119      	bne.n	800ae18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	330c      	adds	r3, #12
 800adea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	e853 3f00 	ldrex	r3, [r3]
 800adf2:	60bb      	str	r3, [r7, #8]
   return(result);
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	f023 0310 	bic.w	r3, r3, #16
 800adfa:	647b      	str	r3, [r7, #68]	@ 0x44
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	330c      	adds	r3, #12
 800ae02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae04:	61ba      	str	r2, [r7, #24]
 800ae06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae08:	6979      	ldr	r1, [r7, #20]
 800ae0a:	69ba      	ldr	r2, [r7, #24]
 800ae0c:	e841 2300 	strex	r3, r2, [r1]
 800ae10:	613b      	str	r3, [r7, #16]
   return(result);
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d1e5      	bne.n	800ade4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2220      	movs	r2, #32
 800ae1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ae26:	bf00      	nop
 800ae28:	3754      	adds	r7, #84	@ 0x54
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr

0800ae32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae32:	b580      	push	{r7, lr}
 800ae34:	b084      	sub	sp, #16
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2200      	movs	r2, #0
 800ae44:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	f7ff fd4b 	bl	800a8e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae52:	bf00      	nop
 800ae54:	3710      	adds	r7, #16
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}

0800ae5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ae5a:	b480      	push	{r7}
 800ae5c:	b085      	sub	sp, #20
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae68:	b2db      	uxtb	r3, r3
 800ae6a:	2b21      	cmp	r3, #33	@ 0x21
 800ae6c:	d13e      	bne.n	800aeec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	689b      	ldr	r3, [r3, #8]
 800ae72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae76:	d114      	bne.n	800aea2 <UART_Transmit_IT+0x48>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	691b      	ldr	r3, [r3, #16]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d110      	bne.n	800aea2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6a1b      	ldr	r3, [r3, #32]
 800ae84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	881b      	ldrh	r3, [r3, #0]
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6a1b      	ldr	r3, [r3, #32]
 800ae9a:	1c9a      	adds	r2, r3, #2
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	621a      	str	r2, [r3, #32]
 800aea0:	e008      	b.n	800aeb4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6a1b      	ldr	r3, [r3, #32]
 800aea6:	1c59      	adds	r1, r3, #1
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	6211      	str	r1, [r2, #32]
 800aeac:	781a      	ldrb	r2, [r3, #0]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800aeb8:	b29b      	uxth	r3, r3
 800aeba:	3b01      	subs	r3, #1
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	4619      	mov	r1, r3
 800aec2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d10f      	bne.n	800aee8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	68da      	ldr	r2, [r3, #12]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800aed6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	68da      	ldr	r2, [r3, #12]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aee6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800aee8:	2300      	movs	r3, #0
 800aeea:	e000      	b.n	800aeee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800aeec:	2302      	movs	r3, #2
  }
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3714      	adds	r7, #20
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr

0800aefa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b082      	sub	sp, #8
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	68da      	ldr	r2, [r3, #12]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800af10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2220      	movs	r2, #32
 800af16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f7ff fcd0 	bl	800a8c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800af20:	2300      	movs	r3, #0
}
 800af22:	4618      	mov	r0, r3
 800af24:	3708      	adds	r7, #8
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}

0800af2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800af2a:	b580      	push	{r7, lr}
 800af2c:	b08c      	sub	sp, #48	@ 0x30
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	2b22      	cmp	r3, #34	@ 0x22
 800af3c:	f040 80ab 	bne.w	800b096 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	689b      	ldr	r3, [r3, #8]
 800af44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af48:	d117      	bne.n	800af7a <UART_Receive_IT+0x50>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	691b      	ldr	r3, [r3, #16]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d113      	bne.n	800af7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800af52:	2300      	movs	r3, #0
 800af54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af5a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	b29b      	uxth	r3, r3
 800af64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af68:	b29a      	uxth	r2, r3
 800af6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af72:	1c9a      	adds	r2, r3, #2
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	629a      	str	r2, [r3, #40]	@ 0x28
 800af78:	e026      	b.n	800afc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800af80:	2300      	movs	r3, #0
 800af82:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af8c:	d007      	beq.n	800af9e <UART_Receive_IT+0x74>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	689b      	ldr	r3, [r3, #8]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d10a      	bne.n	800afac <UART_Receive_IT+0x82>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	691b      	ldr	r3, [r3, #16]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d106      	bne.n	800afac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	b2da      	uxtb	r2, r3
 800afa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afa8:	701a      	strb	r2, [r3, #0]
 800afaa:	e008      	b.n	800afbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	b2db      	uxtb	r3, r3
 800afb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afb8:	b2da      	uxtb	r2, r3
 800afba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afc2:	1c5a      	adds	r2, r3, #1
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800afcc:	b29b      	uxth	r3, r3
 800afce:	3b01      	subs	r3, #1
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	4619      	mov	r1, r3
 800afd6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d15a      	bne.n	800b092 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	68da      	ldr	r2, [r3, #12]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f022 0220 	bic.w	r2, r2, #32
 800afea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	68da      	ldr	r2, [r3, #12]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800affa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	695a      	ldr	r2, [r3, #20]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f022 0201 	bic.w	r2, r2, #1
 800b00a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2220      	movs	r2, #32
 800b010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d135      	bne.n	800b088 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2200      	movs	r2, #0
 800b020:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	330c      	adds	r3, #12
 800b028:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	e853 3f00 	ldrex	r3, [r3]
 800b030:	613b      	str	r3, [r7, #16]
   return(result);
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	f023 0310 	bic.w	r3, r3, #16
 800b038:	627b      	str	r3, [r7, #36]	@ 0x24
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	330c      	adds	r3, #12
 800b040:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b042:	623a      	str	r2, [r7, #32]
 800b044:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b046:	69f9      	ldr	r1, [r7, #28]
 800b048:	6a3a      	ldr	r2, [r7, #32]
 800b04a:	e841 2300 	strex	r3, r2, [r1]
 800b04e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b050:	69bb      	ldr	r3, [r7, #24]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d1e5      	bne.n	800b022 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f003 0310 	and.w	r3, r3, #16
 800b060:	2b10      	cmp	r3, #16
 800b062:	d10a      	bne.n	800b07a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b064:	2300      	movs	r3, #0
 800b066:	60fb      	str	r3, [r7, #12]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	60fb      	str	r3, [r7, #12]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	60fb      	str	r3, [r7, #12]
 800b078:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b07e:	4619      	mov	r1, r3
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f7ff fc3b 	bl	800a8fc <HAL_UARTEx_RxEventCallback>
 800b086:	e002      	b.n	800b08e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f7f7 f923 	bl	80022d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b08e:	2300      	movs	r3, #0
 800b090:	e002      	b.n	800b098 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b092:	2300      	movs	r3, #0
 800b094:	e000      	b.n	800b098 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b096:	2302      	movs	r3, #2
  }
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3730      	adds	r7, #48	@ 0x30
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b0a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0a4:	b0c0      	sub	sp, #256	@ 0x100
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b0ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	691b      	ldr	r3, [r3, #16]
 800b0b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b0b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0bc:	68d9      	ldr	r1, [r3, #12]
 800b0be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0c2:	681a      	ldr	r2, [r3, #0]
 800b0c4:	ea40 0301 	orr.w	r3, r0, r1
 800b0c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b0ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0ce:	689a      	ldr	r2, [r3, #8]
 800b0d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0d4:	691b      	ldr	r3, [r3, #16]
 800b0d6:	431a      	orrs	r2, r3
 800b0d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0dc:	695b      	ldr	r3, [r3, #20]
 800b0de:	431a      	orrs	r2, r3
 800b0e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0e4:	69db      	ldr	r3, [r3, #28]
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b0ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	68db      	ldr	r3, [r3, #12]
 800b0f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b0f8:	f021 010c 	bic.w	r1, r1, #12
 800b0fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b106:	430b      	orrs	r3, r1
 800b108:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b10a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	695b      	ldr	r3, [r3, #20]
 800b112:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b11a:	6999      	ldr	r1, [r3, #24]
 800b11c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	ea40 0301 	orr.w	r3, r0, r1
 800b126:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	4b8f      	ldr	r3, [pc, #572]	@ (800b36c <UART_SetConfig+0x2cc>)
 800b130:	429a      	cmp	r2, r3
 800b132:	d005      	beq.n	800b140 <UART_SetConfig+0xa0>
 800b134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	4b8d      	ldr	r3, [pc, #564]	@ (800b370 <UART_SetConfig+0x2d0>)
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d104      	bne.n	800b14a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b140:	f7fd fb7e 	bl	8008840 <HAL_RCC_GetPCLK2Freq>
 800b144:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b148:	e003      	b.n	800b152 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b14a:	f7fd fb65 	bl	8008818 <HAL_RCC_GetPCLK1Freq>
 800b14e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b156:	69db      	ldr	r3, [r3, #28]
 800b158:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b15c:	f040 810c 	bne.w	800b378 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b164:	2200      	movs	r2, #0
 800b166:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b16a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b16e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b172:	4622      	mov	r2, r4
 800b174:	462b      	mov	r3, r5
 800b176:	1891      	adds	r1, r2, r2
 800b178:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b17a:	415b      	adcs	r3, r3
 800b17c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b17e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b182:	4621      	mov	r1, r4
 800b184:	eb12 0801 	adds.w	r8, r2, r1
 800b188:	4629      	mov	r1, r5
 800b18a:	eb43 0901 	adc.w	r9, r3, r1
 800b18e:	f04f 0200 	mov.w	r2, #0
 800b192:	f04f 0300 	mov.w	r3, #0
 800b196:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b19a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b19e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b1a2:	4690      	mov	r8, r2
 800b1a4:	4699      	mov	r9, r3
 800b1a6:	4623      	mov	r3, r4
 800b1a8:	eb18 0303 	adds.w	r3, r8, r3
 800b1ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b1b0:	462b      	mov	r3, r5
 800b1b2:	eb49 0303 	adc.w	r3, r9, r3
 800b1b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b1ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b1c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b1ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	18db      	adds	r3, r3, r3
 800b1d2:	653b      	str	r3, [r7, #80]	@ 0x50
 800b1d4:	4613      	mov	r3, r2
 800b1d6:	eb42 0303 	adc.w	r3, r2, r3
 800b1da:	657b      	str	r3, [r7, #84]	@ 0x54
 800b1dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b1e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b1e4:	f7f5 fd50 	bl	8000c88 <__aeabi_uldivmod>
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	4b61      	ldr	r3, [pc, #388]	@ (800b374 <UART_SetConfig+0x2d4>)
 800b1ee:	fba3 2302 	umull	r2, r3, r3, r2
 800b1f2:	095b      	lsrs	r3, r3, #5
 800b1f4:	011c      	lsls	r4, r3, #4
 800b1f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b200:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b204:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b208:	4642      	mov	r2, r8
 800b20a:	464b      	mov	r3, r9
 800b20c:	1891      	adds	r1, r2, r2
 800b20e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b210:	415b      	adcs	r3, r3
 800b212:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b214:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b218:	4641      	mov	r1, r8
 800b21a:	eb12 0a01 	adds.w	sl, r2, r1
 800b21e:	4649      	mov	r1, r9
 800b220:	eb43 0b01 	adc.w	fp, r3, r1
 800b224:	f04f 0200 	mov.w	r2, #0
 800b228:	f04f 0300 	mov.w	r3, #0
 800b22c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b230:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b234:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b238:	4692      	mov	sl, r2
 800b23a:	469b      	mov	fp, r3
 800b23c:	4643      	mov	r3, r8
 800b23e:	eb1a 0303 	adds.w	r3, sl, r3
 800b242:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b246:	464b      	mov	r3, r9
 800b248:	eb4b 0303 	adc.w	r3, fp, r3
 800b24c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b25c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b260:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b264:	460b      	mov	r3, r1
 800b266:	18db      	adds	r3, r3, r3
 800b268:	643b      	str	r3, [r7, #64]	@ 0x40
 800b26a:	4613      	mov	r3, r2
 800b26c:	eb42 0303 	adc.w	r3, r2, r3
 800b270:	647b      	str	r3, [r7, #68]	@ 0x44
 800b272:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b276:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b27a:	f7f5 fd05 	bl	8000c88 <__aeabi_uldivmod>
 800b27e:	4602      	mov	r2, r0
 800b280:	460b      	mov	r3, r1
 800b282:	4611      	mov	r1, r2
 800b284:	4b3b      	ldr	r3, [pc, #236]	@ (800b374 <UART_SetConfig+0x2d4>)
 800b286:	fba3 2301 	umull	r2, r3, r3, r1
 800b28a:	095b      	lsrs	r3, r3, #5
 800b28c:	2264      	movs	r2, #100	@ 0x64
 800b28e:	fb02 f303 	mul.w	r3, r2, r3
 800b292:	1acb      	subs	r3, r1, r3
 800b294:	00db      	lsls	r3, r3, #3
 800b296:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b29a:	4b36      	ldr	r3, [pc, #216]	@ (800b374 <UART_SetConfig+0x2d4>)
 800b29c:	fba3 2302 	umull	r2, r3, r3, r2
 800b2a0:	095b      	lsrs	r3, r3, #5
 800b2a2:	005b      	lsls	r3, r3, #1
 800b2a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b2a8:	441c      	add	r4, r3
 800b2aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b2b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b2b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b2bc:	4642      	mov	r2, r8
 800b2be:	464b      	mov	r3, r9
 800b2c0:	1891      	adds	r1, r2, r2
 800b2c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b2c4:	415b      	adcs	r3, r3
 800b2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b2cc:	4641      	mov	r1, r8
 800b2ce:	1851      	adds	r1, r2, r1
 800b2d0:	6339      	str	r1, [r7, #48]	@ 0x30
 800b2d2:	4649      	mov	r1, r9
 800b2d4:	414b      	adcs	r3, r1
 800b2d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2d8:	f04f 0200 	mov.w	r2, #0
 800b2dc:	f04f 0300 	mov.w	r3, #0
 800b2e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b2e4:	4659      	mov	r1, fp
 800b2e6:	00cb      	lsls	r3, r1, #3
 800b2e8:	4651      	mov	r1, sl
 800b2ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b2ee:	4651      	mov	r1, sl
 800b2f0:	00ca      	lsls	r2, r1, #3
 800b2f2:	4610      	mov	r0, r2
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	4642      	mov	r2, r8
 800b2fa:	189b      	adds	r3, r3, r2
 800b2fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b300:	464b      	mov	r3, r9
 800b302:	460a      	mov	r2, r1
 800b304:	eb42 0303 	adc.w	r3, r2, r3
 800b308:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b30c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	2200      	movs	r2, #0
 800b314:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b318:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b31c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b320:	460b      	mov	r3, r1
 800b322:	18db      	adds	r3, r3, r3
 800b324:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b326:	4613      	mov	r3, r2
 800b328:	eb42 0303 	adc.w	r3, r2, r3
 800b32c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b32e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b332:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b336:	f7f5 fca7 	bl	8000c88 <__aeabi_uldivmod>
 800b33a:	4602      	mov	r2, r0
 800b33c:	460b      	mov	r3, r1
 800b33e:	4b0d      	ldr	r3, [pc, #52]	@ (800b374 <UART_SetConfig+0x2d4>)
 800b340:	fba3 1302 	umull	r1, r3, r3, r2
 800b344:	095b      	lsrs	r3, r3, #5
 800b346:	2164      	movs	r1, #100	@ 0x64
 800b348:	fb01 f303 	mul.w	r3, r1, r3
 800b34c:	1ad3      	subs	r3, r2, r3
 800b34e:	00db      	lsls	r3, r3, #3
 800b350:	3332      	adds	r3, #50	@ 0x32
 800b352:	4a08      	ldr	r2, [pc, #32]	@ (800b374 <UART_SetConfig+0x2d4>)
 800b354:	fba2 2303 	umull	r2, r3, r2, r3
 800b358:	095b      	lsrs	r3, r3, #5
 800b35a:	f003 0207 	and.w	r2, r3, #7
 800b35e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4422      	add	r2, r4
 800b366:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b368:	e106      	b.n	800b578 <UART_SetConfig+0x4d8>
 800b36a:	bf00      	nop
 800b36c:	40011000 	.word	0x40011000
 800b370:	40011400 	.word	0x40011400
 800b374:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b37c:	2200      	movs	r2, #0
 800b37e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b382:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b386:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b38a:	4642      	mov	r2, r8
 800b38c:	464b      	mov	r3, r9
 800b38e:	1891      	adds	r1, r2, r2
 800b390:	6239      	str	r1, [r7, #32]
 800b392:	415b      	adcs	r3, r3
 800b394:	627b      	str	r3, [r7, #36]	@ 0x24
 800b396:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b39a:	4641      	mov	r1, r8
 800b39c:	1854      	adds	r4, r2, r1
 800b39e:	4649      	mov	r1, r9
 800b3a0:	eb43 0501 	adc.w	r5, r3, r1
 800b3a4:	f04f 0200 	mov.w	r2, #0
 800b3a8:	f04f 0300 	mov.w	r3, #0
 800b3ac:	00eb      	lsls	r3, r5, #3
 800b3ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b3b2:	00e2      	lsls	r2, r4, #3
 800b3b4:	4614      	mov	r4, r2
 800b3b6:	461d      	mov	r5, r3
 800b3b8:	4643      	mov	r3, r8
 800b3ba:	18e3      	adds	r3, r4, r3
 800b3bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b3c0:	464b      	mov	r3, r9
 800b3c2:	eb45 0303 	adc.w	r3, r5, r3
 800b3c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b3ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b3d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b3da:	f04f 0200 	mov.w	r2, #0
 800b3de:	f04f 0300 	mov.w	r3, #0
 800b3e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b3e6:	4629      	mov	r1, r5
 800b3e8:	008b      	lsls	r3, r1, #2
 800b3ea:	4621      	mov	r1, r4
 800b3ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b3f0:	4621      	mov	r1, r4
 800b3f2:	008a      	lsls	r2, r1, #2
 800b3f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b3f8:	f7f5 fc46 	bl	8000c88 <__aeabi_uldivmod>
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	460b      	mov	r3, r1
 800b400:	4b60      	ldr	r3, [pc, #384]	@ (800b584 <UART_SetConfig+0x4e4>)
 800b402:	fba3 2302 	umull	r2, r3, r3, r2
 800b406:	095b      	lsrs	r3, r3, #5
 800b408:	011c      	lsls	r4, r3, #4
 800b40a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b40e:	2200      	movs	r2, #0
 800b410:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b414:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b418:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b41c:	4642      	mov	r2, r8
 800b41e:	464b      	mov	r3, r9
 800b420:	1891      	adds	r1, r2, r2
 800b422:	61b9      	str	r1, [r7, #24]
 800b424:	415b      	adcs	r3, r3
 800b426:	61fb      	str	r3, [r7, #28]
 800b428:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b42c:	4641      	mov	r1, r8
 800b42e:	1851      	adds	r1, r2, r1
 800b430:	6139      	str	r1, [r7, #16]
 800b432:	4649      	mov	r1, r9
 800b434:	414b      	adcs	r3, r1
 800b436:	617b      	str	r3, [r7, #20]
 800b438:	f04f 0200 	mov.w	r2, #0
 800b43c:	f04f 0300 	mov.w	r3, #0
 800b440:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b444:	4659      	mov	r1, fp
 800b446:	00cb      	lsls	r3, r1, #3
 800b448:	4651      	mov	r1, sl
 800b44a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b44e:	4651      	mov	r1, sl
 800b450:	00ca      	lsls	r2, r1, #3
 800b452:	4610      	mov	r0, r2
 800b454:	4619      	mov	r1, r3
 800b456:	4603      	mov	r3, r0
 800b458:	4642      	mov	r2, r8
 800b45a:	189b      	adds	r3, r3, r2
 800b45c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b460:	464b      	mov	r3, r9
 800b462:	460a      	mov	r2, r1
 800b464:	eb42 0303 	adc.w	r3, r2, r3
 800b468:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b46c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b476:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b478:	f04f 0200 	mov.w	r2, #0
 800b47c:	f04f 0300 	mov.w	r3, #0
 800b480:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b484:	4649      	mov	r1, r9
 800b486:	008b      	lsls	r3, r1, #2
 800b488:	4641      	mov	r1, r8
 800b48a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b48e:	4641      	mov	r1, r8
 800b490:	008a      	lsls	r2, r1, #2
 800b492:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b496:	f7f5 fbf7 	bl	8000c88 <__aeabi_uldivmod>
 800b49a:	4602      	mov	r2, r0
 800b49c:	460b      	mov	r3, r1
 800b49e:	4611      	mov	r1, r2
 800b4a0:	4b38      	ldr	r3, [pc, #224]	@ (800b584 <UART_SetConfig+0x4e4>)
 800b4a2:	fba3 2301 	umull	r2, r3, r3, r1
 800b4a6:	095b      	lsrs	r3, r3, #5
 800b4a8:	2264      	movs	r2, #100	@ 0x64
 800b4aa:	fb02 f303 	mul.w	r3, r2, r3
 800b4ae:	1acb      	subs	r3, r1, r3
 800b4b0:	011b      	lsls	r3, r3, #4
 800b4b2:	3332      	adds	r3, #50	@ 0x32
 800b4b4:	4a33      	ldr	r2, [pc, #204]	@ (800b584 <UART_SetConfig+0x4e4>)
 800b4b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b4ba:	095b      	lsrs	r3, r3, #5
 800b4bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b4c0:	441c      	add	r4, r3
 800b4c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	673b      	str	r3, [r7, #112]	@ 0x70
 800b4ca:	677a      	str	r2, [r7, #116]	@ 0x74
 800b4cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b4d0:	4642      	mov	r2, r8
 800b4d2:	464b      	mov	r3, r9
 800b4d4:	1891      	adds	r1, r2, r2
 800b4d6:	60b9      	str	r1, [r7, #8]
 800b4d8:	415b      	adcs	r3, r3
 800b4da:	60fb      	str	r3, [r7, #12]
 800b4dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b4e0:	4641      	mov	r1, r8
 800b4e2:	1851      	adds	r1, r2, r1
 800b4e4:	6039      	str	r1, [r7, #0]
 800b4e6:	4649      	mov	r1, r9
 800b4e8:	414b      	adcs	r3, r1
 800b4ea:	607b      	str	r3, [r7, #4]
 800b4ec:	f04f 0200 	mov.w	r2, #0
 800b4f0:	f04f 0300 	mov.w	r3, #0
 800b4f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b4f8:	4659      	mov	r1, fp
 800b4fa:	00cb      	lsls	r3, r1, #3
 800b4fc:	4651      	mov	r1, sl
 800b4fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b502:	4651      	mov	r1, sl
 800b504:	00ca      	lsls	r2, r1, #3
 800b506:	4610      	mov	r0, r2
 800b508:	4619      	mov	r1, r3
 800b50a:	4603      	mov	r3, r0
 800b50c:	4642      	mov	r2, r8
 800b50e:	189b      	adds	r3, r3, r2
 800b510:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b512:	464b      	mov	r3, r9
 800b514:	460a      	mov	r2, r1
 800b516:	eb42 0303 	adc.w	r3, r2, r3
 800b51a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b51c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	2200      	movs	r2, #0
 800b524:	663b      	str	r3, [r7, #96]	@ 0x60
 800b526:	667a      	str	r2, [r7, #100]	@ 0x64
 800b528:	f04f 0200 	mov.w	r2, #0
 800b52c:	f04f 0300 	mov.w	r3, #0
 800b530:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b534:	4649      	mov	r1, r9
 800b536:	008b      	lsls	r3, r1, #2
 800b538:	4641      	mov	r1, r8
 800b53a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b53e:	4641      	mov	r1, r8
 800b540:	008a      	lsls	r2, r1, #2
 800b542:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b546:	f7f5 fb9f 	bl	8000c88 <__aeabi_uldivmod>
 800b54a:	4602      	mov	r2, r0
 800b54c:	460b      	mov	r3, r1
 800b54e:	4b0d      	ldr	r3, [pc, #52]	@ (800b584 <UART_SetConfig+0x4e4>)
 800b550:	fba3 1302 	umull	r1, r3, r3, r2
 800b554:	095b      	lsrs	r3, r3, #5
 800b556:	2164      	movs	r1, #100	@ 0x64
 800b558:	fb01 f303 	mul.w	r3, r1, r3
 800b55c:	1ad3      	subs	r3, r2, r3
 800b55e:	011b      	lsls	r3, r3, #4
 800b560:	3332      	adds	r3, #50	@ 0x32
 800b562:	4a08      	ldr	r2, [pc, #32]	@ (800b584 <UART_SetConfig+0x4e4>)
 800b564:	fba2 2303 	umull	r2, r3, r2, r3
 800b568:	095b      	lsrs	r3, r3, #5
 800b56a:	f003 020f 	and.w	r2, r3, #15
 800b56e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4422      	add	r2, r4
 800b576:	609a      	str	r2, [r3, #8]
}
 800b578:	bf00      	nop
 800b57a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b57e:	46bd      	mov	sp, r7
 800b580:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b584:	51eb851f 	.word	0x51eb851f

0800b588 <__NVIC_SetPriority>:
{
 800b588:	b480      	push	{r7}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	4603      	mov	r3, r0
 800b590:	6039      	str	r1, [r7, #0]
 800b592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	db0a      	blt.n	800b5b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	b2da      	uxtb	r2, r3
 800b5a0:	490c      	ldr	r1, [pc, #48]	@ (800b5d4 <__NVIC_SetPriority+0x4c>)
 800b5a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5a6:	0112      	lsls	r2, r2, #4
 800b5a8:	b2d2      	uxtb	r2, r2
 800b5aa:	440b      	add	r3, r1
 800b5ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b5b0:	e00a      	b.n	800b5c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	b2da      	uxtb	r2, r3
 800b5b6:	4908      	ldr	r1, [pc, #32]	@ (800b5d8 <__NVIC_SetPriority+0x50>)
 800b5b8:	79fb      	ldrb	r3, [r7, #7]
 800b5ba:	f003 030f 	and.w	r3, r3, #15
 800b5be:	3b04      	subs	r3, #4
 800b5c0:	0112      	lsls	r2, r2, #4
 800b5c2:	b2d2      	uxtb	r2, r2
 800b5c4:	440b      	add	r3, r1
 800b5c6:	761a      	strb	r2, [r3, #24]
}
 800b5c8:	bf00      	nop
 800b5ca:	370c      	adds	r7, #12
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr
 800b5d4:	e000e100 	.word	0xe000e100
 800b5d8:	e000ed00 	.word	0xe000ed00

0800b5dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b5e0:	2100      	movs	r1, #0
 800b5e2:	f06f 0004 	mvn.w	r0, #4
 800b5e6:	f7ff ffcf 	bl	800b588 <__NVIC_SetPriority>
#endif
}
 800b5ea:	bf00      	nop
 800b5ec:	bd80      	pop	{r7, pc}
	...

0800b5f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b5f0:	b480      	push	{r7}
 800b5f2:	b083      	sub	sp, #12
 800b5f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5f6:	f3ef 8305 	mrs	r3, IPSR
 800b5fa:	603b      	str	r3, [r7, #0]
  return(result);
 800b5fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d003      	beq.n	800b60a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b602:	f06f 0305 	mvn.w	r3, #5
 800b606:	607b      	str	r3, [r7, #4]
 800b608:	e00c      	b.n	800b624 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b60a:	4b0a      	ldr	r3, [pc, #40]	@ (800b634 <osKernelInitialize+0x44>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d105      	bne.n	800b61e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b612:	4b08      	ldr	r3, [pc, #32]	@ (800b634 <osKernelInitialize+0x44>)
 800b614:	2201      	movs	r2, #1
 800b616:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b618:	2300      	movs	r3, #0
 800b61a:	607b      	str	r3, [r7, #4]
 800b61c:	e002      	b.n	800b624 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b61e:	f04f 33ff 	mov.w	r3, #4294967295
 800b622:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b624:	687b      	ldr	r3, [r7, #4]
}
 800b626:	4618      	mov	r0, r3
 800b628:	370c      	adds	r7, #12
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr
 800b632:	bf00      	nop
 800b634:	20000c08 	.word	0x20000c08

0800b638 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b63e:	f3ef 8305 	mrs	r3, IPSR
 800b642:	603b      	str	r3, [r7, #0]
  return(result);
 800b644:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b646:	2b00      	cmp	r3, #0
 800b648:	d003      	beq.n	800b652 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b64a:	f06f 0305 	mvn.w	r3, #5
 800b64e:	607b      	str	r3, [r7, #4]
 800b650:	e010      	b.n	800b674 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b652:	4b0b      	ldr	r3, [pc, #44]	@ (800b680 <osKernelStart+0x48>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	2b01      	cmp	r3, #1
 800b658:	d109      	bne.n	800b66e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b65a:	f7ff ffbf 	bl	800b5dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b65e:	4b08      	ldr	r3, [pc, #32]	@ (800b680 <osKernelStart+0x48>)
 800b660:	2202      	movs	r2, #2
 800b662:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b664:	f001 fb08 	bl	800cc78 <vTaskStartScheduler>
      stat = osOK;
 800b668:	2300      	movs	r3, #0
 800b66a:	607b      	str	r3, [r7, #4]
 800b66c:	e002      	b.n	800b674 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b66e:	f04f 33ff 	mov.w	r3, #4294967295
 800b672:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b674:	687b      	ldr	r3, [r7, #4]
}
 800b676:	4618      	mov	r0, r3
 800b678:	3708      	adds	r7, #8
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
 800b67e:	bf00      	nop
 800b680:	20000c08 	.word	0x20000c08

0800b684 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b684:	b580      	push	{r7, lr}
 800b686:	b08e      	sub	sp, #56	@ 0x38
 800b688:	af04      	add	r7, sp, #16
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b690:	2300      	movs	r3, #0
 800b692:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b694:	f3ef 8305 	mrs	r3, IPSR
 800b698:	617b      	str	r3, [r7, #20]
  return(result);
 800b69a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d17e      	bne.n	800b79e <osThreadNew+0x11a>
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d07b      	beq.n	800b79e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b6a6:	2380      	movs	r3, #128	@ 0x80
 800b6a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b6aa:	2318      	movs	r3, #24
 800b6ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b6b2:	f04f 33ff 	mov.w	r3, #4294967295
 800b6b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d045      	beq.n	800b74a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d002      	beq.n	800b6cc <osThreadNew+0x48>
        name = attr->name;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	699b      	ldr	r3, [r3, #24]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d002      	beq.n	800b6da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	699b      	ldr	r3, [r3, #24]
 800b6d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b6da:	69fb      	ldr	r3, [r7, #28]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d008      	beq.n	800b6f2 <osThreadNew+0x6e>
 800b6e0:	69fb      	ldr	r3, [r7, #28]
 800b6e2:	2b38      	cmp	r3, #56	@ 0x38
 800b6e4:	d805      	bhi.n	800b6f2 <osThreadNew+0x6e>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	f003 0301 	and.w	r3, r3, #1
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d001      	beq.n	800b6f6 <osThreadNew+0x72>
        return (NULL);
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	e054      	b.n	800b7a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	695b      	ldr	r3, [r3, #20]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d003      	beq.n	800b706 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	695b      	ldr	r3, [r3, #20]
 800b702:	089b      	lsrs	r3, r3, #2
 800b704:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	689b      	ldr	r3, [r3, #8]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d00e      	beq.n	800b72c <osThreadNew+0xa8>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	2b5b      	cmp	r3, #91	@ 0x5b
 800b714:	d90a      	bls.n	800b72c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d006      	beq.n	800b72c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	695b      	ldr	r3, [r3, #20]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d002      	beq.n	800b72c <osThreadNew+0xa8>
        mem = 1;
 800b726:	2301      	movs	r3, #1
 800b728:	61bb      	str	r3, [r7, #24]
 800b72a:	e010      	b.n	800b74e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	689b      	ldr	r3, [r3, #8]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d10c      	bne.n	800b74e <osThreadNew+0xca>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	68db      	ldr	r3, [r3, #12]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d108      	bne.n	800b74e <osThreadNew+0xca>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	691b      	ldr	r3, [r3, #16]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d104      	bne.n	800b74e <osThreadNew+0xca>
          mem = 0;
 800b744:	2300      	movs	r3, #0
 800b746:	61bb      	str	r3, [r7, #24]
 800b748:	e001      	b.n	800b74e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b74a:	2300      	movs	r3, #0
 800b74c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	2b01      	cmp	r3, #1
 800b752:	d110      	bne.n	800b776 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b75c:	9202      	str	r2, [sp, #8]
 800b75e:	9301      	str	r3, [sp, #4]
 800b760:	69fb      	ldr	r3, [r7, #28]
 800b762:	9300      	str	r3, [sp, #0]
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	6a3a      	ldr	r2, [r7, #32]
 800b768:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b76a:	68f8      	ldr	r0, [r7, #12]
 800b76c:	f001 f8a8 	bl	800c8c0 <xTaskCreateStatic>
 800b770:	4603      	mov	r3, r0
 800b772:	613b      	str	r3, [r7, #16]
 800b774:	e013      	b.n	800b79e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b776:	69bb      	ldr	r3, [r7, #24]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d110      	bne.n	800b79e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b77c:	6a3b      	ldr	r3, [r7, #32]
 800b77e:	b29a      	uxth	r2, r3
 800b780:	f107 0310 	add.w	r3, r7, #16
 800b784:	9301      	str	r3, [sp, #4]
 800b786:	69fb      	ldr	r3, [r7, #28]
 800b788:	9300      	str	r3, [sp, #0]
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b78e:	68f8      	ldr	r0, [r7, #12]
 800b790:	f001 f8f6 	bl	800c980 <xTaskCreate>
 800b794:	4603      	mov	r3, r0
 800b796:	2b01      	cmp	r3, #1
 800b798:	d001      	beq.n	800b79e <osThreadNew+0x11a>
            hTask = NULL;
 800b79a:	2300      	movs	r3, #0
 800b79c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b79e:	693b      	ldr	r3, [r7, #16]
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3728      	adds	r7, #40	@ 0x28
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7ae:	f3ef 8305 	mrs	r3, IPSR
 800b7b2:	603b      	str	r3, [r7, #0]
  return(result);
 800b7b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d003      	beq.n	800b7c2 <osThreadYield+0x1a>
    stat = osErrorISR;
 800b7ba:	f06f 0305 	mvn.w	r3, #5
 800b7be:	607b      	str	r3, [r7, #4]
 800b7c0:	e009      	b.n	800b7d6 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800b7c6:	4b07      	ldr	r3, [pc, #28]	@ (800b7e4 <osThreadYield+0x3c>)
 800b7c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7cc:	601a      	str	r2, [r3, #0]
 800b7ce:	f3bf 8f4f 	dsb	sy
 800b7d2:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800b7d6:	687b      	ldr	r3, [r7, #4]
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	370c      	adds	r7, #12
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr
 800b7e4:	e000ed04 	.word	0xe000ed04

0800b7e8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b084      	sub	sp, #16
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7f0:	f3ef 8305 	mrs	r3, IPSR
 800b7f4:	60bb      	str	r3, [r7, #8]
  return(result);
 800b7f6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d003      	beq.n	800b804 <osDelay+0x1c>
    stat = osErrorISR;
 800b7fc:	f06f 0305 	mvn.w	r3, #5
 800b800:	60fb      	str	r3, [r7, #12]
 800b802:	e007      	b.n	800b814 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b804:	2300      	movs	r3, #0
 800b806:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d002      	beq.n	800b814 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f001 f9fc 	bl	800cc0c <vTaskDelay>
    }
  }

  return (stat);
 800b814:	68fb      	ldr	r3, [r7, #12]
}
 800b816:	4618      	mov	r0, r3
 800b818:	3710      	adds	r7, #16
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}

0800b81e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b81e:	b580      	push	{r7, lr}
 800b820:	b08a      	sub	sp, #40	@ 0x28
 800b822:	af02      	add	r7, sp, #8
 800b824:	60f8      	str	r0, [r7, #12]
 800b826:	60b9      	str	r1, [r7, #8]
 800b828:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b82a:	2300      	movs	r3, #0
 800b82c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b82e:	f3ef 8305 	mrs	r3, IPSR
 800b832:	613b      	str	r3, [r7, #16]
  return(result);
 800b834:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b836:	2b00      	cmp	r3, #0
 800b838:	d15f      	bne.n	800b8fa <osMessageQueueNew+0xdc>
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d05c      	beq.n	800b8fa <osMessageQueueNew+0xdc>
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d059      	beq.n	800b8fa <osMessageQueueNew+0xdc>
    mem = -1;
 800b846:	f04f 33ff 	mov.w	r3, #4294967295
 800b84a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d029      	beq.n	800b8a6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	689b      	ldr	r3, [r3, #8]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d012      	beq.n	800b880 <osMessageQueueNew+0x62>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	68db      	ldr	r3, [r3, #12]
 800b85e:	2b4f      	cmp	r3, #79	@ 0x4f
 800b860:	d90e      	bls.n	800b880 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b866:	2b00      	cmp	r3, #0
 800b868:	d00a      	beq.n	800b880 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	695a      	ldr	r2, [r3, #20]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	68b9      	ldr	r1, [r7, #8]
 800b872:	fb01 f303 	mul.w	r3, r1, r3
 800b876:	429a      	cmp	r2, r3
 800b878:	d302      	bcc.n	800b880 <osMessageQueueNew+0x62>
        mem = 1;
 800b87a:	2301      	movs	r3, #1
 800b87c:	61bb      	str	r3, [r7, #24]
 800b87e:	e014      	b.n	800b8aa <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	689b      	ldr	r3, [r3, #8]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d110      	bne.n	800b8aa <osMessageQueueNew+0x8c>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	68db      	ldr	r3, [r3, #12]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d10c      	bne.n	800b8aa <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b894:	2b00      	cmp	r3, #0
 800b896:	d108      	bne.n	800b8aa <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	695b      	ldr	r3, [r3, #20]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d104      	bne.n	800b8aa <osMessageQueueNew+0x8c>
          mem = 0;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	61bb      	str	r3, [r7, #24]
 800b8a4:	e001      	b.n	800b8aa <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b8aa:	69bb      	ldr	r3, [r7, #24]
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d10b      	bne.n	800b8c8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	691a      	ldr	r2, [r3, #16]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	689b      	ldr	r3, [r3, #8]
 800b8b8:	2100      	movs	r1, #0
 800b8ba:	9100      	str	r1, [sp, #0]
 800b8bc:	68b9      	ldr	r1, [r7, #8]
 800b8be:	68f8      	ldr	r0, [r7, #12]
 800b8c0:	f000 fa72 	bl	800bda8 <xQueueGenericCreateStatic>
 800b8c4:	61f8      	str	r0, [r7, #28]
 800b8c6:	e008      	b.n	800b8da <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b8c8:	69bb      	ldr	r3, [r7, #24]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d105      	bne.n	800b8da <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	68b9      	ldr	r1, [r7, #8]
 800b8d2:	68f8      	ldr	r0, [r7, #12]
 800b8d4:	f000 fae5 	bl	800bea2 <xQueueGenericCreate>
 800b8d8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b8da:	69fb      	ldr	r3, [r7, #28]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d00c      	beq.n	800b8fa <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d003      	beq.n	800b8ee <osMessageQueueNew+0xd0>
        name = attr->name;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	617b      	str	r3, [r7, #20]
 800b8ec:	e001      	b.n	800b8f2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b8f2:	6979      	ldr	r1, [r7, #20]
 800b8f4:	69f8      	ldr	r0, [r7, #28]
 800b8f6:	f000 ff85 	bl	800c804 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b8fa:	69fb      	ldr	r3, [r7, #28]
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3720      	adds	r7, #32
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b904:	b580      	push	{r7, lr}
 800b906:	b088      	sub	sp, #32
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	603b      	str	r3, [r7, #0]
 800b910:	4613      	mov	r3, r2
 800b912:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b918:	2300      	movs	r3, #0
 800b91a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b91c:	f3ef 8305 	mrs	r3, IPSR
 800b920:	617b      	str	r3, [r7, #20]
  return(result);
 800b922:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b924:	2b00      	cmp	r3, #0
 800b926:	d028      	beq.n	800b97a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b928:	69bb      	ldr	r3, [r7, #24]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d005      	beq.n	800b93a <osMessageQueuePut+0x36>
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d002      	beq.n	800b93a <osMessageQueuePut+0x36>
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d003      	beq.n	800b942 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b93a:	f06f 0303 	mvn.w	r3, #3
 800b93e:	61fb      	str	r3, [r7, #28]
 800b940:	e038      	b.n	800b9b4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b942:	2300      	movs	r3, #0
 800b944:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b946:	f107 0210 	add.w	r2, r7, #16
 800b94a:	2300      	movs	r3, #0
 800b94c:	68b9      	ldr	r1, [r7, #8]
 800b94e:	69b8      	ldr	r0, [r7, #24]
 800b950:	f000 fc08 	bl	800c164 <xQueueGenericSendFromISR>
 800b954:	4603      	mov	r3, r0
 800b956:	2b01      	cmp	r3, #1
 800b958:	d003      	beq.n	800b962 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b95a:	f06f 0302 	mvn.w	r3, #2
 800b95e:	61fb      	str	r3, [r7, #28]
 800b960:	e028      	b.n	800b9b4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d025      	beq.n	800b9b4 <osMessageQueuePut+0xb0>
 800b968:	4b15      	ldr	r3, [pc, #84]	@ (800b9c0 <osMessageQueuePut+0xbc>)
 800b96a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b96e:	601a      	str	r2, [r3, #0]
 800b970:	f3bf 8f4f 	dsb	sy
 800b974:	f3bf 8f6f 	isb	sy
 800b978:	e01c      	b.n	800b9b4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b97a:	69bb      	ldr	r3, [r7, #24]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d002      	beq.n	800b986 <osMessageQueuePut+0x82>
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d103      	bne.n	800b98e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b986:	f06f 0303 	mvn.w	r3, #3
 800b98a:	61fb      	str	r3, [r7, #28]
 800b98c:	e012      	b.n	800b9b4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b98e:	2300      	movs	r3, #0
 800b990:	683a      	ldr	r2, [r7, #0]
 800b992:	68b9      	ldr	r1, [r7, #8]
 800b994:	69b8      	ldr	r0, [r7, #24]
 800b996:	f000 fae3 	bl	800bf60 <xQueueGenericSend>
 800b99a:	4603      	mov	r3, r0
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d009      	beq.n	800b9b4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d003      	beq.n	800b9ae <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b9a6:	f06f 0301 	mvn.w	r3, #1
 800b9aa:	61fb      	str	r3, [r7, #28]
 800b9ac:	e002      	b.n	800b9b4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b9ae:	f06f 0302 	mvn.w	r3, #2
 800b9b2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b9b4:	69fb      	ldr	r3, [r7, #28]
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3720      	adds	r7, #32
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	e000ed04 	.word	0xe000ed04

0800b9c4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b088      	sub	sp, #32
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	60b9      	str	r1, [r7, #8]
 800b9ce:	607a      	str	r2, [r7, #4]
 800b9d0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9da:	f3ef 8305 	mrs	r3, IPSR
 800b9de:	617b      	str	r3, [r7, #20]
  return(result);
 800b9e0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d028      	beq.n	800ba38 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b9e6:	69bb      	ldr	r3, [r7, #24]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d005      	beq.n	800b9f8 <osMessageQueueGet+0x34>
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d002      	beq.n	800b9f8 <osMessageQueueGet+0x34>
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d003      	beq.n	800ba00 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b9f8:	f06f 0303 	mvn.w	r3, #3
 800b9fc:	61fb      	str	r3, [r7, #28]
 800b9fe:	e037      	b.n	800ba70 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ba00:	2300      	movs	r3, #0
 800ba02:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ba04:	f107 0310 	add.w	r3, r7, #16
 800ba08:	461a      	mov	r2, r3
 800ba0a:	68b9      	ldr	r1, [r7, #8]
 800ba0c:	69b8      	ldr	r0, [r7, #24]
 800ba0e:	f000 fd29 	bl	800c464 <xQueueReceiveFromISR>
 800ba12:	4603      	mov	r3, r0
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d003      	beq.n	800ba20 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800ba18:	f06f 0302 	mvn.w	r3, #2
 800ba1c:	61fb      	str	r3, [r7, #28]
 800ba1e:	e027      	b.n	800ba70 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d024      	beq.n	800ba70 <osMessageQueueGet+0xac>
 800ba26:	4b15      	ldr	r3, [pc, #84]	@ (800ba7c <osMessageQueueGet+0xb8>)
 800ba28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba2c:	601a      	str	r2, [r3, #0]
 800ba2e:	f3bf 8f4f 	dsb	sy
 800ba32:	f3bf 8f6f 	isb	sy
 800ba36:	e01b      	b.n	800ba70 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ba38:	69bb      	ldr	r3, [r7, #24]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d002      	beq.n	800ba44 <osMessageQueueGet+0x80>
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d103      	bne.n	800ba4c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800ba44:	f06f 0303 	mvn.w	r3, #3
 800ba48:	61fb      	str	r3, [r7, #28]
 800ba4a:	e011      	b.n	800ba70 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ba4c:	683a      	ldr	r2, [r7, #0]
 800ba4e:	68b9      	ldr	r1, [r7, #8]
 800ba50:	69b8      	ldr	r0, [r7, #24]
 800ba52:	f000 fc25 	bl	800c2a0 <xQueueReceive>
 800ba56:	4603      	mov	r3, r0
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d009      	beq.n	800ba70 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d003      	beq.n	800ba6a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800ba62:	f06f 0301 	mvn.w	r3, #1
 800ba66:	61fb      	str	r3, [r7, #28]
 800ba68:	e002      	b.n	800ba70 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800ba6a:	f06f 0302 	mvn.w	r3, #2
 800ba6e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ba70:	69fb      	ldr	r3, [r7, #28]
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3720      	adds	r7, #32
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	e000ed04 	.word	0xe000ed04

0800ba80 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b086      	sub	sp, #24
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d102      	bne.n	800ba98 <osMessageQueueGetCount+0x18>
    count = 0U;
 800ba92:	2300      	movs	r3, #0
 800ba94:	617b      	str	r3, [r7, #20]
 800ba96:	e00e      	b.n	800bab6 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba98:	f3ef 8305 	mrs	r3, IPSR
 800ba9c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba9e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d004      	beq.n	800baae <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800baa4:	6938      	ldr	r0, [r7, #16]
 800baa6:	f000 fd7e 	bl	800c5a6 <uxQueueMessagesWaitingFromISR>
 800baaa:	6178      	str	r0, [r7, #20]
 800baac:	e003      	b.n	800bab6 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800baae:	6938      	ldr	r0, [r7, #16]
 800bab0:	f000 fd5a 	bl	800c568 <uxQueueMessagesWaiting>
 800bab4:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800bab6:	697b      	ldr	r3, [r7, #20]
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3718      	adds	r7, #24
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bacc:	f3ef 8305 	mrs	r3, IPSR
 800bad0:	60fb      	str	r3, [r7, #12]
  return(result);
 800bad2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d003      	beq.n	800bae0 <osMessageQueueReset+0x20>
    stat = osErrorISR;
 800bad8:	f06f 0305 	mvn.w	r3, #5
 800badc:	617b      	str	r3, [r7, #20]
 800bade:	e00c      	b.n	800bafa <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d103      	bne.n	800baee <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 800bae6:	f06f 0303 	mvn.w	r3, #3
 800baea:	617b      	str	r3, [r7, #20]
 800baec:	e005      	b.n	800bafa <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 800baee:	2300      	movs	r3, #0
 800baf0:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 800baf2:	2100      	movs	r1, #0
 800baf4:	6938      	ldr	r0, [r7, #16]
 800baf6:	f000 f8ed 	bl	800bcd4 <xQueueGenericReset>
  }

  return (stat);
 800bafa:	697b      	ldr	r3, [r7, #20]
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3718      	adds	r7, #24
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bb04:	b480      	push	{r7}
 800bb06:	b085      	sub	sp, #20
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	4a07      	ldr	r2, [pc, #28]	@ (800bb30 <vApplicationGetIdleTaskMemory+0x2c>)
 800bb14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	4a06      	ldr	r2, [pc, #24]	@ (800bb34 <vApplicationGetIdleTaskMemory+0x30>)
 800bb1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2280      	movs	r2, #128	@ 0x80
 800bb20:	601a      	str	r2, [r3, #0]
}
 800bb22:	bf00      	nop
 800bb24:	3714      	adds	r7, #20
 800bb26:	46bd      	mov	sp, r7
 800bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2c:	4770      	bx	lr
 800bb2e:	bf00      	nop
 800bb30:	20000c0c 	.word	0x20000c0c
 800bb34:	20000c68 	.word	0x20000c68

0800bb38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bb38:	b480      	push	{r7}
 800bb3a:	b085      	sub	sp, #20
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	4a07      	ldr	r2, [pc, #28]	@ (800bb64 <vApplicationGetTimerTaskMemory+0x2c>)
 800bb48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	4a06      	ldr	r2, [pc, #24]	@ (800bb68 <vApplicationGetTimerTaskMemory+0x30>)
 800bb4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bb56:	601a      	str	r2, [r3, #0]
}
 800bb58:	bf00      	nop
 800bb5a:	3714      	adds	r7, #20
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr
 800bb64:	20000e68 	.word	0x20000e68
 800bb68:	20000ec4 	.word	0x20000ec4

0800bb6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b083      	sub	sp, #12
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f103 0208 	add.w	r2, r3, #8
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f04f 32ff 	mov.w	r2, #4294967295
 800bb84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f103 0208 	add.w	r2, r3, #8
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f103 0208 	add.w	r2, r3, #8
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bba0:	bf00      	nop
 800bba2:	370c      	adds	r7, #12
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bbac:	b480      	push	{r7}
 800bbae:	b083      	sub	sp, #12
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bbba:	bf00      	nop
 800bbbc:	370c      	adds	r7, #12
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc4:	4770      	bx	lr

0800bbc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bbc6:	b480      	push	{r7}
 800bbc8:	b085      	sub	sp, #20
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
 800bbce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	68fa      	ldr	r2, [r7, #12]
 800bbda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	689a      	ldr	r2, [r3, #8]
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	689b      	ldr	r3, [r3, #8]
 800bbe8:	683a      	ldr	r2, [r7, #0]
 800bbea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	683a      	ldr	r2, [r7, #0]
 800bbf0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	1c5a      	adds	r2, r3, #1
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	601a      	str	r2, [r3, #0]
}
 800bc02:	bf00      	nop
 800bc04:	3714      	adds	r7, #20
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr

0800bc0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc0e:	b480      	push	{r7}
 800bc10:	b085      	sub	sp, #20
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
 800bc16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc24:	d103      	bne.n	800bc2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	691b      	ldr	r3, [r3, #16]
 800bc2a:	60fb      	str	r3, [r7, #12]
 800bc2c:	e00c      	b.n	800bc48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	3308      	adds	r3, #8
 800bc32:	60fb      	str	r3, [r7, #12]
 800bc34:	e002      	b.n	800bc3c <vListInsert+0x2e>
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	60fb      	str	r3, [r7, #12]
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	68ba      	ldr	r2, [r7, #8]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d2f6      	bcs.n	800bc36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	685a      	ldr	r2, [r3, #4]
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	685b      	ldr	r3, [r3, #4]
 800bc54:	683a      	ldr	r2, [r7, #0]
 800bc56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	68fa      	ldr	r2, [r7, #12]
 800bc5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	683a      	ldr	r2, [r7, #0]
 800bc62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	687a      	ldr	r2, [r7, #4]
 800bc68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	1c5a      	adds	r2, r3, #1
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	601a      	str	r2, [r3, #0]
}
 800bc74:	bf00      	nop
 800bc76:	3714      	adds	r7, #20
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr

0800bc80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bc80:	b480      	push	{r7}
 800bc82:	b085      	sub	sp, #20
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	691b      	ldr	r3, [r3, #16]
 800bc8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	6892      	ldr	r2, [r2, #8]
 800bc96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	689b      	ldr	r3, [r3, #8]
 800bc9c:	687a      	ldr	r2, [r7, #4]
 800bc9e:	6852      	ldr	r2, [r2, #4]
 800bca0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	685b      	ldr	r3, [r3, #4]
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d103      	bne.n	800bcb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	689a      	ldr	r2, [r3, #8]
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	1e5a      	subs	r2, r3, #1
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3714      	adds	r7, #20
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d10b      	bne.n	800bd00 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcec:	f383 8811 	msr	BASEPRI, r3
 800bcf0:	f3bf 8f6f 	isb	sy
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bcfa:	bf00      	nop
 800bcfc:	bf00      	nop
 800bcfe:	e7fd      	b.n	800bcfc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bd00:	f002 f972 	bl	800dfe8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681a      	ldr	r2, [r3, #0]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd0c:	68f9      	ldr	r1, [r7, #12]
 800bd0e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bd10:	fb01 f303 	mul.w	r3, r1, r3
 800bd14:	441a      	add	r2, r3
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681a      	ldr	r2, [r3, #0]
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd30:	3b01      	subs	r3, #1
 800bd32:	68f9      	ldr	r1, [r7, #12]
 800bd34:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bd36:	fb01 f303 	mul.w	r3, r1, r3
 800bd3a:	441a      	add	r2, r3
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	22ff      	movs	r2, #255	@ 0xff
 800bd44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	22ff      	movs	r2, #255	@ 0xff
 800bd4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d114      	bne.n	800bd80 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	691b      	ldr	r3, [r3, #16]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d01a      	beq.n	800bd94 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	3310      	adds	r3, #16
 800bd62:	4618      	mov	r0, r3
 800bd64:	f001 fa16 	bl	800d194 <xTaskRemoveFromEventList>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d012      	beq.n	800bd94 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bd6e:	4b0d      	ldr	r3, [pc, #52]	@ (800bda4 <xQueueGenericReset+0xd0>)
 800bd70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd74:	601a      	str	r2, [r3, #0]
 800bd76:	f3bf 8f4f 	dsb	sy
 800bd7a:	f3bf 8f6f 	isb	sy
 800bd7e:	e009      	b.n	800bd94 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	3310      	adds	r3, #16
 800bd84:	4618      	mov	r0, r3
 800bd86:	f7ff fef1 	bl	800bb6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	3324      	adds	r3, #36	@ 0x24
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7ff feec 	bl	800bb6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bd94:	f002 f95a 	bl	800e04c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bd98:	2301      	movs	r3, #1
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3710      	adds	r7, #16
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop
 800bda4:	e000ed04 	.word	0xe000ed04

0800bda8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b08e      	sub	sp, #56	@ 0x38
 800bdac:	af02      	add	r7, sp, #8
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	607a      	str	r2, [r7, #4]
 800bdb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d10b      	bne.n	800bdd4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800bdbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdc0:	f383 8811 	msr	BASEPRI, r3
 800bdc4:	f3bf 8f6f 	isb	sy
 800bdc8:	f3bf 8f4f 	dsb	sy
 800bdcc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bdce:	bf00      	nop
 800bdd0:	bf00      	nop
 800bdd2:	e7fd      	b.n	800bdd0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d10b      	bne.n	800bdf2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800bdda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdde:	f383 8811 	msr	BASEPRI, r3
 800bde2:	f3bf 8f6f 	isb	sy
 800bde6:	f3bf 8f4f 	dsb	sy
 800bdea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bdec:	bf00      	nop
 800bdee:	bf00      	nop
 800bdf0:	e7fd      	b.n	800bdee <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d002      	beq.n	800bdfe <xQueueGenericCreateStatic+0x56>
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d001      	beq.n	800be02 <xQueueGenericCreateStatic+0x5a>
 800bdfe:	2301      	movs	r3, #1
 800be00:	e000      	b.n	800be04 <xQueueGenericCreateStatic+0x5c>
 800be02:	2300      	movs	r3, #0
 800be04:	2b00      	cmp	r3, #0
 800be06:	d10b      	bne.n	800be20 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800be08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be0c:	f383 8811 	msr	BASEPRI, r3
 800be10:	f3bf 8f6f 	isb	sy
 800be14:	f3bf 8f4f 	dsb	sy
 800be18:	623b      	str	r3, [r7, #32]
}
 800be1a:	bf00      	nop
 800be1c:	bf00      	nop
 800be1e:	e7fd      	b.n	800be1c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d102      	bne.n	800be2c <xQueueGenericCreateStatic+0x84>
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d101      	bne.n	800be30 <xQueueGenericCreateStatic+0x88>
 800be2c:	2301      	movs	r3, #1
 800be2e:	e000      	b.n	800be32 <xQueueGenericCreateStatic+0x8a>
 800be30:	2300      	movs	r3, #0
 800be32:	2b00      	cmp	r3, #0
 800be34:	d10b      	bne.n	800be4e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800be36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be3a:	f383 8811 	msr	BASEPRI, r3
 800be3e:	f3bf 8f6f 	isb	sy
 800be42:	f3bf 8f4f 	dsb	sy
 800be46:	61fb      	str	r3, [r7, #28]
}
 800be48:	bf00      	nop
 800be4a:	bf00      	nop
 800be4c:	e7fd      	b.n	800be4a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800be4e:	2350      	movs	r3, #80	@ 0x50
 800be50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	2b50      	cmp	r3, #80	@ 0x50
 800be56:	d00b      	beq.n	800be70 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800be58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be5c:	f383 8811 	msr	BASEPRI, r3
 800be60:	f3bf 8f6f 	isb	sy
 800be64:	f3bf 8f4f 	dsb	sy
 800be68:	61bb      	str	r3, [r7, #24]
}
 800be6a:	bf00      	nop
 800be6c:	bf00      	nop
 800be6e:	e7fd      	b.n	800be6c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800be70:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800be76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d00d      	beq.n	800be98 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800be7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be7e:	2201      	movs	r2, #1
 800be80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800be84:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800be88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be8a:	9300      	str	r3, [sp, #0]
 800be8c:	4613      	mov	r3, r2
 800be8e:	687a      	ldr	r2, [r7, #4]
 800be90:	68b9      	ldr	r1, [r7, #8]
 800be92:	68f8      	ldr	r0, [r7, #12]
 800be94:	f000 f840 	bl	800bf18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800be98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3730      	adds	r7, #48	@ 0x30
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}

0800bea2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bea2:	b580      	push	{r7, lr}
 800bea4:	b08a      	sub	sp, #40	@ 0x28
 800bea6:	af02      	add	r7, sp, #8
 800bea8:	60f8      	str	r0, [r7, #12]
 800beaa:	60b9      	str	r1, [r7, #8]
 800beac:	4613      	mov	r3, r2
 800beae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d10b      	bne.n	800bece <xQueueGenericCreate+0x2c>
	__asm volatile
 800beb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beba:	f383 8811 	msr	BASEPRI, r3
 800bebe:	f3bf 8f6f 	isb	sy
 800bec2:	f3bf 8f4f 	dsb	sy
 800bec6:	613b      	str	r3, [r7, #16]
}
 800bec8:	bf00      	nop
 800beca:	bf00      	nop
 800becc:	e7fd      	b.n	800beca <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	68ba      	ldr	r2, [r7, #8]
 800bed2:	fb02 f303 	mul.w	r3, r2, r3
 800bed6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bed8:	69fb      	ldr	r3, [r7, #28]
 800beda:	3350      	adds	r3, #80	@ 0x50
 800bedc:	4618      	mov	r0, r3
 800bede:	f002 f9a5 	bl	800e22c <pvPortMalloc>
 800bee2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bee4:	69bb      	ldr	r3, [r7, #24]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d011      	beq.n	800bf0e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800beea:	69bb      	ldr	r3, [r7, #24]
 800beec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	3350      	adds	r3, #80	@ 0x50
 800bef2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bef4:	69bb      	ldr	r3, [r7, #24]
 800bef6:	2200      	movs	r2, #0
 800bef8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800befc:	79fa      	ldrb	r2, [r7, #7]
 800befe:	69bb      	ldr	r3, [r7, #24]
 800bf00:	9300      	str	r3, [sp, #0]
 800bf02:	4613      	mov	r3, r2
 800bf04:	697a      	ldr	r2, [r7, #20]
 800bf06:	68b9      	ldr	r1, [r7, #8]
 800bf08:	68f8      	ldr	r0, [r7, #12]
 800bf0a:	f000 f805 	bl	800bf18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bf0e:	69bb      	ldr	r3, [r7, #24]
	}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3720      	adds	r7, #32
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b084      	sub	sp, #16
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	60b9      	str	r1, [r7, #8]
 800bf22:	607a      	str	r2, [r7, #4]
 800bf24:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d103      	bne.n	800bf34 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bf2c:	69bb      	ldr	r3, [r7, #24]
 800bf2e:	69ba      	ldr	r2, [r7, #24]
 800bf30:	601a      	str	r2, [r3, #0]
 800bf32:	e002      	b.n	800bf3a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bf34:	69bb      	ldr	r3, [r7, #24]
 800bf36:	687a      	ldr	r2, [r7, #4]
 800bf38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bf3a:	69bb      	ldr	r3, [r7, #24]
 800bf3c:	68fa      	ldr	r2, [r7, #12]
 800bf3e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bf40:	69bb      	ldr	r3, [r7, #24]
 800bf42:	68ba      	ldr	r2, [r7, #8]
 800bf44:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bf46:	2101      	movs	r1, #1
 800bf48:	69b8      	ldr	r0, [r7, #24]
 800bf4a:	f7ff fec3 	bl	800bcd4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bf4e:	69bb      	ldr	r3, [r7, #24]
 800bf50:	78fa      	ldrb	r2, [r7, #3]
 800bf52:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bf56:	bf00      	nop
 800bf58:	3710      	adds	r7, #16
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
	...

0800bf60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b08e      	sub	sp, #56	@ 0x38
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	607a      	str	r2, [r7, #4]
 800bf6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bf76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d10b      	bne.n	800bf94 <xQueueGenericSend+0x34>
	__asm volatile
 800bf7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf80:	f383 8811 	msr	BASEPRI, r3
 800bf84:	f3bf 8f6f 	isb	sy
 800bf88:	f3bf 8f4f 	dsb	sy
 800bf8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bf8e:	bf00      	nop
 800bf90:	bf00      	nop
 800bf92:	e7fd      	b.n	800bf90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d103      	bne.n	800bfa2 <xQueueGenericSend+0x42>
 800bf9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d101      	bne.n	800bfa6 <xQueueGenericSend+0x46>
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e000      	b.n	800bfa8 <xQueueGenericSend+0x48>
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d10b      	bne.n	800bfc4 <xQueueGenericSend+0x64>
	__asm volatile
 800bfac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfb0:	f383 8811 	msr	BASEPRI, r3
 800bfb4:	f3bf 8f6f 	isb	sy
 800bfb8:	f3bf 8f4f 	dsb	sy
 800bfbc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bfbe:	bf00      	nop
 800bfc0:	bf00      	nop
 800bfc2:	e7fd      	b.n	800bfc0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	2b02      	cmp	r3, #2
 800bfc8:	d103      	bne.n	800bfd2 <xQueueGenericSend+0x72>
 800bfca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	d101      	bne.n	800bfd6 <xQueueGenericSend+0x76>
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	e000      	b.n	800bfd8 <xQueueGenericSend+0x78>
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d10b      	bne.n	800bff4 <xQueueGenericSend+0x94>
	__asm volatile
 800bfdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfe0:	f383 8811 	msr	BASEPRI, r3
 800bfe4:	f3bf 8f6f 	isb	sy
 800bfe8:	f3bf 8f4f 	dsb	sy
 800bfec:	623b      	str	r3, [r7, #32]
}
 800bfee:	bf00      	nop
 800bff0:	bf00      	nop
 800bff2:	e7fd      	b.n	800bff0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bff4:	f001 fa8e 	bl	800d514 <xTaskGetSchedulerState>
 800bff8:	4603      	mov	r3, r0
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d102      	bne.n	800c004 <xQueueGenericSend+0xa4>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d101      	bne.n	800c008 <xQueueGenericSend+0xa8>
 800c004:	2301      	movs	r3, #1
 800c006:	e000      	b.n	800c00a <xQueueGenericSend+0xaa>
 800c008:	2300      	movs	r3, #0
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d10b      	bne.n	800c026 <xQueueGenericSend+0xc6>
	__asm volatile
 800c00e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c012:	f383 8811 	msr	BASEPRI, r3
 800c016:	f3bf 8f6f 	isb	sy
 800c01a:	f3bf 8f4f 	dsb	sy
 800c01e:	61fb      	str	r3, [r7, #28]
}
 800c020:	bf00      	nop
 800c022:	bf00      	nop
 800c024:	e7fd      	b.n	800c022 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c026:	f001 ffdf 	bl	800dfe8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c02a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c02c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c032:	429a      	cmp	r2, r3
 800c034:	d302      	bcc.n	800c03c <xQueueGenericSend+0xdc>
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	2b02      	cmp	r3, #2
 800c03a:	d129      	bne.n	800c090 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c03c:	683a      	ldr	r2, [r7, #0]
 800c03e:	68b9      	ldr	r1, [r7, #8]
 800c040:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c042:	f000 facf 	bl	800c5e4 <prvCopyDataToQueue>
 800c046:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c04a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d010      	beq.n	800c072 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c052:	3324      	adds	r3, #36	@ 0x24
 800c054:	4618      	mov	r0, r3
 800c056:	f001 f89d 	bl	800d194 <xTaskRemoveFromEventList>
 800c05a:	4603      	mov	r3, r0
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d013      	beq.n	800c088 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c060:	4b3f      	ldr	r3, [pc, #252]	@ (800c160 <xQueueGenericSend+0x200>)
 800c062:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c066:	601a      	str	r2, [r3, #0]
 800c068:	f3bf 8f4f 	dsb	sy
 800c06c:	f3bf 8f6f 	isb	sy
 800c070:	e00a      	b.n	800c088 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c074:	2b00      	cmp	r3, #0
 800c076:	d007      	beq.n	800c088 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c078:	4b39      	ldr	r3, [pc, #228]	@ (800c160 <xQueueGenericSend+0x200>)
 800c07a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c07e:	601a      	str	r2, [r3, #0]
 800c080:	f3bf 8f4f 	dsb	sy
 800c084:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c088:	f001 ffe0 	bl	800e04c <vPortExitCritical>
				return pdPASS;
 800c08c:	2301      	movs	r3, #1
 800c08e:	e063      	b.n	800c158 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d103      	bne.n	800c09e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c096:	f001 ffd9 	bl	800e04c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c09a:	2300      	movs	r3, #0
 800c09c:	e05c      	b.n	800c158 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c09e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d106      	bne.n	800c0b2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c0a4:	f107 0314 	add.w	r3, r7, #20
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f001 f8d7 	bl	800d25c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c0b2:	f001 ffcb 	bl	800e04c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c0b6:	f000 fe47 	bl	800cd48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c0ba:	f001 ff95 	bl	800dfe8 <vPortEnterCritical>
 800c0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c0c4:	b25b      	sxtb	r3, r3
 800c0c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ca:	d103      	bne.n	800c0d4 <xQueueGenericSend+0x174>
 800c0cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c0da:	b25b      	sxtb	r3, r3
 800c0dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0e0:	d103      	bne.n	800c0ea <xQueueGenericSend+0x18a>
 800c0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c0ea:	f001 ffaf 	bl	800e04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c0ee:	1d3a      	adds	r2, r7, #4
 800c0f0:	f107 0314 	add.w	r3, r7, #20
 800c0f4:	4611      	mov	r1, r2
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f001 f8c6 	bl	800d288 <xTaskCheckForTimeOut>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d124      	bne.n	800c14c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c102:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c104:	f000 fb66 	bl	800c7d4 <prvIsQueueFull>
 800c108:	4603      	mov	r3, r0
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d018      	beq.n	800c140 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c110:	3310      	adds	r3, #16
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	4611      	mov	r1, r2
 800c116:	4618      	mov	r0, r3
 800c118:	f000 ffea 	bl	800d0f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c11c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c11e:	f000 faf1 	bl	800c704 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c122:	f000 fe1f 	bl	800cd64 <xTaskResumeAll>
 800c126:	4603      	mov	r3, r0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	f47f af7c 	bne.w	800c026 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c12e:	4b0c      	ldr	r3, [pc, #48]	@ (800c160 <xQueueGenericSend+0x200>)
 800c130:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c134:	601a      	str	r2, [r3, #0]
 800c136:	f3bf 8f4f 	dsb	sy
 800c13a:	f3bf 8f6f 	isb	sy
 800c13e:	e772      	b.n	800c026 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c140:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c142:	f000 fadf 	bl	800c704 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c146:	f000 fe0d 	bl	800cd64 <xTaskResumeAll>
 800c14a:	e76c      	b.n	800c026 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c14c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c14e:	f000 fad9 	bl	800c704 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c152:	f000 fe07 	bl	800cd64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c156:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3738      	adds	r7, #56	@ 0x38
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}
 800c160:	e000ed04 	.word	0xe000ed04

0800c164 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b090      	sub	sp, #64	@ 0x40
 800c168:	af00      	add	r7, sp, #0
 800c16a:	60f8      	str	r0, [r7, #12]
 800c16c:	60b9      	str	r1, [r7, #8]
 800c16e:	607a      	str	r2, [r7, #4]
 800c170:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d10b      	bne.n	800c194 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c17c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c180:	f383 8811 	msr	BASEPRI, r3
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	f3bf 8f4f 	dsb	sy
 800c18c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c18e:	bf00      	nop
 800c190:	bf00      	nop
 800c192:	e7fd      	b.n	800c190 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d103      	bne.n	800c1a2 <xQueueGenericSendFromISR+0x3e>
 800c19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c19c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d101      	bne.n	800c1a6 <xQueueGenericSendFromISR+0x42>
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	e000      	b.n	800c1a8 <xQueueGenericSendFromISR+0x44>
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d10b      	bne.n	800c1c4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c1ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1b0:	f383 8811 	msr	BASEPRI, r3
 800c1b4:	f3bf 8f6f 	isb	sy
 800c1b8:	f3bf 8f4f 	dsb	sy
 800c1bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c1be:	bf00      	nop
 800c1c0:	bf00      	nop
 800c1c2:	e7fd      	b.n	800c1c0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	2b02      	cmp	r3, #2
 800c1c8:	d103      	bne.n	800c1d2 <xQueueGenericSendFromISR+0x6e>
 800c1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d101      	bne.n	800c1d6 <xQueueGenericSendFromISR+0x72>
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	e000      	b.n	800c1d8 <xQueueGenericSendFromISR+0x74>
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d10b      	bne.n	800c1f4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c1dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1e0:	f383 8811 	msr	BASEPRI, r3
 800c1e4:	f3bf 8f6f 	isb	sy
 800c1e8:	f3bf 8f4f 	dsb	sy
 800c1ec:	623b      	str	r3, [r7, #32]
}
 800c1ee:	bf00      	nop
 800c1f0:	bf00      	nop
 800c1f2:	e7fd      	b.n	800c1f0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c1f4:	f001 ffd8 	bl	800e1a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c1f8:	f3ef 8211 	mrs	r2, BASEPRI
 800c1fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c200:	f383 8811 	msr	BASEPRI, r3
 800c204:	f3bf 8f6f 	isb	sy
 800c208:	f3bf 8f4f 	dsb	sy
 800c20c:	61fa      	str	r2, [r7, #28]
 800c20e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c210:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c212:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c216:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c21a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d302      	bcc.n	800c226 <xQueueGenericSendFromISR+0xc2>
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	2b02      	cmp	r3, #2
 800c224:	d12f      	bne.n	800c286 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c228:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c22c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c234:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c236:	683a      	ldr	r2, [r7, #0]
 800c238:	68b9      	ldr	r1, [r7, #8]
 800c23a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c23c:	f000 f9d2 	bl	800c5e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c240:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c244:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c248:	d112      	bne.n	800c270 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c24a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c24c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d016      	beq.n	800c280 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c254:	3324      	adds	r3, #36	@ 0x24
 800c256:	4618      	mov	r0, r3
 800c258:	f000 ff9c 	bl	800d194 <xTaskRemoveFromEventList>
 800c25c:	4603      	mov	r3, r0
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d00e      	beq.n	800c280 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d00b      	beq.n	800c280 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2201      	movs	r2, #1
 800c26c:	601a      	str	r2, [r3, #0]
 800c26e:	e007      	b.n	800c280 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c270:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c274:	3301      	adds	r3, #1
 800c276:	b2db      	uxtb	r3, r3
 800c278:	b25a      	sxtb	r2, r3
 800c27a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c27c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c280:	2301      	movs	r3, #1
 800c282:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c284:	e001      	b.n	800c28a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c286:	2300      	movs	r3, #0
 800c288:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c28a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c28c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c294:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3740      	adds	r7, #64	@ 0x40
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b08c      	sub	sp, #48	@ 0x30
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	60f8      	str	r0, [r7, #12]
 800c2a8:	60b9      	str	r1, [r7, #8]
 800c2aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c2b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d10b      	bne.n	800c2d2 <xQueueReceive+0x32>
	__asm volatile
 800c2ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2be:	f383 8811 	msr	BASEPRI, r3
 800c2c2:	f3bf 8f6f 	isb	sy
 800c2c6:	f3bf 8f4f 	dsb	sy
 800c2ca:	623b      	str	r3, [r7, #32]
}
 800c2cc:	bf00      	nop
 800c2ce:	bf00      	nop
 800c2d0:	e7fd      	b.n	800c2ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d103      	bne.n	800c2e0 <xQueueReceive+0x40>
 800c2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d101      	bne.n	800c2e4 <xQueueReceive+0x44>
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	e000      	b.n	800c2e6 <xQueueReceive+0x46>
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d10b      	bne.n	800c302 <xQueueReceive+0x62>
	__asm volatile
 800c2ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2ee:	f383 8811 	msr	BASEPRI, r3
 800c2f2:	f3bf 8f6f 	isb	sy
 800c2f6:	f3bf 8f4f 	dsb	sy
 800c2fa:	61fb      	str	r3, [r7, #28]
}
 800c2fc:	bf00      	nop
 800c2fe:	bf00      	nop
 800c300:	e7fd      	b.n	800c2fe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c302:	f001 f907 	bl	800d514 <xTaskGetSchedulerState>
 800c306:	4603      	mov	r3, r0
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d102      	bne.n	800c312 <xQueueReceive+0x72>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d101      	bne.n	800c316 <xQueueReceive+0x76>
 800c312:	2301      	movs	r3, #1
 800c314:	e000      	b.n	800c318 <xQueueReceive+0x78>
 800c316:	2300      	movs	r3, #0
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d10b      	bne.n	800c334 <xQueueReceive+0x94>
	__asm volatile
 800c31c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c320:	f383 8811 	msr	BASEPRI, r3
 800c324:	f3bf 8f6f 	isb	sy
 800c328:	f3bf 8f4f 	dsb	sy
 800c32c:	61bb      	str	r3, [r7, #24]
}
 800c32e:	bf00      	nop
 800c330:	bf00      	nop
 800c332:	e7fd      	b.n	800c330 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c334:	f001 fe58 	bl	800dfe8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c33a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c33c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c340:	2b00      	cmp	r3, #0
 800c342:	d01f      	beq.n	800c384 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c344:	68b9      	ldr	r1, [r7, #8]
 800c346:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c348:	f000 f9b6 	bl	800c6b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c34e:	1e5a      	subs	r2, r3, #1
 800c350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c352:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c356:	691b      	ldr	r3, [r3, #16]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d00f      	beq.n	800c37c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c35e:	3310      	adds	r3, #16
 800c360:	4618      	mov	r0, r3
 800c362:	f000 ff17 	bl	800d194 <xTaskRemoveFromEventList>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d007      	beq.n	800c37c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c36c:	4b3c      	ldr	r3, [pc, #240]	@ (800c460 <xQueueReceive+0x1c0>)
 800c36e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c372:	601a      	str	r2, [r3, #0]
 800c374:	f3bf 8f4f 	dsb	sy
 800c378:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c37c:	f001 fe66 	bl	800e04c <vPortExitCritical>
				return pdPASS;
 800c380:	2301      	movs	r3, #1
 800c382:	e069      	b.n	800c458 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d103      	bne.n	800c392 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c38a:	f001 fe5f 	bl	800e04c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c38e:	2300      	movs	r3, #0
 800c390:	e062      	b.n	800c458 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c394:	2b00      	cmp	r3, #0
 800c396:	d106      	bne.n	800c3a6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c398:	f107 0310 	add.w	r3, r7, #16
 800c39c:	4618      	mov	r0, r3
 800c39e:	f000 ff5d 	bl	800d25c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c3a6:	f001 fe51 	bl	800e04c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c3aa:	f000 fccd 	bl	800cd48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c3ae:	f001 fe1b 	bl	800dfe8 <vPortEnterCritical>
 800c3b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c3b8:	b25b      	sxtb	r3, r3
 800c3ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3be:	d103      	bne.n	800c3c8 <xQueueReceive+0x128>
 800c3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c3c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c3ce:	b25b      	sxtb	r3, r3
 800c3d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3d4:	d103      	bne.n	800c3de <xQueueReceive+0x13e>
 800c3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c3de:	f001 fe35 	bl	800e04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c3e2:	1d3a      	adds	r2, r7, #4
 800c3e4:	f107 0310 	add.w	r3, r7, #16
 800c3e8:	4611      	mov	r1, r2
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f000 ff4c 	bl	800d288 <xTaskCheckForTimeOut>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d123      	bne.n	800c43e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c3f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c3f8:	f000 f9d6 	bl	800c7a8 <prvIsQueueEmpty>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d017      	beq.n	800c432 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c404:	3324      	adds	r3, #36	@ 0x24
 800c406:	687a      	ldr	r2, [r7, #4]
 800c408:	4611      	mov	r1, r2
 800c40a:	4618      	mov	r0, r3
 800c40c:	f000 fe70 	bl	800d0f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c410:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c412:	f000 f977 	bl	800c704 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c416:	f000 fca5 	bl	800cd64 <xTaskResumeAll>
 800c41a:	4603      	mov	r3, r0
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d189      	bne.n	800c334 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c420:	4b0f      	ldr	r3, [pc, #60]	@ (800c460 <xQueueReceive+0x1c0>)
 800c422:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c426:	601a      	str	r2, [r3, #0]
 800c428:	f3bf 8f4f 	dsb	sy
 800c42c:	f3bf 8f6f 	isb	sy
 800c430:	e780      	b.n	800c334 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c432:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c434:	f000 f966 	bl	800c704 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c438:	f000 fc94 	bl	800cd64 <xTaskResumeAll>
 800c43c:	e77a      	b.n	800c334 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c43e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c440:	f000 f960 	bl	800c704 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c444:	f000 fc8e 	bl	800cd64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c448:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c44a:	f000 f9ad 	bl	800c7a8 <prvIsQueueEmpty>
 800c44e:	4603      	mov	r3, r0
 800c450:	2b00      	cmp	r3, #0
 800c452:	f43f af6f 	beq.w	800c334 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c456:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3730      	adds	r7, #48	@ 0x30
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}
 800c460:	e000ed04 	.word	0xe000ed04

0800c464 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b08e      	sub	sp, #56	@ 0x38
 800c468:	af00      	add	r7, sp, #0
 800c46a:	60f8      	str	r0, [r7, #12]
 800c46c:	60b9      	str	r1, [r7, #8]
 800c46e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c476:	2b00      	cmp	r3, #0
 800c478:	d10b      	bne.n	800c492 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800c47a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c47e:	f383 8811 	msr	BASEPRI, r3
 800c482:	f3bf 8f6f 	isb	sy
 800c486:	f3bf 8f4f 	dsb	sy
 800c48a:	623b      	str	r3, [r7, #32]
}
 800c48c:	bf00      	nop
 800c48e:	bf00      	nop
 800c490:	e7fd      	b.n	800c48e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d103      	bne.n	800c4a0 <xQueueReceiveFromISR+0x3c>
 800c498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c49a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d101      	bne.n	800c4a4 <xQueueReceiveFromISR+0x40>
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	e000      	b.n	800c4a6 <xQueueReceiveFromISR+0x42>
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d10b      	bne.n	800c4c2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800c4aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4ae:	f383 8811 	msr	BASEPRI, r3
 800c4b2:	f3bf 8f6f 	isb	sy
 800c4b6:	f3bf 8f4f 	dsb	sy
 800c4ba:	61fb      	str	r3, [r7, #28]
}
 800c4bc:	bf00      	nop
 800c4be:	bf00      	nop
 800c4c0:	e7fd      	b.n	800c4be <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c4c2:	f001 fe71 	bl	800e1a8 <vPortValidateInterruptPriority>
	__asm volatile
 800c4c6:	f3ef 8211 	mrs	r2, BASEPRI
 800c4ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4ce:	f383 8811 	msr	BASEPRI, r3
 800c4d2:	f3bf 8f6f 	isb	sy
 800c4d6:	f3bf 8f4f 	dsb	sy
 800c4da:	61ba      	str	r2, [r7, #24]
 800c4dc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c4de:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c4e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4e6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c4e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d02f      	beq.n	800c54e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c4ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c4f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c4f8:	68b9      	ldr	r1, [r7, #8]
 800c4fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c4fc:	f000 f8dc 	bl	800c6b8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c502:	1e5a      	subs	r2, r3, #1
 800c504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c506:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c508:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c50c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c510:	d112      	bne.n	800c538 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c514:	691b      	ldr	r3, [r3, #16]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d016      	beq.n	800c548 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c51c:	3310      	adds	r3, #16
 800c51e:	4618      	mov	r0, r3
 800c520:	f000 fe38 	bl	800d194 <xTaskRemoveFromEventList>
 800c524:	4603      	mov	r3, r0
 800c526:	2b00      	cmp	r3, #0
 800c528:	d00e      	beq.n	800c548 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d00b      	beq.n	800c548 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2201      	movs	r2, #1
 800c534:	601a      	str	r2, [r3, #0]
 800c536:	e007      	b.n	800c548 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c538:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c53c:	3301      	adds	r3, #1
 800c53e:	b2db      	uxtb	r3, r3
 800c540:	b25a      	sxtb	r2, r3
 800c542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c544:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c548:	2301      	movs	r3, #1
 800c54a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c54c:	e001      	b.n	800c552 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800c54e:	2300      	movs	r3, #0
 800c550:	637b      	str	r3, [r7, #52]	@ 0x34
 800c552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c554:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	f383 8811 	msr	BASEPRI, r3
}
 800c55c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c55e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c560:	4618      	mov	r0, r3
 800c562:	3738      	adds	r7, #56	@ 0x38
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b084      	sub	sp, #16
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d10b      	bne.n	800c58e <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800c576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c57a:	f383 8811 	msr	BASEPRI, r3
 800c57e:	f3bf 8f6f 	isb	sy
 800c582:	f3bf 8f4f 	dsb	sy
 800c586:	60bb      	str	r3, [r7, #8]
}
 800c588:	bf00      	nop
 800c58a:	bf00      	nop
 800c58c:	e7fd      	b.n	800c58a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800c58e:	f001 fd2b 	bl	800dfe8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c596:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800c598:	f001 fd58 	bl	800e04c <vPortExitCritical>

	return uxReturn;
 800c59c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3710      	adds	r7, #16
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}

0800c5a6 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800c5a6:	b480      	push	{r7}
 800c5a8:	b087      	sub	sp, #28
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d10b      	bne.n	800c5d0 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 800c5b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5bc:	f383 8811 	msr	BASEPRI, r3
 800c5c0:	f3bf 8f6f 	isb	sy
 800c5c4:	f3bf 8f4f 	dsb	sy
 800c5c8:	60fb      	str	r3, [r7, #12]
}
 800c5ca:	bf00      	nop
 800c5cc:	bf00      	nop
 800c5ce:	e7fd      	b.n	800c5cc <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5d4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800c5d6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c5d8:	4618      	mov	r0, r3
 800c5da:	371c      	adds	r7, #28
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr

0800c5e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b086      	sub	sp, #24
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	60f8      	str	r0, [r7, #12]
 800c5ec:	60b9      	str	r1, [r7, #8]
 800c5ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d10d      	bne.n	800c61e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d14d      	bne.n	800c6a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	689b      	ldr	r3, [r3, #8]
 800c60e:	4618      	mov	r0, r3
 800c610:	f000 ff9e 	bl	800d550 <xTaskPriorityDisinherit>
 800c614:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	2200      	movs	r2, #0
 800c61a:	609a      	str	r2, [r3, #8]
 800c61c:	e043      	b.n	800c6a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d119      	bne.n	800c658 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	6858      	ldr	r0, [r3, #4]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c62c:	461a      	mov	r2, r3
 800c62e:	68b9      	ldr	r1, [r7, #8]
 800c630:	f003 fd61 	bl	80100f6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	685a      	ldr	r2, [r3, #4]
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c63c:	441a      	add	r2, r3
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	685a      	ldr	r2, [r3, #4]
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	689b      	ldr	r3, [r3, #8]
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d32b      	bcc.n	800c6a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681a      	ldr	r2, [r3, #0]
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	605a      	str	r2, [r3, #4]
 800c656:	e026      	b.n	800c6a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	68d8      	ldr	r0, [r3, #12]
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c660:	461a      	mov	r2, r3
 800c662:	68b9      	ldr	r1, [r7, #8]
 800c664:	f003 fd47 	bl	80100f6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	68da      	ldr	r2, [r3, #12]
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c670:	425b      	negs	r3, r3
 800c672:	441a      	add	r2, r3
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	68da      	ldr	r2, [r3, #12]
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	429a      	cmp	r2, r3
 800c682:	d207      	bcs.n	800c694 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	689a      	ldr	r2, [r3, #8]
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c68c:	425b      	negs	r3, r3
 800c68e:	441a      	add	r2, r3
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2b02      	cmp	r3, #2
 800c698:	d105      	bne.n	800c6a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d002      	beq.n	800c6a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	3b01      	subs	r3, #1
 800c6a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	1c5a      	adds	r2, r3, #1
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c6ae:	697b      	ldr	r3, [r7, #20]
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	3718      	adds	r7, #24
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}

0800c6b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d018      	beq.n	800c6fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	68da      	ldr	r2, [r3, #12]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6d2:	441a      	add	r2, r3
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	68da      	ldr	r2, [r3, #12]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	689b      	ldr	r3, [r3, #8]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d303      	bcc.n	800c6ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681a      	ldr	r2, [r3, #0]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	68d9      	ldr	r1, [r3, #12]
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6f4:	461a      	mov	r2, r3
 800c6f6:	6838      	ldr	r0, [r7, #0]
 800c6f8:	f003 fcfd 	bl	80100f6 <memcpy>
	}
}
 800c6fc:	bf00      	nop
 800c6fe:	3708      	adds	r7, #8
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}

0800c704 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b084      	sub	sp, #16
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c70c:	f001 fc6c 	bl	800dfe8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c716:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c718:	e011      	b.n	800c73e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d012      	beq.n	800c748 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	3324      	adds	r3, #36	@ 0x24
 800c726:	4618      	mov	r0, r3
 800c728:	f000 fd34 	bl	800d194 <xTaskRemoveFromEventList>
 800c72c:	4603      	mov	r3, r0
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d001      	beq.n	800c736 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c732:	f000 fe0d 	bl	800d350 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c736:	7bfb      	ldrb	r3, [r7, #15]
 800c738:	3b01      	subs	r3, #1
 800c73a:	b2db      	uxtb	r3, r3
 800c73c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c73e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c742:	2b00      	cmp	r3, #0
 800c744:	dce9      	bgt.n	800c71a <prvUnlockQueue+0x16>
 800c746:	e000      	b.n	800c74a <prvUnlockQueue+0x46>
					break;
 800c748:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	22ff      	movs	r2, #255	@ 0xff
 800c74e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c752:	f001 fc7b 	bl	800e04c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c756:	f001 fc47 	bl	800dfe8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c760:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c762:	e011      	b.n	800c788 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	691b      	ldr	r3, [r3, #16]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d012      	beq.n	800c792 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	3310      	adds	r3, #16
 800c770:	4618      	mov	r0, r3
 800c772:	f000 fd0f 	bl	800d194 <xTaskRemoveFromEventList>
 800c776:	4603      	mov	r3, r0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d001      	beq.n	800c780 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c77c:	f000 fde8 	bl	800d350 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c780:	7bbb      	ldrb	r3, [r7, #14]
 800c782:	3b01      	subs	r3, #1
 800c784:	b2db      	uxtb	r3, r3
 800c786:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c788:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	dce9      	bgt.n	800c764 <prvUnlockQueue+0x60>
 800c790:	e000      	b.n	800c794 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c792:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	22ff      	movs	r2, #255	@ 0xff
 800c798:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c79c:	f001 fc56 	bl	800e04c <vPortExitCritical>
}
 800c7a0:	bf00      	nop
 800c7a2:	3710      	adds	r7, #16
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}

0800c7a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b084      	sub	sp, #16
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c7b0:	f001 fc1a 	bl	800dfe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d102      	bne.n	800c7c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c7bc:	2301      	movs	r3, #1
 800c7be:	60fb      	str	r3, [r7, #12]
 800c7c0:	e001      	b.n	800c7c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c7c6:	f001 fc41 	bl	800e04c <vPortExitCritical>

	return xReturn;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3710      	adds	r7, #16
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b084      	sub	sp, #16
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c7dc:	f001 fc04 	bl	800dfe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d102      	bne.n	800c7f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	60fb      	str	r3, [r7, #12]
 800c7f0:	e001      	b.n	800c7f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c7f6:	f001 fc29 	bl	800e04c <vPortExitCritical>

	return xReturn;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3710      	adds	r7, #16
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c804:	b480      	push	{r7}
 800c806:	b085      	sub	sp, #20
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c80e:	2300      	movs	r3, #0
 800c810:	60fb      	str	r3, [r7, #12]
 800c812:	e014      	b.n	800c83e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c814:	4a0f      	ldr	r2, [pc, #60]	@ (800c854 <vQueueAddToRegistry+0x50>)
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d10b      	bne.n	800c838 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c820:	490c      	ldr	r1, [pc, #48]	@ (800c854 <vQueueAddToRegistry+0x50>)
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	683a      	ldr	r2, [r7, #0]
 800c826:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c82a:	4a0a      	ldr	r2, [pc, #40]	@ (800c854 <vQueueAddToRegistry+0x50>)
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	00db      	lsls	r3, r3, #3
 800c830:	4413      	add	r3, r2
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c836:	e006      	b.n	800c846 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	3301      	adds	r3, #1
 800c83c:	60fb      	str	r3, [r7, #12]
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	2b07      	cmp	r3, #7
 800c842:	d9e7      	bls.n	800c814 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c844:	bf00      	nop
 800c846:	bf00      	nop
 800c848:	3714      	adds	r7, #20
 800c84a:	46bd      	mov	sp, r7
 800c84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c850:	4770      	bx	lr
 800c852:	bf00      	nop
 800c854:	200012c4 	.word	0x200012c4

0800c858 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b086      	sub	sp, #24
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	60f8      	str	r0, [r7, #12]
 800c860:	60b9      	str	r1, [r7, #8]
 800c862:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c868:	f001 fbbe 	bl	800dfe8 <vPortEnterCritical>
 800c86c:	697b      	ldr	r3, [r7, #20]
 800c86e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c872:	b25b      	sxtb	r3, r3
 800c874:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c878:	d103      	bne.n	800c882 <vQueueWaitForMessageRestricted+0x2a>
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	2200      	movs	r2, #0
 800c87e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c888:	b25b      	sxtb	r3, r3
 800c88a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c88e:	d103      	bne.n	800c898 <vQueueWaitForMessageRestricted+0x40>
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	2200      	movs	r2, #0
 800c894:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c898:	f001 fbd8 	bl	800e04c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d106      	bne.n	800c8b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	3324      	adds	r3, #36	@ 0x24
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	68b9      	ldr	r1, [r7, #8]
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f000 fc45 	bl	800d13c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c8b2:	6978      	ldr	r0, [r7, #20]
 800c8b4:	f7ff ff26 	bl	800c704 <prvUnlockQueue>
	}
 800c8b8:	bf00      	nop
 800c8ba:	3718      	adds	r7, #24
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}

0800c8c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b08e      	sub	sp, #56	@ 0x38
 800c8c4:	af04      	add	r7, sp, #16
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	60b9      	str	r1, [r7, #8]
 800c8ca:	607a      	str	r2, [r7, #4]
 800c8cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c8ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d10b      	bne.n	800c8ec <xTaskCreateStatic+0x2c>
	__asm volatile
 800c8d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8d8:	f383 8811 	msr	BASEPRI, r3
 800c8dc:	f3bf 8f6f 	isb	sy
 800c8e0:	f3bf 8f4f 	dsb	sy
 800c8e4:	623b      	str	r3, [r7, #32]
}
 800c8e6:	bf00      	nop
 800c8e8:	bf00      	nop
 800c8ea:	e7fd      	b.n	800c8e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c8ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d10b      	bne.n	800c90a <xTaskCreateStatic+0x4a>
	__asm volatile
 800c8f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8f6:	f383 8811 	msr	BASEPRI, r3
 800c8fa:	f3bf 8f6f 	isb	sy
 800c8fe:	f3bf 8f4f 	dsb	sy
 800c902:	61fb      	str	r3, [r7, #28]
}
 800c904:	bf00      	nop
 800c906:	bf00      	nop
 800c908:	e7fd      	b.n	800c906 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c90a:	235c      	movs	r3, #92	@ 0x5c
 800c90c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	2b5c      	cmp	r3, #92	@ 0x5c
 800c912:	d00b      	beq.n	800c92c <xTaskCreateStatic+0x6c>
	__asm volatile
 800c914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c918:	f383 8811 	msr	BASEPRI, r3
 800c91c:	f3bf 8f6f 	isb	sy
 800c920:	f3bf 8f4f 	dsb	sy
 800c924:	61bb      	str	r3, [r7, #24]
}
 800c926:	bf00      	nop
 800c928:	bf00      	nop
 800c92a:	e7fd      	b.n	800c928 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c92c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c92e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c930:	2b00      	cmp	r3, #0
 800c932:	d01e      	beq.n	800c972 <xTaskCreateStatic+0xb2>
 800c934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c936:	2b00      	cmp	r3, #0
 800c938:	d01b      	beq.n	800c972 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c93a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c93c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c93e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c940:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c942:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c946:	2202      	movs	r2, #2
 800c948:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c94c:	2300      	movs	r3, #0
 800c94e:	9303      	str	r3, [sp, #12]
 800c950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c952:	9302      	str	r3, [sp, #8]
 800c954:	f107 0314 	add.w	r3, r7, #20
 800c958:	9301      	str	r3, [sp, #4]
 800c95a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c95c:	9300      	str	r3, [sp, #0]
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	687a      	ldr	r2, [r7, #4]
 800c962:	68b9      	ldr	r1, [r7, #8]
 800c964:	68f8      	ldr	r0, [r7, #12]
 800c966:	f000 f850 	bl	800ca0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c96a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c96c:	f000 f8de 	bl	800cb2c <prvAddNewTaskToReadyList>
 800c970:	e001      	b.n	800c976 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c972:	2300      	movs	r3, #0
 800c974:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c976:	697b      	ldr	r3, [r7, #20]
	}
 800c978:	4618      	mov	r0, r3
 800c97a:	3728      	adds	r7, #40	@ 0x28
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c980:	b580      	push	{r7, lr}
 800c982:	b08c      	sub	sp, #48	@ 0x30
 800c984:	af04      	add	r7, sp, #16
 800c986:	60f8      	str	r0, [r7, #12]
 800c988:	60b9      	str	r1, [r7, #8]
 800c98a:	603b      	str	r3, [r7, #0]
 800c98c:	4613      	mov	r3, r2
 800c98e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c990:	88fb      	ldrh	r3, [r7, #6]
 800c992:	009b      	lsls	r3, r3, #2
 800c994:	4618      	mov	r0, r3
 800c996:	f001 fc49 	bl	800e22c <pvPortMalloc>
 800c99a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d00e      	beq.n	800c9c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c9a2:	205c      	movs	r0, #92	@ 0x5c
 800c9a4:	f001 fc42 	bl	800e22c <pvPortMalloc>
 800c9a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c9aa:	69fb      	ldr	r3, [r7, #28]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d003      	beq.n	800c9b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c9b0:	69fb      	ldr	r3, [r7, #28]
 800c9b2:	697a      	ldr	r2, [r7, #20]
 800c9b4:	631a      	str	r2, [r3, #48]	@ 0x30
 800c9b6:	e005      	b.n	800c9c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c9b8:	6978      	ldr	r0, [r7, #20]
 800c9ba:	f001 fd05 	bl	800e3c8 <vPortFree>
 800c9be:	e001      	b.n	800c9c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c9c4:	69fb      	ldr	r3, [r7, #28]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d017      	beq.n	800c9fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c9ca:	69fb      	ldr	r3, [r7, #28]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c9d2:	88fa      	ldrh	r2, [r7, #6]
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	9303      	str	r3, [sp, #12]
 800c9d8:	69fb      	ldr	r3, [r7, #28]
 800c9da:	9302      	str	r3, [sp, #8]
 800c9dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9de:	9301      	str	r3, [sp, #4]
 800c9e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9e2:	9300      	str	r3, [sp, #0]
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	68b9      	ldr	r1, [r7, #8]
 800c9e8:	68f8      	ldr	r0, [r7, #12]
 800c9ea:	f000 f80e 	bl	800ca0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c9ee:	69f8      	ldr	r0, [r7, #28]
 800c9f0:	f000 f89c 	bl	800cb2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	61bb      	str	r3, [r7, #24]
 800c9f8:	e002      	b.n	800ca00 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c9fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c9fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ca00:	69bb      	ldr	r3, [r7, #24]
	}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3720      	adds	r7, #32
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}

0800ca0a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ca0a:	b580      	push	{r7, lr}
 800ca0c:	b088      	sub	sp, #32
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	60f8      	str	r0, [r7, #12]
 800ca12:	60b9      	str	r1, [r7, #8]
 800ca14:	607a      	str	r2, [r7, #4]
 800ca16:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ca18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca1a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	009b      	lsls	r3, r3, #2
 800ca20:	461a      	mov	r2, r3
 800ca22:	21a5      	movs	r1, #165	@ 0xa5
 800ca24:	f003 fa94 	bl	800ff50 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ca28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca32:	3b01      	subs	r3, #1
 800ca34:	009b      	lsls	r3, r3, #2
 800ca36:	4413      	add	r3, r2
 800ca38:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ca3a:	69bb      	ldr	r3, [r7, #24]
 800ca3c:	f023 0307 	bic.w	r3, r3, #7
 800ca40:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ca42:	69bb      	ldr	r3, [r7, #24]
 800ca44:	f003 0307 	and.w	r3, r3, #7
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d00b      	beq.n	800ca64 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ca4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca50:	f383 8811 	msr	BASEPRI, r3
 800ca54:	f3bf 8f6f 	isb	sy
 800ca58:	f3bf 8f4f 	dsb	sy
 800ca5c:	617b      	str	r3, [r7, #20]
}
 800ca5e:	bf00      	nop
 800ca60:	bf00      	nop
 800ca62:	e7fd      	b.n	800ca60 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d01f      	beq.n	800caaa <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	61fb      	str	r3, [r7, #28]
 800ca6e:	e012      	b.n	800ca96 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ca70:	68ba      	ldr	r2, [r7, #8]
 800ca72:	69fb      	ldr	r3, [r7, #28]
 800ca74:	4413      	add	r3, r2
 800ca76:	7819      	ldrb	r1, [r3, #0]
 800ca78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca7a:	69fb      	ldr	r3, [r7, #28]
 800ca7c:	4413      	add	r3, r2
 800ca7e:	3334      	adds	r3, #52	@ 0x34
 800ca80:	460a      	mov	r2, r1
 800ca82:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ca84:	68ba      	ldr	r2, [r7, #8]
 800ca86:	69fb      	ldr	r3, [r7, #28]
 800ca88:	4413      	add	r3, r2
 800ca8a:	781b      	ldrb	r3, [r3, #0]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d006      	beq.n	800ca9e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ca90:	69fb      	ldr	r3, [r7, #28]
 800ca92:	3301      	adds	r3, #1
 800ca94:	61fb      	str	r3, [r7, #28]
 800ca96:	69fb      	ldr	r3, [r7, #28]
 800ca98:	2b0f      	cmp	r3, #15
 800ca9a:	d9e9      	bls.n	800ca70 <prvInitialiseNewTask+0x66>
 800ca9c:	e000      	b.n	800caa0 <prvInitialiseNewTask+0x96>
			{
				break;
 800ca9e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800caa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caa2:	2200      	movs	r2, #0
 800caa4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800caa8:	e003      	b.n	800cab2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800caaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caac:	2200      	movs	r2, #0
 800caae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cab4:	2b37      	cmp	r3, #55	@ 0x37
 800cab6:	d901      	bls.n	800cabc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cab8:	2337      	movs	r3, #55	@ 0x37
 800caba:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cabc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cabe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cac0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cac4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cac6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caca:	2200      	movs	r2, #0
 800cacc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cad0:	3304      	adds	r3, #4
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7ff f86a 	bl	800bbac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cada:	3318      	adds	r3, #24
 800cadc:	4618      	mov	r0, r3
 800cade:	f7ff f865 	bl	800bbac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cae6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800caee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caf0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800caf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800caf6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800caf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cafa:	2200      	movs	r2, #0
 800cafc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cafe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb00:	2200      	movs	r2, #0
 800cb02:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cb06:	683a      	ldr	r2, [r7, #0]
 800cb08:	68f9      	ldr	r1, [r7, #12]
 800cb0a:	69b8      	ldr	r0, [r7, #24]
 800cb0c:	f001 f93e 	bl	800dd8c <pxPortInitialiseStack>
 800cb10:	4602      	mov	r2, r0
 800cb12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb14:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cb16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d002      	beq.n	800cb22 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cb1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb22:	bf00      	nop
 800cb24:	3720      	adds	r7, #32
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
	...

0800cb2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b082      	sub	sp, #8
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cb34:	f001 fa58 	bl	800dfe8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cb38:	4b2d      	ldr	r3, [pc, #180]	@ (800cbf0 <prvAddNewTaskToReadyList+0xc4>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	3301      	adds	r3, #1
 800cb3e:	4a2c      	ldr	r2, [pc, #176]	@ (800cbf0 <prvAddNewTaskToReadyList+0xc4>)
 800cb40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cb42:	4b2c      	ldr	r3, [pc, #176]	@ (800cbf4 <prvAddNewTaskToReadyList+0xc8>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d109      	bne.n	800cb5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cb4a:	4a2a      	ldr	r2, [pc, #168]	@ (800cbf4 <prvAddNewTaskToReadyList+0xc8>)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cb50:	4b27      	ldr	r3, [pc, #156]	@ (800cbf0 <prvAddNewTaskToReadyList+0xc4>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	2b01      	cmp	r3, #1
 800cb56:	d110      	bne.n	800cb7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cb58:	f000 fc1e 	bl	800d398 <prvInitialiseTaskLists>
 800cb5c:	e00d      	b.n	800cb7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cb5e:	4b26      	ldr	r3, [pc, #152]	@ (800cbf8 <prvAddNewTaskToReadyList+0xcc>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d109      	bne.n	800cb7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cb66:	4b23      	ldr	r3, [pc, #140]	@ (800cbf4 <prvAddNewTaskToReadyList+0xc8>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d802      	bhi.n	800cb7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cb74:	4a1f      	ldr	r2, [pc, #124]	@ (800cbf4 <prvAddNewTaskToReadyList+0xc8>)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cb7a:	4b20      	ldr	r3, [pc, #128]	@ (800cbfc <prvAddNewTaskToReadyList+0xd0>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	3301      	adds	r3, #1
 800cb80:	4a1e      	ldr	r2, [pc, #120]	@ (800cbfc <prvAddNewTaskToReadyList+0xd0>)
 800cb82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cb84:	4b1d      	ldr	r3, [pc, #116]	@ (800cbfc <prvAddNewTaskToReadyList+0xd0>)
 800cb86:	681a      	ldr	r2, [r3, #0]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb90:	4b1b      	ldr	r3, [pc, #108]	@ (800cc00 <prvAddNewTaskToReadyList+0xd4>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	429a      	cmp	r2, r3
 800cb96:	d903      	bls.n	800cba0 <prvAddNewTaskToReadyList+0x74>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb9c:	4a18      	ldr	r2, [pc, #96]	@ (800cc00 <prvAddNewTaskToReadyList+0xd4>)
 800cb9e:	6013      	str	r3, [r2, #0]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cba4:	4613      	mov	r3, r2
 800cba6:	009b      	lsls	r3, r3, #2
 800cba8:	4413      	add	r3, r2
 800cbaa:	009b      	lsls	r3, r3, #2
 800cbac:	4a15      	ldr	r2, [pc, #84]	@ (800cc04 <prvAddNewTaskToReadyList+0xd8>)
 800cbae:	441a      	add	r2, r3
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	3304      	adds	r3, #4
 800cbb4:	4619      	mov	r1, r3
 800cbb6:	4610      	mov	r0, r2
 800cbb8:	f7ff f805 	bl	800bbc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cbbc:	f001 fa46 	bl	800e04c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cbc0:	4b0d      	ldr	r3, [pc, #52]	@ (800cbf8 <prvAddNewTaskToReadyList+0xcc>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d00e      	beq.n	800cbe6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cbc8:	4b0a      	ldr	r3, [pc, #40]	@ (800cbf4 <prvAddNewTaskToReadyList+0xc8>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d207      	bcs.n	800cbe6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cbd6:	4b0c      	ldr	r3, [pc, #48]	@ (800cc08 <prvAddNewTaskToReadyList+0xdc>)
 800cbd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbdc:	601a      	str	r2, [r3, #0]
 800cbde:	f3bf 8f4f 	dsb	sy
 800cbe2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbe6:	bf00      	nop
 800cbe8:	3708      	adds	r7, #8
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	200017d8 	.word	0x200017d8
 800cbf4:	20001304 	.word	0x20001304
 800cbf8:	200017e4 	.word	0x200017e4
 800cbfc:	200017f4 	.word	0x200017f4
 800cc00:	200017e0 	.word	0x200017e0
 800cc04:	20001308 	.word	0x20001308
 800cc08:	e000ed04 	.word	0xe000ed04

0800cc0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b084      	sub	sp, #16
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cc14:	2300      	movs	r3, #0
 800cc16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d018      	beq.n	800cc50 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cc1e:	4b14      	ldr	r3, [pc, #80]	@ (800cc70 <vTaskDelay+0x64>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d00b      	beq.n	800cc3e <vTaskDelay+0x32>
	__asm volatile
 800cc26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc2a:	f383 8811 	msr	BASEPRI, r3
 800cc2e:	f3bf 8f6f 	isb	sy
 800cc32:	f3bf 8f4f 	dsb	sy
 800cc36:	60bb      	str	r3, [r7, #8]
}
 800cc38:	bf00      	nop
 800cc3a:	bf00      	nop
 800cc3c:	e7fd      	b.n	800cc3a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cc3e:	f000 f883 	bl	800cd48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cc42:	2100      	movs	r1, #0
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 fcf3 	bl	800d630 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cc4a:	f000 f88b 	bl	800cd64 <xTaskResumeAll>
 800cc4e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d107      	bne.n	800cc66 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800cc56:	4b07      	ldr	r3, [pc, #28]	@ (800cc74 <vTaskDelay+0x68>)
 800cc58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc5c:	601a      	str	r2, [r3, #0]
 800cc5e:	f3bf 8f4f 	dsb	sy
 800cc62:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cc66:	bf00      	nop
 800cc68:	3710      	adds	r7, #16
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	20001800 	.word	0x20001800
 800cc74:	e000ed04 	.word	0xe000ed04

0800cc78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b08a      	sub	sp, #40	@ 0x28
 800cc7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cc82:	2300      	movs	r3, #0
 800cc84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cc86:	463a      	mov	r2, r7
 800cc88:	1d39      	adds	r1, r7, #4
 800cc8a:	f107 0308 	add.w	r3, r7, #8
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7fe ff38 	bl	800bb04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cc94:	6839      	ldr	r1, [r7, #0]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	68ba      	ldr	r2, [r7, #8]
 800cc9a:	9202      	str	r2, [sp, #8]
 800cc9c:	9301      	str	r3, [sp, #4]
 800cc9e:	2300      	movs	r3, #0
 800cca0:	9300      	str	r3, [sp, #0]
 800cca2:	2300      	movs	r3, #0
 800cca4:	460a      	mov	r2, r1
 800cca6:	4922      	ldr	r1, [pc, #136]	@ (800cd30 <vTaskStartScheduler+0xb8>)
 800cca8:	4822      	ldr	r0, [pc, #136]	@ (800cd34 <vTaskStartScheduler+0xbc>)
 800ccaa:	f7ff fe09 	bl	800c8c0 <xTaskCreateStatic>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	4a21      	ldr	r2, [pc, #132]	@ (800cd38 <vTaskStartScheduler+0xc0>)
 800ccb2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ccb4:	4b20      	ldr	r3, [pc, #128]	@ (800cd38 <vTaskStartScheduler+0xc0>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d002      	beq.n	800ccc2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	617b      	str	r3, [r7, #20]
 800ccc0:	e001      	b.n	800ccc6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	2b01      	cmp	r3, #1
 800ccca:	d102      	bne.n	800ccd2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cccc:	f000 fd04 	bl	800d6d8 <xTimerCreateTimerTask>
 800ccd0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	d116      	bne.n	800cd06 <vTaskStartScheduler+0x8e>
	__asm volatile
 800ccd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccdc:	f383 8811 	msr	BASEPRI, r3
 800cce0:	f3bf 8f6f 	isb	sy
 800cce4:	f3bf 8f4f 	dsb	sy
 800cce8:	613b      	str	r3, [r7, #16]
}
 800ccea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ccec:	4b13      	ldr	r3, [pc, #76]	@ (800cd3c <vTaskStartScheduler+0xc4>)
 800ccee:	f04f 32ff 	mov.w	r2, #4294967295
 800ccf2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ccf4:	4b12      	ldr	r3, [pc, #72]	@ (800cd40 <vTaskStartScheduler+0xc8>)
 800ccf6:	2201      	movs	r2, #1
 800ccf8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ccfa:	4b12      	ldr	r3, [pc, #72]	@ (800cd44 <vTaskStartScheduler+0xcc>)
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cd00:	f001 f8ce 	bl	800dea0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cd04:	e00f      	b.n	800cd26 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd0c:	d10b      	bne.n	800cd26 <vTaskStartScheduler+0xae>
	__asm volatile
 800cd0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd12:	f383 8811 	msr	BASEPRI, r3
 800cd16:	f3bf 8f6f 	isb	sy
 800cd1a:	f3bf 8f4f 	dsb	sy
 800cd1e:	60fb      	str	r3, [r7, #12]
}
 800cd20:	bf00      	nop
 800cd22:	bf00      	nop
 800cd24:	e7fd      	b.n	800cd22 <vTaskStartScheduler+0xaa>
}
 800cd26:	bf00      	nop
 800cd28:	3718      	adds	r7, #24
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	08011fc4 	.word	0x08011fc4
 800cd34:	0800d369 	.word	0x0800d369
 800cd38:	200017fc 	.word	0x200017fc
 800cd3c:	200017f8 	.word	0x200017f8
 800cd40:	200017e4 	.word	0x200017e4
 800cd44:	200017dc 	.word	0x200017dc

0800cd48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cd48:	b480      	push	{r7}
 800cd4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cd4c:	4b04      	ldr	r3, [pc, #16]	@ (800cd60 <vTaskSuspendAll+0x18>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	3301      	adds	r3, #1
 800cd52:	4a03      	ldr	r2, [pc, #12]	@ (800cd60 <vTaskSuspendAll+0x18>)
 800cd54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cd56:	bf00      	nop
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5e:	4770      	bx	lr
 800cd60:	20001800 	.word	0x20001800

0800cd64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b084      	sub	sp, #16
 800cd68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cd72:	4b42      	ldr	r3, [pc, #264]	@ (800ce7c <xTaskResumeAll+0x118>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d10b      	bne.n	800cd92 <xTaskResumeAll+0x2e>
	__asm volatile
 800cd7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd7e:	f383 8811 	msr	BASEPRI, r3
 800cd82:	f3bf 8f6f 	isb	sy
 800cd86:	f3bf 8f4f 	dsb	sy
 800cd8a:	603b      	str	r3, [r7, #0]
}
 800cd8c:	bf00      	nop
 800cd8e:	bf00      	nop
 800cd90:	e7fd      	b.n	800cd8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cd92:	f001 f929 	bl	800dfe8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cd96:	4b39      	ldr	r3, [pc, #228]	@ (800ce7c <xTaskResumeAll+0x118>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	3b01      	subs	r3, #1
 800cd9c:	4a37      	ldr	r2, [pc, #220]	@ (800ce7c <xTaskResumeAll+0x118>)
 800cd9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cda0:	4b36      	ldr	r3, [pc, #216]	@ (800ce7c <xTaskResumeAll+0x118>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d162      	bne.n	800ce6e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cda8:	4b35      	ldr	r3, [pc, #212]	@ (800ce80 <xTaskResumeAll+0x11c>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d05e      	beq.n	800ce6e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cdb0:	e02f      	b.n	800ce12 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdb2:	4b34      	ldr	r3, [pc, #208]	@ (800ce84 <xTaskResumeAll+0x120>)
 800cdb4:	68db      	ldr	r3, [r3, #12]
 800cdb6:	68db      	ldr	r3, [r3, #12]
 800cdb8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	3318      	adds	r3, #24
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f7fe ff5e 	bl	800bc80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	3304      	adds	r3, #4
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f7fe ff59 	bl	800bc80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdd2:	4b2d      	ldr	r3, [pc, #180]	@ (800ce88 <xTaskResumeAll+0x124>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d903      	bls.n	800cde2 <xTaskResumeAll+0x7e>
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdde:	4a2a      	ldr	r2, [pc, #168]	@ (800ce88 <xTaskResumeAll+0x124>)
 800cde0:	6013      	str	r3, [r2, #0]
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cde6:	4613      	mov	r3, r2
 800cde8:	009b      	lsls	r3, r3, #2
 800cdea:	4413      	add	r3, r2
 800cdec:	009b      	lsls	r3, r3, #2
 800cdee:	4a27      	ldr	r2, [pc, #156]	@ (800ce8c <xTaskResumeAll+0x128>)
 800cdf0:	441a      	add	r2, r3
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	3304      	adds	r3, #4
 800cdf6:	4619      	mov	r1, r3
 800cdf8:	4610      	mov	r0, r2
 800cdfa:	f7fe fee4 	bl	800bbc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce02:	4b23      	ldr	r3, [pc, #140]	@ (800ce90 <xTaskResumeAll+0x12c>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d302      	bcc.n	800ce12 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ce0c:	4b21      	ldr	r3, [pc, #132]	@ (800ce94 <xTaskResumeAll+0x130>)
 800ce0e:	2201      	movs	r2, #1
 800ce10:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ce12:	4b1c      	ldr	r3, [pc, #112]	@ (800ce84 <xTaskResumeAll+0x120>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d1cb      	bne.n	800cdb2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d001      	beq.n	800ce24 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ce20:	f000 fb58 	bl	800d4d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ce24:	4b1c      	ldr	r3, [pc, #112]	@ (800ce98 <xTaskResumeAll+0x134>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d010      	beq.n	800ce52 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ce30:	f000 f846 	bl	800cec0 <xTaskIncrementTick>
 800ce34:	4603      	mov	r3, r0
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d002      	beq.n	800ce40 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ce3a:	4b16      	ldr	r3, [pc, #88]	@ (800ce94 <xTaskResumeAll+0x130>)
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	3b01      	subs	r3, #1
 800ce44:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d1f1      	bne.n	800ce30 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ce4c:	4b12      	ldr	r3, [pc, #72]	@ (800ce98 <xTaskResumeAll+0x134>)
 800ce4e:	2200      	movs	r2, #0
 800ce50:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ce52:	4b10      	ldr	r3, [pc, #64]	@ (800ce94 <xTaskResumeAll+0x130>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d009      	beq.n	800ce6e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ce5e:	4b0f      	ldr	r3, [pc, #60]	@ (800ce9c <xTaskResumeAll+0x138>)
 800ce60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce64:	601a      	str	r2, [r3, #0]
 800ce66:	f3bf 8f4f 	dsb	sy
 800ce6a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ce6e:	f001 f8ed 	bl	800e04c <vPortExitCritical>

	return xAlreadyYielded;
 800ce72:	68bb      	ldr	r3, [r7, #8]
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3710      	adds	r7, #16
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}
 800ce7c:	20001800 	.word	0x20001800
 800ce80:	200017d8 	.word	0x200017d8
 800ce84:	20001798 	.word	0x20001798
 800ce88:	200017e0 	.word	0x200017e0
 800ce8c:	20001308 	.word	0x20001308
 800ce90:	20001304 	.word	0x20001304
 800ce94:	200017ec 	.word	0x200017ec
 800ce98:	200017e8 	.word	0x200017e8
 800ce9c:	e000ed04 	.word	0xe000ed04

0800cea0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cea0:	b480      	push	{r7}
 800cea2:	b083      	sub	sp, #12
 800cea4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cea6:	4b05      	ldr	r3, [pc, #20]	@ (800cebc <xTaskGetTickCount+0x1c>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ceac:	687b      	ldr	r3, [r7, #4]
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	370c      	adds	r7, #12
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb8:	4770      	bx	lr
 800ceba:	bf00      	nop
 800cebc:	200017dc 	.word	0x200017dc

0800cec0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b086      	sub	sp, #24
 800cec4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cec6:	2300      	movs	r3, #0
 800cec8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ceca:	4b4f      	ldr	r3, [pc, #316]	@ (800d008 <xTaskIncrementTick+0x148>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	f040 8090 	bne.w	800cff4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ced4:	4b4d      	ldr	r3, [pc, #308]	@ (800d00c <xTaskIncrementTick+0x14c>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	3301      	adds	r3, #1
 800ceda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cedc:	4a4b      	ldr	r2, [pc, #300]	@ (800d00c <xTaskIncrementTick+0x14c>)
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cee2:	693b      	ldr	r3, [r7, #16]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d121      	bne.n	800cf2c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800cee8:	4b49      	ldr	r3, [pc, #292]	@ (800d010 <xTaskIncrementTick+0x150>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d00b      	beq.n	800cf0a <xTaskIncrementTick+0x4a>
	__asm volatile
 800cef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cef6:	f383 8811 	msr	BASEPRI, r3
 800cefa:	f3bf 8f6f 	isb	sy
 800cefe:	f3bf 8f4f 	dsb	sy
 800cf02:	603b      	str	r3, [r7, #0]
}
 800cf04:	bf00      	nop
 800cf06:	bf00      	nop
 800cf08:	e7fd      	b.n	800cf06 <xTaskIncrementTick+0x46>
 800cf0a:	4b41      	ldr	r3, [pc, #260]	@ (800d010 <xTaskIncrementTick+0x150>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	60fb      	str	r3, [r7, #12]
 800cf10:	4b40      	ldr	r3, [pc, #256]	@ (800d014 <xTaskIncrementTick+0x154>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4a3e      	ldr	r2, [pc, #248]	@ (800d010 <xTaskIncrementTick+0x150>)
 800cf16:	6013      	str	r3, [r2, #0]
 800cf18:	4a3e      	ldr	r2, [pc, #248]	@ (800d014 <xTaskIncrementTick+0x154>)
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	6013      	str	r3, [r2, #0]
 800cf1e:	4b3e      	ldr	r3, [pc, #248]	@ (800d018 <xTaskIncrementTick+0x158>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	3301      	adds	r3, #1
 800cf24:	4a3c      	ldr	r2, [pc, #240]	@ (800d018 <xTaskIncrementTick+0x158>)
 800cf26:	6013      	str	r3, [r2, #0]
 800cf28:	f000 fad4 	bl	800d4d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cf2c:	4b3b      	ldr	r3, [pc, #236]	@ (800d01c <xTaskIncrementTick+0x15c>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	693a      	ldr	r2, [r7, #16]
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d349      	bcc.n	800cfca <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf36:	4b36      	ldr	r3, [pc, #216]	@ (800d010 <xTaskIncrementTick+0x150>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d104      	bne.n	800cf4a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf40:	4b36      	ldr	r3, [pc, #216]	@ (800d01c <xTaskIncrementTick+0x15c>)
 800cf42:	f04f 32ff 	mov.w	r2, #4294967295
 800cf46:	601a      	str	r2, [r3, #0]
					break;
 800cf48:	e03f      	b.n	800cfca <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf4a:	4b31      	ldr	r3, [pc, #196]	@ (800d010 <xTaskIncrementTick+0x150>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	68db      	ldr	r3, [r3, #12]
 800cf50:	68db      	ldr	r3, [r3, #12]
 800cf52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	685b      	ldr	r3, [r3, #4]
 800cf58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cf5a:	693a      	ldr	r2, [r7, #16]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d203      	bcs.n	800cf6a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cf62:	4a2e      	ldr	r2, [pc, #184]	@ (800d01c <xTaskIncrementTick+0x15c>)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cf68:	e02f      	b.n	800cfca <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	3304      	adds	r3, #4
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7fe fe86 	bl	800bc80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d004      	beq.n	800cf86 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	3318      	adds	r3, #24
 800cf80:	4618      	mov	r0, r3
 800cf82:	f7fe fe7d 	bl	800bc80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf8a:	4b25      	ldr	r3, [pc, #148]	@ (800d020 <xTaskIncrementTick+0x160>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	429a      	cmp	r2, r3
 800cf90:	d903      	bls.n	800cf9a <xTaskIncrementTick+0xda>
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf96:	4a22      	ldr	r2, [pc, #136]	@ (800d020 <xTaskIncrementTick+0x160>)
 800cf98:	6013      	str	r3, [r2, #0]
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf9e:	4613      	mov	r3, r2
 800cfa0:	009b      	lsls	r3, r3, #2
 800cfa2:	4413      	add	r3, r2
 800cfa4:	009b      	lsls	r3, r3, #2
 800cfa6:	4a1f      	ldr	r2, [pc, #124]	@ (800d024 <xTaskIncrementTick+0x164>)
 800cfa8:	441a      	add	r2, r3
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	3304      	adds	r3, #4
 800cfae:	4619      	mov	r1, r3
 800cfb0:	4610      	mov	r0, r2
 800cfb2:	f7fe fe08 	bl	800bbc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfba:	4b1b      	ldr	r3, [pc, #108]	@ (800d028 <xTaskIncrementTick+0x168>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d3b8      	bcc.n	800cf36 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cfc8:	e7b5      	b.n	800cf36 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cfca:	4b17      	ldr	r3, [pc, #92]	@ (800d028 <xTaskIncrementTick+0x168>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfd0:	4914      	ldr	r1, [pc, #80]	@ (800d024 <xTaskIncrementTick+0x164>)
 800cfd2:	4613      	mov	r3, r2
 800cfd4:	009b      	lsls	r3, r3, #2
 800cfd6:	4413      	add	r3, r2
 800cfd8:	009b      	lsls	r3, r3, #2
 800cfda:	440b      	add	r3, r1
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	2b01      	cmp	r3, #1
 800cfe0:	d901      	bls.n	800cfe6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cfe6:	4b11      	ldr	r3, [pc, #68]	@ (800d02c <xTaskIncrementTick+0x16c>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d007      	beq.n	800cffe <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800cfee:	2301      	movs	r3, #1
 800cff0:	617b      	str	r3, [r7, #20]
 800cff2:	e004      	b.n	800cffe <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cff4:	4b0e      	ldr	r3, [pc, #56]	@ (800d030 <xTaskIncrementTick+0x170>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	3301      	adds	r3, #1
 800cffa:	4a0d      	ldr	r2, [pc, #52]	@ (800d030 <xTaskIncrementTick+0x170>)
 800cffc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cffe:	697b      	ldr	r3, [r7, #20]
}
 800d000:	4618      	mov	r0, r3
 800d002:	3718      	adds	r7, #24
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}
 800d008:	20001800 	.word	0x20001800
 800d00c:	200017dc 	.word	0x200017dc
 800d010:	20001790 	.word	0x20001790
 800d014:	20001794 	.word	0x20001794
 800d018:	200017f0 	.word	0x200017f0
 800d01c:	200017f8 	.word	0x200017f8
 800d020:	200017e0 	.word	0x200017e0
 800d024:	20001308 	.word	0x20001308
 800d028:	20001304 	.word	0x20001304
 800d02c:	200017ec 	.word	0x200017ec
 800d030:	200017e8 	.word	0x200017e8

0800d034 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d034:	b480      	push	{r7}
 800d036:	b085      	sub	sp, #20
 800d038:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d03a:	4b28      	ldr	r3, [pc, #160]	@ (800d0dc <vTaskSwitchContext+0xa8>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d003      	beq.n	800d04a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d042:	4b27      	ldr	r3, [pc, #156]	@ (800d0e0 <vTaskSwitchContext+0xac>)
 800d044:	2201      	movs	r2, #1
 800d046:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d048:	e042      	b.n	800d0d0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800d04a:	4b25      	ldr	r3, [pc, #148]	@ (800d0e0 <vTaskSwitchContext+0xac>)
 800d04c:	2200      	movs	r2, #0
 800d04e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d050:	4b24      	ldr	r3, [pc, #144]	@ (800d0e4 <vTaskSwitchContext+0xb0>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	60fb      	str	r3, [r7, #12]
 800d056:	e011      	b.n	800d07c <vTaskSwitchContext+0x48>
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d10b      	bne.n	800d076 <vTaskSwitchContext+0x42>
	__asm volatile
 800d05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d062:	f383 8811 	msr	BASEPRI, r3
 800d066:	f3bf 8f6f 	isb	sy
 800d06a:	f3bf 8f4f 	dsb	sy
 800d06e:	607b      	str	r3, [r7, #4]
}
 800d070:	bf00      	nop
 800d072:	bf00      	nop
 800d074:	e7fd      	b.n	800d072 <vTaskSwitchContext+0x3e>
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	3b01      	subs	r3, #1
 800d07a:	60fb      	str	r3, [r7, #12]
 800d07c:	491a      	ldr	r1, [pc, #104]	@ (800d0e8 <vTaskSwitchContext+0xb4>)
 800d07e:	68fa      	ldr	r2, [r7, #12]
 800d080:	4613      	mov	r3, r2
 800d082:	009b      	lsls	r3, r3, #2
 800d084:	4413      	add	r3, r2
 800d086:	009b      	lsls	r3, r3, #2
 800d088:	440b      	add	r3, r1
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d0e3      	beq.n	800d058 <vTaskSwitchContext+0x24>
 800d090:	68fa      	ldr	r2, [r7, #12]
 800d092:	4613      	mov	r3, r2
 800d094:	009b      	lsls	r3, r3, #2
 800d096:	4413      	add	r3, r2
 800d098:	009b      	lsls	r3, r3, #2
 800d09a:	4a13      	ldr	r2, [pc, #76]	@ (800d0e8 <vTaskSwitchContext+0xb4>)
 800d09c:	4413      	add	r3, r2
 800d09e:	60bb      	str	r3, [r7, #8]
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	685b      	ldr	r3, [r3, #4]
 800d0a4:	685a      	ldr	r2, [r3, #4]
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	605a      	str	r2, [r3, #4]
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	685a      	ldr	r2, [r3, #4]
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	3308      	adds	r3, #8
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d104      	bne.n	800d0c0 <vTaskSwitchContext+0x8c>
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	685b      	ldr	r3, [r3, #4]
 800d0ba:	685a      	ldr	r2, [r3, #4]
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	605a      	str	r2, [r3, #4]
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	685b      	ldr	r3, [r3, #4]
 800d0c4:	68db      	ldr	r3, [r3, #12]
 800d0c6:	4a09      	ldr	r2, [pc, #36]	@ (800d0ec <vTaskSwitchContext+0xb8>)
 800d0c8:	6013      	str	r3, [r2, #0]
 800d0ca:	4a06      	ldr	r2, [pc, #24]	@ (800d0e4 <vTaskSwitchContext+0xb0>)
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	6013      	str	r3, [r2, #0]
}
 800d0d0:	bf00      	nop
 800d0d2:	3714      	adds	r7, #20
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0da:	4770      	bx	lr
 800d0dc:	20001800 	.word	0x20001800
 800d0e0:	200017ec 	.word	0x200017ec
 800d0e4:	200017e0 	.word	0x200017e0
 800d0e8:	20001308 	.word	0x20001308
 800d0ec:	20001304 	.word	0x20001304

0800d0f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b084      	sub	sp, #16
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
 800d0f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d10b      	bne.n	800d118 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d104:	f383 8811 	msr	BASEPRI, r3
 800d108:	f3bf 8f6f 	isb	sy
 800d10c:	f3bf 8f4f 	dsb	sy
 800d110:	60fb      	str	r3, [r7, #12]
}
 800d112:	bf00      	nop
 800d114:	bf00      	nop
 800d116:	e7fd      	b.n	800d114 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d118:	4b07      	ldr	r3, [pc, #28]	@ (800d138 <vTaskPlaceOnEventList+0x48>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	3318      	adds	r3, #24
 800d11e:	4619      	mov	r1, r3
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f7fe fd74 	bl	800bc0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d126:	2101      	movs	r1, #1
 800d128:	6838      	ldr	r0, [r7, #0]
 800d12a:	f000 fa81 	bl	800d630 <prvAddCurrentTaskToDelayedList>
}
 800d12e:	bf00      	nop
 800d130:	3710      	adds	r7, #16
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	20001304 	.word	0x20001304

0800d13c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b086      	sub	sp, #24
 800d140:	af00      	add	r7, sp, #0
 800d142:	60f8      	str	r0, [r7, #12]
 800d144:	60b9      	str	r1, [r7, #8]
 800d146:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d10b      	bne.n	800d166 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d152:	f383 8811 	msr	BASEPRI, r3
 800d156:	f3bf 8f6f 	isb	sy
 800d15a:	f3bf 8f4f 	dsb	sy
 800d15e:	617b      	str	r3, [r7, #20]
}
 800d160:	bf00      	nop
 800d162:	bf00      	nop
 800d164:	e7fd      	b.n	800d162 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d166:	4b0a      	ldr	r3, [pc, #40]	@ (800d190 <vTaskPlaceOnEventListRestricted+0x54>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	3318      	adds	r3, #24
 800d16c:	4619      	mov	r1, r3
 800d16e:	68f8      	ldr	r0, [r7, #12]
 800d170:	f7fe fd29 	bl	800bbc6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d002      	beq.n	800d180 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d17a:	f04f 33ff 	mov.w	r3, #4294967295
 800d17e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d180:	6879      	ldr	r1, [r7, #4]
 800d182:	68b8      	ldr	r0, [r7, #8]
 800d184:	f000 fa54 	bl	800d630 <prvAddCurrentTaskToDelayedList>
	}
 800d188:	bf00      	nop
 800d18a:	3718      	adds	r7, #24
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}
 800d190:	20001304 	.word	0x20001304

0800d194 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b086      	sub	sp, #24
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	68db      	ldr	r3, [r3, #12]
 800d1a0:	68db      	ldr	r3, [r3, #12]
 800d1a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d10b      	bne.n	800d1c2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d1aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1ae:	f383 8811 	msr	BASEPRI, r3
 800d1b2:	f3bf 8f6f 	isb	sy
 800d1b6:	f3bf 8f4f 	dsb	sy
 800d1ba:	60fb      	str	r3, [r7, #12]
}
 800d1bc:	bf00      	nop
 800d1be:	bf00      	nop
 800d1c0:	e7fd      	b.n	800d1be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	3318      	adds	r3, #24
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7fe fd5a 	bl	800bc80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1cc:	4b1d      	ldr	r3, [pc, #116]	@ (800d244 <xTaskRemoveFromEventList+0xb0>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d11d      	bne.n	800d210 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	3304      	adds	r3, #4
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f7fe fd51 	bl	800bc80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1e2:	4b19      	ldr	r3, [pc, #100]	@ (800d248 <xTaskRemoveFromEventList+0xb4>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d903      	bls.n	800d1f2 <xTaskRemoveFromEventList+0x5e>
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1ee:	4a16      	ldr	r2, [pc, #88]	@ (800d248 <xTaskRemoveFromEventList+0xb4>)
 800d1f0:	6013      	str	r3, [r2, #0]
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1f6:	4613      	mov	r3, r2
 800d1f8:	009b      	lsls	r3, r3, #2
 800d1fa:	4413      	add	r3, r2
 800d1fc:	009b      	lsls	r3, r3, #2
 800d1fe:	4a13      	ldr	r2, [pc, #76]	@ (800d24c <xTaskRemoveFromEventList+0xb8>)
 800d200:	441a      	add	r2, r3
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	3304      	adds	r3, #4
 800d206:	4619      	mov	r1, r3
 800d208:	4610      	mov	r0, r2
 800d20a:	f7fe fcdc 	bl	800bbc6 <vListInsertEnd>
 800d20e:	e005      	b.n	800d21c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	3318      	adds	r3, #24
 800d214:	4619      	mov	r1, r3
 800d216:	480e      	ldr	r0, [pc, #56]	@ (800d250 <xTaskRemoveFromEventList+0xbc>)
 800d218:	f7fe fcd5 	bl	800bbc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d220:	4b0c      	ldr	r3, [pc, #48]	@ (800d254 <xTaskRemoveFromEventList+0xc0>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d226:	429a      	cmp	r2, r3
 800d228:	d905      	bls.n	800d236 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d22a:	2301      	movs	r3, #1
 800d22c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d22e:	4b0a      	ldr	r3, [pc, #40]	@ (800d258 <xTaskRemoveFromEventList+0xc4>)
 800d230:	2201      	movs	r2, #1
 800d232:	601a      	str	r2, [r3, #0]
 800d234:	e001      	b.n	800d23a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d236:	2300      	movs	r3, #0
 800d238:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d23a:	697b      	ldr	r3, [r7, #20]
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3718      	adds	r7, #24
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}
 800d244:	20001800 	.word	0x20001800
 800d248:	200017e0 	.word	0x200017e0
 800d24c:	20001308 	.word	0x20001308
 800d250:	20001798 	.word	0x20001798
 800d254:	20001304 	.word	0x20001304
 800d258:	200017ec 	.word	0x200017ec

0800d25c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d25c:	b480      	push	{r7}
 800d25e:	b083      	sub	sp, #12
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d264:	4b06      	ldr	r3, [pc, #24]	@ (800d280 <vTaskInternalSetTimeOutState+0x24>)
 800d266:	681a      	ldr	r2, [r3, #0]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d26c:	4b05      	ldr	r3, [pc, #20]	@ (800d284 <vTaskInternalSetTimeOutState+0x28>)
 800d26e:	681a      	ldr	r2, [r3, #0]
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	605a      	str	r2, [r3, #4]
}
 800d274:	bf00      	nop
 800d276:	370c      	adds	r7, #12
 800d278:	46bd      	mov	sp, r7
 800d27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27e:	4770      	bx	lr
 800d280:	200017f0 	.word	0x200017f0
 800d284:	200017dc 	.word	0x200017dc

0800d288 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b088      	sub	sp, #32
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d10b      	bne.n	800d2b0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d29c:	f383 8811 	msr	BASEPRI, r3
 800d2a0:	f3bf 8f6f 	isb	sy
 800d2a4:	f3bf 8f4f 	dsb	sy
 800d2a8:	613b      	str	r3, [r7, #16]
}
 800d2aa:	bf00      	nop
 800d2ac:	bf00      	nop
 800d2ae:	e7fd      	b.n	800d2ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d10b      	bne.n	800d2ce <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d2b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2ba:	f383 8811 	msr	BASEPRI, r3
 800d2be:	f3bf 8f6f 	isb	sy
 800d2c2:	f3bf 8f4f 	dsb	sy
 800d2c6:	60fb      	str	r3, [r7, #12]
}
 800d2c8:	bf00      	nop
 800d2ca:	bf00      	nop
 800d2cc:	e7fd      	b.n	800d2ca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d2ce:	f000 fe8b 	bl	800dfe8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d2d2:	4b1d      	ldr	r3, [pc, #116]	@ (800d348 <xTaskCheckForTimeOut+0xc0>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	69ba      	ldr	r2, [r7, #24]
 800d2de:	1ad3      	subs	r3, r2, r3
 800d2e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2ea:	d102      	bne.n	800d2f2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	61fb      	str	r3, [r7, #28]
 800d2f0:	e023      	b.n	800d33a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681a      	ldr	r2, [r3, #0]
 800d2f6:	4b15      	ldr	r3, [pc, #84]	@ (800d34c <xTaskCheckForTimeOut+0xc4>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d007      	beq.n	800d30e <xTaskCheckForTimeOut+0x86>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	685b      	ldr	r3, [r3, #4]
 800d302:	69ba      	ldr	r2, [r7, #24]
 800d304:	429a      	cmp	r2, r3
 800d306:	d302      	bcc.n	800d30e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d308:	2301      	movs	r3, #1
 800d30a:	61fb      	str	r3, [r7, #28]
 800d30c:	e015      	b.n	800d33a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	697a      	ldr	r2, [r7, #20]
 800d314:	429a      	cmp	r2, r3
 800d316:	d20b      	bcs.n	800d330 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	681a      	ldr	r2, [r3, #0]
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	1ad2      	subs	r2, r2, r3
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f7ff ff99 	bl	800d25c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d32a:	2300      	movs	r3, #0
 800d32c:	61fb      	str	r3, [r7, #28]
 800d32e:	e004      	b.n	800d33a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	2200      	movs	r2, #0
 800d334:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d336:	2301      	movs	r3, #1
 800d338:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d33a:	f000 fe87 	bl	800e04c <vPortExitCritical>

	return xReturn;
 800d33e:	69fb      	ldr	r3, [r7, #28]
}
 800d340:	4618      	mov	r0, r3
 800d342:	3720      	adds	r7, #32
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}
 800d348:	200017dc 	.word	0x200017dc
 800d34c:	200017f0 	.word	0x200017f0

0800d350 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d350:	b480      	push	{r7}
 800d352:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d354:	4b03      	ldr	r3, [pc, #12]	@ (800d364 <vTaskMissedYield+0x14>)
 800d356:	2201      	movs	r2, #1
 800d358:	601a      	str	r2, [r3, #0]
}
 800d35a:	bf00      	nop
 800d35c:	46bd      	mov	sp, r7
 800d35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d362:	4770      	bx	lr
 800d364:	200017ec 	.word	0x200017ec

0800d368 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b082      	sub	sp, #8
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d370:	f000 f852 	bl	800d418 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d374:	4b06      	ldr	r3, [pc, #24]	@ (800d390 <prvIdleTask+0x28>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	2b01      	cmp	r3, #1
 800d37a:	d9f9      	bls.n	800d370 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d37c:	4b05      	ldr	r3, [pc, #20]	@ (800d394 <prvIdleTask+0x2c>)
 800d37e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d382:	601a      	str	r2, [r3, #0]
 800d384:	f3bf 8f4f 	dsb	sy
 800d388:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d38c:	e7f0      	b.n	800d370 <prvIdleTask+0x8>
 800d38e:	bf00      	nop
 800d390:	20001308 	.word	0x20001308
 800d394:	e000ed04 	.word	0xe000ed04

0800d398 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b082      	sub	sp, #8
 800d39c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d39e:	2300      	movs	r3, #0
 800d3a0:	607b      	str	r3, [r7, #4]
 800d3a2:	e00c      	b.n	800d3be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d3a4:	687a      	ldr	r2, [r7, #4]
 800d3a6:	4613      	mov	r3, r2
 800d3a8:	009b      	lsls	r3, r3, #2
 800d3aa:	4413      	add	r3, r2
 800d3ac:	009b      	lsls	r3, r3, #2
 800d3ae:	4a12      	ldr	r2, [pc, #72]	@ (800d3f8 <prvInitialiseTaskLists+0x60>)
 800d3b0:	4413      	add	r3, r2
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f7fe fbda 	bl	800bb6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	607b      	str	r3, [r7, #4]
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2b37      	cmp	r3, #55	@ 0x37
 800d3c2:	d9ef      	bls.n	800d3a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d3c4:	480d      	ldr	r0, [pc, #52]	@ (800d3fc <prvInitialiseTaskLists+0x64>)
 800d3c6:	f7fe fbd1 	bl	800bb6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d3ca:	480d      	ldr	r0, [pc, #52]	@ (800d400 <prvInitialiseTaskLists+0x68>)
 800d3cc:	f7fe fbce 	bl	800bb6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d3d0:	480c      	ldr	r0, [pc, #48]	@ (800d404 <prvInitialiseTaskLists+0x6c>)
 800d3d2:	f7fe fbcb 	bl	800bb6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d3d6:	480c      	ldr	r0, [pc, #48]	@ (800d408 <prvInitialiseTaskLists+0x70>)
 800d3d8:	f7fe fbc8 	bl	800bb6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d3dc:	480b      	ldr	r0, [pc, #44]	@ (800d40c <prvInitialiseTaskLists+0x74>)
 800d3de:	f7fe fbc5 	bl	800bb6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d3e2:	4b0b      	ldr	r3, [pc, #44]	@ (800d410 <prvInitialiseTaskLists+0x78>)
 800d3e4:	4a05      	ldr	r2, [pc, #20]	@ (800d3fc <prvInitialiseTaskLists+0x64>)
 800d3e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d3e8:	4b0a      	ldr	r3, [pc, #40]	@ (800d414 <prvInitialiseTaskLists+0x7c>)
 800d3ea:	4a05      	ldr	r2, [pc, #20]	@ (800d400 <prvInitialiseTaskLists+0x68>)
 800d3ec:	601a      	str	r2, [r3, #0]
}
 800d3ee:	bf00      	nop
 800d3f0:	3708      	adds	r7, #8
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}
 800d3f6:	bf00      	nop
 800d3f8:	20001308 	.word	0x20001308
 800d3fc:	20001768 	.word	0x20001768
 800d400:	2000177c 	.word	0x2000177c
 800d404:	20001798 	.word	0x20001798
 800d408:	200017ac 	.word	0x200017ac
 800d40c:	200017c4 	.word	0x200017c4
 800d410:	20001790 	.word	0x20001790
 800d414:	20001794 	.word	0x20001794

0800d418 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b082      	sub	sp, #8
 800d41c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d41e:	e019      	b.n	800d454 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d420:	f000 fde2 	bl	800dfe8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d424:	4b10      	ldr	r3, [pc, #64]	@ (800d468 <prvCheckTasksWaitingTermination+0x50>)
 800d426:	68db      	ldr	r3, [r3, #12]
 800d428:	68db      	ldr	r3, [r3, #12]
 800d42a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	3304      	adds	r3, #4
 800d430:	4618      	mov	r0, r3
 800d432:	f7fe fc25 	bl	800bc80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d436:	4b0d      	ldr	r3, [pc, #52]	@ (800d46c <prvCheckTasksWaitingTermination+0x54>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	3b01      	subs	r3, #1
 800d43c:	4a0b      	ldr	r2, [pc, #44]	@ (800d46c <prvCheckTasksWaitingTermination+0x54>)
 800d43e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d440:	4b0b      	ldr	r3, [pc, #44]	@ (800d470 <prvCheckTasksWaitingTermination+0x58>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	3b01      	subs	r3, #1
 800d446:	4a0a      	ldr	r2, [pc, #40]	@ (800d470 <prvCheckTasksWaitingTermination+0x58>)
 800d448:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d44a:	f000 fdff 	bl	800e04c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f000 f810 	bl	800d474 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d454:	4b06      	ldr	r3, [pc, #24]	@ (800d470 <prvCheckTasksWaitingTermination+0x58>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d1e1      	bne.n	800d420 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d45c:	bf00      	nop
 800d45e:	bf00      	nop
 800d460:	3708      	adds	r7, #8
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	200017ac 	.word	0x200017ac
 800d46c:	200017d8 	.word	0x200017d8
 800d470:	200017c0 	.word	0x200017c0

0800d474 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d474:	b580      	push	{r7, lr}
 800d476:	b084      	sub	sp, #16
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d482:	2b00      	cmp	r3, #0
 800d484:	d108      	bne.n	800d498 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d48a:	4618      	mov	r0, r3
 800d48c:	f000 ff9c 	bl	800e3c8 <vPortFree>
				vPortFree( pxTCB );
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f000 ff99 	bl	800e3c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d496:	e019      	b.n	800d4cc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d49e:	2b01      	cmp	r3, #1
 800d4a0:	d103      	bne.n	800d4aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f000 ff90 	bl	800e3c8 <vPortFree>
	}
 800d4a8:	e010      	b.n	800d4cc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d4b0:	2b02      	cmp	r3, #2
 800d4b2:	d00b      	beq.n	800d4cc <prvDeleteTCB+0x58>
	__asm volatile
 800d4b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4b8:	f383 8811 	msr	BASEPRI, r3
 800d4bc:	f3bf 8f6f 	isb	sy
 800d4c0:	f3bf 8f4f 	dsb	sy
 800d4c4:	60fb      	str	r3, [r7, #12]
}
 800d4c6:	bf00      	nop
 800d4c8:	bf00      	nop
 800d4ca:	e7fd      	b.n	800d4c8 <prvDeleteTCB+0x54>
	}
 800d4cc:	bf00      	nop
 800d4ce:	3710      	adds	r7, #16
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}

0800d4d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	b083      	sub	sp, #12
 800d4d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d4da:	4b0c      	ldr	r3, [pc, #48]	@ (800d50c <prvResetNextTaskUnblockTime+0x38>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d104      	bne.n	800d4ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d4e4:	4b0a      	ldr	r3, [pc, #40]	@ (800d510 <prvResetNextTaskUnblockTime+0x3c>)
 800d4e6:	f04f 32ff 	mov.w	r2, #4294967295
 800d4ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d4ec:	e008      	b.n	800d500 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4ee:	4b07      	ldr	r3, [pc, #28]	@ (800d50c <prvResetNextTaskUnblockTime+0x38>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	68db      	ldr	r3, [r3, #12]
 800d4f4:	68db      	ldr	r3, [r3, #12]
 800d4f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	685b      	ldr	r3, [r3, #4]
 800d4fc:	4a04      	ldr	r2, [pc, #16]	@ (800d510 <prvResetNextTaskUnblockTime+0x3c>)
 800d4fe:	6013      	str	r3, [r2, #0]
}
 800d500:	bf00      	nop
 800d502:	370c      	adds	r7, #12
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr
 800d50c:	20001790 	.word	0x20001790
 800d510:	200017f8 	.word	0x200017f8

0800d514 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d514:	b480      	push	{r7}
 800d516:	b083      	sub	sp, #12
 800d518:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d51a:	4b0b      	ldr	r3, [pc, #44]	@ (800d548 <xTaskGetSchedulerState+0x34>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d102      	bne.n	800d528 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d522:	2301      	movs	r3, #1
 800d524:	607b      	str	r3, [r7, #4]
 800d526:	e008      	b.n	800d53a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d528:	4b08      	ldr	r3, [pc, #32]	@ (800d54c <xTaskGetSchedulerState+0x38>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d102      	bne.n	800d536 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d530:	2302      	movs	r3, #2
 800d532:	607b      	str	r3, [r7, #4]
 800d534:	e001      	b.n	800d53a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d536:	2300      	movs	r3, #0
 800d538:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d53a:	687b      	ldr	r3, [r7, #4]
	}
 800d53c:	4618      	mov	r0, r3
 800d53e:	370c      	adds	r7, #12
 800d540:	46bd      	mov	sp, r7
 800d542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d546:	4770      	bx	lr
 800d548:	200017e4 	.word	0x200017e4
 800d54c:	20001800 	.word	0x20001800

0800d550 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d550:	b580      	push	{r7, lr}
 800d552:	b086      	sub	sp, #24
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d55c:	2300      	movs	r3, #0
 800d55e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d058      	beq.n	800d618 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d566:	4b2f      	ldr	r3, [pc, #188]	@ (800d624 <xTaskPriorityDisinherit+0xd4>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	693a      	ldr	r2, [r7, #16]
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d00b      	beq.n	800d588 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d574:	f383 8811 	msr	BASEPRI, r3
 800d578:	f3bf 8f6f 	isb	sy
 800d57c:	f3bf 8f4f 	dsb	sy
 800d580:	60fb      	str	r3, [r7, #12]
}
 800d582:	bf00      	nop
 800d584:	bf00      	nop
 800d586:	e7fd      	b.n	800d584 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d10b      	bne.n	800d5a8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d594:	f383 8811 	msr	BASEPRI, r3
 800d598:	f3bf 8f6f 	isb	sy
 800d59c:	f3bf 8f4f 	dsb	sy
 800d5a0:	60bb      	str	r3, [r7, #8]
}
 800d5a2:	bf00      	nop
 800d5a4:	bf00      	nop
 800d5a6:	e7fd      	b.n	800d5a4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d5a8:	693b      	ldr	r3, [r7, #16]
 800d5aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d5ac:	1e5a      	subs	r2, r3, #1
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5b6:	693b      	ldr	r3, [r7, #16]
 800d5b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d02c      	beq.n	800d618 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d5be:	693b      	ldr	r3, [r7, #16]
 800d5c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d128      	bne.n	800d618 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d5c6:	693b      	ldr	r3, [r7, #16]
 800d5c8:	3304      	adds	r3, #4
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f7fe fb58 	bl	800bc80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d5d0:	693b      	ldr	r3, [r7, #16]
 800d5d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5dc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5e8:	4b0f      	ldr	r3, [pc, #60]	@ (800d628 <xTaskPriorityDisinherit+0xd8>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	d903      	bls.n	800d5f8 <xTaskPriorityDisinherit+0xa8>
 800d5f0:	693b      	ldr	r3, [r7, #16]
 800d5f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5f4:	4a0c      	ldr	r2, [pc, #48]	@ (800d628 <xTaskPriorityDisinherit+0xd8>)
 800d5f6:	6013      	str	r3, [r2, #0]
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5fc:	4613      	mov	r3, r2
 800d5fe:	009b      	lsls	r3, r3, #2
 800d600:	4413      	add	r3, r2
 800d602:	009b      	lsls	r3, r3, #2
 800d604:	4a09      	ldr	r2, [pc, #36]	@ (800d62c <xTaskPriorityDisinherit+0xdc>)
 800d606:	441a      	add	r2, r3
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	3304      	adds	r3, #4
 800d60c:	4619      	mov	r1, r3
 800d60e:	4610      	mov	r0, r2
 800d610:	f7fe fad9 	bl	800bbc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d614:	2301      	movs	r3, #1
 800d616:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d618:	697b      	ldr	r3, [r7, #20]
	}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3718      	adds	r7, #24
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
 800d622:	bf00      	nop
 800d624:	20001304 	.word	0x20001304
 800d628:	200017e0 	.word	0x200017e0
 800d62c:	20001308 	.word	0x20001308

0800d630 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b084      	sub	sp, #16
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d63a:	4b21      	ldr	r3, [pc, #132]	@ (800d6c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d640:	4b20      	ldr	r3, [pc, #128]	@ (800d6c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	3304      	adds	r3, #4
 800d646:	4618      	mov	r0, r3
 800d648:	f7fe fb1a 	bl	800bc80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d652:	d10a      	bne.n	800d66a <prvAddCurrentTaskToDelayedList+0x3a>
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d007      	beq.n	800d66a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d65a:	4b1a      	ldr	r3, [pc, #104]	@ (800d6c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	3304      	adds	r3, #4
 800d660:	4619      	mov	r1, r3
 800d662:	4819      	ldr	r0, [pc, #100]	@ (800d6c8 <prvAddCurrentTaskToDelayedList+0x98>)
 800d664:	f7fe faaf 	bl	800bbc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d668:	e026      	b.n	800d6b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d66a:	68fa      	ldr	r2, [r7, #12]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	4413      	add	r3, r2
 800d670:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d672:	4b14      	ldr	r3, [pc, #80]	@ (800d6c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	68ba      	ldr	r2, [r7, #8]
 800d678:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d67a:	68ba      	ldr	r2, [r7, #8]
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	429a      	cmp	r2, r3
 800d680:	d209      	bcs.n	800d696 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d682:	4b12      	ldr	r3, [pc, #72]	@ (800d6cc <prvAddCurrentTaskToDelayedList+0x9c>)
 800d684:	681a      	ldr	r2, [r3, #0]
 800d686:	4b0f      	ldr	r3, [pc, #60]	@ (800d6c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	3304      	adds	r3, #4
 800d68c:	4619      	mov	r1, r3
 800d68e:	4610      	mov	r0, r2
 800d690:	f7fe fabd 	bl	800bc0e <vListInsert>
}
 800d694:	e010      	b.n	800d6b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d696:	4b0e      	ldr	r3, [pc, #56]	@ (800d6d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d698:	681a      	ldr	r2, [r3, #0]
 800d69a:	4b0a      	ldr	r3, [pc, #40]	@ (800d6c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	3304      	adds	r3, #4
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	4610      	mov	r0, r2
 800d6a4:	f7fe fab3 	bl	800bc0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d6a8:	4b0a      	ldr	r3, [pc, #40]	@ (800d6d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	68ba      	ldr	r2, [r7, #8]
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d202      	bcs.n	800d6b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d6b2:	4a08      	ldr	r2, [pc, #32]	@ (800d6d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	6013      	str	r3, [r2, #0]
}
 800d6b8:	bf00      	nop
 800d6ba:	3710      	adds	r7, #16
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}
 800d6c0:	200017dc 	.word	0x200017dc
 800d6c4:	20001304 	.word	0x20001304
 800d6c8:	200017c4 	.word	0x200017c4
 800d6cc:	20001794 	.word	0x20001794
 800d6d0:	20001790 	.word	0x20001790
 800d6d4:	200017f8 	.word	0x200017f8

0800d6d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b08a      	sub	sp, #40	@ 0x28
 800d6dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d6e2:	f000 fb13 	bl	800dd0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d6e6:	4b1d      	ldr	r3, [pc, #116]	@ (800d75c <xTimerCreateTimerTask+0x84>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d021      	beq.n	800d732 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d6f6:	1d3a      	adds	r2, r7, #4
 800d6f8:	f107 0108 	add.w	r1, r7, #8
 800d6fc:	f107 030c 	add.w	r3, r7, #12
 800d700:	4618      	mov	r0, r3
 800d702:	f7fe fa19 	bl	800bb38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d706:	6879      	ldr	r1, [r7, #4]
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	68fa      	ldr	r2, [r7, #12]
 800d70c:	9202      	str	r2, [sp, #8]
 800d70e:	9301      	str	r3, [sp, #4]
 800d710:	2302      	movs	r3, #2
 800d712:	9300      	str	r3, [sp, #0]
 800d714:	2300      	movs	r3, #0
 800d716:	460a      	mov	r2, r1
 800d718:	4911      	ldr	r1, [pc, #68]	@ (800d760 <xTimerCreateTimerTask+0x88>)
 800d71a:	4812      	ldr	r0, [pc, #72]	@ (800d764 <xTimerCreateTimerTask+0x8c>)
 800d71c:	f7ff f8d0 	bl	800c8c0 <xTaskCreateStatic>
 800d720:	4603      	mov	r3, r0
 800d722:	4a11      	ldr	r2, [pc, #68]	@ (800d768 <xTimerCreateTimerTask+0x90>)
 800d724:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d726:	4b10      	ldr	r3, [pc, #64]	@ (800d768 <xTimerCreateTimerTask+0x90>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d001      	beq.n	800d732 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d72e:	2301      	movs	r3, #1
 800d730:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d732:	697b      	ldr	r3, [r7, #20]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d10b      	bne.n	800d750 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d73c:	f383 8811 	msr	BASEPRI, r3
 800d740:	f3bf 8f6f 	isb	sy
 800d744:	f3bf 8f4f 	dsb	sy
 800d748:	613b      	str	r3, [r7, #16]
}
 800d74a:	bf00      	nop
 800d74c:	bf00      	nop
 800d74e:	e7fd      	b.n	800d74c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d750:	697b      	ldr	r3, [r7, #20]
}
 800d752:	4618      	mov	r0, r3
 800d754:	3718      	adds	r7, #24
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	bf00      	nop
 800d75c:	20001834 	.word	0x20001834
 800d760:	08011fcc 	.word	0x08011fcc
 800d764:	0800d8a5 	.word	0x0800d8a5
 800d768:	20001838 	.word	0x20001838

0800d76c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b08a      	sub	sp, #40	@ 0x28
 800d770:	af00      	add	r7, sp, #0
 800d772:	60f8      	str	r0, [r7, #12]
 800d774:	60b9      	str	r1, [r7, #8]
 800d776:	607a      	str	r2, [r7, #4]
 800d778:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d77a:	2300      	movs	r3, #0
 800d77c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d10b      	bne.n	800d79c <xTimerGenericCommand+0x30>
	__asm volatile
 800d784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d788:	f383 8811 	msr	BASEPRI, r3
 800d78c:	f3bf 8f6f 	isb	sy
 800d790:	f3bf 8f4f 	dsb	sy
 800d794:	623b      	str	r3, [r7, #32]
}
 800d796:	bf00      	nop
 800d798:	bf00      	nop
 800d79a:	e7fd      	b.n	800d798 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d79c:	4b19      	ldr	r3, [pc, #100]	@ (800d804 <xTimerGenericCommand+0x98>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d02a      	beq.n	800d7fa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	2b05      	cmp	r3, #5
 800d7b4:	dc18      	bgt.n	800d7e8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d7b6:	f7ff fead 	bl	800d514 <xTaskGetSchedulerState>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	2b02      	cmp	r3, #2
 800d7be:	d109      	bne.n	800d7d4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d7c0:	4b10      	ldr	r3, [pc, #64]	@ (800d804 <xTimerGenericCommand+0x98>)
 800d7c2:	6818      	ldr	r0, [r3, #0]
 800d7c4:	f107 0110 	add.w	r1, r7, #16
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7cc:	f7fe fbc8 	bl	800bf60 <xQueueGenericSend>
 800d7d0:	6278      	str	r0, [r7, #36]	@ 0x24
 800d7d2:	e012      	b.n	800d7fa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d7d4:	4b0b      	ldr	r3, [pc, #44]	@ (800d804 <xTimerGenericCommand+0x98>)
 800d7d6:	6818      	ldr	r0, [r3, #0]
 800d7d8:	f107 0110 	add.w	r1, r7, #16
 800d7dc:	2300      	movs	r3, #0
 800d7de:	2200      	movs	r2, #0
 800d7e0:	f7fe fbbe 	bl	800bf60 <xQueueGenericSend>
 800d7e4:	6278      	str	r0, [r7, #36]	@ 0x24
 800d7e6:	e008      	b.n	800d7fa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d7e8:	4b06      	ldr	r3, [pc, #24]	@ (800d804 <xTimerGenericCommand+0x98>)
 800d7ea:	6818      	ldr	r0, [r3, #0]
 800d7ec:	f107 0110 	add.w	r1, r7, #16
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	683a      	ldr	r2, [r7, #0]
 800d7f4:	f7fe fcb6 	bl	800c164 <xQueueGenericSendFromISR>
 800d7f8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3728      	adds	r7, #40	@ 0x28
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}
 800d804:	20001834 	.word	0x20001834

0800d808 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b088      	sub	sp, #32
 800d80c:	af02      	add	r7, sp, #8
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d812:	4b23      	ldr	r3, [pc, #140]	@ (800d8a0 <prvProcessExpiredTimer+0x98>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	68db      	ldr	r3, [r3, #12]
 800d818:	68db      	ldr	r3, [r3, #12]
 800d81a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	3304      	adds	r3, #4
 800d820:	4618      	mov	r0, r3
 800d822:	f7fe fa2d 	bl	800bc80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d82c:	f003 0304 	and.w	r3, r3, #4
 800d830:	2b00      	cmp	r3, #0
 800d832:	d023      	beq.n	800d87c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	699a      	ldr	r2, [r3, #24]
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	18d1      	adds	r1, r2, r3
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	683a      	ldr	r2, [r7, #0]
 800d840:	6978      	ldr	r0, [r7, #20]
 800d842:	f000 f8d5 	bl	800d9f0 <prvInsertTimerInActiveList>
 800d846:	4603      	mov	r3, r0
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d020      	beq.n	800d88e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d84c:	2300      	movs	r3, #0
 800d84e:	9300      	str	r3, [sp, #0]
 800d850:	2300      	movs	r3, #0
 800d852:	687a      	ldr	r2, [r7, #4]
 800d854:	2100      	movs	r1, #0
 800d856:	6978      	ldr	r0, [r7, #20]
 800d858:	f7ff ff88 	bl	800d76c <xTimerGenericCommand>
 800d85c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d85e:	693b      	ldr	r3, [r7, #16]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d114      	bne.n	800d88e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d868:	f383 8811 	msr	BASEPRI, r3
 800d86c:	f3bf 8f6f 	isb	sy
 800d870:	f3bf 8f4f 	dsb	sy
 800d874:	60fb      	str	r3, [r7, #12]
}
 800d876:	bf00      	nop
 800d878:	bf00      	nop
 800d87a:	e7fd      	b.n	800d878 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d882:	f023 0301 	bic.w	r3, r3, #1
 800d886:	b2da      	uxtb	r2, r3
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	6a1b      	ldr	r3, [r3, #32]
 800d892:	6978      	ldr	r0, [r7, #20]
 800d894:	4798      	blx	r3
}
 800d896:	bf00      	nop
 800d898:	3718      	adds	r7, #24
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}
 800d89e:	bf00      	nop
 800d8a0:	2000182c 	.word	0x2000182c

0800d8a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b084      	sub	sp, #16
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d8ac:	f107 0308 	add.w	r3, r7, #8
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f000 f859 	bl	800d968 <prvGetNextExpireTime>
 800d8b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	4619      	mov	r1, r3
 800d8bc:	68f8      	ldr	r0, [r7, #12]
 800d8be:	f000 f805 	bl	800d8cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d8c2:	f000 f8d7 	bl	800da74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d8c6:	bf00      	nop
 800d8c8:	e7f0      	b.n	800d8ac <prvTimerTask+0x8>
	...

0800d8cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b084      	sub	sp, #16
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
 800d8d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d8d6:	f7ff fa37 	bl	800cd48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d8da:	f107 0308 	add.w	r3, r7, #8
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f000 f866 	bl	800d9b0 <prvSampleTimeNow>
 800d8e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d130      	bne.n	800d94e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d10a      	bne.n	800d908 <prvProcessTimerOrBlockTask+0x3c>
 800d8f2:	687a      	ldr	r2, [r7, #4]
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	d806      	bhi.n	800d908 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d8fa:	f7ff fa33 	bl	800cd64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d8fe:	68f9      	ldr	r1, [r7, #12]
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f7ff ff81 	bl	800d808 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d906:	e024      	b.n	800d952 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d008      	beq.n	800d920 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d90e:	4b13      	ldr	r3, [pc, #76]	@ (800d95c <prvProcessTimerOrBlockTask+0x90>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d101      	bne.n	800d91c <prvProcessTimerOrBlockTask+0x50>
 800d918:	2301      	movs	r3, #1
 800d91a:	e000      	b.n	800d91e <prvProcessTimerOrBlockTask+0x52>
 800d91c:	2300      	movs	r3, #0
 800d91e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d920:	4b0f      	ldr	r3, [pc, #60]	@ (800d960 <prvProcessTimerOrBlockTask+0x94>)
 800d922:	6818      	ldr	r0, [r3, #0]
 800d924:	687a      	ldr	r2, [r7, #4]
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	1ad3      	subs	r3, r2, r3
 800d92a:	683a      	ldr	r2, [r7, #0]
 800d92c:	4619      	mov	r1, r3
 800d92e:	f7fe ff93 	bl	800c858 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d932:	f7ff fa17 	bl	800cd64 <xTaskResumeAll>
 800d936:	4603      	mov	r3, r0
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d10a      	bne.n	800d952 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d93c:	4b09      	ldr	r3, [pc, #36]	@ (800d964 <prvProcessTimerOrBlockTask+0x98>)
 800d93e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d942:	601a      	str	r2, [r3, #0]
 800d944:	f3bf 8f4f 	dsb	sy
 800d948:	f3bf 8f6f 	isb	sy
}
 800d94c:	e001      	b.n	800d952 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d94e:	f7ff fa09 	bl	800cd64 <xTaskResumeAll>
}
 800d952:	bf00      	nop
 800d954:	3710      	adds	r7, #16
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}
 800d95a:	bf00      	nop
 800d95c:	20001830 	.word	0x20001830
 800d960:	20001834 	.word	0x20001834
 800d964:	e000ed04 	.word	0xe000ed04

0800d968 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d968:	b480      	push	{r7}
 800d96a:	b085      	sub	sp, #20
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d970:	4b0e      	ldr	r3, [pc, #56]	@ (800d9ac <prvGetNextExpireTime+0x44>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d101      	bne.n	800d97e <prvGetNextExpireTime+0x16>
 800d97a:	2201      	movs	r2, #1
 800d97c:	e000      	b.n	800d980 <prvGetNextExpireTime+0x18>
 800d97e:	2200      	movs	r2, #0
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d105      	bne.n	800d998 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d98c:	4b07      	ldr	r3, [pc, #28]	@ (800d9ac <prvGetNextExpireTime+0x44>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	68db      	ldr	r3, [r3, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	60fb      	str	r3, [r7, #12]
 800d996:	e001      	b.n	800d99c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d998:	2300      	movs	r3, #0
 800d99a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d99c:	68fb      	ldr	r3, [r7, #12]
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3714      	adds	r7, #20
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a8:	4770      	bx	lr
 800d9aa:	bf00      	nop
 800d9ac:	2000182c 	.word	0x2000182c

0800d9b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b084      	sub	sp, #16
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d9b8:	f7ff fa72 	bl	800cea0 <xTaskGetTickCount>
 800d9bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d9be:	4b0b      	ldr	r3, [pc, #44]	@ (800d9ec <prvSampleTimeNow+0x3c>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	68fa      	ldr	r2, [r7, #12]
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d205      	bcs.n	800d9d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d9c8:	f000 f93a 	bl	800dc40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	601a      	str	r2, [r3, #0]
 800d9d2:	e002      	b.n	800d9da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d9da:	4a04      	ldr	r2, [pc, #16]	@ (800d9ec <prvSampleTimeNow+0x3c>)
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	3710      	adds	r7, #16
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}
 800d9ea:	bf00      	nop
 800d9ec:	2000183c 	.word	0x2000183c

0800d9f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b086      	sub	sp, #24
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	60f8      	str	r0, [r7, #12]
 800d9f8:	60b9      	str	r1, [r7, #8]
 800d9fa:	607a      	str	r2, [r7, #4]
 800d9fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d9fe:	2300      	movs	r3, #0
 800da00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	68ba      	ldr	r2, [r7, #8]
 800da06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	68fa      	ldr	r2, [r7, #12]
 800da0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800da0e:	68ba      	ldr	r2, [r7, #8]
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	429a      	cmp	r2, r3
 800da14:	d812      	bhi.n	800da3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da16:	687a      	ldr	r2, [r7, #4]
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	1ad2      	subs	r2, r2, r3
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	699b      	ldr	r3, [r3, #24]
 800da20:	429a      	cmp	r2, r3
 800da22:	d302      	bcc.n	800da2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800da24:	2301      	movs	r3, #1
 800da26:	617b      	str	r3, [r7, #20]
 800da28:	e01b      	b.n	800da62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800da2a:	4b10      	ldr	r3, [pc, #64]	@ (800da6c <prvInsertTimerInActiveList+0x7c>)
 800da2c:	681a      	ldr	r2, [r3, #0]
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	3304      	adds	r3, #4
 800da32:	4619      	mov	r1, r3
 800da34:	4610      	mov	r0, r2
 800da36:	f7fe f8ea 	bl	800bc0e <vListInsert>
 800da3a:	e012      	b.n	800da62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800da3c:	687a      	ldr	r2, [r7, #4]
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	429a      	cmp	r2, r3
 800da42:	d206      	bcs.n	800da52 <prvInsertTimerInActiveList+0x62>
 800da44:	68ba      	ldr	r2, [r7, #8]
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	429a      	cmp	r2, r3
 800da4a:	d302      	bcc.n	800da52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800da4c:	2301      	movs	r3, #1
 800da4e:	617b      	str	r3, [r7, #20]
 800da50:	e007      	b.n	800da62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800da52:	4b07      	ldr	r3, [pc, #28]	@ (800da70 <prvInsertTimerInActiveList+0x80>)
 800da54:	681a      	ldr	r2, [r3, #0]
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	3304      	adds	r3, #4
 800da5a:	4619      	mov	r1, r3
 800da5c:	4610      	mov	r0, r2
 800da5e:	f7fe f8d6 	bl	800bc0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800da62:	697b      	ldr	r3, [r7, #20]
}
 800da64:	4618      	mov	r0, r3
 800da66:	3718      	adds	r7, #24
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}
 800da6c:	20001830 	.word	0x20001830
 800da70:	2000182c 	.word	0x2000182c

0800da74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b08e      	sub	sp, #56	@ 0x38
 800da78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800da7a:	e0ce      	b.n	800dc1a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	da19      	bge.n	800dab6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800da82:	1d3b      	adds	r3, r7, #4
 800da84:	3304      	adds	r3, #4
 800da86:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800da88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d10b      	bne.n	800daa6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800da8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da92:	f383 8811 	msr	BASEPRI, r3
 800da96:	f3bf 8f6f 	isb	sy
 800da9a:	f3bf 8f4f 	dsb	sy
 800da9e:	61fb      	str	r3, [r7, #28]
}
 800daa0:	bf00      	nop
 800daa2:	bf00      	nop
 800daa4:	e7fd      	b.n	800daa2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800daa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800daac:	6850      	ldr	r0, [r2, #4]
 800daae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dab0:	6892      	ldr	r2, [r2, #8]
 800dab2:	4611      	mov	r1, r2
 800dab4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	f2c0 80ae 	blt.w	800dc1a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dac4:	695b      	ldr	r3, [r3, #20]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d004      	beq.n	800dad4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800daca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dacc:	3304      	adds	r3, #4
 800dace:	4618      	mov	r0, r3
 800dad0:	f7fe f8d6 	bl	800bc80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dad4:	463b      	mov	r3, r7
 800dad6:	4618      	mov	r0, r3
 800dad8:	f7ff ff6a 	bl	800d9b0 <prvSampleTimeNow>
 800dadc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2b09      	cmp	r3, #9
 800dae2:	f200 8097 	bhi.w	800dc14 <prvProcessReceivedCommands+0x1a0>
 800dae6:	a201      	add	r2, pc, #4	@ (adr r2, 800daec <prvProcessReceivedCommands+0x78>)
 800dae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daec:	0800db15 	.word	0x0800db15
 800daf0:	0800db15 	.word	0x0800db15
 800daf4:	0800db15 	.word	0x0800db15
 800daf8:	0800db8b 	.word	0x0800db8b
 800dafc:	0800db9f 	.word	0x0800db9f
 800db00:	0800dbeb 	.word	0x0800dbeb
 800db04:	0800db15 	.word	0x0800db15
 800db08:	0800db15 	.word	0x0800db15
 800db0c:	0800db8b 	.word	0x0800db8b
 800db10:	0800db9f 	.word	0x0800db9f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800db14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db1a:	f043 0301 	orr.w	r3, r3, #1
 800db1e:	b2da      	uxtb	r2, r3
 800db20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800db26:	68ba      	ldr	r2, [r7, #8]
 800db28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db2a:	699b      	ldr	r3, [r3, #24]
 800db2c:	18d1      	adds	r1, r2, r3
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db34:	f7ff ff5c 	bl	800d9f0 <prvInsertTimerInActiveList>
 800db38:	4603      	mov	r3, r0
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d06c      	beq.n	800dc18 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db40:	6a1b      	ldr	r3, [r3, #32]
 800db42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db4c:	f003 0304 	and.w	r3, r3, #4
 800db50:	2b00      	cmp	r3, #0
 800db52:	d061      	beq.n	800dc18 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800db54:	68ba      	ldr	r2, [r7, #8]
 800db56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db58:	699b      	ldr	r3, [r3, #24]
 800db5a:	441a      	add	r2, r3
 800db5c:	2300      	movs	r3, #0
 800db5e:	9300      	str	r3, [sp, #0]
 800db60:	2300      	movs	r3, #0
 800db62:	2100      	movs	r1, #0
 800db64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db66:	f7ff fe01 	bl	800d76c <xTimerGenericCommand>
 800db6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800db6c:	6a3b      	ldr	r3, [r7, #32]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d152      	bne.n	800dc18 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800db72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db76:	f383 8811 	msr	BASEPRI, r3
 800db7a:	f3bf 8f6f 	isb	sy
 800db7e:	f3bf 8f4f 	dsb	sy
 800db82:	61bb      	str	r3, [r7, #24]
}
 800db84:	bf00      	nop
 800db86:	bf00      	nop
 800db88:	e7fd      	b.n	800db86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db90:	f023 0301 	bic.w	r3, r3, #1
 800db94:	b2da      	uxtb	r2, r3
 800db96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800db9c:	e03d      	b.n	800dc1a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800db9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dba0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dba4:	f043 0301 	orr.w	r3, r3, #1
 800dba8:	b2da      	uxtb	r2, r3
 800dbaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dbb0:	68ba      	ldr	r2, [r7, #8]
 800dbb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbb4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dbb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbb8:	699b      	ldr	r3, [r3, #24]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d10b      	bne.n	800dbd6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800dbbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbc2:	f383 8811 	msr	BASEPRI, r3
 800dbc6:	f3bf 8f6f 	isb	sy
 800dbca:	f3bf 8f4f 	dsb	sy
 800dbce:	617b      	str	r3, [r7, #20]
}
 800dbd0:	bf00      	nop
 800dbd2:	bf00      	nop
 800dbd4:	e7fd      	b.n	800dbd2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dbd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbd8:	699a      	ldr	r2, [r3, #24]
 800dbda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbdc:	18d1      	adds	r1, r2, r3
 800dbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dbe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dbe4:	f7ff ff04 	bl	800d9f0 <prvInsertTimerInActiveList>
					break;
 800dbe8:	e017      	b.n	800dc1a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dbea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dbf0:	f003 0302 	and.w	r3, r3, #2
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d103      	bne.n	800dc00 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800dbf8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dbfa:	f000 fbe5 	bl	800e3c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dbfe:	e00c      	b.n	800dc1a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dc00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dc06:	f023 0301 	bic.w	r3, r3, #1
 800dc0a:	b2da      	uxtb	r2, r3
 800dc0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800dc12:	e002      	b.n	800dc1a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800dc14:	bf00      	nop
 800dc16:	e000      	b.n	800dc1a <prvProcessReceivedCommands+0x1a6>
					break;
 800dc18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dc1a:	4b08      	ldr	r3, [pc, #32]	@ (800dc3c <prvProcessReceivedCommands+0x1c8>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	1d39      	adds	r1, r7, #4
 800dc20:	2200      	movs	r2, #0
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7fe fb3c 	bl	800c2a0 <xQueueReceive>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	f47f af26 	bne.w	800da7c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800dc30:	bf00      	nop
 800dc32:	bf00      	nop
 800dc34:	3730      	adds	r7, #48	@ 0x30
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}
 800dc3a:	bf00      	nop
 800dc3c:	20001834 	.word	0x20001834

0800dc40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b088      	sub	sp, #32
 800dc44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dc46:	e049      	b.n	800dcdc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dc48:	4b2e      	ldr	r3, [pc, #184]	@ (800dd04 <prvSwitchTimerLists+0xc4>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	68db      	ldr	r3, [r3, #12]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc52:	4b2c      	ldr	r3, [pc, #176]	@ (800dd04 <prvSwitchTimerLists+0xc4>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	68db      	ldr	r3, [r3, #12]
 800dc58:	68db      	ldr	r3, [r3, #12]
 800dc5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	3304      	adds	r3, #4
 800dc60:	4618      	mov	r0, r3
 800dc62:	f7fe f80d 	bl	800bc80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	6a1b      	ldr	r3, [r3, #32]
 800dc6a:	68f8      	ldr	r0, [r7, #12]
 800dc6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dc74:	f003 0304 	and.w	r3, r3, #4
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d02f      	beq.n	800dcdc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	699b      	ldr	r3, [r3, #24]
 800dc80:	693a      	ldr	r2, [r7, #16]
 800dc82:	4413      	add	r3, r2
 800dc84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dc86:	68ba      	ldr	r2, [r7, #8]
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	429a      	cmp	r2, r3
 800dc8c:	d90e      	bls.n	800dcac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	68ba      	ldr	r2, [r7, #8]
 800dc92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	68fa      	ldr	r2, [r7, #12]
 800dc98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dc9a:	4b1a      	ldr	r3, [pc, #104]	@ (800dd04 <prvSwitchTimerLists+0xc4>)
 800dc9c:	681a      	ldr	r2, [r3, #0]
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	3304      	adds	r3, #4
 800dca2:	4619      	mov	r1, r3
 800dca4:	4610      	mov	r0, r2
 800dca6:	f7fd ffb2 	bl	800bc0e <vListInsert>
 800dcaa:	e017      	b.n	800dcdc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dcac:	2300      	movs	r3, #0
 800dcae:	9300      	str	r3, [sp, #0]
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	693a      	ldr	r2, [r7, #16]
 800dcb4:	2100      	movs	r1, #0
 800dcb6:	68f8      	ldr	r0, [r7, #12]
 800dcb8:	f7ff fd58 	bl	800d76c <xTimerGenericCommand>
 800dcbc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d10b      	bne.n	800dcdc <prvSwitchTimerLists+0x9c>
	__asm volatile
 800dcc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcc8:	f383 8811 	msr	BASEPRI, r3
 800dccc:	f3bf 8f6f 	isb	sy
 800dcd0:	f3bf 8f4f 	dsb	sy
 800dcd4:	603b      	str	r3, [r7, #0]
}
 800dcd6:	bf00      	nop
 800dcd8:	bf00      	nop
 800dcda:	e7fd      	b.n	800dcd8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dcdc:	4b09      	ldr	r3, [pc, #36]	@ (800dd04 <prvSwitchTimerLists+0xc4>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d1b0      	bne.n	800dc48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dce6:	4b07      	ldr	r3, [pc, #28]	@ (800dd04 <prvSwitchTimerLists+0xc4>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dcec:	4b06      	ldr	r3, [pc, #24]	@ (800dd08 <prvSwitchTimerLists+0xc8>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4a04      	ldr	r2, [pc, #16]	@ (800dd04 <prvSwitchTimerLists+0xc4>)
 800dcf2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dcf4:	4a04      	ldr	r2, [pc, #16]	@ (800dd08 <prvSwitchTimerLists+0xc8>)
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	6013      	str	r3, [r2, #0]
}
 800dcfa:	bf00      	nop
 800dcfc:	3718      	adds	r7, #24
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
 800dd02:	bf00      	nop
 800dd04:	2000182c 	.word	0x2000182c
 800dd08:	20001830 	.word	0x20001830

0800dd0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b082      	sub	sp, #8
 800dd10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dd12:	f000 f969 	bl	800dfe8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dd16:	4b15      	ldr	r3, [pc, #84]	@ (800dd6c <prvCheckForValidListAndQueue+0x60>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d120      	bne.n	800dd60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dd1e:	4814      	ldr	r0, [pc, #80]	@ (800dd70 <prvCheckForValidListAndQueue+0x64>)
 800dd20:	f7fd ff24 	bl	800bb6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dd24:	4813      	ldr	r0, [pc, #76]	@ (800dd74 <prvCheckForValidListAndQueue+0x68>)
 800dd26:	f7fd ff21 	bl	800bb6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dd2a:	4b13      	ldr	r3, [pc, #76]	@ (800dd78 <prvCheckForValidListAndQueue+0x6c>)
 800dd2c:	4a10      	ldr	r2, [pc, #64]	@ (800dd70 <prvCheckForValidListAndQueue+0x64>)
 800dd2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dd30:	4b12      	ldr	r3, [pc, #72]	@ (800dd7c <prvCheckForValidListAndQueue+0x70>)
 800dd32:	4a10      	ldr	r2, [pc, #64]	@ (800dd74 <prvCheckForValidListAndQueue+0x68>)
 800dd34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dd36:	2300      	movs	r3, #0
 800dd38:	9300      	str	r3, [sp, #0]
 800dd3a:	4b11      	ldr	r3, [pc, #68]	@ (800dd80 <prvCheckForValidListAndQueue+0x74>)
 800dd3c:	4a11      	ldr	r2, [pc, #68]	@ (800dd84 <prvCheckForValidListAndQueue+0x78>)
 800dd3e:	2110      	movs	r1, #16
 800dd40:	200a      	movs	r0, #10
 800dd42:	f7fe f831 	bl	800bda8 <xQueueGenericCreateStatic>
 800dd46:	4603      	mov	r3, r0
 800dd48:	4a08      	ldr	r2, [pc, #32]	@ (800dd6c <prvCheckForValidListAndQueue+0x60>)
 800dd4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dd4c:	4b07      	ldr	r3, [pc, #28]	@ (800dd6c <prvCheckForValidListAndQueue+0x60>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d005      	beq.n	800dd60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dd54:	4b05      	ldr	r3, [pc, #20]	@ (800dd6c <prvCheckForValidListAndQueue+0x60>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	490b      	ldr	r1, [pc, #44]	@ (800dd88 <prvCheckForValidListAndQueue+0x7c>)
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f7fe fd52 	bl	800c804 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dd60:	f000 f974 	bl	800e04c <vPortExitCritical>
}
 800dd64:	bf00      	nop
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
 800dd6a:	bf00      	nop
 800dd6c:	20001834 	.word	0x20001834
 800dd70:	20001804 	.word	0x20001804
 800dd74:	20001818 	.word	0x20001818
 800dd78:	2000182c 	.word	0x2000182c
 800dd7c:	20001830 	.word	0x20001830
 800dd80:	200018e0 	.word	0x200018e0
 800dd84:	20001840 	.word	0x20001840
 800dd88:	08011fd4 	.word	0x08011fd4

0800dd8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	b085      	sub	sp, #20
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	60f8      	str	r0, [r7, #12]
 800dd94:	60b9      	str	r1, [r7, #8]
 800dd96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	3b04      	subs	r3, #4
 800dd9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800dda4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	3b04      	subs	r3, #4
 800ddaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	f023 0201 	bic.w	r2, r3, #1
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	3b04      	subs	r3, #4
 800ddba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ddbc:	4a0c      	ldr	r2, [pc, #48]	@ (800ddf0 <pxPortInitialiseStack+0x64>)
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	3b14      	subs	r3, #20
 800ddc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ddc8:	687a      	ldr	r2, [r7, #4]
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	3b04      	subs	r3, #4
 800ddd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f06f 0202 	mvn.w	r2, #2
 800ddda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	3b20      	subs	r3, #32
 800dde0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dde2:	68fb      	ldr	r3, [r7, #12]
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	3714      	adds	r7, #20
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr
 800ddf0:	0800ddf5 	.word	0x0800ddf5

0800ddf4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b085      	sub	sp, #20
 800ddf8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ddfe:	4b13      	ldr	r3, [pc, #76]	@ (800de4c <prvTaskExitError+0x58>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de06:	d00b      	beq.n	800de20 <prvTaskExitError+0x2c>
	__asm volatile
 800de08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de0c:	f383 8811 	msr	BASEPRI, r3
 800de10:	f3bf 8f6f 	isb	sy
 800de14:	f3bf 8f4f 	dsb	sy
 800de18:	60fb      	str	r3, [r7, #12]
}
 800de1a:	bf00      	nop
 800de1c:	bf00      	nop
 800de1e:	e7fd      	b.n	800de1c <prvTaskExitError+0x28>
	__asm volatile
 800de20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de24:	f383 8811 	msr	BASEPRI, r3
 800de28:	f3bf 8f6f 	isb	sy
 800de2c:	f3bf 8f4f 	dsb	sy
 800de30:	60bb      	str	r3, [r7, #8]
}
 800de32:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800de34:	bf00      	nop
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d0fc      	beq.n	800de36 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800de3c:	bf00      	nop
 800de3e:	bf00      	nop
 800de40:	3714      	adds	r7, #20
 800de42:	46bd      	mov	sp, r7
 800de44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de48:	4770      	bx	lr
 800de4a:	bf00      	nop
 800de4c:	20000010 	.word	0x20000010

0800de50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800de50:	4b07      	ldr	r3, [pc, #28]	@ (800de70 <pxCurrentTCBConst2>)
 800de52:	6819      	ldr	r1, [r3, #0]
 800de54:	6808      	ldr	r0, [r1, #0]
 800de56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de5a:	f380 8809 	msr	PSP, r0
 800de5e:	f3bf 8f6f 	isb	sy
 800de62:	f04f 0000 	mov.w	r0, #0
 800de66:	f380 8811 	msr	BASEPRI, r0
 800de6a:	4770      	bx	lr
 800de6c:	f3af 8000 	nop.w

0800de70 <pxCurrentTCBConst2>:
 800de70:	20001304 	.word	0x20001304
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800de74:	bf00      	nop
 800de76:	bf00      	nop

0800de78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800de78:	4808      	ldr	r0, [pc, #32]	@ (800de9c <prvPortStartFirstTask+0x24>)
 800de7a:	6800      	ldr	r0, [r0, #0]
 800de7c:	6800      	ldr	r0, [r0, #0]
 800de7e:	f380 8808 	msr	MSP, r0
 800de82:	f04f 0000 	mov.w	r0, #0
 800de86:	f380 8814 	msr	CONTROL, r0
 800de8a:	b662      	cpsie	i
 800de8c:	b661      	cpsie	f
 800de8e:	f3bf 8f4f 	dsb	sy
 800de92:	f3bf 8f6f 	isb	sy
 800de96:	df00      	svc	0
 800de98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800de9a:	bf00      	nop
 800de9c:	e000ed08 	.word	0xe000ed08

0800dea0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b086      	sub	sp, #24
 800dea4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dea6:	4b47      	ldr	r3, [pc, #284]	@ (800dfc4 <xPortStartScheduler+0x124>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	4a47      	ldr	r2, [pc, #284]	@ (800dfc8 <xPortStartScheduler+0x128>)
 800deac:	4293      	cmp	r3, r2
 800deae:	d10b      	bne.n	800dec8 <xPortStartScheduler+0x28>
	__asm volatile
 800deb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deb4:	f383 8811 	msr	BASEPRI, r3
 800deb8:	f3bf 8f6f 	isb	sy
 800debc:	f3bf 8f4f 	dsb	sy
 800dec0:	60fb      	str	r3, [r7, #12]
}
 800dec2:	bf00      	nop
 800dec4:	bf00      	nop
 800dec6:	e7fd      	b.n	800dec4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dec8:	4b3e      	ldr	r3, [pc, #248]	@ (800dfc4 <xPortStartScheduler+0x124>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	4a3f      	ldr	r2, [pc, #252]	@ (800dfcc <xPortStartScheduler+0x12c>)
 800dece:	4293      	cmp	r3, r2
 800ded0:	d10b      	bne.n	800deea <xPortStartScheduler+0x4a>
	__asm volatile
 800ded2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ded6:	f383 8811 	msr	BASEPRI, r3
 800deda:	f3bf 8f6f 	isb	sy
 800dede:	f3bf 8f4f 	dsb	sy
 800dee2:	613b      	str	r3, [r7, #16]
}
 800dee4:	bf00      	nop
 800dee6:	bf00      	nop
 800dee8:	e7fd      	b.n	800dee6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800deea:	4b39      	ldr	r3, [pc, #228]	@ (800dfd0 <xPortStartScheduler+0x130>)
 800deec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	781b      	ldrb	r3, [r3, #0]
 800def2:	b2db      	uxtb	r3, r3
 800def4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	22ff      	movs	r2, #255	@ 0xff
 800defa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	781b      	ldrb	r3, [r3, #0]
 800df00:	b2db      	uxtb	r3, r3
 800df02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800df04:	78fb      	ldrb	r3, [r7, #3]
 800df06:	b2db      	uxtb	r3, r3
 800df08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800df0c:	b2da      	uxtb	r2, r3
 800df0e:	4b31      	ldr	r3, [pc, #196]	@ (800dfd4 <xPortStartScheduler+0x134>)
 800df10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800df12:	4b31      	ldr	r3, [pc, #196]	@ (800dfd8 <xPortStartScheduler+0x138>)
 800df14:	2207      	movs	r2, #7
 800df16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800df18:	e009      	b.n	800df2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800df1a:	4b2f      	ldr	r3, [pc, #188]	@ (800dfd8 <xPortStartScheduler+0x138>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	3b01      	subs	r3, #1
 800df20:	4a2d      	ldr	r2, [pc, #180]	@ (800dfd8 <xPortStartScheduler+0x138>)
 800df22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800df24:	78fb      	ldrb	r3, [r7, #3]
 800df26:	b2db      	uxtb	r3, r3
 800df28:	005b      	lsls	r3, r3, #1
 800df2a:	b2db      	uxtb	r3, r3
 800df2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800df2e:	78fb      	ldrb	r3, [r7, #3]
 800df30:	b2db      	uxtb	r3, r3
 800df32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800df36:	2b80      	cmp	r3, #128	@ 0x80
 800df38:	d0ef      	beq.n	800df1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800df3a:	4b27      	ldr	r3, [pc, #156]	@ (800dfd8 <xPortStartScheduler+0x138>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	f1c3 0307 	rsb	r3, r3, #7
 800df42:	2b04      	cmp	r3, #4
 800df44:	d00b      	beq.n	800df5e <xPortStartScheduler+0xbe>
	__asm volatile
 800df46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df4a:	f383 8811 	msr	BASEPRI, r3
 800df4e:	f3bf 8f6f 	isb	sy
 800df52:	f3bf 8f4f 	dsb	sy
 800df56:	60bb      	str	r3, [r7, #8]
}
 800df58:	bf00      	nop
 800df5a:	bf00      	nop
 800df5c:	e7fd      	b.n	800df5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800df5e:	4b1e      	ldr	r3, [pc, #120]	@ (800dfd8 <xPortStartScheduler+0x138>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	021b      	lsls	r3, r3, #8
 800df64:	4a1c      	ldr	r2, [pc, #112]	@ (800dfd8 <xPortStartScheduler+0x138>)
 800df66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800df68:	4b1b      	ldr	r3, [pc, #108]	@ (800dfd8 <xPortStartScheduler+0x138>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800df70:	4a19      	ldr	r2, [pc, #100]	@ (800dfd8 <xPortStartScheduler+0x138>)
 800df72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	b2da      	uxtb	r2, r3
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800df7c:	4b17      	ldr	r3, [pc, #92]	@ (800dfdc <xPortStartScheduler+0x13c>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4a16      	ldr	r2, [pc, #88]	@ (800dfdc <xPortStartScheduler+0x13c>)
 800df82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800df86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800df88:	4b14      	ldr	r3, [pc, #80]	@ (800dfdc <xPortStartScheduler+0x13c>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	4a13      	ldr	r2, [pc, #76]	@ (800dfdc <xPortStartScheduler+0x13c>)
 800df8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800df92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800df94:	f000 f8da 	bl	800e14c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800df98:	4b11      	ldr	r3, [pc, #68]	@ (800dfe0 <xPortStartScheduler+0x140>)
 800df9a:	2200      	movs	r2, #0
 800df9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800df9e:	f000 f8f9 	bl	800e194 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dfa2:	4b10      	ldr	r3, [pc, #64]	@ (800dfe4 <xPortStartScheduler+0x144>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	4a0f      	ldr	r2, [pc, #60]	@ (800dfe4 <xPortStartScheduler+0x144>)
 800dfa8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800dfac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dfae:	f7ff ff63 	bl	800de78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dfb2:	f7ff f83f 	bl	800d034 <vTaskSwitchContext>
	prvTaskExitError();
 800dfb6:	f7ff ff1d 	bl	800ddf4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dfba:	2300      	movs	r3, #0
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3718      	adds	r7, #24
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}
 800dfc4:	e000ed00 	.word	0xe000ed00
 800dfc8:	410fc271 	.word	0x410fc271
 800dfcc:	410fc270 	.word	0x410fc270
 800dfd0:	e000e400 	.word	0xe000e400
 800dfd4:	20001930 	.word	0x20001930
 800dfd8:	20001934 	.word	0x20001934
 800dfdc:	e000ed20 	.word	0xe000ed20
 800dfe0:	20000010 	.word	0x20000010
 800dfe4:	e000ef34 	.word	0xe000ef34

0800dfe8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dfe8:	b480      	push	{r7}
 800dfea:	b083      	sub	sp, #12
 800dfec:	af00      	add	r7, sp, #0
	__asm volatile
 800dfee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dff2:	f383 8811 	msr	BASEPRI, r3
 800dff6:	f3bf 8f6f 	isb	sy
 800dffa:	f3bf 8f4f 	dsb	sy
 800dffe:	607b      	str	r3, [r7, #4]
}
 800e000:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e002:	4b10      	ldr	r3, [pc, #64]	@ (800e044 <vPortEnterCritical+0x5c>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	3301      	adds	r3, #1
 800e008:	4a0e      	ldr	r2, [pc, #56]	@ (800e044 <vPortEnterCritical+0x5c>)
 800e00a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e00c:	4b0d      	ldr	r3, [pc, #52]	@ (800e044 <vPortEnterCritical+0x5c>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	2b01      	cmp	r3, #1
 800e012:	d110      	bne.n	800e036 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e014:	4b0c      	ldr	r3, [pc, #48]	@ (800e048 <vPortEnterCritical+0x60>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	b2db      	uxtb	r3, r3
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d00b      	beq.n	800e036 <vPortEnterCritical+0x4e>
	__asm volatile
 800e01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e022:	f383 8811 	msr	BASEPRI, r3
 800e026:	f3bf 8f6f 	isb	sy
 800e02a:	f3bf 8f4f 	dsb	sy
 800e02e:	603b      	str	r3, [r7, #0]
}
 800e030:	bf00      	nop
 800e032:	bf00      	nop
 800e034:	e7fd      	b.n	800e032 <vPortEnterCritical+0x4a>
	}
}
 800e036:	bf00      	nop
 800e038:	370c      	adds	r7, #12
 800e03a:	46bd      	mov	sp, r7
 800e03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e040:	4770      	bx	lr
 800e042:	bf00      	nop
 800e044:	20000010 	.word	0x20000010
 800e048:	e000ed04 	.word	0xe000ed04

0800e04c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e04c:	b480      	push	{r7}
 800e04e:	b083      	sub	sp, #12
 800e050:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e052:	4b12      	ldr	r3, [pc, #72]	@ (800e09c <vPortExitCritical+0x50>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d10b      	bne.n	800e072 <vPortExitCritical+0x26>
	__asm volatile
 800e05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e05e:	f383 8811 	msr	BASEPRI, r3
 800e062:	f3bf 8f6f 	isb	sy
 800e066:	f3bf 8f4f 	dsb	sy
 800e06a:	607b      	str	r3, [r7, #4]
}
 800e06c:	bf00      	nop
 800e06e:	bf00      	nop
 800e070:	e7fd      	b.n	800e06e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e072:	4b0a      	ldr	r3, [pc, #40]	@ (800e09c <vPortExitCritical+0x50>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	3b01      	subs	r3, #1
 800e078:	4a08      	ldr	r2, [pc, #32]	@ (800e09c <vPortExitCritical+0x50>)
 800e07a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e07c:	4b07      	ldr	r3, [pc, #28]	@ (800e09c <vPortExitCritical+0x50>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d105      	bne.n	800e090 <vPortExitCritical+0x44>
 800e084:	2300      	movs	r3, #0
 800e086:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	f383 8811 	msr	BASEPRI, r3
}
 800e08e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e090:	bf00      	nop
 800e092:	370c      	adds	r7, #12
 800e094:	46bd      	mov	sp, r7
 800e096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09a:	4770      	bx	lr
 800e09c:	20000010 	.word	0x20000010

0800e0a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e0a0:	f3ef 8009 	mrs	r0, PSP
 800e0a4:	f3bf 8f6f 	isb	sy
 800e0a8:	4b15      	ldr	r3, [pc, #84]	@ (800e100 <pxCurrentTCBConst>)
 800e0aa:	681a      	ldr	r2, [r3, #0]
 800e0ac:	f01e 0f10 	tst.w	lr, #16
 800e0b0:	bf08      	it	eq
 800e0b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e0b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0ba:	6010      	str	r0, [r2, #0]
 800e0bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e0c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e0c4:	f380 8811 	msr	BASEPRI, r0
 800e0c8:	f3bf 8f4f 	dsb	sy
 800e0cc:	f3bf 8f6f 	isb	sy
 800e0d0:	f7fe ffb0 	bl	800d034 <vTaskSwitchContext>
 800e0d4:	f04f 0000 	mov.w	r0, #0
 800e0d8:	f380 8811 	msr	BASEPRI, r0
 800e0dc:	bc09      	pop	{r0, r3}
 800e0de:	6819      	ldr	r1, [r3, #0]
 800e0e0:	6808      	ldr	r0, [r1, #0]
 800e0e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0e6:	f01e 0f10 	tst.w	lr, #16
 800e0ea:	bf08      	it	eq
 800e0ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e0f0:	f380 8809 	msr	PSP, r0
 800e0f4:	f3bf 8f6f 	isb	sy
 800e0f8:	4770      	bx	lr
 800e0fa:	bf00      	nop
 800e0fc:	f3af 8000 	nop.w

0800e100 <pxCurrentTCBConst>:
 800e100:	20001304 	.word	0x20001304
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e104:	bf00      	nop
 800e106:	bf00      	nop

0800e108 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b082      	sub	sp, #8
 800e10c:	af00      	add	r7, sp, #0
	__asm volatile
 800e10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e112:	f383 8811 	msr	BASEPRI, r3
 800e116:	f3bf 8f6f 	isb	sy
 800e11a:	f3bf 8f4f 	dsb	sy
 800e11e:	607b      	str	r3, [r7, #4]
}
 800e120:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e122:	f7fe fecd 	bl	800cec0 <xTaskIncrementTick>
 800e126:	4603      	mov	r3, r0
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d003      	beq.n	800e134 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e12c:	4b06      	ldr	r3, [pc, #24]	@ (800e148 <xPortSysTickHandler+0x40>)
 800e12e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e132:	601a      	str	r2, [r3, #0]
 800e134:	2300      	movs	r3, #0
 800e136:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	f383 8811 	msr	BASEPRI, r3
}
 800e13e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e140:	bf00      	nop
 800e142:	3708      	adds	r7, #8
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}
 800e148:	e000ed04 	.word	0xe000ed04

0800e14c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e14c:	b480      	push	{r7}
 800e14e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e150:	4b0b      	ldr	r3, [pc, #44]	@ (800e180 <vPortSetupTimerInterrupt+0x34>)
 800e152:	2200      	movs	r2, #0
 800e154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e156:	4b0b      	ldr	r3, [pc, #44]	@ (800e184 <vPortSetupTimerInterrupt+0x38>)
 800e158:	2200      	movs	r2, #0
 800e15a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e15c:	4b0a      	ldr	r3, [pc, #40]	@ (800e188 <vPortSetupTimerInterrupt+0x3c>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4a0a      	ldr	r2, [pc, #40]	@ (800e18c <vPortSetupTimerInterrupt+0x40>)
 800e162:	fba2 2303 	umull	r2, r3, r2, r3
 800e166:	099b      	lsrs	r3, r3, #6
 800e168:	4a09      	ldr	r2, [pc, #36]	@ (800e190 <vPortSetupTimerInterrupt+0x44>)
 800e16a:	3b01      	subs	r3, #1
 800e16c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e16e:	4b04      	ldr	r3, [pc, #16]	@ (800e180 <vPortSetupTimerInterrupt+0x34>)
 800e170:	2207      	movs	r2, #7
 800e172:	601a      	str	r2, [r3, #0]
}
 800e174:	bf00      	nop
 800e176:	46bd      	mov	sp, r7
 800e178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17c:	4770      	bx	lr
 800e17e:	bf00      	nop
 800e180:	e000e010 	.word	0xe000e010
 800e184:	e000e018 	.word	0xe000e018
 800e188:	20000004 	.word	0x20000004
 800e18c:	10624dd3 	.word	0x10624dd3
 800e190:	e000e014 	.word	0xe000e014

0800e194 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e194:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e1a4 <vPortEnableVFP+0x10>
 800e198:	6801      	ldr	r1, [r0, #0]
 800e19a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e19e:	6001      	str	r1, [r0, #0]
 800e1a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e1a2:	bf00      	nop
 800e1a4:	e000ed88 	.word	0xe000ed88

0800e1a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b085      	sub	sp, #20
 800e1ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e1ae:	f3ef 8305 	mrs	r3, IPSR
 800e1b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2b0f      	cmp	r3, #15
 800e1b8:	d915      	bls.n	800e1e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e1ba:	4a18      	ldr	r2, [pc, #96]	@ (800e21c <vPortValidateInterruptPriority+0x74>)
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	4413      	add	r3, r2
 800e1c0:	781b      	ldrb	r3, [r3, #0]
 800e1c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e1c4:	4b16      	ldr	r3, [pc, #88]	@ (800e220 <vPortValidateInterruptPriority+0x78>)
 800e1c6:	781b      	ldrb	r3, [r3, #0]
 800e1c8:	7afa      	ldrb	r2, [r7, #11]
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	d20b      	bcs.n	800e1e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e1ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1d2:	f383 8811 	msr	BASEPRI, r3
 800e1d6:	f3bf 8f6f 	isb	sy
 800e1da:	f3bf 8f4f 	dsb	sy
 800e1de:	607b      	str	r3, [r7, #4]
}
 800e1e0:	bf00      	nop
 800e1e2:	bf00      	nop
 800e1e4:	e7fd      	b.n	800e1e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e1e6:	4b0f      	ldr	r3, [pc, #60]	@ (800e224 <vPortValidateInterruptPriority+0x7c>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e1ee:	4b0e      	ldr	r3, [pc, #56]	@ (800e228 <vPortValidateInterruptPriority+0x80>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	429a      	cmp	r2, r3
 800e1f4:	d90b      	bls.n	800e20e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1fa:	f383 8811 	msr	BASEPRI, r3
 800e1fe:	f3bf 8f6f 	isb	sy
 800e202:	f3bf 8f4f 	dsb	sy
 800e206:	603b      	str	r3, [r7, #0]
}
 800e208:	bf00      	nop
 800e20a:	bf00      	nop
 800e20c:	e7fd      	b.n	800e20a <vPortValidateInterruptPriority+0x62>
	}
 800e20e:	bf00      	nop
 800e210:	3714      	adds	r7, #20
 800e212:	46bd      	mov	sp, r7
 800e214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e218:	4770      	bx	lr
 800e21a:	bf00      	nop
 800e21c:	e000e3f0 	.word	0xe000e3f0
 800e220:	20001930 	.word	0x20001930
 800e224:	e000ed0c 	.word	0xe000ed0c
 800e228:	20001934 	.word	0x20001934

0800e22c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b08a      	sub	sp, #40	@ 0x28
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e234:	2300      	movs	r3, #0
 800e236:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e238:	f7fe fd86 	bl	800cd48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e23c:	4b5c      	ldr	r3, [pc, #368]	@ (800e3b0 <pvPortMalloc+0x184>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d101      	bne.n	800e248 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e244:	f000 f924 	bl	800e490 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e248:	4b5a      	ldr	r3, [pc, #360]	@ (800e3b4 <pvPortMalloc+0x188>)
 800e24a:	681a      	ldr	r2, [r3, #0]
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	4013      	ands	r3, r2
 800e250:	2b00      	cmp	r3, #0
 800e252:	f040 8095 	bne.w	800e380 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d01e      	beq.n	800e29a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e25c:	2208      	movs	r2, #8
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	4413      	add	r3, r2
 800e262:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f003 0307 	and.w	r3, r3, #7
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d015      	beq.n	800e29a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f023 0307 	bic.w	r3, r3, #7
 800e274:	3308      	adds	r3, #8
 800e276:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f003 0307 	and.w	r3, r3, #7
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d00b      	beq.n	800e29a <pvPortMalloc+0x6e>
	__asm volatile
 800e282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e286:	f383 8811 	msr	BASEPRI, r3
 800e28a:	f3bf 8f6f 	isb	sy
 800e28e:	f3bf 8f4f 	dsb	sy
 800e292:	617b      	str	r3, [r7, #20]
}
 800e294:	bf00      	nop
 800e296:	bf00      	nop
 800e298:	e7fd      	b.n	800e296 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d06f      	beq.n	800e380 <pvPortMalloc+0x154>
 800e2a0:	4b45      	ldr	r3, [pc, #276]	@ (800e3b8 <pvPortMalloc+0x18c>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	687a      	ldr	r2, [r7, #4]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d86a      	bhi.n	800e380 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e2aa:	4b44      	ldr	r3, [pc, #272]	@ (800e3bc <pvPortMalloc+0x190>)
 800e2ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e2ae:	4b43      	ldr	r3, [pc, #268]	@ (800e3bc <pvPortMalloc+0x190>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e2b4:	e004      	b.n	800e2c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2c2:	685b      	ldr	r3, [r3, #4]
 800e2c4:	687a      	ldr	r2, [r7, #4]
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d903      	bls.n	800e2d2 <pvPortMalloc+0xa6>
 800e2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d1f1      	bne.n	800e2b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e2d2:	4b37      	ldr	r3, [pc, #220]	@ (800e3b0 <pvPortMalloc+0x184>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d051      	beq.n	800e380 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e2dc:	6a3b      	ldr	r3, [r7, #32]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	2208      	movs	r2, #8
 800e2e2:	4413      	add	r3, r2
 800e2e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2e8:	681a      	ldr	r2, [r3, #0]
 800e2ea:	6a3b      	ldr	r3, [r7, #32]
 800e2ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2f0:	685a      	ldr	r2, [r3, #4]
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	1ad2      	subs	r2, r2, r3
 800e2f6:	2308      	movs	r3, #8
 800e2f8:	005b      	lsls	r3, r3, #1
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	d920      	bls.n	800e340 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e2fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	4413      	add	r3, r2
 800e304:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e306:	69bb      	ldr	r3, [r7, #24]
 800e308:	f003 0307 	and.w	r3, r3, #7
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d00b      	beq.n	800e328 <pvPortMalloc+0xfc>
	__asm volatile
 800e310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e314:	f383 8811 	msr	BASEPRI, r3
 800e318:	f3bf 8f6f 	isb	sy
 800e31c:	f3bf 8f4f 	dsb	sy
 800e320:	613b      	str	r3, [r7, #16]
}
 800e322:	bf00      	nop
 800e324:	bf00      	nop
 800e326:	e7fd      	b.n	800e324 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e32a:	685a      	ldr	r2, [r3, #4]
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	1ad2      	subs	r2, r2, r3
 800e330:	69bb      	ldr	r3, [r7, #24]
 800e332:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e336:	687a      	ldr	r2, [r7, #4]
 800e338:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e33a:	69b8      	ldr	r0, [r7, #24]
 800e33c:	f000 f90a 	bl	800e554 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e340:	4b1d      	ldr	r3, [pc, #116]	@ (800e3b8 <pvPortMalloc+0x18c>)
 800e342:	681a      	ldr	r2, [r3, #0]
 800e344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e346:	685b      	ldr	r3, [r3, #4]
 800e348:	1ad3      	subs	r3, r2, r3
 800e34a:	4a1b      	ldr	r2, [pc, #108]	@ (800e3b8 <pvPortMalloc+0x18c>)
 800e34c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e34e:	4b1a      	ldr	r3, [pc, #104]	@ (800e3b8 <pvPortMalloc+0x18c>)
 800e350:	681a      	ldr	r2, [r3, #0]
 800e352:	4b1b      	ldr	r3, [pc, #108]	@ (800e3c0 <pvPortMalloc+0x194>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	429a      	cmp	r2, r3
 800e358:	d203      	bcs.n	800e362 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e35a:	4b17      	ldr	r3, [pc, #92]	@ (800e3b8 <pvPortMalloc+0x18c>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	4a18      	ldr	r2, [pc, #96]	@ (800e3c0 <pvPortMalloc+0x194>)
 800e360:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e364:	685a      	ldr	r2, [r3, #4]
 800e366:	4b13      	ldr	r3, [pc, #76]	@ (800e3b4 <pvPortMalloc+0x188>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	431a      	orrs	r2, r3
 800e36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e36e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e372:	2200      	movs	r2, #0
 800e374:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e376:	4b13      	ldr	r3, [pc, #76]	@ (800e3c4 <pvPortMalloc+0x198>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	3301      	adds	r3, #1
 800e37c:	4a11      	ldr	r2, [pc, #68]	@ (800e3c4 <pvPortMalloc+0x198>)
 800e37e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e380:	f7fe fcf0 	bl	800cd64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e384:	69fb      	ldr	r3, [r7, #28]
 800e386:	f003 0307 	and.w	r3, r3, #7
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d00b      	beq.n	800e3a6 <pvPortMalloc+0x17a>
	__asm volatile
 800e38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e392:	f383 8811 	msr	BASEPRI, r3
 800e396:	f3bf 8f6f 	isb	sy
 800e39a:	f3bf 8f4f 	dsb	sy
 800e39e:	60fb      	str	r3, [r7, #12]
}
 800e3a0:	bf00      	nop
 800e3a2:	bf00      	nop
 800e3a4:	e7fd      	b.n	800e3a2 <pvPortMalloc+0x176>
	return pvReturn;
 800e3a6:	69fb      	ldr	r3, [r7, #28]
}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	3728      	adds	r7, #40	@ 0x28
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}
 800e3b0:	20005540 	.word	0x20005540
 800e3b4:	20005554 	.word	0x20005554
 800e3b8:	20005544 	.word	0x20005544
 800e3bc:	20005538 	.word	0x20005538
 800e3c0:	20005548 	.word	0x20005548
 800e3c4:	2000554c 	.word	0x2000554c

0800e3c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b086      	sub	sp, #24
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d04f      	beq.n	800e47a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e3da:	2308      	movs	r3, #8
 800e3dc:	425b      	negs	r3, r3
 800e3de:	697a      	ldr	r2, [r7, #20]
 800e3e0:	4413      	add	r3, r2
 800e3e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e3e8:	693b      	ldr	r3, [r7, #16]
 800e3ea:	685a      	ldr	r2, [r3, #4]
 800e3ec:	4b25      	ldr	r3, [pc, #148]	@ (800e484 <vPortFree+0xbc>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	4013      	ands	r3, r2
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d10b      	bne.n	800e40e <vPortFree+0x46>
	__asm volatile
 800e3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3fa:	f383 8811 	msr	BASEPRI, r3
 800e3fe:	f3bf 8f6f 	isb	sy
 800e402:	f3bf 8f4f 	dsb	sy
 800e406:	60fb      	str	r3, [r7, #12]
}
 800e408:	bf00      	nop
 800e40a:	bf00      	nop
 800e40c:	e7fd      	b.n	800e40a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e40e:	693b      	ldr	r3, [r7, #16]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d00b      	beq.n	800e42e <vPortFree+0x66>
	__asm volatile
 800e416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e41a:	f383 8811 	msr	BASEPRI, r3
 800e41e:	f3bf 8f6f 	isb	sy
 800e422:	f3bf 8f4f 	dsb	sy
 800e426:	60bb      	str	r3, [r7, #8]
}
 800e428:	bf00      	nop
 800e42a:	bf00      	nop
 800e42c:	e7fd      	b.n	800e42a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e42e:	693b      	ldr	r3, [r7, #16]
 800e430:	685a      	ldr	r2, [r3, #4]
 800e432:	4b14      	ldr	r3, [pc, #80]	@ (800e484 <vPortFree+0xbc>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	4013      	ands	r3, r2
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d01e      	beq.n	800e47a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e43c:	693b      	ldr	r3, [r7, #16]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d11a      	bne.n	800e47a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e444:	693b      	ldr	r3, [r7, #16]
 800e446:	685a      	ldr	r2, [r3, #4]
 800e448:	4b0e      	ldr	r3, [pc, #56]	@ (800e484 <vPortFree+0xbc>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	43db      	mvns	r3, r3
 800e44e:	401a      	ands	r2, r3
 800e450:	693b      	ldr	r3, [r7, #16]
 800e452:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e454:	f7fe fc78 	bl	800cd48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	685a      	ldr	r2, [r3, #4]
 800e45c:	4b0a      	ldr	r3, [pc, #40]	@ (800e488 <vPortFree+0xc0>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	4413      	add	r3, r2
 800e462:	4a09      	ldr	r2, [pc, #36]	@ (800e488 <vPortFree+0xc0>)
 800e464:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e466:	6938      	ldr	r0, [r7, #16]
 800e468:	f000 f874 	bl	800e554 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e46c:	4b07      	ldr	r3, [pc, #28]	@ (800e48c <vPortFree+0xc4>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	3301      	adds	r3, #1
 800e472:	4a06      	ldr	r2, [pc, #24]	@ (800e48c <vPortFree+0xc4>)
 800e474:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e476:	f7fe fc75 	bl	800cd64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e47a:	bf00      	nop
 800e47c:	3718      	adds	r7, #24
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}
 800e482:	bf00      	nop
 800e484:	20005554 	.word	0x20005554
 800e488:	20005544 	.word	0x20005544
 800e48c:	20005550 	.word	0x20005550

0800e490 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e490:	b480      	push	{r7}
 800e492:	b085      	sub	sp, #20
 800e494:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e496:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e49a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e49c:	4b27      	ldr	r3, [pc, #156]	@ (800e53c <prvHeapInit+0xac>)
 800e49e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	f003 0307 	and.w	r3, r3, #7
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d00c      	beq.n	800e4c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	3307      	adds	r3, #7
 800e4ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	f023 0307 	bic.w	r3, r3, #7
 800e4b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e4b8:	68ba      	ldr	r2, [r7, #8]
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	1ad3      	subs	r3, r2, r3
 800e4be:	4a1f      	ldr	r2, [pc, #124]	@ (800e53c <prvHeapInit+0xac>)
 800e4c0:	4413      	add	r3, r2
 800e4c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e4c8:	4a1d      	ldr	r2, [pc, #116]	@ (800e540 <prvHeapInit+0xb0>)
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e4ce:	4b1c      	ldr	r3, [pc, #112]	@ (800e540 <prvHeapInit+0xb0>)
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	68ba      	ldr	r2, [r7, #8]
 800e4d8:	4413      	add	r3, r2
 800e4da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e4dc:	2208      	movs	r2, #8
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	1a9b      	subs	r3, r3, r2
 800e4e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	f023 0307 	bic.w	r3, r3, #7
 800e4ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	4a15      	ldr	r2, [pc, #84]	@ (800e544 <prvHeapInit+0xb4>)
 800e4f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e4f2:	4b14      	ldr	r3, [pc, #80]	@ (800e544 <prvHeapInit+0xb4>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e4fa:	4b12      	ldr	r3, [pc, #72]	@ (800e544 <prvHeapInit+0xb4>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	2200      	movs	r2, #0
 800e500:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	68fa      	ldr	r2, [r7, #12]
 800e50a:	1ad2      	subs	r2, r2, r3
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e510:	4b0c      	ldr	r3, [pc, #48]	@ (800e544 <prvHeapInit+0xb4>)
 800e512:	681a      	ldr	r2, [r3, #0]
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	685b      	ldr	r3, [r3, #4]
 800e51c:	4a0a      	ldr	r2, [pc, #40]	@ (800e548 <prvHeapInit+0xb8>)
 800e51e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	685b      	ldr	r3, [r3, #4]
 800e524:	4a09      	ldr	r2, [pc, #36]	@ (800e54c <prvHeapInit+0xbc>)
 800e526:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e528:	4b09      	ldr	r3, [pc, #36]	@ (800e550 <prvHeapInit+0xc0>)
 800e52a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e52e:	601a      	str	r2, [r3, #0]
}
 800e530:	bf00      	nop
 800e532:	3714      	adds	r7, #20
 800e534:	46bd      	mov	sp, r7
 800e536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53a:	4770      	bx	lr
 800e53c:	20001938 	.word	0x20001938
 800e540:	20005538 	.word	0x20005538
 800e544:	20005540 	.word	0x20005540
 800e548:	20005548 	.word	0x20005548
 800e54c:	20005544 	.word	0x20005544
 800e550:	20005554 	.word	0x20005554

0800e554 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e554:	b480      	push	{r7}
 800e556:	b085      	sub	sp, #20
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e55c:	4b28      	ldr	r3, [pc, #160]	@ (800e600 <prvInsertBlockIntoFreeList+0xac>)
 800e55e:	60fb      	str	r3, [r7, #12]
 800e560:	e002      	b.n	800e568 <prvInsertBlockIntoFreeList+0x14>
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	60fb      	str	r3, [r7, #12]
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	687a      	ldr	r2, [r7, #4]
 800e56e:	429a      	cmp	r2, r3
 800e570:	d8f7      	bhi.n	800e562 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	685b      	ldr	r3, [r3, #4]
 800e57a:	68ba      	ldr	r2, [r7, #8]
 800e57c:	4413      	add	r3, r2
 800e57e:	687a      	ldr	r2, [r7, #4]
 800e580:	429a      	cmp	r2, r3
 800e582:	d108      	bne.n	800e596 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	685a      	ldr	r2, [r3, #4]
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	685b      	ldr	r3, [r3, #4]
 800e58c:	441a      	add	r2, r3
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	685b      	ldr	r3, [r3, #4]
 800e59e:	68ba      	ldr	r2, [r7, #8]
 800e5a0:	441a      	add	r2, r3
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	429a      	cmp	r2, r3
 800e5a8:	d118      	bne.n	800e5dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681a      	ldr	r2, [r3, #0]
 800e5ae:	4b15      	ldr	r3, [pc, #84]	@ (800e604 <prvInsertBlockIntoFreeList+0xb0>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	d00d      	beq.n	800e5d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	685a      	ldr	r2, [r3, #4]
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	685b      	ldr	r3, [r3, #4]
 800e5c0:	441a      	add	r2, r3
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	681a      	ldr	r2, [r3, #0]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	601a      	str	r2, [r3, #0]
 800e5d0:	e008      	b.n	800e5e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e5d2:	4b0c      	ldr	r3, [pc, #48]	@ (800e604 <prvInsertBlockIntoFreeList+0xb0>)
 800e5d4:	681a      	ldr	r2, [r3, #0]
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	601a      	str	r2, [r3, #0]
 800e5da:	e003      	b.n	800e5e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681a      	ldr	r2, [r3, #0]
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e5e4:	68fa      	ldr	r2, [r7, #12]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d002      	beq.n	800e5f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	687a      	ldr	r2, [r7, #4]
 800e5f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e5f2:	bf00      	nop
 800e5f4:	3714      	adds	r7, #20
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fc:	4770      	bx	lr
 800e5fe:	bf00      	nop
 800e600:	20005538 	.word	0x20005538
 800e604:	20005540 	.word	0x20005540

0800e608 <_Znwj>:
 800e608:	2801      	cmp	r0, #1
 800e60a:	bf38      	it	cc
 800e60c:	2001      	movcc	r0, #1
 800e60e:	b510      	push	{r4, lr}
 800e610:	4604      	mov	r4, r0
 800e612:	4620      	mov	r0, r4
 800e614:	f000 fcbc 	bl	800ef90 <malloc>
 800e618:	b100      	cbz	r0, 800e61c <_Znwj+0x14>
 800e61a:	bd10      	pop	{r4, pc}
 800e61c:	f000 f806 	bl	800e62c <_ZSt15get_new_handlerv>
 800e620:	b908      	cbnz	r0, 800e626 <_Znwj+0x1e>
 800e622:	f000 fcad 	bl	800ef80 <abort>
 800e626:	4780      	blx	r0
 800e628:	e7f3      	b.n	800e612 <_Znwj+0xa>
	...

0800e62c <_ZSt15get_new_handlerv>:
 800e62c:	4b02      	ldr	r3, [pc, #8]	@ (800e638 <_ZSt15get_new_handlerv+0xc>)
 800e62e:	6818      	ldr	r0, [r3, #0]
 800e630:	f3bf 8f5b 	dmb	ish
 800e634:	4770      	bx	lr
 800e636:	bf00      	nop
 800e638:	20005558 	.word	0x20005558

0800e63c <atan2>:
 800e63c:	f000 b930 	b.w	800e8a0 <__ieee754_atan2>

0800e640 <fmod>:
 800e640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e642:	ed2d 8b02 	vpush	{d8}
 800e646:	ec57 6b10 	vmov	r6, r7, d0
 800e64a:	ec55 4b11 	vmov	r4, r5, d1
 800e64e:	f000 f9ed 	bl	800ea2c <__ieee754_fmod>
 800e652:	4622      	mov	r2, r4
 800e654:	462b      	mov	r3, r5
 800e656:	4630      	mov	r0, r6
 800e658:	4639      	mov	r1, r7
 800e65a:	eeb0 8a40 	vmov.f32	s16, s0
 800e65e:	eef0 8a60 	vmov.f32	s17, s1
 800e662:	f7f2 fa63 	bl	8000b2c <__aeabi_dcmpun>
 800e666:	b990      	cbnz	r0, 800e68e <fmod+0x4e>
 800e668:	2200      	movs	r2, #0
 800e66a:	2300      	movs	r3, #0
 800e66c:	4620      	mov	r0, r4
 800e66e:	4629      	mov	r1, r5
 800e670:	f7f2 fa2a 	bl	8000ac8 <__aeabi_dcmpeq>
 800e674:	b158      	cbz	r0, 800e68e <fmod+0x4e>
 800e676:	f001 fd11 	bl	801009c <__errno>
 800e67a:	2321      	movs	r3, #33	@ 0x21
 800e67c:	6003      	str	r3, [r0, #0]
 800e67e:	2200      	movs	r2, #0
 800e680:	2300      	movs	r3, #0
 800e682:	4610      	mov	r0, r2
 800e684:	4619      	mov	r1, r3
 800e686:	f7f2 f8e1 	bl	800084c <__aeabi_ddiv>
 800e68a:	ec41 0b18 	vmov	d8, r0, r1
 800e68e:	eeb0 0a48 	vmov.f32	s0, s16
 800e692:	eef0 0a68 	vmov.f32	s1, s17
 800e696:	ecbd 8b02 	vpop	{d8}
 800e69a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e69c <sqrt>:
 800e69c:	b538      	push	{r3, r4, r5, lr}
 800e69e:	ed2d 8b02 	vpush	{d8}
 800e6a2:	ec55 4b10 	vmov	r4, r5, d0
 800e6a6:	f000 f825 	bl	800e6f4 <__ieee754_sqrt>
 800e6aa:	4622      	mov	r2, r4
 800e6ac:	462b      	mov	r3, r5
 800e6ae:	4620      	mov	r0, r4
 800e6b0:	4629      	mov	r1, r5
 800e6b2:	eeb0 8a40 	vmov.f32	s16, s0
 800e6b6:	eef0 8a60 	vmov.f32	s17, s1
 800e6ba:	f7f2 fa37 	bl	8000b2c <__aeabi_dcmpun>
 800e6be:	b990      	cbnz	r0, 800e6e6 <sqrt+0x4a>
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	4620      	mov	r0, r4
 800e6c6:	4629      	mov	r1, r5
 800e6c8:	f7f2 fa08 	bl	8000adc <__aeabi_dcmplt>
 800e6cc:	b158      	cbz	r0, 800e6e6 <sqrt+0x4a>
 800e6ce:	f001 fce5 	bl	801009c <__errno>
 800e6d2:	2321      	movs	r3, #33	@ 0x21
 800e6d4:	6003      	str	r3, [r0, #0]
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	2300      	movs	r3, #0
 800e6da:	4610      	mov	r0, r2
 800e6dc:	4619      	mov	r1, r3
 800e6de:	f7f2 f8b5 	bl	800084c <__aeabi_ddiv>
 800e6e2:	ec41 0b18 	vmov	d8, r0, r1
 800e6e6:	eeb0 0a48 	vmov.f32	s0, s16
 800e6ea:	eef0 0a68 	vmov.f32	s1, s17
 800e6ee:	ecbd 8b02 	vpop	{d8}
 800e6f2:	bd38      	pop	{r3, r4, r5, pc}

0800e6f4 <__ieee754_sqrt>:
 800e6f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6f8:	4a66      	ldr	r2, [pc, #408]	@ (800e894 <__ieee754_sqrt+0x1a0>)
 800e6fa:	ec55 4b10 	vmov	r4, r5, d0
 800e6fe:	43aa      	bics	r2, r5
 800e700:	462b      	mov	r3, r5
 800e702:	4621      	mov	r1, r4
 800e704:	d110      	bne.n	800e728 <__ieee754_sqrt+0x34>
 800e706:	4622      	mov	r2, r4
 800e708:	4620      	mov	r0, r4
 800e70a:	4629      	mov	r1, r5
 800e70c:	f7f1 ff74 	bl	80005f8 <__aeabi_dmul>
 800e710:	4602      	mov	r2, r0
 800e712:	460b      	mov	r3, r1
 800e714:	4620      	mov	r0, r4
 800e716:	4629      	mov	r1, r5
 800e718:	f7f1 fdb8 	bl	800028c <__adddf3>
 800e71c:	4604      	mov	r4, r0
 800e71e:	460d      	mov	r5, r1
 800e720:	ec45 4b10 	vmov	d0, r4, r5
 800e724:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e728:	2d00      	cmp	r5, #0
 800e72a:	dc0e      	bgt.n	800e74a <__ieee754_sqrt+0x56>
 800e72c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800e730:	4322      	orrs	r2, r4
 800e732:	d0f5      	beq.n	800e720 <__ieee754_sqrt+0x2c>
 800e734:	b19d      	cbz	r5, 800e75e <__ieee754_sqrt+0x6a>
 800e736:	4622      	mov	r2, r4
 800e738:	4620      	mov	r0, r4
 800e73a:	4629      	mov	r1, r5
 800e73c:	f7f1 fda4 	bl	8000288 <__aeabi_dsub>
 800e740:	4602      	mov	r2, r0
 800e742:	460b      	mov	r3, r1
 800e744:	f7f2 f882 	bl	800084c <__aeabi_ddiv>
 800e748:	e7e8      	b.n	800e71c <__ieee754_sqrt+0x28>
 800e74a:	152a      	asrs	r2, r5, #20
 800e74c:	d115      	bne.n	800e77a <__ieee754_sqrt+0x86>
 800e74e:	2000      	movs	r0, #0
 800e750:	e009      	b.n	800e766 <__ieee754_sqrt+0x72>
 800e752:	0acb      	lsrs	r3, r1, #11
 800e754:	3a15      	subs	r2, #21
 800e756:	0549      	lsls	r1, r1, #21
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d0fa      	beq.n	800e752 <__ieee754_sqrt+0x5e>
 800e75c:	e7f7      	b.n	800e74e <__ieee754_sqrt+0x5a>
 800e75e:	462a      	mov	r2, r5
 800e760:	e7fa      	b.n	800e758 <__ieee754_sqrt+0x64>
 800e762:	005b      	lsls	r3, r3, #1
 800e764:	3001      	adds	r0, #1
 800e766:	02dc      	lsls	r4, r3, #11
 800e768:	d5fb      	bpl.n	800e762 <__ieee754_sqrt+0x6e>
 800e76a:	1e44      	subs	r4, r0, #1
 800e76c:	1b12      	subs	r2, r2, r4
 800e76e:	f1c0 0420 	rsb	r4, r0, #32
 800e772:	fa21 f404 	lsr.w	r4, r1, r4
 800e776:	4323      	orrs	r3, r4
 800e778:	4081      	lsls	r1, r0
 800e77a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e77e:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800e782:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e786:	07d2      	lsls	r2, r2, #31
 800e788:	bf5c      	itt	pl
 800e78a:	005b      	lslpl	r3, r3, #1
 800e78c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800e790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e794:	bf58      	it	pl
 800e796:	0049      	lslpl	r1, r1, #1
 800e798:	2600      	movs	r6, #0
 800e79a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800e79e:	107f      	asrs	r7, r7, #1
 800e7a0:	0049      	lsls	r1, r1, #1
 800e7a2:	2016      	movs	r0, #22
 800e7a4:	4632      	mov	r2, r6
 800e7a6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800e7aa:	1915      	adds	r5, r2, r4
 800e7ac:	429d      	cmp	r5, r3
 800e7ae:	bfde      	ittt	le
 800e7b0:	192a      	addle	r2, r5, r4
 800e7b2:	1b5b      	suble	r3, r3, r5
 800e7b4:	1936      	addle	r6, r6, r4
 800e7b6:	0fcd      	lsrs	r5, r1, #31
 800e7b8:	3801      	subs	r0, #1
 800e7ba:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800e7be:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e7c2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e7c6:	d1f0      	bne.n	800e7aa <__ieee754_sqrt+0xb6>
 800e7c8:	4605      	mov	r5, r0
 800e7ca:	2420      	movs	r4, #32
 800e7cc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800e7d0:	4293      	cmp	r3, r2
 800e7d2:	eb0c 0e00 	add.w	lr, ip, r0
 800e7d6:	dc02      	bgt.n	800e7de <__ieee754_sqrt+0xea>
 800e7d8:	d113      	bne.n	800e802 <__ieee754_sqrt+0x10e>
 800e7da:	458e      	cmp	lr, r1
 800e7dc:	d811      	bhi.n	800e802 <__ieee754_sqrt+0x10e>
 800e7de:	f1be 0f00 	cmp.w	lr, #0
 800e7e2:	eb0e 000c 	add.w	r0, lr, ip
 800e7e6:	da3f      	bge.n	800e868 <__ieee754_sqrt+0x174>
 800e7e8:	2800      	cmp	r0, #0
 800e7ea:	db3d      	blt.n	800e868 <__ieee754_sqrt+0x174>
 800e7ec:	f102 0801 	add.w	r8, r2, #1
 800e7f0:	1a9b      	subs	r3, r3, r2
 800e7f2:	458e      	cmp	lr, r1
 800e7f4:	bf88      	it	hi
 800e7f6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e7fa:	eba1 010e 	sub.w	r1, r1, lr
 800e7fe:	4465      	add	r5, ip
 800e800:	4642      	mov	r2, r8
 800e802:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800e806:	3c01      	subs	r4, #1
 800e808:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800e80c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e810:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800e814:	d1dc      	bne.n	800e7d0 <__ieee754_sqrt+0xdc>
 800e816:	4319      	orrs	r1, r3
 800e818:	d01b      	beq.n	800e852 <__ieee754_sqrt+0x15e>
 800e81a:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800e898 <__ieee754_sqrt+0x1a4>
 800e81e:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800e89c <__ieee754_sqrt+0x1a8>
 800e822:	e9da 0100 	ldrd	r0, r1, [sl]
 800e826:	e9db 2300 	ldrd	r2, r3, [fp]
 800e82a:	f7f1 fd2d 	bl	8000288 <__aeabi_dsub>
 800e82e:	e9da 8900 	ldrd	r8, r9, [sl]
 800e832:	4602      	mov	r2, r0
 800e834:	460b      	mov	r3, r1
 800e836:	4640      	mov	r0, r8
 800e838:	4649      	mov	r1, r9
 800e83a:	f7f2 f959 	bl	8000af0 <__aeabi_dcmple>
 800e83e:	b140      	cbz	r0, 800e852 <__ieee754_sqrt+0x15e>
 800e840:	f1b5 3fff 	cmp.w	r5, #4294967295
 800e844:	e9da 0100 	ldrd	r0, r1, [sl]
 800e848:	e9db 2300 	ldrd	r2, r3, [fp]
 800e84c:	d10e      	bne.n	800e86c <__ieee754_sqrt+0x178>
 800e84e:	3601      	adds	r6, #1
 800e850:	4625      	mov	r5, r4
 800e852:	1073      	asrs	r3, r6, #1
 800e854:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800e858:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800e85c:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800e860:	086b      	lsrs	r3, r5, #1
 800e862:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800e866:	e759      	b.n	800e71c <__ieee754_sqrt+0x28>
 800e868:	4690      	mov	r8, r2
 800e86a:	e7c1      	b.n	800e7f0 <__ieee754_sqrt+0xfc>
 800e86c:	f7f1 fd0e 	bl	800028c <__adddf3>
 800e870:	e9da 8900 	ldrd	r8, r9, [sl]
 800e874:	4602      	mov	r2, r0
 800e876:	460b      	mov	r3, r1
 800e878:	4640      	mov	r0, r8
 800e87a:	4649      	mov	r1, r9
 800e87c:	f7f2 f92e 	bl	8000adc <__aeabi_dcmplt>
 800e880:	b120      	cbz	r0, 800e88c <__ieee754_sqrt+0x198>
 800e882:	1cab      	adds	r3, r5, #2
 800e884:	bf08      	it	eq
 800e886:	3601      	addeq	r6, #1
 800e888:	3502      	adds	r5, #2
 800e88a:	e7e2      	b.n	800e852 <__ieee754_sqrt+0x15e>
 800e88c:	1c6b      	adds	r3, r5, #1
 800e88e:	f023 0501 	bic.w	r5, r3, #1
 800e892:	e7de      	b.n	800e852 <__ieee754_sqrt+0x15e>
 800e894:	7ff00000 	.word	0x7ff00000
 800e898:	08012ae8 	.word	0x08012ae8
 800e89c:	08012ae0 	.word	0x08012ae0

0800e8a0 <__ieee754_atan2>:
 800e8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8a4:	ec57 6b11 	vmov	r6, r7, d1
 800e8a8:	4273      	negs	r3, r6
 800e8aa:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800ea28 <__ieee754_atan2+0x188>
 800e8ae:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800e8b2:	4333      	orrs	r3, r6
 800e8b4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e8b8:	4543      	cmp	r3, r8
 800e8ba:	ec51 0b10 	vmov	r0, r1, d0
 800e8be:	4635      	mov	r5, r6
 800e8c0:	d809      	bhi.n	800e8d6 <__ieee754_atan2+0x36>
 800e8c2:	4244      	negs	r4, r0
 800e8c4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e8c8:	4304      	orrs	r4, r0
 800e8ca:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e8ce:	4544      	cmp	r4, r8
 800e8d0:	468e      	mov	lr, r1
 800e8d2:	4681      	mov	r9, r0
 800e8d4:	d907      	bls.n	800e8e6 <__ieee754_atan2+0x46>
 800e8d6:	4632      	mov	r2, r6
 800e8d8:	463b      	mov	r3, r7
 800e8da:	f7f1 fcd7 	bl	800028c <__adddf3>
 800e8de:	ec41 0b10 	vmov	d0, r0, r1
 800e8e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8e6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800e8ea:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800e8ee:	4334      	orrs	r4, r6
 800e8f0:	d103      	bne.n	800e8fa <__ieee754_atan2+0x5a>
 800e8f2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8f6:	f000 b9a3 	b.w	800ec40 <atan>
 800e8fa:	17bc      	asrs	r4, r7, #30
 800e8fc:	f004 0402 	and.w	r4, r4, #2
 800e900:	ea53 0909 	orrs.w	r9, r3, r9
 800e904:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e908:	d107      	bne.n	800e91a <__ieee754_atan2+0x7a>
 800e90a:	2c02      	cmp	r4, #2
 800e90c:	d05f      	beq.n	800e9ce <__ieee754_atan2+0x12e>
 800e90e:	2c03      	cmp	r4, #3
 800e910:	d1e5      	bne.n	800e8de <__ieee754_atan2+0x3e>
 800e912:	a143      	add	r1, pc, #268	@ (adr r1, 800ea20 <__ieee754_atan2+0x180>)
 800e914:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e918:	e7e1      	b.n	800e8de <__ieee754_atan2+0x3e>
 800e91a:	4315      	orrs	r5, r2
 800e91c:	d106      	bne.n	800e92c <__ieee754_atan2+0x8c>
 800e91e:	f1be 0f00 	cmp.w	lr, #0
 800e922:	db5f      	blt.n	800e9e4 <__ieee754_atan2+0x144>
 800e924:	a136      	add	r1, pc, #216	@ (adr r1, 800ea00 <__ieee754_atan2+0x160>)
 800e926:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e92a:	e7d8      	b.n	800e8de <__ieee754_atan2+0x3e>
 800e92c:	4542      	cmp	r2, r8
 800e92e:	d10f      	bne.n	800e950 <__ieee754_atan2+0xb0>
 800e930:	4293      	cmp	r3, r2
 800e932:	f104 34ff 	add.w	r4, r4, #4294967295
 800e936:	d107      	bne.n	800e948 <__ieee754_atan2+0xa8>
 800e938:	2c02      	cmp	r4, #2
 800e93a:	d84c      	bhi.n	800e9d6 <__ieee754_atan2+0x136>
 800e93c:	4b36      	ldr	r3, [pc, #216]	@ (800ea18 <__ieee754_atan2+0x178>)
 800e93e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e942:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e946:	e7ca      	b.n	800e8de <__ieee754_atan2+0x3e>
 800e948:	2c02      	cmp	r4, #2
 800e94a:	d848      	bhi.n	800e9de <__ieee754_atan2+0x13e>
 800e94c:	4b33      	ldr	r3, [pc, #204]	@ (800ea1c <__ieee754_atan2+0x17c>)
 800e94e:	e7f6      	b.n	800e93e <__ieee754_atan2+0x9e>
 800e950:	4543      	cmp	r3, r8
 800e952:	d0e4      	beq.n	800e91e <__ieee754_atan2+0x7e>
 800e954:	1a9b      	subs	r3, r3, r2
 800e956:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800e95a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e95e:	da1e      	bge.n	800e99e <__ieee754_atan2+0xfe>
 800e960:	2f00      	cmp	r7, #0
 800e962:	da01      	bge.n	800e968 <__ieee754_atan2+0xc8>
 800e964:	323c      	adds	r2, #60	@ 0x3c
 800e966:	db1e      	blt.n	800e9a6 <__ieee754_atan2+0x106>
 800e968:	4632      	mov	r2, r6
 800e96a:	463b      	mov	r3, r7
 800e96c:	f7f1 ff6e 	bl	800084c <__aeabi_ddiv>
 800e970:	ec41 0b10 	vmov	d0, r0, r1
 800e974:	f000 fafc 	bl	800ef70 <fabs>
 800e978:	f000 f962 	bl	800ec40 <atan>
 800e97c:	ec51 0b10 	vmov	r0, r1, d0
 800e980:	2c01      	cmp	r4, #1
 800e982:	d013      	beq.n	800e9ac <__ieee754_atan2+0x10c>
 800e984:	2c02      	cmp	r4, #2
 800e986:	d015      	beq.n	800e9b4 <__ieee754_atan2+0x114>
 800e988:	2c00      	cmp	r4, #0
 800e98a:	d0a8      	beq.n	800e8de <__ieee754_atan2+0x3e>
 800e98c:	a318      	add	r3, pc, #96	@ (adr r3, 800e9f0 <__ieee754_atan2+0x150>)
 800e98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e992:	f7f1 fc79 	bl	8000288 <__aeabi_dsub>
 800e996:	a318      	add	r3, pc, #96	@ (adr r3, 800e9f8 <__ieee754_atan2+0x158>)
 800e998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e99c:	e014      	b.n	800e9c8 <__ieee754_atan2+0x128>
 800e99e:	a118      	add	r1, pc, #96	@ (adr r1, 800ea00 <__ieee754_atan2+0x160>)
 800e9a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9a4:	e7ec      	b.n	800e980 <__ieee754_atan2+0xe0>
 800e9a6:	2000      	movs	r0, #0
 800e9a8:	2100      	movs	r1, #0
 800e9aa:	e7e9      	b.n	800e980 <__ieee754_atan2+0xe0>
 800e9ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e9b0:	4619      	mov	r1, r3
 800e9b2:	e794      	b.n	800e8de <__ieee754_atan2+0x3e>
 800e9b4:	a30e      	add	r3, pc, #56	@ (adr r3, 800e9f0 <__ieee754_atan2+0x150>)
 800e9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ba:	f7f1 fc65 	bl	8000288 <__aeabi_dsub>
 800e9be:	4602      	mov	r2, r0
 800e9c0:	460b      	mov	r3, r1
 800e9c2:	a10d      	add	r1, pc, #52	@ (adr r1, 800e9f8 <__ieee754_atan2+0x158>)
 800e9c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9c8:	f7f1 fc5e 	bl	8000288 <__aeabi_dsub>
 800e9cc:	e787      	b.n	800e8de <__ieee754_atan2+0x3e>
 800e9ce:	a10a      	add	r1, pc, #40	@ (adr r1, 800e9f8 <__ieee754_atan2+0x158>)
 800e9d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9d4:	e783      	b.n	800e8de <__ieee754_atan2+0x3e>
 800e9d6:	a10c      	add	r1, pc, #48	@ (adr r1, 800ea08 <__ieee754_atan2+0x168>)
 800e9d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9dc:	e77f      	b.n	800e8de <__ieee754_atan2+0x3e>
 800e9de:	2000      	movs	r0, #0
 800e9e0:	2100      	movs	r1, #0
 800e9e2:	e77c      	b.n	800e8de <__ieee754_atan2+0x3e>
 800e9e4:	a10a      	add	r1, pc, #40	@ (adr r1, 800ea10 <__ieee754_atan2+0x170>)
 800e9e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9ea:	e778      	b.n	800e8de <__ieee754_atan2+0x3e>
 800e9ec:	f3af 8000 	nop.w
 800e9f0:	33145c07 	.word	0x33145c07
 800e9f4:	3ca1a626 	.word	0x3ca1a626
 800e9f8:	54442d18 	.word	0x54442d18
 800e9fc:	400921fb 	.word	0x400921fb
 800ea00:	54442d18 	.word	0x54442d18
 800ea04:	3ff921fb 	.word	0x3ff921fb
 800ea08:	54442d18 	.word	0x54442d18
 800ea0c:	3fe921fb 	.word	0x3fe921fb
 800ea10:	54442d18 	.word	0x54442d18
 800ea14:	bff921fb 	.word	0xbff921fb
 800ea18:	08012b08 	.word	0x08012b08
 800ea1c:	08012af0 	.word	0x08012af0
 800ea20:	54442d18 	.word	0x54442d18
 800ea24:	c00921fb 	.word	0xc00921fb
 800ea28:	7ff00000 	.word	0x7ff00000

0800ea2c <__ieee754_fmod>:
 800ea2c:	ec53 2b11 	vmov	r2, r3, d1
 800ea30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea34:	f023 4800 	bic.w	r8, r3, #2147483648	@ 0x80000000
 800ea38:	ea52 0408 	orrs.w	r4, r2, r8
 800ea3c:	ec51 0b10 	vmov	r0, r1, d0
 800ea40:	461e      	mov	r6, r3
 800ea42:	4696      	mov	lr, r2
 800ea44:	4694      	mov	ip, r2
 800ea46:	d00c      	beq.n	800ea62 <__ieee754_fmod+0x36>
 800ea48:	4d76      	ldr	r5, [pc, #472]	@ (800ec24 <__ieee754_fmod+0x1f8>)
 800ea4a:	f021 4900 	bic.w	r9, r1, #2147483648	@ 0x80000000
 800ea4e:	45a9      	cmp	r9, r5
 800ea50:	460c      	mov	r4, r1
 800ea52:	d806      	bhi.n	800ea62 <__ieee754_fmod+0x36>
 800ea54:	4255      	negs	r5, r2
 800ea56:	4f74      	ldr	r7, [pc, #464]	@ (800ec28 <__ieee754_fmod+0x1fc>)
 800ea58:	4315      	orrs	r5, r2
 800ea5a:	ea48 75d5 	orr.w	r5, r8, r5, lsr #31
 800ea5e:	42bd      	cmp	r5, r7
 800ea60:	d909      	bls.n	800ea76 <__ieee754_fmod+0x4a>
 800ea62:	f7f1 fdc9 	bl	80005f8 <__aeabi_dmul>
 800ea66:	4602      	mov	r2, r0
 800ea68:	460b      	mov	r3, r1
 800ea6a:	f7f1 feef 	bl	800084c <__aeabi_ddiv>
 800ea6e:	ec41 0b10 	vmov	d0, r0, r1
 800ea72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea76:	45c1      	cmp	r9, r8
 800ea78:	4682      	mov	sl, r0
 800ea7a:	4607      	mov	r7, r0
 800ea7c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800ea80:	dc09      	bgt.n	800ea96 <__ieee754_fmod+0x6a>
 800ea82:	dbf4      	blt.n	800ea6e <__ieee754_fmod+0x42>
 800ea84:	4282      	cmp	r2, r0
 800ea86:	d8f2      	bhi.n	800ea6e <__ieee754_fmod+0x42>
 800ea88:	d105      	bne.n	800ea96 <__ieee754_fmod+0x6a>
 800ea8a:	4b68      	ldr	r3, [pc, #416]	@ (800ec2c <__ieee754_fmod+0x200>)
 800ea8c:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800ea90:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ea94:	e7eb      	b.n	800ea6e <__ieee754_fmod+0x42>
 800ea96:	4964      	ldr	r1, [pc, #400]	@ (800ec28 <__ieee754_fmod+0x1fc>)
 800ea98:	420c      	tst	r4, r1
 800ea9a:	d148      	bne.n	800eb2e <__ieee754_fmod+0x102>
 800ea9c:	f1b9 0f00 	cmp.w	r9, #0
 800eaa0:	d13d      	bne.n	800eb1e <__ieee754_fmod+0xf2>
 800eaa2:	4a63      	ldr	r2, [pc, #396]	@ (800ec30 <__ieee754_fmod+0x204>)
 800eaa4:	4653      	mov	r3, sl
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	dc36      	bgt.n	800eb18 <__ieee754_fmod+0xec>
 800eaaa:	420e      	tst	r6, r1
 800eaac:	d14f      	bne.n	800eb4e <__ieee754_fmod+0x122>
 800eaae:	f1b8 0f00 	cmp.w	r8, #0
 800eab2:	d144      	bne.n	800eb3e <__ieee754_fmod+0x112>
 800eab4:	4b5e      	ldr	r3, [pc, #376]	@ (800ec30 <__ieee754_fmod+0x204>)
 800eab6:	4671      	mov	r1, lr
 800eab8:	2900      	cmp	r1, #0
 800eaba:	dc3d      	bgt.n	800eb38 <__ieee754_fmod+0x10c>
 800eabc:	485d      	ldr	r0, [pc, #372]	@ (800ec34 <__ieee754_fmod+0x208>)
 800eabe:	4282      	cmp	r2, r0
 800eac0:	db4a      	blt.n	800eb58 <__ieee754_fmod+0x12c>
 800eac2:	f3c4 0113 	ubfx	r1, r4, #0, #20
 800eac6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800eaca:	485a      	ldr	r0, [pc, #360]	@ (800ec34 <__ieee754_fmod+0x208>)
 800eacc:	4283      	cmp	r3, r0
 800eace:	db57      	blt.n	800eb80 <__ieee754_fmod+0x154>
 800ead0:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800ead4:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800ead8:	1ad0      	subs	r0, r2, r3
 800eada:	1b8a      	subs	r2, r1, r6
 800eadc:	eba7 040c 	sub.w	r4, r7, ip
 800eae0:	2800      	cmp	r0, #0
 800eae2:	d162      	bne.n	800ebaa <__ieee754_fmod+0x17e>
 800eae4:	4567      	cmp	r7, ip
 800eae6:	bf38      	it	cc
 800eae8:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800eaec:	2a00      	cmp	r2, #0
 800eaee:	bfbc      	itt	lt
 800eaf0:	463c      	movlt	r4, r7
 800eaf2:	460a      	movlt	r2, r1
 800eaf4:	ea52 0104 	orrs.w	r1, r2, r4
 800eaf8:	d0c7      	beq.n	800ea8a <__ieee754_fmod+0x5e>
 800eafa:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 800eafe:	db69      	blt.n	800ebd4 <__ieee754_fmod+0x1a8>
 800eb00:	494c      	ldr	r1, [pc, #304]	@ (800ec34 <__ieee754_fmod+0x208>)
 800eb02:	428b      	cmp	r3, r1
 800eb04:	db6c      	blt.n	800ebe0 <__ieee754_fmod+0x1b4>
 800eb06:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 800eb0a:	432a      	orrs	r2, r5
 800eb0c:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800eb10:	ea42 5103 	orr.w	r1, r2, r3, lsl #20
 800eb14:	4620      	mov	r0, r4
 800eb16:	e7aa      	b.n	800ea6e <__ieee754_fmod+0x42>
 800eb18:	3a01      	subs	r2, #1
 800eb1a:	005b      	lsls	r3, r3, #1
 800eb1c:	e7c3      	b.n	800eaa6 <__ieee754_fmod+0x7a>
 800eb1e:	4a45      	ldr	r2, [pc, #276]	@ (800ec34 <__ieee754_fmod+0x208>)
 800eb20:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	ddc0      	ble.n	800eaaa <__ieee754_fmod+0x7e>
 800eb28:	3a01      	subs	r2, #1
 800eb2a:	005b      	lsls	r3, r3, #1
 800eb2c:	e7fa      	b.n	800eb24 <__ieee754_fmod+0xf8>
 800eb2e:	ea4f 5229 	mov.w	r2, r9, asr #20
 800eb32:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800eb36:	e7b8      	b.n	800eaaa <__ieee754_fmod+0x7e>
 800eb38:	3b01      	subs	r3, #1
 800eb3a:	0049      	lsls	r1, r1, #1
 800eb3c:	e7bc      	b.n	800eab8 <__ieee754_fmod+0x8c>
 800eb3e:	4b3d      	ldr	r3, [pc, #244]	@ (800ec34 <__ieee754_fmod+0x208>)
 800eb40:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 800eb44:	2900      	cmp	r1, #0
 800eb46:	ddb9      	ble.n	800eabc <__ieee754_fmod+0x90>
 800eb48:	3b01      	subs	r3, #1
 800eb4a:	0049      	lsls	r1, r1, #1
 800eb4c:	e7fa      	b.n	800eb44 <__ieee754_fmod+0x118>
 800eb4e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800eb52:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800eb56:	e7b1      	b.n	800eabc <__ieee754_fmod+0x90>
 800eb58:	1a80      	subs	r0, r0, r2
 800eb5a:	281f      	cmp	r0, #31
 800eb5c:	dc0a      	bgt.n	800eb74 <__ieee754_fmod+0x148>
 800eb5e:	f202 411e 	addw	r1, r2, #1054	@ 0x41e
 800eb62:	fa09 f900 	lsl.w	r9, r9, r0
 800eb66:	fa2a f101 	lsr.w	r1, sl, r1
 800eb6a:	ea41 0109 	orr.w	r1, r1, r9
 800eb6e:	fa0a f700 	lsl.w	r7, sl, r0
 800eb72:	e7aa      	b.n	800eaca <__ieee754_fmod+0x9e>
 800eb74:	4930      	ldr	r1, [pc, #192]	@ (800ec38 <__ieee754_fmod+0x20c>)
 800eb76:	1a89      	subs	r1, r1, r2
 800eb78:	fa0a f101 	lsl.w	r1, sl, r1
 800eb7c:	2700      	movs	r7, #0
 800eb7e:	e7a4      	b.n	800eaca <__ieee754_fmod+0x9e>
 800eb80:	1ac0      	subs	r0, r0, r3
 800eb82:	281f      	cmp	r0, #31
 800eb84:	dc0a      	bgt.n	800eb9c <__ieee754_fmod+0x170>
 800eb86:	f203 461e 	addw	r6, r3, #1054	@ 0x41e
 800eb8a:	fa08 f800 	lsl.w	r8, r8, r0
 800eb8e:	fa2e f606 	lsr.w	r6, lr, r6
 800eb92:	ea46 0608 	orr.w	r6, r6, r8
 800eb96:	fa0e fc00 	lsl.w	ip, lr, r0
 800eb9a:	e79d      	b.n	800ead8 <__ieee754_fmod+0xac>
 800eb9c:	4e26      	ldr	r6, [pc, #152]	@ (800ec38 <__ieee754_fmod+0x20c>)
 800eb9e:	1af6      	subs	r6, r6, r3
 800eba0:	fa0e f606 	lsl.w	r6, lr, r6
 800eba4:	f04f 0c00 	mov.w	ip, #0
 800eba8:	e796      	b.n	800ead8 <__ieee754_fmod+0xac>
 800ebaa:	4567      	cmp	r7, ip
 800ebac:	bf38      	it	cc
 800ebae:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800ebb2:	2a00      	cmp	r2, #0
 800ebb4:	da05      	bge.n	800ebc2 <__ieee754_fmod+0x196>
 800ebb6:	0ffa      	lsrs	r2, r7, #31
 800ebb8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ebbc:	007f      	lsls	r7, r7, #1
 800ebbe:	3801      	subs	r0, #1
 800ebc0:	e78b      	b.n	800eada <__ieee754_fmod+0xae>
 800ebc2:	ea52 0104 	orrs.w	r1, r2, r4
 800ebc6:	f43f af60 	beq.w	800ea8a <__ieee754_fmod+0x5e>
 800ebca:	0fe1      	lsrs	r1, r4, #31
 800ebcc:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800ebd0:	0067      	lsls	r7, r4, #1
 800ebd2:	e7f4      	b.n	800ebbe <__ieee754_fmod+0x192>
 800ebd4:	0fe1      	lsrs	r1, r4, #31
 800ebd6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800ebda:	0064      	lsls	r4, r4, #1
 800ebdc:	3b01      	subs	r3, #1
 800ebde:	e78c      	b.n	800eafa <__ieee754_fmod+0xce>
 800ebe0:	1ac9      	subs	r1, r1, r3
 800ebe2:	2914      	cmp	r1, #20
 800ebe4:	dc0a      	bgt.n	800ebfc <__ieee754_fmod+0x1d0>
 800ebe6:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 800ebea:	fa02 f303 	lsl.w	r3, r2, r3
 800ebee:	40cc      	lsrs	r4, r1
 800ebf0:	4323      	orrs	r3, r4
 800ebf2:	410a      	asrs	r2, r1
 800ebf4:	ea42 0105 	orr.w	r1, r2, r5
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	e738      	b.n	800ea6e <__ieee754_fmod+0x42>
 800ebfc:	291f      	cmp	r1, #31
 800ebfe:	dc07      	bgt.n	800ec10 <__ieee754_fmod+0x1e4>
 800ec00:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 800ec04:	40cc      	lsrs	r4, r1
 800ec06:	fa02 f303 	lsl.w	r3, r2, r3
 800ec0a:	4323      	orrs	r3, r4
 800ec0c:	462a      	mov	r2, r5
 800ec0e:	e7f1      	b.n	800ebf4 <__ieee754_fmod+0x1c8>
 800ec10:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 800ec14:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 800ec18:	f503 437b 	add.w	r3, r3, #64256	@ 0xfb00
 800ec1c:	33e2      	adds	r3, #226	@ 0xe2
 800ec1e:	fa42 f303 	asr.w	r3, r2, r3
 800ec22:	e7f3      	b.n	800ec0c <__ieee754_fmod+0x1e0>
 800ec24:	7fefffff 	.word	0x7fefffff
 800ec28:	7ff00000 	.word	0x7ff00000
 800ec2c:	08012b20 	.word	0x08012b20
 800ec30:	fffffbed 	.word	0xfffffbed
 800ec34:	fffffc02 	.word	0xfffffc02
 800ec38:	fffffbe2 	.word	0xfffffbe2
 800ec3c:	00000000 	.word	0x00000000

0800ec40 <atan>:
 800ec40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec44:	ec55 4b10 	vmov	r4, r5, d0
 800ec48:	4bbf      	ldr	r3, [pc, #764]	@ (800ef48 <atan+0x308>)
 800ec4a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800ec4e:	429e      	cmp	r6, r3
 800ec50:	46ab      	mov	fp, r5
 800ec52:	d918      	bls.n	800ec86 <atan+0x46>
 800ec54:	4bbd      	ldr	r3, [pc, #756]	@ (800ef4c <atan+0x30c>)
 800ec56:	429e      	cmp	r6, r3
 800ec58:	d801      	bhi.n	800ec5e <atan+0x1e>
 800ec5a:	d109      	bne.n	800ec70 <atan+0x30>
 800ec5c:	b144      	cbz	r4, 800ec70 <atan+0x30>
 800ec5e:	4622      	mov	r2, r4
 800ec60:	462b      	mov	r3, r5
 800ec62:	4620      	mov	r0, r4
 800ec64:	4629      	mov	r1, r5
 800ec66:	f7f1 fb11 	bl	800028c <__adddf3>
 800ec6a:	4604      	mov	r4, r0
 800ec6c:	460d      	mov	r5, r1
 800ec6e:	e006      	b.n	800ec7e <atan+0x3e>
 800ec70:	f1bb 0f00 	cmp.w	fp, #0
 800ec74:	f340 812b 	ble.w	800eece <atan+0x28e>
 800ec78:	a597      	add	r5, pc, #604	@ (adr r5, 800eed8 <atan+0x298>)
 800ec7a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ec7e:	ec45 4b10 	vmov	d0, r4, r5
 800ec82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec86:	4bb2      	ldr	r3, [pc, #712]	@ (800ef50 <atan+0x310>)
 800ec88:	429e      	cmp	r6, r3
 800ec8a:	d813      	bhi.n	800ecb4 <atan+0x74>
 800ec8c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800ec90:	429e      	cmp	r6, r3
 800ec92:	d80c      	bhi.n	800ecae <atan+0x6e>
 800ec94:	a392      	add	r3, pc, #584	@ (adr r3, 800eee0 <atan+0x2a0>)
 800ec96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec9a:	4620      	mov	r0, r4
 800ec9c:	4629      	mov	r1, r5
 800ec9e:	f7f1 faf5 	bl	800028c <__adddf3>
 800eca2:	4bac      	ldr	r3, [pc, #688]	@ (800ef54 <atan+0x314>)
 800eca4:	2200      	movs	r2, #0
 800eca6:	f7f1 ff37 	bl	8000b18 <__aeabi_dcmpgt>
 800ecaa:	2800      	cmp	r0, #0
 800ecac:	d1e7      	bne.n	800ec7e <atan+0x3e>
 800ecae:	f04f 3aff 	mov.w	sl, #4294967295
 800ecb2:	e029      	b.n	800ed08 <atan+0xc8>
 800ecb4:	f000 f95c 	bl	800ef70 <fabs>
 800ecb8:	4ba7      	ldr	r3, [pc, #668]	@ (800ef58 <atan+0x318>)
 800ecba:	429e      	cmp	r6, r3
 800ecbc:	ec55 4b10 	vmov	r4, r5, d0
 800ecc0:	f200 80bc 	bhi.w	800ee3c <atan+0x1fc>
 800ecc4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800ecc8:	429e      	cmp	r6, r3
 800ecca:	f200 809e 	bhi.w	800ee0a <atan+0x1ca>
 800ecce:	4622      	mov	r2, r4
 800ecd0:	462b      	mov	r3, r5
 800ecd2:	4620      	mov	r0, r4
 800ecd4:	4629      	mov	r1, r5
 800ecd6:	f7f1 fad9 	bl	800028c <__adddf3>
 800ecda:	4b9e      	ldr	r3, [pc, #632]	@ (800ef54 <atan+0x314>)
 800ecdc:	2200      	movs	r2, #0
 800ecde:	f7f1 fad3 	bl	8000288 <__aeabi_dsub>
 800ece2:	2200      	movs	r2, #0
 800ece4:	4606      	mov	r6, r0
 800ece6:	460f      	mov	r7, r1
 800ece8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ecec:	4620      	mov	r0, r4
 800ecee:	4629      	mov	r1, r5
 800ecf0:	f7f1 facc 	bl	800028c <__adddf3>
 800ecf4:	4602      	mov	r2, r0
 800ecf6:	460b      	mov	r3, r1
 800ecf8:	4630      	mov	r0, r6
 800ecfa:	4639      	mov	r1, r7
 800ecfc:	f7f1 fda6 	bl	800084c <__aeabi_ddiv>
 800ed00:	f04f 0a00 	mov.w	sl, #0
 800ed04:	4604      	mov	r4, r0
 800ed06:	460d      	mov	r5, r1
 800ed08:	4622      	mov	r2, r4
 800ed0a:	462b      	mov	r3, r5
 800ed0c:	4620      	mov	r0, r4
 800ed0e:	4629      	mov	r1, r5
 800ed10:	f7f1 fc72 	bl	80005f8 <__aeabi_dmul>
 800ed14:	4602      	mov	r2, r0
 800ed16:	460b      	mov	r3, r1
 800ed18:	4680      	mov	r8, r0
 800ed1a:	4689      	mov	r9, r1
 800ed1c:	f7f1 fc6c 	bl	80005f8 <__aeabi_dmul>
 800ed20:	a371      	add	r3, pc, #452	@ (adr r3, 800eee8 <atan+0x2a8>)
 800ed22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed26:	4606      	mov	r6, r0
 800ed28:	460f      	mov	r7, r1
 800ed2a:	f7f1 fc65 	bl	80005f8 <__aeabi_dmul>
 800ed2e:	a370      	add	r3, pc, #448	@ (adr r3, 800eef0 <atan+0x2b0>)
 800ed30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed34:	f7f1 faaa 	bl	800028c <__adddf3>
 800ed38:	4632      	mov	r2, r6
 800ed3a:	463b      	mov	r3, r7
 800ed3c:	f7f1 fc5c 	bl	80005f8 <__aeabi_dmul>
 800ed40:	a36d      	add	r3, pc, #436	@ (adr r3, 800eef8 <atan+0x2b8>)
 800ed42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed46:	f7f1 faa1 	bl	800028c <__adddf3>
 800ed4a:	4632      	mov	r2, r6
 800ed4c:	463b      	mov	r3, r7
 800ed4e:	f7f1 fc53 	bl	80005f8 <__aeabi_dmul>
 800ed52:	a36b      	add	r3, pc, #428	@ (adr r3, 800ef00 <atan+0x2c0>)
 800ed54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed58:	f7f1 fa98 	bl	800028c <__adddf3>
 800ed5c:	4632      	mov	r2, r6
 800ed5e:	463b      	mov	r3, r7
 800ed60:	f7f1 fc4a 	bl	80005f8 <__aeabi_dmul>
 800ed64:	a368      	add	r3, pc, #416	@ (adr r3, 800ef08 <atan+0x2c8>)
 800ed66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed6a:	f7f1 fa8f 	bl	800028c <__adddf3>
 800ed6e:	4632      	mov	r2, r6
 800ed70:	463b      	mov	r3, r7
 800ed72:	f7f1 fc41 	bl	80005f8 <__aeabi_dmul>
 800ed76:	a366      	add	r3, pc, #408	@ (adr r3, 800ef10 <atan+0x2d0>)
 800ed78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed7c:	f7f1 fa86 	bl	800028c <__adddf3>
 800ed80:	4642      	mov	r2, r8
 800ed82:	464b      	mov	r3, r9
 800ed84:	f7f1 fc38 	bl	80005f8 <__aeabi_dmul>
 800ed88:	a363      	add	r3, pc, #396	@ (adr r3, 800ef18 <atan+0x2d8>)
 800ed8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed8e:	4680      	mov	r8, r0
 800ed90:	4689      	mov	r9, r1
 800ed92:	4630      	mov	r0, r6
 800ed94:	4639      	mov	r1, r7
 800ed96:	f7f1 fc2f 	bl	80005f8 <__aeabi_dmul>
 800ed9a:	a361      	add	r3, pc, #388	@ (adr r3, 800ef20 <atan+0x2e0>)
 800ed9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda0:	f7f1 fa72 	bl	8000288 <__aeabi_dsub>
 800eda4:	4632      	mov	r2, r6
 800eda6:	463b      	mov	r3, r7
 800eda8:	f7f1 fc26 	bl	80005f8 <__aeabi_dmul>
 800edac:	a35e      	add	r3, pc, #376	@ (adr r3, 800ef28 <atan+0x2e8>)
 800edae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb2:	f7f1 fa69 	bl	8000288 <__aeabi_dsub>
 800edb6:	4632      	mov	r2, r6
 800edb8:	463b      	mov	r3, r7
 800edba:	f7f1 fc1d 	bl	80005f8 <__aeabi_dmul>
 800edbe:	a35c      	add	r3, pc, #368	@ (adr r3, 800ef30 <atan+0x2f0>)
 800edc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc4:	f7f1 fa60 	bl	8000288 <__aeabi_dsub>
 800edc8:	4632      	mov	r2, r6
 800edca:	463b      	mov	r3, r7
 800edcc:	f7f1 fc14 	bl	80005f8 <__aeabi_dmul>
 800edd0:	a359      	add	r3, pc, #356	@ (adr r3, 800ef38 <atan+0x2f8>)
 800edd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd6:	f7f1 fa57 	bl	8000288 <__aeabi_dsub>
 800edda:	4632      	mov	r2, r6
 800eddc:	463b      	mov	r3, r7
 800edde:	f7f1 fc0b 	bl	80005f8 <__aeabi_dmul>
 800ede2:	4602      	mov	r2, r0
 800ede4:	460b      	mov	r3, r1
 800ede6:	4640      	mov	r0, r8
 800ede8:	4649      	mov	r1, r9
 800edea:	f7f1 fa4f 	bl	800028c <__adddf3>
 800edee:	4622      	mov	r2, r4
 800edf0:	462b      	mov	r3, r5
 800edf2:	f7f1 fc01 	bl	80005f8 <__aeabi_dmul>
 800edf6:	f1ba 3fff 	cmp.w	sl, #4294967295
 800edfa:	4602      	mov	r2, r0
 800edfc:	460b      	mov	r3, r1
 800edfe:	d148      	bne.n	800ee92 <atan+0x252>
 800ee00:	4620      	mov	r0, r4
 800ee02:	4629      	mov	r1, r5
 800ee04:	f7f1 fa40 	bl	8000288 <__aeabi_dsub>
 800ee08:	e72f      	b.n	800ec6a <atan+0x2a>
 800ee0a:	4b52      	ldr	r3, [pc, #328]	@ (800ef54 <atan+0x314>)
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	4620      	mov	r0, r4
 800ee10:	4629      	mov	r1, r5
 800ee12:	f7f1 fa39 	bl	8000288 <__aeabi_dsub>
 800ee16:	4b4f      	ldr	r3, [pc, #316]	@ (800ef54 <atan+0x314>)
 800ee18:	4606      	mov	r6, r0
 800ee1a:	460f      	mov	r7, r1
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	4620      	mov	r0, r4
 800ee20:	4629      	mov	r1, r5
 800ee22:	f7f1 fa33 	bl	800028c <__adddf3>
 800ee26:	4602      	mov	r2, r0
 800ee28:	460b      	mov	r3, r1
 800ee2a:	4630      	mov	r0, r6
 800ee2c:	4639      	mov	r1, r7
 800ee2e:	f7f1 fd0d 	bl	800084c <__aeabi_ddiv>
 800ee32:	f04f 0a01 	mov.w	sl, #1
 800ee36:	4604      	mov	r4, r0
 800ee38:	460d      	mov	r5, r1
 800ee3a:	e765      	b.n	800ed08 <atan+0xc8>
 800ee3c:	4b47      	ldr	r3, [pc, #284]	@ (800ef5c <atan+0x31c>)
 800ee3e:	429e      	cmp	r6, r3
 800ee40:	d21c      	bcs.n	800ee7c <atan+0x23c>
 800ee42:	4b47      	ldr	r3, [pc, #284]	@ (800ef60 <atan+0x320>)
 800ee44:	2200      	movs	r2, #0
 800ee46:	4620      	mov	r0, r4
 800ee48:	4629      	mov	r1, r5
 800ee4a:	f7f1 fa1d 	bl	8000288 <__aeabi_dsub>
 800ee4e:	4b44      	ldr	r3, [pc, #272]	@ (800ef60 <atan+0x320>)
 800ee50:	4606      	mov	r6, r0
 800ee52:	460f      	mov	r7, r1
 800ee54:	2200      	movs	r2, #0
 800ee56:	4620      	mov	r0, r4
 800ee58:	4629      	mov	r1, r5
 800ee5a:	f7f1 fbcd 	bl	80005f8 <__aeabi_dmul>
 800ee5e:	4b3d      	ldr	r3, [pc, #244]	@ (800ef54 <atan+0x314>)
 800ee60:	2200      	movs	r2, #0
 800ee62:	f7f1 fa13 	bl	800028c <__adddf3>
 800ee66:	4602      	mov	r2, r0
 800ee68:	460b      	mov	r3, r1
 800ee6a:	4630      	mov	r0, r6
 800ee6c:	4639      	mov	r1, r7
 800ee6e:	f7f1 fced 	bl	800084c <__aeabi_ddiv>
 800ee72:	f04f 0a02 	mov.w	sl, #2
 800ee76:	4604      	mov	r4, r0
 800ee78:	460d      	mov	r5, r1
 800ee7a:	e745      	b.n	800ed08 <atan+0xc8>
 800ee7c:	4622      	mov	r2, r4
 800ee7e:	462b      	mov	r3, r5
 800ee80:	4938      	ldr	r1, [pc, #224]	@ (800ef64 <atan+0x324>)
 800ee82:	2000      	movs	r0, #0
 800ee84:	f7f1 fce2 	bl	800084c <__aeabi_ddiv>
 800ee88:	f04f 0a03 	mov.w	sl, #3
 800ee8c:	4604      	mov	r4, r0
 800ee8e:	460d      	mov	r5, r1
 800ee90:	e73a      	b.n	800ed08 <atan+0xc8>
 800ee92:	4b35      	ldr	r3, [pc, #212]	@ (800ef68 <atan+0x328>)
 800ee94:	4e35      	ldr	r6, [pc, #212]	@ (800ef6c <atan+0x32c>)
 800ee96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ee9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee9e:	f7f1 f9f3 	bl	8000288 <__aeabi_dsub>
 800eea2:	4622      	mov	r2, r4
 800eea4:	462b      	mov	r3, r5
 800eea6:	f7f1 f9ef 	bl	8000288 <__aeabi_dsub>
 800eeaa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800eeae:	4602      	mov	r2, r0
 800eeb0:	460b      	mov	r3, r1
 800eeb2:	e9d6 0100 	ldrd	r0, r1, [r6]
 800eeb6:	f7f1 f9e7 	bl	8000288 <__aeabi_dsub>
 800eeba:	f1bb 0f00 	cmp.w	fp, #0
 800eebe:	4604      	mov	r4, r0
 800eec0:	460d      	mov	r5, r1
 800eec2:	f6bf aedc 	bge.w	800ec7e <atan+0x3e>
 800eec6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800eeca:	461d      	mov	r5, r3
 800eecc:	e6d7      	b.n	800ec7e <atan+0x3e>
 800eece:	a51c      	add	r5, pc, #112	@ (adr r5, 800ef40 <atan+0x300>)
 800eed0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800eed4:	e6d3      	b.n	800ec7e <atan+0x3e>
 800eed6:	bf00      	nop
 800eed8:	54442d18 	.word	0x54442d18
 800eedc:	3ff921fb 	.word	0x3ff921fb
 800eee0:	8800759c 	.word	0x8800759c
 800eee4:	7e37e43c 	.word	0x7e37e43c
 800eee8:	e322da11 	.word	0xe322da11
 800eeec:	3f90ad3a 	.word	0x3f90ad3a
 800eef0:	24760deb 	.word	0x24760deb
 800eef4:	3fa97b4b 	.word	0x3fa97b4b
 800eef8:	a0d03d51 	.word	0xa0d03d51
 800eefc:	3fb10d66 	.word	0x3fb10d66
 800ef00:	c54c206e 	.word	0xc54c206e
 800ef04:	3fb745cd 	.word	0x3fb745cd
 800ef08:	920083ff 	.word	0x920083ff
 800ef0c:	3fc24924 	.word	0x3fc24924
 800ef10:	5555550d 	.word	0x5555550d
 800ef14:	3fd55555 	.word	0x3fd55555
 800ef18:	2c6a6c2f 	.word	0x2c6a6c2f
 800ef1c:	bfa2b444 	.word	0xbfa2b444
 800ef20:	52defd9a 	.word	0x52defd9a
 800ef24:	3fadde2d 	.word	0x3fadde2d
 800ef28:	af749a6d 	.word	0xaf749a6d
 800ef2c:	3fb3b0f2 	.word	0x3fb3b0f2
 800ef30:	fe231671 	.word	0xfe231671
 800ef34:	3fbc71c6 	.word	0x3fbc71c6
 800ef38:	9998ebc4 	.word	0x9998ebc4
 800ef3c:	3fc99999 	.word	0x3fc99999
 800ef40:	54442d18 	.word	0x54442d18
 800ef44:	bff921fb 	.word	0xbff921fb
 800ef48:	440fffff 	.word	0x440fffff
 800ef4c:	7ff00000 	.word	0x7ff00000
 800ef50:	3fdbffff 	.word	0x3fdbffff
 800ef54:	3ff00000 	.word	0x3ff00000
 800ef58:	3ff2ffff 	.word	0x3ff2ffff
 800ef5c:	40038000 	.word	0x40038000
 800ef60:	3ff80000 	.word	0x3ff80000
 800ef64:	bff00000 	.word	0xbff00000
 800ef68:	08012b30 	.word	0x08012b30
 800ef6c:	08012b50 	.word	0x08012b50

0800ef70 <fabs>:
 800ef70:	ec51 0b10 	vmov	r0, r1, d0
 800ef74:	4602      	mov	r2, r0
 800ef76:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ef7a:	ec43 2b10 	vmov	d0, r2, r3
 800ef7e:	4770      	bx	lr

0800ef80 <abort>:
 800ef80:	b508      	push	{r3, lr}
 800ef82:	2006      	movs	r0, #6
 800ef84:	f001 f814 	bl	800ffb0 <raise>
 800ef88:	2001      	movs	r0, #1
 800ef8a:	f7f6 fe9d 	bl	8005cc8 <_exit>
	...

0800ef90 <malloc>:
 800ef90:	4b02      	ldr	r3, [pc, #8]	@ (800ef9c <malloc+0xc>)
 800ef92:	4601      	mov	r1, r0
 800ef94:	6818      	ldr	r0, [r3, #0]
 800ef96:	f000 b825 	b.w	800efe4 <_malloc_r>
 800ef9a:	bf00      	nop
 800ef9c:	20000020 	.word	0x20000020

0800efa0 <sbrk_aligned>:
 800efa0:	b570      	push	{r4, r5, r6, lr}
 800efa2:	4e0f      	ldr	r6, [pc, #60]	@ (800efe0 <sbrk_aligned+0x40>)
 800efa4:	460c      	mov	r4, r1
 800efa6:	6831      	ldr	r1, [r6, #0]
 800efa8:	4605      	mov	r5, r0
 800efaa:	b911      	cbnz	r1, 800efb2 <sbrk_aligned+0x12>
 800efac:	f001 f854 	bl	8010058 <_sbrk_r>
 800efb0:	6030      	str	r0, [r6, #0]
 800efb2:	4621      	mov	r1, r4
 800efb4:	4628      	mov	r0, r5
 800efb6:	f001 f84f 	bl	8010058 <_sbrk_r>
 800efba:	1c43      	adds	r3, r0, #1
 800efbc:	d103      	bne.n	800efc6 <sbrk_aligned+0x26>
 800efbe:	f04f 34ff 	mov.w	r4, #4294967295
 800efc2:	4620      	mov	r0, r4
 800efc4:	bd70      	pop	{r4, r5, r6, pc}
 800efc6:	1cc4      	adds	r4, r0, #3
 800efc8:	f024 0403 	bic.w	r4, r4, #3
 800efcc:	42a0      	cmp	r0, r4
 800efce:	d0f8      	beq.n	800efc2 <sbrk_aligned+0x22>
 800efd0:	1a21      	subs	r1, r4, r0
 800efd2:	4628      	mov	r0, r5
 800efd4:	f001 f840 	bl	8010058 <_sbrk_r>
 800efd8:	3001      	adds	r0, #1
 800efda:	d1f2      	bne.n	800efc2 <sbrk_aligned+0x22>
 800efdc:	e7ef      	b.n	800efbe <sbrk_aligned+0x1e>
 800efde:	bf00      	nop
 800efe0:	2000555c 	.word	0x2000555c

0800efe4 <_malloc_r>:
 800efe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efe8:	1ccd      	adds	r5, r1, #3
 800efea:	f025 0503 	bic.w	r5, r5, #3
 800efee:	3508      	adds	r5, #8
 800eff0:	2d0c      	cmp	r5, #12
 800eff2:	bf38      	it	cc
 800eff4:	250c      	movcc	r5, #12
 800eff6:	2d00      	cmp	r5, #0
 800eff8:	4606      	mov	r6, r0
 800effa:	db01      	blt.n	800f000 <_malloc_r+0x1c>
 800effc:	42a9      	cmp	r1, r5
 800effe:	d904      	bls.n	800f00a <_malloc_r+0x26>
 800f000:	230c      	movs	r3, #12
 800f002:	6033      	str	r3, [r6, #0]
 800f004:	2000      	movs	r0, #0
 800f006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f00a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f0e0 <_malloc_r+0xfc>
 800f00e:	f000 f869 	bl	800f0e4 <__malloc_lock>
 800f012:	f8d8 3000 	ldr.w	r3, [r8]
 800f016:	461c      	mov	r4, r3
 800f018:	bb44      	cbnz	r4, 800f06c <_malloc_r+0x88>
 800f01a:	4629      	mov	r1, r5
 800f01c:	4630      	mov	r0, r6
 800f01e:	f7ff ffbf 	bl	800efa0 <sbrk_aligned>
 800f022:	1c43      	adds	r3, r0, #1
 800f024:	4604      	mov	r4, r0
 800f026:	d158      	bne.n	800f0da <_malloc_r+0xf6>
 800f028:	f8d8 4000 	ldr.w	r4, [r8]
 800f02c:	4627      	mov	r7, r4
 800f02e:	2f00      	cmp	r7, #0
 800f030:	d143      	bne.n	800f0ba <_malloc_r+0xd6>
 800f032:	2c00      	cmp	r4, #0
 800f034:	d04b      	beq.n	800f0ce <_malloc_r+0xea>
 800f036:	6823      	ldr	r3, [r4, #0]
 800f038:	4639      	mov	r1, r7
 800f03a:	4630      	mov	r0, r6
 800f03c:	eb04 0903 	add.w	r9, r4, r3
 800f040:	f001 f80a 	bl	8010058 <_sbrk_r>
 800f044:	4581      	cmp	r9, r0
 800f046:	d142      	bne.n	800f0ce <_malloc_r+0xea>
 800f048:	6821      	ldr	r1, [r4, #0]
 800f04a:	1a6d      	subs	r5, r5, r1
 800f04c:	4629      	mov	r1, r5
 800f04e:	4630      	mov	r0, r6
 800f050:	f7ff ffa6 	bl	800efa0 <sbrk_aligned>
 800f054:	3001      	adds	r0, #1
 800f056:	d03a      	beq.n	800f0ce <_malloc_r+0xea>
 800f058:	6823      	ldr	r3, [r4, #0]
 800f05a:	442b      	add	r3, r5
 800f05c:	6023      	str	r3, [r4, #0]
 800f05e:	f8d8 3000 	ldr.w	r3, [r8]
 800f062:	685a      	ldr	r2, [r3, #4]
 800f064:	bb62      	cbnz	r2, 800f0c0 <_malloc_r+0xdc>
 800f066:	f8c8 7000 	str.w	r7, [r8]
 800f06a:	e00f      	b.n	800f08c <_malloc_r+0xa8>
 800f06c:	6822      	ldr	r2, [r4, #0]
 800f06e:	1b52      	subs	r2, r2, r5
 800f070:	d420      	bmi.n	800f0b4 <_malloc_r+0xd0>
 800f072:	2a0b      	cmp	r2, #11
 800f074:	d917      	bls.n	800f0a6 <_malloc_r+0xc2>
 800f076:	1961      	adds	r1, r4, r5
 800f078:	42a3      	cmp	r3, r4
 800f07a:	6025      	str	r5, [r4, #0]
 800f07c:	bf18      	it	ne
 800f07e:	6059      	strne	r1, [r3, #4]
 800f080:	6863      	ldr	r3, [r4, #4]
 800f082:	bf08      	it	eq
 800f084:	f8c8 1000 	streq.w	r1, [r8]
 800f088:	5162      	str	r2, [r4, r5]
 800f08a:	604b      	str	r3, [r1, #4]
 800f08c:	4630      	mov	r0, r6
 800f08e:	f000 f82f 	bl	800f0f0 <__malloc_unlock>
 800f092:	f104 000b 	add.w	r0, r4, #11
 800f096:	1d23      	adds	r3, r4, #4
 800f098:	f020 0007 	bic.w	r0, r0, #7
 800f09c:	1ac2      	subs	r2, r0, r3
 800f09e:	bf1c      	itt	ne
 800f0a0:	1a1b      	subne	r3, r3, r0
 800f0a2:	50a3      	strne	r3, [r4, r2]
 800f0a4:	e7af      	b.n	800f006 <_malloc_r+0x22>
 800f0a6:	6862      	ldr	r2, [r4, #4]
 800f0a8:	42a3      	cmp	r3, r4
 800f0aa:	bf0c      	ite	eq
 800f0ac:	f8c8 2000 	streq.w	r2, [r8]
 800f0b0:	605a      	strne	r2, [r3, #4]
 800f0b2:	e7eb      	b.n	800f08c <_malloc_r+0xa8>
 800f0b4:	4623      	mov	r3, r4
 800f0b6:	6864      	ldr	r4, [r4, #4]
 800f0b8:	e7ae      	b.n	800f018 <_malloc_r+0x34>
 800f0ba:	463c      	mov	r4, r7
 800f0bc:	687f      	ldr	r7, [r7, #4]
 800f0be:	e7b6      	b.n	800f02e <_malloc_r+0x4a>
 800f0c0:	461a      	mov	r2, r3
 800f0c2:	685b      	ldr	r3, [r3, #4]
 800f0c4:	42a3      	cmp	r3, r4
 800f0c6:	d1fb      	bne.n	800f0c0 <_malloc_r+0xdc>
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	6053      	str	r3, [r2, #4]
 800f0cc:	e7de      	b.n	800f08c <_malloc_r+0xa8>
 800f0ce:	230c      	movs	r3, #12
 800f0d0:	6033      	str	r3, [r6, #0]
 800f0d2:	4630      	mov	r0, r6
 800f0d4:	f000 f80c 	bl	800f0f0 <__malloc_unlock>
 800f0d8:	e794      	b.n	800f004 <_malloc_r+0x20>
 800f0da:	6005      	str	r5, [r0, #0]
 800f0dc:	e7d6      	b.n	800f08c <_malloc_r+0xa8>
 800f0de:	bf00      	nop
 800f0e0:	20005560 	.word	0x20005560

0800f0e4 <__malloc_lock>:
 800f0e4:	4801      	ldr	r0, [pc, #4]	@ (800f0ec <__malloc_lock+0x8>)
 800f0e6:	f001 b804 	b.w	80100f2 <__retarget_lock_acquire_recursive>
 800f0ea:	bf00      	nop
 800f0ec:	200056a4 	.word	0x200056a4

0800f0f0 <__malloc_unlock>:
 800f0f0:	4801      	ldr	r0, [pc, #4]	@ (800f0f8 <__malloc_unlock+0x8>)
 800f0f2:	f000 bfff 	b.w	80100f4 <__retarget_lock_release_recursive>
 800f0f6:	bf00      	nop
 800f0f8:	200056a4 	.word	0x200056a4

0800f0fc <_strtol_l.isra.0>:
 800f0fc:	2b24      	cmp	r3, #36	@ 0x24
 800f0fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f102:	4686      	mov	lr, r0
 800f104:	4690      	mov	r8, r2
 800f106:	d801      	bhi.n	800f10c <_strtol_l.isra.0+0x10>
 800f108:	2b01      	cmp	r3, #1
 800f10a:	d106      	bne.n	800f11a <_strtol_l.isra.0+0x1e>
 800f10c:	f000 ffc6 	bl	801009c <__errno>
 800f110:	2316      	movs	r3, #22
 800f112:	6003      	str	r3, [r0, #0]
 800f114:	2000      	movs	r0, #0
 800f116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f11a:	4834      	ldr	r0, [pc, #208]	@ (800f1ec <_strtol_l.isra.0+0xf0>)
 800f11c:	460d      	mov	r5, r1
 800f11e:	462a      	mov	r2, r5
 800f120:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f124:	5d06      	ldrb	r6, [r0, r4]
 800f126:	f016 0608 	ands.w	r6, r6, #8
 800f12a:	d1f8      	bne.n	800f11e <_strtol_l.isra.0+0x22>
 800f12c:	2c2d      	cmp	r4, #45	@ 0x2d
 800f12e:	d110      	bne.n	800f152 <_strtol_l.isra.0+0x56>
 800f130:	782c      	ldrb	r4, [r5, #0]
 800f132:	2601      	movs	r6, #1
 800f134:	1c95      	adds	r5, r2, #2
 800f136:	f033 0210 	bics.w	r2, r3, #16
 800f13a:	d115      	bne.n	800f168 <_strtol_l.isra.0+0x6c>
 800f13c:	2c30      	cmp	r4, #48	@ 0x30
 800f13e:	d10d      	bne.n	800f15c <_strtol_l.isra.0+0x60>
 800f140:	782a      	ldrb	r2, [r5, #0]
 800f142:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f146:	2a58      	cmp	r2, #88	@ 0x58
 800f148:	d108      	bne.n	800f15c <_strtol_l.isra.0+0x60>
 800f14a:	786c      	ldrb	r4, [r5, #1]
 800f14c:	3502      	adds	r5, #2
 800f14e:	2310      	movs	r3, #16
 800f150:	e00a      	b.n	800f168 <_strtol_l.isra.0+0x6c>
 800f152:	2c2b      	cmp	r4, #43	@ 0x2b
 800f154:	bf04      	itt	eq
 800f156:	782c      	ldrbeq	r4, [r5, #0]
 800f158:	1c95      	addeq	r5, r2, #2
 800f15a:	e7ec      	b.n	800f136 <_strtol_l.isra.0+0x3a>
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d1f6      	bne.n	800f14e <_strtol_l.isra.0+0x52>
 800f160:	2c30      	cmp	r4, #48	@ 0x30
 800f162:	bf14      	ite	ne
 800f164:	230a      	movne	r3, #10
 800f166:	2308      	moveq	r3, #8
 800f168:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f16c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f170:	2200      	movs	r2, #0
 800f172:	fbbc f9f3 	udiv	r9, ip, r3
 800f176:	4610      	mov	r0, r2
 800f178:	fb03 ca19 	mls	sl, r3, r9, ip
 800f17c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f180:	2f09      	cmp	r7, #9
 800f182:	d80f      	bhi.n	800f1a4 <_strtol_l.isra.0+0xa8>
 800f184:	463c      	mov	r4, r7
 800f186:	42a3      	cmp	r3, r4
 800f188:	dd1b      	ble.n	800f1c2 <_strtol_l.isra.0+0xc6>
 800f18a:	1c57      	adds	r7, r2, #1
 800f18c:	d007      	beq.n	800f19e <_strtol_l.isra.0+0xa2>
 800f18e:	4581      	cmp	r9, r0
 800f190:	d314      	bcc.n	800f1bc <_strtol_l.isra.0+0xc0>
 800f192:	d101      	bne.n	800f198 <_strtol_l.isra.0+0x9c>
 800f194:	45a2      	cmp	sl, r4
 800f196:	db11      	blt.n	800f1bc <_strtol_l.isra.0+0xc0>
 800f198:	fb00 4003 	mla	r0, r0, r3, r4
 800f19c:	2201      	movs	r2, #1
 800f19e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f1a2:	e7eb      	b.n	800f17c <_strtol_l.isra.0+0x80>
 800f1a4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f1a8:	2f19      	cmp	r7, #25
 800f1aa:	d801      	bhi.n	800f1b0 <_strtol_l.isra.0+0xb4>
 800f1ac:	3c37      	subs	r4, #55	@ 0x37
 800f1ae:	e7ea      	b.n	800f186 <_strtol_l.isra.0+0x8a>
 800f1b0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f1b4:	2f19      	cmp	r7, #25
 800f1b6:	d804      	bhi.n	800f1c2 <_strtol_l.isra.0+0xc6>
 800f1b8:	3c57      	subs	r4, #87	@ 0x57
 800f1ba:	e7e4      	b.n	800f186 <_strtol_l.isra.0+0x8a>
 800f1bc:	f04f 32ff 	mov.w	r2, #4294967295
 800f1c0:	e7ed      	b.n	800f19e <_strtol_l.isra.0+0xa2>
 800f1c2:	1c53      	adds	r3, r2, #1
 800f1c4:	d108      	bne.n	800f1d8 <_strtol_l.isra.0+0xdc>
 800f1c6:	2322      	movs	r3, #34	@ 0x22
 800f1c8:	f8ce 3000 	str.w	r3, [lr]
 800f1cc:	4660      	mov	r0, ip
 800f1ce:	f1b8 0f00 	cmp.w	r8, #0
 800f1d2:	d0a0      	beq.n	800f116 <_strtol_l.isra.0+0x1a>
 800f1d4:	1e69      	subs	r1, r5, #1
 800f1d6:	e006      	b.n	800f1e6 <_strtol_l.isra.0+0xea>
 800f1d8:	b106      	cbz	r6, 800f1dc <_strtol_l.isra.0+0xe0>
 800f1da:	4240      	negs	r0, r0
 800f1dc:	f1b8 0f00 	cmp.w	r8, #0
 800f1e0:	d099      	beq.n	800f116 <_strtol_l.isra.0+0x1a>
 800f1e2:	2a00      	cmp	r2, #0
 800f1e4:	d1f6      	bne.n	800f1d4 <_strtol_l.isra.0+0xd8>
 800f1e6:	f8c8 1000 	str.w	r1, [r8]
 800f1ea:	e794      	b.n	800f116 <_strtol_l.isra.0+0x1a>
 800f1ec:	08012b71 	.word	0x08012b71

0800f1f0 <strtol>:
 800f1f0:	4613      	mov	r3, r2
 800f1f2:	460a      	mov	r2, r1
 800f1f4:	4601      	mov	r1, r0
 800f1f6:	4802      	ldr	r0, [pc, #8]	@ (800f200 <strtol+0x10>)
 800f1f8:	6800      	ldr	r0, [r0, #0]
 800f1fa:	f7ff bf7f 	b.w	800f0fc <_strtol_l.isra.0>
 800f1fe:	bf00      	nop
 800f200:	20000020 	.word	0x20000020

0800f204 <__cvt>:
 800f204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f208:	ec57 6b10 	vmov	r6, r7, d0
 800f20c:	2f00      	cmp	r7, #0
 800f20e:	460c      	mov	r4, r1
 800f210:	4619      	mov	r1, r3
 800f212:	463b      	mov	r3, r7
 800f214:	bfbb      	ittet	lt
 800f216:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f21a:	461f      	movlt	r7, r3
 800f21c:	2300      	movge	r3, #0
 800f21e:	232d      	movlt	r3, #45	@ 0x2d
 800f220:	700b      	strb	r3, [r1, #0]
 800f222:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f224:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f228:	4691      	mov	r9, r2
 800f22a:	f023 0820 	bic.w	r8, r3, #32
 800f22e:	bfbc      	itt	lt
 800f230:	4632      	movlt	r2, r6
 800f232:	4616      	movlt	r6, r2
 800f234:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f238:	d005      	beq.n	800f246 <__cvt+0x42>
 800f23a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f23e:	d100      	bne.n	800f242 <__cvt+0x3e>
 800f240:	3401      	adds	r4, #1
 800f242:	2102      	movs	r1, #2
 800f244:	e000      	b.n	800f248 <__cvt+0x44>
 800f246:	2103      	movs	r1, #3
 800f248:	ab03      	add	r3, sp, #12
 800f24a:	9301      	str	r3, [sp, #4]
 800f24c:	ab02      	add	r3, sp, #8
 800f24e:	9300      	str	r3, [sp, #0]
 800f250:	ec47 6b10 	vmov	d0, r6, r7
 800f254:	4653      	mov	r3, sl
 800f256:	4622      	mov	r2, r4
 800f258:	f000 ffe6 	bl	8010228 <_dtoa_r>
 800f25c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f260:	4605      	mov	r5, r0
 800f262:	d119      	bne.n	800f298 <__cvt+0x94>
 800f264:	f019 0f01 	tst.w	r9, #1
 800f268:	d00e      	beq.n	800f288 <__cvt+0x84>
 800f26a:	eb00 0904 	add.w	r9, r0, r4
 800f26e:	2200      	movs	r2, #0
 800f270:	2300      	movs	r3, #0
 800f272:	4630      	mov	r0, r6
 800f274:	4639      	mov	r1, r7
 800f276:	f7f1 fc27 	bl	8000ac8 <__aeabi_dcmpeq>
 800f27a:	b108      	cbz	r0, 800f280 <__cvt+0x7c>
 800f27c:	f8cd 900c 	str.w	r9, [sp, #12]
 800f280:	2230      	movs	r2, #48	@ 0x30
 800f282:	9b03      	ldr	r3, [sp, #12]
 800f284:	454b      	cmp	r3, r9
 800f286:	d31e      	bcc.n	800f2c6 <__cvt+0xc2>
 800f288:	9b03      	ldr	r3, [sp, #12]
 800f28a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f28c:	1b5b      	subs	r3, r3, r5
 800f28e:	4628      	mov	r0, r5
 800f290:	6013      	str	r3, [r2, #0]
 800f292:	b004      	add	sp, #16
 800f294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f298:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f29c:	eb00 0904 	add.w	r9, r0, r4
 800f2a0:	d1e5      	bne.n	800f26e <__cvt+0x6a>
 800f2a2:	7803      	ldrb	r3, [r0, #0]
 800f2a4:	2b30      	cmp	r3, #48	@ 0x30
 800f2a6:	d10a      	bne.n	800f2be <__cvt+0xba>
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	4630      	mov	r0, r6
 800f2ae:	4639      	mov	r1, r7
 800f2b0:	f7f1 fc0a 	bl	8000ac8 <__aeabi_dcmpeq>
 800f2b4:	b918      	cbnz	r0, 800f2be <__cvt+0xba>
 800f2b6:	f1c4 0401 	rsb	r4, r4, #1
 800f2ba:	f8ca 4000 	str.w	r4, [sl]
 800f2be:	f8da 3000 	ldr.w	r3, [sl]
 800f2c2:	4499      	add	r9, r3
 800f2c4:	e7d3      	b.n	800f26e <__cvt+0x6a>
 800f2c6:	1c59      	adds	r1, r3, #1
 800f2c8:	9103      	str	r1, [sp, #12]
 800f2ca:	701a      	strb	r2, [r3, #0]
 800f2cc:	e7d9      	b.n	800f282 <__cvt+0x7e>

0800f2ce <__exponent>:
 800f2ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f2d0:	2900      	cmp	r1, #0
 800f2d2:	bfba      	itte	lt
 800f2d4:	4249      	neglt	r1, r1
 800f2d6:	232d      	movlt	r3, #45	@ 0x2d
 800f2d8:	232b      	movge	r3, #43	@ 0x2b
 800f2da:	2909      	cmp	r1, #9
 800f2dc:	7002      	strb	r2, [r0, #0]
 800f2de:	7043      	strb	r3, [r0, #1]
 800f2e0:	dd29      	ble.n	800f336 <__exponent+0x68>
 800f2e2:	f10d 0307 	add.w	r3, sp, #7
 800f2e6:	461d      	mov	r5, r3
 800f2e8:	270a      	movs	r7, #10
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	fbb1 f6f7 	udiv	r6, r1, r7
 800f2f0:	fb07 1416 	mls	r4, r7, r6, r1
 800f2f4:	3430      	adds	r4, #48	@ 0x30
 800f2f6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f2fa:	460c      	mov	r4, r1
 800f2fc:	2c63      	cmp	r4, #99	@ 0x63
 800f2fe:	f103 33ff 	add.w	r3, r3, #4294967295
 800f302:	4631      	mov	r1, r6
 800f304:	dcf1      	bgt.n	800f2ea <__exponent+0x1c>
 800f306:	3130      	adds	r1, #48	@ 0x30
 800f308:	1e94      	subs	r4, r2, #2
 800f30a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f30e:	1c41      	adds	r1, r0, #1
 800f310:	4623      	mov	r3, r4
 800f312:	42ab      	cmp	r3, r5
 800f314:	d30a      	bcc.n	800f32c <__exponent+0x5e>
 800f316:	f10d 0309 	add.w	r3, sp, #9
 800f31a:	1a9b      	subs	r3, r3, r2
 800f31c:	42ac      	cmp	r4, r5
 800f31e:	bf88      	it	hi
 800f320:	2300      	movhi	r3, #0
 800f322:	3302      	adds	r3, #2
 800f324:	4403      	add	r3, r0
 800f326:	1a18      	subs	r0, r3, r0
 800f328:	b003      	add	sp, #12
 800f32a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f32c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f330:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f334:	e7ed      	b.n	800f312 <__exponent+0x44>
 800f336:	2330      	movs	r3, #48	@ 0x30
 800f338:	3130      	adds	r1, #48	@ 0x30
 800f33a:	7083      	strb	r3, [r0, #2]
 800f33c:	70c1      	strb	r1, [r0, #3]
 800f33e:	1d03      	adds	r3, r0, #4
 800f340:	e7f1      	b.n	800f326 <__exponent+0x58>
	...

0800f344 <_printf_float>:
 800f344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f348:	b08d      	sub	sp, #52	@ 0x34
 800f34a:	460c      	mov	r4, r1
 800f34c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f350:	4616      	mov	r6, r2
 800f352:	461f      	mov	r7, r3
 800f354:	4605      	mov	r5, r0
 800f356:	f000 fe33 	bl	800ffc0 <_localeconv_r>
 800f35a:	6803      	ldr	r3, [r0, #0]
 800f35c:	9304      	str	r3, [sp, #16]
 800f35e:	4618      	mov	r0, r3
 800f360:	f7f0 ff86 	bl	8000270 <strlen>
 800f364:	2300      	movs	r3, #0
 800f366:	930a      	str	r3, [sp, #40]	@ 0x28
 800f368:	f8d8 3000 	ldr.w	r3, [r8]
 800f36c:	9005      	str	r0, [sp, #20]
 800f36e:	3307      	adds	r3, #7
 800f370:	f023 0307 	bic.w	r3, r3, #7
 800f374:	f103 0208 	add.w	r2, r3, #8
 800f378:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f37c:	f8d4 b000 	ldr.w	fp, [r4]
 800f380:	f8c8 2000 	str.w	r2, [r8]
 800f384:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f388:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f38c:	9307      	str	r3, [sp, #28]
 800f38e:	f8cd 8018 	str.w	r8, [sp, #24]
 800f392:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f396:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f39a:	4b9c      	ldr	r3, [pc, #624]	@ (800f60c <_printf_float+0x2c8>)
 800f39c:	f04f 32ff 	mov.w	r2, #4294967295
 800f3a0:	f7f1 fbc4 	bl	8000b2c <__aeabi_dcmpun>
 800f3a4:	bb70      	cbnz	r0, 800f404 <_printf_float+0xc0>
 800f3a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f3aa:	4b98      	ldr	r3, [pc, #608]	@ (800f60c <_printf_float+0x2c8>)
 800f3ac:	f04f 32ff 	mov.w	r2, #4294967295
 800f3b0:	f7f1 fb9e 	bl	8000af0 <__aeabi_dcmple>
 800f3b4:	bb30      	cbnz	r0, 800f404 <_printf_float+0xc0>
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	4640      	mov	r0, r8
 800f3bc:	4649      	mov	r1, r9
 800f3be:	f7f1 fb8d 	bl	8000adc <__aeabi_dcmplt>
 800f3c2:	b110      	cbz	r0, 800f3ca <_printf_float+0x86>
 800f3c4:	232d      	movs	r3, #45	@ 0x2d
 800f3c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f3ca:	4a91      	ldr	r2, [pc, #580]	@ (800f610 <_printf_float+0x2cc>)
 800f3cc:	4b91      	ldr	r3, [pc, #580]	@ (800f614 <_printf_float+0x2d0>)
 800f3ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f3d2:	bf8c      	ite	hi
 800f3d4:	4690      	movhi	r8, r2
 800f3d6:	4698      	movls	r8, r3
 800f3d8:	2303      	movs	r3, #3
 800f3da:	6123      	str	r3, [r4, #16]
 800f3dc:	f02b 0304 	bic.w	r3, fp, #4
 800f3e0:	6023      	str	r3, [r4, #0]
 800f3e2:	f04f 0900 	mov.w	r9, #0
 800f3e6:	9700      	str	r7, [sp, #0]
 800f3e8:	4633      	mov	r3, r6
 800f3ea:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f3ec:	4621      	mov	r1, r4
 800f3ee:	4628      	mov	r0, r5
 800f3f0:	f000 f9d2 	bl	800f798 <_printf_common>
 800f3f4:	3001      	adds	r0, #1
 800f3f6:	f040 808d 	bne.w	800f514 <_printf_float+0x1d0>
 800f3fa:	f04f 30ff 	mov.w	r0, #4294967295
 800f3fe:	b00d      	add	sp, #52	@ 0x34
 800f400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f404:	4642      	mov	r2, r8
 800f406:	464b      	mov	r3, r9
 800f408:	4640      	mov	r0, r8
 800f40a:	4649      	mov	r1, r9
 800f40c:	f7f1 fb8e 	bl	8000b2c <__aeabi_dcmpun>
 800f410:	b140      	cbz	r0, 800f424 <_printf_float+0xe0>
 800f412:	464b      	mov	r3, r9
 800f414:	2b00      	cmp	r3, #0
 800f416:	bfbc      	itt	lt
 800f418:	232d      	movlt	r3, #45	@ 0x2d
 800f41a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f41e:	4a7e      	ldr	r2, [pc, #504]	@ (800f618 <_printf_float+0x2d4>)
 800f420:	4b7e      	ldr	r3, [pc, #504]	@ (800f61c <_printf_float+0x2d8>)
 800f422:	e7d4      	b.n	800f3ce <_printf_float+0x8a>
 800f424:	6863      	ldr	r3, [r4, #4]
 800f426:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f42a:	9206      	str	r2, [sp, #24]
 800f42c:	1c5a      	adds	r2, r3, #1
 800f42e:	d13b      	bne.n	800f4a8 <_printf_float+0x164>
 800f430:	2306      	movs	r3, #6
 800f432:	6063      	str	r3, [r4, #4]
 800f434:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f438:	2300      	movs	r3, #0
 800f43a:	6022      	str	r2, [r4, #0]
 800f43c:	9303      	str	r3, [sp, #12]
 800f43e:	ab0a      	add	r3, sp, #40	@ 0x28
 800f440:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f444:	ab09      	add	r3, sp, #36	@ 0x24
 800f446:	9300      	str	r3, [sp, #0]
 800f448:	6861      	ldr	r1, [r4, #4]
 800f44a:	ec49 8b10 	vmov	d0, r8, r9
 800f44e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f452:	4628      	mov	r0, r5
 800f454:	f7ff fed6 	bl	800f204 <__cvt>
 800f458:	9b06      	ldr	r3, [sp, #24]
 800f45a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f45c:	2b47      	cmp	r3, #71	@ 0x47
 800f45e:	4680      	mov	r8, r0
 800f460:	d129      	bne.n	800f4b6 <_printf_float+0x172>
 800f462:	1cc8      	adds	r0, r1, #3
 800f464:	db02      	blt.n	800f46c <_printf_float+0x128>
 800f466:	6863      	ldr	r3, [r4, #4]
 800f468:	4299      	cmp	r1, r3
 800f46a:	dd41      	ble.n	800f4f0 <_printf_float+0x1ac>
 800f46c:	f1aa 0a02 	sub.w	sl, sl, #2
 800f470:	fa5f fa8a 	uxtb.w	sl, sl
 800f474:	3901      	subs	r1, #1
 800f476:	4652      	mov	r2, sl
 800f478:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f47c:	9109      	str	r1, [sp, #36]	@ 0x24
 800f47e:	f7ff ff26 	bl	800f2ce <__exponent>
 800f482:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f484:	1813      	adds	r3, r2, r0
 800f486:	2a01      	cmp	r2, #1
 800f488:	4681      	mov	r9, r0
 800f48a:	6123      	str	r3, [r4, #16]
 800f48c:	dc02      	bgt.n	800f494 <_printf_float+0x150>
 800f48e:	6822      	ldr	r2, [r4, #0]
 800f490:	07d2      	lsls	r2, r2, #31
 800f492:	d501      	bpl.n	800f498 <_printf_float+0x154>
 800f494:	3301      	adds	r3, #1
 800f496:	6123      	str	r3, [r4, #16]
 800f498:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d0a2      	beq.n	800f3e6 <_printf_float+0xa2>
 800f4a0:	232d      	movs	r3, #45	@ 0x2d
 800f4a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f4a6:	e79e      	b.n	800f3e6 <_printf_float+0xa2>
 800f4a8:	9a06      	ldr	r2, [sp, #24]
 800f4aa:	2a47      	cmp	r2, #71	@ 0x47
 800f4ac:	d1c2      	bne.n	800f434 <_printf_float+0xf0>
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d1c0      	bne.n	800f434 <_printf_float+0xf0>
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	e7bd      	b.n	800f432 <_printf_float+0xee>
 800f4b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f4ba:	d9db      	bls.n	800f474 <_printf_float+0x130>
 800f4bc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f4c0:	d118      	bne.n	800f4f4 <_printf_float+0x1b0>
 800f4c2:	2900      	cmp	r1, #0
 800f4c4:	6863      	ldr	r3, [r4, #4]
 800f4c6:	dd0b      	ble.n	800f4e0 <_printf_float+0x19c>
 800f4c8:	6121      	str	r1, [r4, #16]
 800f4ca:	b913      	cbnz	r3, 800f4d2 <_printf_float+0x18e>
 800f4cc:	6822      	ldr	r2, [r4, #0]
 800f4ce:	07d0      	lsls	r0, r2, #31
 800f4d0:	d502      	bpl.n	800f4d8 <_printf_float+0x194>
 800f4d2:	3301      	adds	r3, #1
 800f4d4:	440b      	add	r3, r1
 800f4d6:	6123      	str	r3, [r4, #16]
 800f4d8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f4da:	f04f 0900 	mov.w	r9, #0
 800f4de:	e7db      	b.n	800f498 <_printf_float+0x154>
 800f4e0:	b913      	cbnz	r3, 800f4e8 <_printf_float+0x1a4>
 800f4e2:	6822      	ldr	r2, [r4, #0]
 800f4e4:	07d2      	lsls	r2, r2, #31
 800f4e6:	d501      	bpl.n	800f4ec <_printf_float+0x1a8>
 800f4e8:	3302      	adds	r3, #2
 800f4ea:	e7f4      	b.n	800f4d6 <_printf_float+0x192>
 800f4ec:	2301      	movs	r3, #1
 800f4ee:	e7f2      	b.n	800f4d6 <_printf_float+0x192>
 800f4f0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f4f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f4f6:	4299      	cmp	r1, r3
 800f4f8:	db05      	blt.n	800f506 <_printf_float+0x1c2>
 800f4fa:	6823      	ldr	r3, [r4, #0]
 800f4fc:	6121      	str	r1, [r4, #16]
 800f4fe:	07d8      	lsls	r0, r3, #31
 800f500:	d5ea      	bpl.n	800f4d8 <_printf_float+0x194>
 800f502:	1c4b      	adds	r3, r1, #1
 800f504:	e7e7      	b.n	800f4d6 <_printf_float+0x192>
 800f506:	2900      	cmp	r1, #0
 800f508:	bfd4      	ite	le
 800f50a:	f1c1 0202 	rsble	r2, r1, #2
 800f50e:	2201      	movgt	r2, #1
 800f510:	4413      	add	r3, r2
 800f512:	e7e0      	b.n	800f4d6 <_printf_float+0x192>
 800f514:	6823      	ldr	r3, [r4, #0]
 800f516:	055a      	lsls	r2, r3, #21
 800f518:	d407      	bmi.n	800f52a <_printf_float+0x1e6>
 800f51a:	6923      	ldr	r3, [r4, #16]
 800f51c:	4642      	mov	r2, r8
 800f51e:	4631      	mov	r1, r6
 800f520:	4628      	mov	r0, r5
 800f522:	47b8      	blx	r7
 800f524:	3001      	adds	r0, #1
 800f526:	d12b      	bne.n	800f580 <_printf_float+0x23c>
 800f528:	e767      	b.n	800f3fa <_printf_float+0xb6>
 800f52a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f52e:	f240 80dd 	bls.w	800f6ec <_printf_float+0x3a8>
 800f532:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f536:	2200      	movs	r2, #0
 800f538:	2300      	movs	r3, #0
 800f53a:	f7f1 fac5 	bl	8000ac8 <__aeabi_dcmpeq>
 800f53e:	2800      	cmp	r0, #0
 800f540:	d033      	beq.n	800f5aa <_printf_float+0x266>
 800f542:	4a37      	ldr	r2, [pc, #220]	@ (800f620 <_printf_float+0x2dc>)
 800f544:	2301      	movs	r3, #1
 800f546:	4631      	mov	r1, r6
 800f548:	4628      	mov	r0, r5
 800f54a:	47b8      	blx	r7
 800f54c:	3001      	adds	r0, #1
 800f54e:	f43f af54 	beq.w	800f3fa <_printf_float+0xb6>
 800f552:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f556:	4543      	cmp	r3, r8
 800f558:	db02      	blt.n	800f560 <_printf_float+0x21c>
 800f55a:	6823      	ldr	r3, [r4, #0]
 800f55c:	07d8      	lsls	r0, r3, #31
 800f55e:	d50f      	bpl.n	800f580 <_printf_float+0x23c>
 800f560:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f564:	4631      	mov	r1, r6
 800f566:	4628      	mov	r0, r5
 800f568:	47b8      	blx	r7
 800f56a:	3001      	adds	r0, #1
 800f56c:	f43f af45 	beq.w	800f3fa <_printf_float+0xb6>
 800f570:	f04f 0900 	mov.w	r9, #0
 800f574:	f108 38ff 	add.w	r8, r8, #4294967295
 800f578:	f104 0a1a 	add.w	sl, r4, #26
 800f57c:	45c8      	cmp	r8, r9
 800f57e:	dc09      	bgt.n	800f594 <_printf_float+0x250>
 800f580:	6823      	ldr	r3, [r4, #0]
 800f582:	079b      	lsls	r3, r3, #30
 800f584:	f100 8103 	bmi.w	800f78e <_printf_float+0x44a>
 800f588:	68e0      	ldr	r0, [r4, #12]
 800f58a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f58c:	4298      	cmp	r0, r3
 800f58e:	bfb8      	it	lt
 800f590:	4618      	movlt	r0, r3
 800f592:	e734      	b.n	800f3fe <_printf_float+0xba>
 800f594:	2301      	movs	r3, #1
 800f596:	4652      	mov	r2, sl
 800f598:	4631      	mov	r1, r6
 800f59a:	4628      	mov	r0, r5
 800f59c:	47b8      	blx	r7
 800f59e:	3001      	adds	r0, #1
 800f5a0:	f43f af2b 	beq.w	800f3fa <_printf_float+0xb6>
 800f5a4:	f109 0901 	add.w	r9, r9, #1
 800f5a8:	e7e8      	b.n	800f57c <_printf_float+0x238>
 800f5aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	dc39      	bgt.n	800f624 <_printf_float+0x2e0>
 800f5b0:	4a1b      	ldr	r2, [pc, #108]	@ (800f620 <_printf_float+0x2dc>)
 800f5b2:	2301      	movs	r3, #1
 800f5b4:	4631      	mov	r1, r6
 800f5b6:	4628      	mov	r0, r5
 800f5b8:	47b8      	blx	r7
 800f5ba:	3001      	adds	r0, #1
 800f5bc:	f43f af1d 	beq.w	800f3fa <_printf_float+0xb6>
 800f5c0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f5c4:	ea59 0303 	orrs.w	r3, r9, r3
 800f5c8:	d102      	bne.n	800f5d0 <_printf_float+0x28c>
 800f5ca:	6823      	ldr	r3, [r4, #0]
 800f5cc:	07d9      	lsls	r1, r3, #31
 800f5ce:	d5d7      	bpl.n	800f580 <_printf_float+0x23c>
 800f5d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f5d4:	4631      	mov	r1, r6
 800f5d6:	4628      	mov	r0, r5
 800f5d8:	47b8      	blx	r7
 800f5da:	3001      	adds	r0, #1
 800f5dc:	f43f af0d 	beq.w	800f3fa <_printf_float+0xb6>
 800f5e0:	f04f 0a00 	mov.w	sl, #0
 800f5e4:	f104 0b1a 	add.w	fp, r4, #26
 800f5e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5ea:	425b      	negs	r3, r3
 800f5ec:	4553      	cmp	r3, sl
 800f5ee:	dc01      	bgt.n	800f5f4 <_printf_float+0x2b0>
 800f5f0:	464b      	mov	r3, r9
 800f5f2:	e793      	b.n	800f51c <_printf_float+0x1d8>
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	465a      	mov	r2, fp
 800f5f8:	4631      	mov	r1, r6
 800f5fa:	4628      	mov	r0, r5
 800f5fc:	47b8      	blx	r7
 800f5fe:	3001      	adds	r0, #1
 800f600:	f43f aefb 	beq.w	800f3fa <_printf_float+0xb6>
 800f604:	f10a 0a01 	add.w	sl, sl, #1
 800f608:	e7ee      	b.n	800f5e8 <_printf_float+0x2a4>
 800f60a:	bf00      	nop
 800f60c:	7fefffff 	.word	0x7fefffff
 800f610:	08012c75 	.word	0x08012c75
 800f614:	08012c71 	.word	0x08012c71
 800f618:	08012c7d 	.word	0x08012c7d
 800f61c:	08012c79 	.word	0x08012c79
 800f620:	08012c81 	.word	0x08012c81
 800f624:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f626:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f62a:	4553      	cmp	r3, sl
 800f62c:	bfa8      	it	ge
 800f62e:	4653      	movge	r3, sl
 800f630:	2b00      	cmp	r3, #0
 800f632:	4699      	mov	r9, r3
 800f634:	dc36      	bgt.n	800f6a4 <_printf_float+0x360>
 800f636:	f04f 0b00 	mov.w	fp, #0
 800f63a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f63e:	f104 021a 	add.w	r2, r4, #26
 800f642:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f644:	9306      	str	r3, [sp, #24]
 800f646:	eba3 0309 	sub.w	r3, r3, r9
 800f64a:	455b      	cmp	r3, fp
 800f64c:	dc31      	bgt.n	800f6b2 <_printf_float+0x36e>
 800f64e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f650:	459a      	cmp	sl, r3
 800f652:	dc3a      	bgt.n	800f6ca <_printf_float+0x386>
 800f654:	6823      	ldr	r3, [r4, #0]
 800f656:	07da      	lsls	r2, r3, #31
 800f658:	d437      	bmi.n	800f6ca <_printf_float+0x386>
 800f65a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f65c:	ebaa 0903 	sub.w	r9, sl, r3
 800f660:	9b06      	ldr	r3, [sp, #24]
 800f662:	ebaa 0303 	sub.w	r3, sl, r3
 800f666:	4599      	cmp	r9, r3
 800f668:	bfa8      	it	ge
 800f66a:	4699      	movge	r9, r3
 800f66c:	f1b9 0f00 	cmp.w	r9, #0
 800f670:	dc33      	bgt.n	800f6da <_printf_float+0x396>
 800f672:	f04f 0800 	mov.w	r8, #0
 800f676:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f67a:	f104 0b1a 	add.w	fp, r4, #26
 800f67e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f680:	ebaa 0303 	sub.w	r3, sl, r3
 800f684:	eba3 0309 	sub.w	r3, r3, r9
 800f688:	4543      	cmp	r3, r8
 800f68a:	f77f af79 	ble.w	800f580 <_printf_float+0x23c>
 800f68e:	2301      	movs	r3, #1
 800f690:	465a      	mov	r2, fp
 800f692:	4631      	mov	r1, r6
 800f694:	4628      	mov	r0, r5
 800f696:	47b8      	blx	r7
 800f698:	3001      	adds	r0, #1
 800f69a:	f43f aeae 	beq.w	800f3fa <_printf_float+0xb6>
 800f69e:	f108 0801 	add.w	r8, r8, #1
 800f6a2:	e7ec      	b.n	800f67e <_printf_float+0x33a>
 800f6a4:	4642      	mov	r2, r8
 800f6a6:	4631      	mov	r1, r6
 800f6a8:	4628      	mov	r0, r5
 800f6aa:	47b8      	blx	r7
 800f6ac:	3001      	adds	r0, #1
 800f6ae:	d1c2      	bne.n	800f636 <_printf_float+0x2f2>
 800f6b0:	e6a3      	b.n	800f3fa <_printf_float+0xb6>
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	4631      	mov	r1, r6
 800f6b6:	4628      	mov	r0, r5
 800f6b8:	9206      	str	r2, [sp, #24]
 800f6ba:	47b8      	blx	r7
 800f6bc:	3001      	adds	r0, #1
 800f6be:	f43f ae9c 	beq.w	800f3fa <_printf_float+0xb6>
 800f6c2:	9a06      	ldr	r2, [sp, #24]
 800f6c4:	f10b 0b01 	add.w	fp, fp, #1
 800f6c8:	e7bb      	b.n	800f642 <_printf_float+0x2fe>
 800f6ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f6ce:	4631      	mov	r1, r6
 800f6d0:	4628      	mov	r0, r5
 800f6d2:	47b8      	blx	r7
 800f6d4:	3001      	adds	r0, #1
 800f6d6:	d1c0      	bne.n	800f65a <_printf_float+0x316>
 800f6d8:	e68f      	b.n	800f3fa <_printf_float+0xb6>
 800f6da:	9a06      	ldr	r2, [sp, #24]
 800f6dc:	464b      	mov	r3, r9
 800f6de:	4442      	add	r2, r8
 800f6e0:	4631      	mov	r1, r6
 800f6e2:	4628      	mov	r0, r5
 800f6e4:	47b8      	blx	r7
 800f6e6:	3001      	adds	r0, #1
 800f6e8:	d1c3      	bne.n	800f672 <_printf_float+0x32e>
 800f6ea:	e686      	b.n	800f3fa <_printf_float+0xb6>
 800f6ec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f6f0:	f1ba 0f01 	cmp.w	sl, #1
 800f6f4:	dc01      	bgt.n	800f6fa <_printf_float+0x3b6>
 800f6f6:	07db      	lsls	r3, r3, #31
 800f6f8:	d536      	bpl.n	800f768 <_printf_float+0x424>
 800f6fa:	2301      	movs	r3, #1
 800f6fc:	4642      	mov	r2, r8
 800f6fe:	4631      	mov	r1, r6
 800f700:	4628      	mov	r0, r5
 800f702:	47b8      	blx	r7
 800f704:	3001      	adds	r0, #1
 800f706:	f43f ae78 	beq.w	800f3fa <_printf_float+0xb6>
 800f70a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f70e:	4631      	mov	r1, r6
 800f710:	4628      	mov	r0, r5
 800f712:	47b8      	blx	r7
 800f714:	3001      	adds	r0, #1
 800f716:	f43f ae70 	beq.w	800f3fa <_printf_float+0xb6>
 800f71a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f71e:	2200      	movs	r2, #0
 800f720:	2300      	movs	r3, #0
 800f722:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f726:	f7f1 f9cf 	bl	8000ac8 <__aeabi_dcmpeq>
 800f72a:	b9c0      	cbnz	r0, 800f75e <_printf_float+0x41a>
 800f72c:	4653      	mov	r3, sl
 800f72e:	f108 0201 	add.w	r2, r8, #1
 800f732:	4631      	mov	r1, r6
 800f734:	4628      	mov	r0, r5
 800f736:	47b8      	blx	r7
 800f738:	3001      	adds	r0, #1
 800f73a:	d10c      	bne.n	800f756 <_printf_float+0x412>
 800f73c:	e65d      	b.n	800f3fa <_printf_float+0xb6>
 800f73e:	2301      	movs	r3, #1
 800f740:	465a      	mov	r2, fp
 800f742:	4631      	mov	r1, r6
 800f744:	4628      	mov	r0, r5
 800f746:	47b8      	blx	r7
 800f748:	3001      	adds	r0, #1
 800f74a:	f43f ae56 	beq.w	800f3fa <_printf_float+0xb6>
 800f74e:	f108 0801 	add.w	r8, r8, #1
 800f752:	45d0      	cmp	r8, sl
 800f754:	dbf3      	blt.n	800f73e <_printf_float+0x3fa>
 800f756:	464b      	mov	r3, r9
 800f758:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f75c:	e6df      	b.n	800f51e <_printf_float+0x1da>
 800f75e:	f04f 0800 	mov.w	r8, #0
 800f762:	f104 0b1a 	add.w	fp, r4, #26
 800f766:	e7f4      	b.n	800f752 <_printf_float+0x40e>
 800f768:	2301      	movs	r3, #1
 800f76a:	4642      	mov	r2, r8
 800f76c:	e7e1      	b.n	800f732 <_printf_float+0x3ee>
 800f76e:	2301      	movs	r3, #1
 800f770:	464a      	mov	r2, r9
 800f772:	4631      	mov	r1, r6
 800f774:	4628      	mov	r0, r5
 800f776:	47b8      	blx	r7
 800f778:	3001      	adds	r0, #1
 800f77a:	f43f ae3e 	beq.w	800f3fa <_printf_float+0xb6>
 800f77e:	f108 0801 	add.w	r8, r8, #1
 800f782:	68e3      	ldr	r3, [r4, #12]
 800f784:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f786:	1a5b      	subs	r3, r3, r1
 800f788:	4543      	cmp	r3, r8
 800f78a:	dcf0      	bgt.n	800f76e <_printf_float+0x42a>
 800f78c:	e6fc      	b.n	800f588 <_printf_float+0x244>
 800f78e:	f04f 0800 	mov.w	r8, #0
 800f792:	f104 0919 	add.w	r9, r4, #25
 800f796:	e7f4      	b.n	800f782 <_printf_float+0x43e>

0800f798 <_printf_common>:
 800f798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f79c:	4616      	mov	r6, r2
 800f79e:	4698      	mov	r8, r3
 800f7a0:	688a      	ldr	r2, [r1, #8]
 800f7a2:	690b      	ldr	r3, [r1, #16]
 800f7a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	bfb8      	it	lt
 800f7ac:	4613      	movlt	r3, r2
 800f7ae:	6033      	str	r3, [r6, #0]
 800f7b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f7b4:	4607      	mov	r7, r0
 800f7b6:	460c      	mov	r4, r1
 800f7b8:	b10a      	cbz	r2, 800f7be <_printf_common+0x26>
 800f7ba:	3301      	adds	r3, #1
 800f7bc:	6033      	str	r3, [r6, #0]
 800f7be:	6823      	ldr	r3, [r4, #0]
 800f7c0:	0699      	lsls	r1, r3, #26
 800f7c2:	bf42      	ittt	mi
 800f7c4:	6833      	ldrmi	r3, [r6, #0]
 800f7c6:	3302      	addmi	r3, #2
 800f7c8:	6033      	strmi	r3, [r6, #0]
 800f7ca:	6825      	ldr	r5, [r4, #0]
 800f7cc:	f015 0506 	ands.w	r5, r5, #6
 800f7d0:	d106      	bne.n	800f7e0 <_printf_common+0x48>
 800f7d2:	f104 0a19 	add.w	sl, r4, #25
 800f7d6:	68e3      	ldr	r3, [r4, #12]
 800f7d8:	6832      	ldr	r2, [r6, #0]
 800f7da:	1a9b      	subs	r3, r3, r2
 800f7dc:	42ab      	cmp	r3, r5
 800f7de:	dc26      	bgt.n	800f82e <_printf_common+0x96>
 800f7e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f7e4:	6822      	ldr	r2, [r4, #0]
 800f7e6:	3b00      	subs	r3, #0
 800f7e8:	bf18      	it	ne
 800f7ea:	2301      	movne	r3, #1
 800f7ec:	0692      	lsls	r2, r2, #26
 800f7ee:	d42b      	bmi.n	800f848 <_printf_common+0xb0>
 800f7f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f7f4:	4641      	mov	r1, r8
 800f7f6:	4638      	mov	r0, r7
 800f7f8:	47c8      	blx	r9
 800f7fa:	3001      	adds	r0, #1
 800f7fc:	d01e      	beq.n	800f83c <_printf_common+0xa4>
 800f7fe:	6823      	ldr	r3, [r4, #0]
 800f800:	6922      	ldr	r2, [r4, #16]
 800f802:	f003 0306 	and.w	r3, r3, #6
 800f806:	2b04      	cmp	r3, #4
 800f808:	bf02      	ittt	eq
 800f80a:	68e5      	ldreq	r5, [r4, #12]
 800f80c:	6833      	ldreq	r3, [r6, #0]
 800f80e:	1aed      	subeq	r5, r5, r3
 800f810:	68a3      	ldr	r3, [r4, #8]
 800f812:	bf0c      	ite	eq
 800f814:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f818:	2500      	movne	r5, #0
 800f81a:	4293      	cmp	r3, r2
 800f81c:	bfc4      	itt	gt
 800f81e:	1a9b      	subgt	r3, r3, r2
 800f820:	18ed      	addgt	r5, r5, r3
 800f822:	2600      	movs	r6, #0
 800f824:	341a      	adds	r4, #26
 800f826:	42b5      	cmp	r5, r6
 800f828:	d11a      	bne.n	800f860 <_printf_common+0xc8>
 800f82a:	2000      	movs	r0, #0
 800f82c:	e008      	b.n	800f840 <_printf_common+0xa8>
 800f82e:	2301      	movs	r3, #1
 800f830:	4652      	mov	r2, sl
 800f832:	4641      	mov	r1, r8
 800f834:	4638      	mov	r0, r7
 800f836:	47c8      	blx	r9
 800f838:	3001      	adds	r0, #1
 800f83a:	d103      	bne.n	800f844 <_printf_common+0xac>
 800f83c:	f04f 30ff 	mov.w	r0, #4294967295
 800f840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f844:	3501      	adds	r5, #1
 800f846:	e7c6      	b.n	800f7d6 <_printf_common+0x3e>
 800f848:	18e1      	adds	r1, r4, r3
 800f84a:	1c5a      	adds	r2, r3, #1
 800f84c:	2030      	movs	r0, #48	@ 0x30
 800f84e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f852:	4422      	add	r2, r4
 800f854:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f858:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f85c:	3302      	adds	r3, #2
 800f85e:	e7c7      	b.n	800f7f0 <_printf_common+0x58>
 800f860:	2301      	movs	r3, #1
 800f862:	4622      	mov	r2, r4
 800f864:	4641      	mov	r1, r8
 800f866:	4638      	mov	r0, r7
 800f868:	47c8      	blx	r9
 800f86a:	3001      	adds	r0, #1
 800f86c:	d0e6      	beq.n	800f83c <_printf_common+0xa4>
 800f86e:	3601      	adds	r6, #1
 800f870:	e7d9      	b.n	800f826 <_printf_common+0x8e>
	...

0800f874 <_printf_i>:
 800f874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f878:	7e0f      	ldrb	r7, [r1, #24]
 800f87a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f87c:	2f78      	cmp	r7, #120	@ 0x78
 800f87e:	4691      	mov	r9, r2
 800f880:	4680      	mov	r8, r0
 800f882:	460c      	mov	r4, r1
 800f884:	469a      	mov	sl, r3
 800f886:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f88a:	d807      	bhi.n	800f89c <_printf_i+0x28>
 800f88c:	2f62      	cmp	r7, #98	@ 0x62
 800f88e:	d80a      	bhi.n	800f8a6 <_printf_i+0x32>
 800f890:	2f00      	cmp	r7, #0
 800f892:	f000 80d1 	beq.w	800fa38 <_printf_i+0x1c4>
 800f896:	2f58      	cmp	r7, #88	@ 0x58
 800f898:	f000 80b8 	beq.w	800fa0c <_printf_i+0x198>
 800f89c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f8a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f8a4:	e03a      	b.n	800f91c <_printf_i+0xa8>
 800f8a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f8aa:	2b15      	cmp	r3, #21
 800f8ac:	d8f6      	bhi.n	800f89c <_printf_i+0x28>
 800f8ae:	a101      	add	r1, pc, #4	@ (adr r1, 800f8b4 <_printf_i+0x40>)
 800f8b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f8b4:	0800f90d 	.word	0x0800f90d
 800f8b8:	0800f921 	.word	0x0800f921
 800f8bc:	0800f89d 	.word	0x0800f89d
 800f8c0:	0800f89d 	.word	0x0800f89d
 800f8c4:	0800f89d 	.word	0x0800f89d
 800f8c8:	0800f89d 	.word	0x0800f89d
 800f8cc:	0800f921 	.word	0x0800f921
 800f8d0:	0800f89d 	.word	0x0800f89d
 800f8d4:	0800f89d 	.word	0x0800f89d
 800f8d8:	0800f89d 	.word	0x0800f89d
 800f8dc:	0800f89d 	.word	0x0800f89d
 800f8e0:	0800fa1f 	.word	0x0800fa1f
 800f8e4:	0800f94b 	.word	0x0800f94b
 800f8e8:	0800f9d9 	.word	0x0800f9d9
 800f8ec:	0800f89d 	.word	0x0800f89d
 800f8f0:	0800f89d 	.word	0x0800f89d
 800f8f4:	0800fa41 	.word	0x0800fa41
 800f8f8:	0800f89d 	.word	0x0800f89d
 800f8fc:	0800f94b 	.word	0x0800f94b
 800f900:	0800f89d 	.word	0x0800f89d
 800f904:	0800f89d 	.word	0x0800f89d
 800f908:	0800f9e1 	.word	0x0800f9e1
 800f90c:	6833      	ldr	r3, [r6, #0]
 800f90e:	1d1a      	adds	r2, r3, #4
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	6032      	str	r2, [r6, #0]
 800f914:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f918:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f91c:	2301      	movs	r3, #1
 800f91e:	e09c      	b.n	800fa5a <_printf_i+0x1e6>
 800f920:	6833      	ldr	r3, [r6, #0]
 800f922:	6820      	ldr	r0, [r4, #0]
 800f924:	1d19      	adds	r1, r3, #4
 800f926:	6031      	str	r1, [r6, #0]
 800f928:	0606      	lsls	r6, r0, #24
 800f92a:	d501      	bpl.n	800f930 <_printf_i+0xbc>
 800f92c:	681d      	ldr	r5, [r3, #0]
 800f92e:	e003      	b.n	800f938 <_printf_i+0xc4>
 800f930:	0645      	lsls	r5, r0, #25
 800f932:	d5fb      	bpl.n	800f92c <_printf_i+0xb8>
 800f934:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f938:	2d00      	cmp	r5, #0
 800f93a:	da03      	bge.n	800f944 <_printf_i+0xd0>
 800f93c:	232d      	movs	r3, #45	@ 0x2d
 800f93e:	426d      	negs	r5, r5
 800f940:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f944:	4858      	ldr	r0, [pc, #352]	@ (800faa8 <_printf_i+0x234>)
 800f946:	230a      	movs	r3, #10
 800f948:	e011      	b.n	800f96e <_printf_i+0xfa>
 800f94a:	6821      	ldr	r1, [r4, #0]
 800f94c:	6833      	ldr	r3, [r6, #0]
 800f94e:	0608      	lsls	r0, r1, #24
 800f950:	f853 5b04 	ldr.w	r5, [r3], #4
 800f954:	d402      	bmi.n	800f95c <_printf_i+0xe8>
 800f956:	0649      	lsls	r1, r1, #25
 800f958:	bf48      	it	mi
 800f95a:	b2ad      	uxthmi	r5, r5
 800f95c:	2f6f      	cmp	r7, #111	@ 0x6f
 800f95e:	4852      	ldr	r0, [pc, #328]	@ (800faa8 <_printf_i+0x234>)
 800f960:	6033      	str	r3, [r6, #0]
 800f962:	bf14      	ite	ne
 800f964:	230a      	movne	r3, #10
 800f966:	2308      	moveq	r3, #8
 800f968:	2100      	movs	r1, #0
 800f96a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f96e:	6866      	ldr	r6, [r4, #4]
 800f970:	60a6      	str	r6, [r4, #8]
 800f972:	2e00      	cmp	r6, #0
 800f974:	db05      	blt.n	800f982 <_printf_i+0x10e>
 800f976:	6821      	ldr	r1, [r4, #0]
 800f978:	432e      	orrs	r6, r5
 800f97a:	f021 0104 	bic.w	r1, r1, #4
 800f97e:	6021      	str	r1, [r4, #0]
 800f980:	d04b      	beq.n	800fa1a <_printf_i+0x1a6>
 800f982:	4616      	mov	r6, r2
 800f984:	fbb5 f1f3 	udiv	r1, r5, r3
 800f988:	fb03 5711 	mls	r7, r3, r1, r5
 800f98c:	5dc7      	ldrb	r7, [r0, r7]
 800f98e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f992:	462f      	mov	r7, r5
 800f994:	42bb      	cmp	r3, r7
 800f996:	460d      	mov	r5, r1
 800f998:	d9f4      	bls.n	800f984 <_printf_i+0x110>
 800f99a:	2b08      	cmp	r3, #8
 800f99c:	d10b      	bne.n	800f9b6 <_printf_i+0x142>
 800f99e:	6823      	ldr	r3, [r4, #0]
 800f9a0:	07df      	lsls	r7, r3, #31
 800f9a2:	d508      	bpl.n	800f9b6 <_printf_i+0x142>
 800f9a4:	6923      	ldr	r3, [r4, #16]
 800f9a6:	6861      	ldr	r1, [r4, #4]
 800f9a8:	4299      	cmp	r1, r3
 800f9aa:	bfde      	ittt	le
 800f9ac:	2330      	movle	r3, #48	@ 0x30
 800f9ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f9b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f9b6:	1b92      	subs	r2, r2, r6
 800f9b8:	6122      	str	r2, [r4, #16]
 800f9ba:	f8cd a000 	str.w	sl, [sp]
 800f9be:	464b      	mov	r3, r9
 800f9c0:	aa03      	add	r2, sp, #12
 800f9c2:	4621      	mov	r1, r4
 800f9c4:	4640      	mov	r0, r8
 800f9c6:	f7ff fee7 	bl	800f798 <_printf_common>
 800f9ca:	3001      	adds	r0, #1
 800f9cc:	d14a      	bne.n	800fa64 <_printf_i+0x1f0>
 800f9ce:	f04f 30ff 	mov.w	r0, #4294967295
 800f9d2:	b004      	add	sp, #16
 800f9d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9d8:	6823      	ldr	r3, [r4, #0]
 800f9da:	f043 0320 	orr.w	r3, r3, #32
 800f9de:	6023      	str	r3, [r4, #0]
 800f9e0:	4832      	ldr	r0, [pc, #200]	@ (800faac <_printf_i+0x238>)
 800f9e2:	2778      	movs	r7, #120	@ 0x78
 800f9e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f9e8:	6823      	ldr	r3, [r4, #0]
 800f9ea:	6831      	ldr	r1, [r6, #0]
 800f9ec:	061f      	lsls	r7, r3, #24
 800f9ee:	f851 5b04 	ldr.w	r5, [r1], #4
 800f9f2:	d402      	bmi.n	800f9fa <_printf_i+0x186>
 800f9f4:	065f      	lsls	r7, r3, #25
 800f9f6:	bf48      	it	mi
 800f9f8:	b2ad      	uxthmi	r5, r5
 800f9fa:	6031      	str	r1, [r6, #0]
 800f9fc:	07d9      	lsls	r1, r3, #31
 800f9fe:	bf44      	itt	mi
 800fa00:	f043 0320 	orrmi.w	r3, r3, #32
 800fa04:	6023      	strmi	r3, [r4, #0]
 800fa06:	b11d      	cbz	r5, 800fa10 <_printf_i+0x19c>
 800fa08:	2310      	movs	r3, #16
 800fa0a:	e7ad      	b.n	800f968 <_printf_i+0xf4>
 800fa0c:	4826      	ldr	r0, [pc, #152]	@ (800faa8 <_printf_i+0x234>)
 800fa0e:	e7e9      	b.n	800f9e4 <_printf_i+0x170>
 800fa10:	6823      	ldr	r3, [r4, #0]
 800fa12:	f023 0320 	bic.w	r3, r3, #32
 800fa16:	6023      	str	r3, [r4, #0]
 800fa18:	e7f6      	b.n	800fa08 <_printf_i+0x194>
 800fa1a:	4616      	mov	r6, r2
 800fa1c:	e7bd      	b.n	800f99a <_printf_i+0x126>
 800fa1e:	6833      	ldr	r3, [r6, #0]
 800fa20:	6825      	ldr	r5, [r4, #0]
 800fa22:	6961      	ldr	r1, [r4, #20]
 800fa24:	1d18      	adds	r0, r3, #4
 800fa26:	6030      	str	r0, [r6, #0]
 800fa28:	062e      	lsls	r6, r5, #24
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	d501      	bpl.n	800fa32 <_printf_i+0x1be>
 800fa2e:	6019      	str	r1, [r3, #0]
 800fa30:	e002      	b.n	800fa38 <_printf_i+0x1c4>
 800fa32:	0668      	lsls	r0, r5, #25
 800fa34:	d5fb      	bpl.n	800fa2e <_printf_i+0x1ba>
 800fa36:	8019      	strh	r1, [r3, #0]
 800fa38:	2300      	movs	r3, #0
 800fa3a:	6123      	str	r3, [r4, #16]
 800fa3c:	4616      	mov	r6, r2
 800fa3e:	e7bc      	b.n	800f9ba <_printf_i+0x146>
 800fa40:	6833      	ldr	r3, [r6, #0]
 800fa42:	1d1a      	adds	r2, r3, #4
 800fa44:	6032      	str	r2, [r6, #0]
 800fa46:	681e      	ldr	r6, [r3, #0]
 800fa48:	6862      	ldr	r2, [r4, #4]
 800fa4a:	2100      	movs	r1, #0
 800fa4c:	4630      	mov	r0, r6
 800fa4e:	f7f0 fbbf 	bl	80001d0 <memchr>
 800fa52:	b108      	cbz	r0, 800fa58 <_printf_i+0x1e4>
 800fa54:	1b80      	subs	r0, r0, r6
 800fa56:	6060      	str	r0, [r4, #4]
 800fa58:	6863      	ldr	r3, [r4, #4]
 800fa5a:	6123      	str	r3, [r4, #16]
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fa62:	e7aa      	b.n	800f9ba <_printf_i+0x146>
 800fa64:	6923      	ldr	r3, [r4, #16]
 800fa66:	4632      	mov	r2, r6
 800fa68:	4649      	mov	r1, r9
 800fa6a:	4640      	mov	r0, r8
 800fa6c:	47d0      	blx	sl
 800fa6e:	3001      	adds	r0, #1
 800fa70:	d0ad      	beq.n	800f9ce <_printf_i+0x15a>
 800fa72:	6823      	ldr	r3, [r4, #0]
 800fa74:	079b      	lsls	r3, r3, #30
 800fa76:	d413      	bmi.n	800faa0 <_printf_i+0x22c>
 800fa78:	68e0      	ldr	r0, [r4, #12]
 800fa7a:	9b03      	ldr	r3, [sp, #12]
 800fa7c:	4298      	cmp	r0, r3
 800fa7e:	bfb8      	it	lt
 800fa80:	4618      	movlt	r0, r3
 800fa82:	e7a6      	b.n	800f9d2 <_printf_i+0x15e>
 800fa84:	2301      	movs	r3, #1
 800fa86:	4632      	mov	r2, r6
 800fa88:	4649      	mov	r1, r9
 800fa8a:	4640      	mov	r0, r8
 800fa8c:	47d0      	blx	sl
 800fa8e:	3001      	adds	r0, #1
 800fa90:	d09d      	beq.n	800f9ce <_printf_i+0x15a>
 800fa92:	3501      	adds	r5, #1
 800fa94:	68e3      	ldr	r3, [r4, #12]
 800fa96:	9903      	ldr	r1, [sp, #12]
 800fa98:	1a5b      	subs	r3, r3, r1
 800fa9a:	42ab      	cmp	r3, r5
 800fa9c:	dcf2      	bgt.n	800fa84 <_printf_i+0x210>
 800fa9e:	e7eb      	b.n	800fa78 <_printf_i+0x204>
 800faa0:	2500      	movs	r5, #0
 800faa2:	f104 0619 	add.w	r6, r4, #25
 800faa6:	e7f5      	b.n	800fa94 <_printf_i+0x220>
 800faa8:	08012c83 	.word	0x08012c83
 800faac:	08012c94 	.word	0x08012c94

0800fab0 <std>:
 800fab0:	2300      	movs	r3, #0
 800fab2:	b510      	push	{r4, lr}
 800fab4:	4604      	mov	r4, r0
 800fab6:	e9c0 3300 	strd	r3, r3, [r0]
 800faba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fabe:	6083      	str	r3, [r0, #8]
 800fac0:	8181      	strh	r1, [r0, #12]
 800fac2:	6643      	str	r3, [r0, #100]	@ 0x64
 800fac4:	81c2      	strh	r2, [r0, #14]
 800fac6:	6183      	str	r3, [r0, #24]
 800fac8:	4619      	mov	r1, r3
 800faca:	2208      	movs	r2, #8
 800facc:	305c      	adds	r0, #92	@ 0x5c
 800face:	f000 fa3f 	bl	800ff50 <memset>
 800fad2:	4b0d      	ldr	r3, [pc, #52]	@ (800fb08 <std+0x58>)
 800fad4:	6263      	str	r3, [r4, #36]	@ 0x24
 800fad6:	4b0d      	ldr	r3, [pc, #52]	@ (800fb0c <std+0x5c>)
 800fad8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fada:	4b0d      	ldr	r3, [pc, #52]	@ (800fb10 <std+0x60>)
 800fadc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fade:	4b0d      	ldr	r3, [pc, #52]	@ (800fb14 <std+0x64>)
 800fae0:	6323      	str	r3, [r4, #48]	@ 0x30
 800fae2:	4b0d      	ldr	r3, [pc, #52]	@ (800fb18 <std+0x68>)
 800fae4:	6224      	str	r4, [r4, #32]
 800fae6:	429c      	cmp	r4, r3
 800fae8:	d006      	beq.n	800faf8 <std+0x48>
 800faea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800faee:	4294      	cmp	r4, r2
 800faf0:	d002      	beq.n	800faf8 <std+0x48>
 800faf2:	33d0      	adds	r3, #208	@ 0xd0
 800faf4:	429c      	cmp	r4, r3
 800faf6:	d105      	bne.n	800fb04 <std+0x54>
 800faf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fafc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb00:	f000 baf6 	b.w	80100f0 <__retarget_lock_init_recursive>
 800fb04:	bd10      	pop	{r4, pc}
 800fb06:	bf00      	nop
 800fb08:	0800fda1 	.word	0x0800fda1
 800fb0c:	0800fdc3 	.word	0x0800fdc3
 800fb10:	0800fdfb 	.word	0x0800fdfb
 800fb14:	0800fe1f 	.word	0x0800fe1f
 800fb18:	20005564 	.word	0x20005564

0800fb1c <stdio_exit_handler>:
 800fb1c:	4a02      	ldr	r2, [pc, #8]	@ (800fb28 <stdio_exit_handler+0xc>)
 800fb1e:	4903      	ldr	r1, [pc, #12]	@ (800fb2c <stdio_exit_handler+0x10>)
 800fb20:	4803      	ldr	r0, [pc, #12]	@ (800fb30 <stdio_exit_handler+0x14>)
 800fb22:	f000 b869 	b.w	800fbf8 <_fwalk_sglue>
 800fb26:	bf00      	nop
 800fb28:	20000014 	.word	0x20000014
 800fb2c:	08011909 	.word	0x08011909
 800fb30:	20000024 	.word	0x20000024

0800fb34 <cleanup_stdio>:
 800fb34:	6841      	ldr	r1, [r0, #4]
 800fb36:	4b0c      	ldr	r3, [pc, #48]	@ (800fb68 <cleanup_stdio+0x34>)
 800fb38:	4299      	cmp	r1, r3
 800fb3a:	b510      	push	{r4, lr}
 800fb3c:	4604      	mov	r4, r0
 800fb3e:	d001      	beq.n	800fb44 <cleanup_stdio+0x10>
 800fb40:	f001 fee2 	bl	8011908 <_fflush_r>
 800fb44:	68a1      	ldr	r1, [r4, #8]
 800fb46:	4b09      	ldr	r3, [pc, #36]	@ (800fb6c <cleanup_stdio+0x38>)
 800fb48:	4299      	cmp	r1, r3
 800fb4a:	d002      	beq.n	800fb52 <cleanup_stdio+0x1e>
 800fb4c:	4620      	mov	r0, r4
 800fb4e:	f001 fedb 	bl	8011908 <_fflush_r>
 800fb52:	68e1      	ldr	r1, [r4, #12]
 800fb54:	4b06      	ldr	r3, [pc, #24]	@ (800fb70 <cleanup_stdio+0x3c>)
 800fb56:	4299      	cmp	r1, r3
 800fb58:	d004      	beq.n	800fb64 <cleanup_stdio+0x30>
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb60:	f001 bed2 	b.w	8011908 <_fflush_r>
 800fb64:	bd10      	pop	{r4, pc}
 800fb66:	bf00      	nop
 800fb68:	20005564 	.word	0x20005564
 800fb6c:	200055cc 	.word	0x200055cc
 800fb70:	20005634 	.word	0x20005634

0800fb74 <global_stdio_init.part.0>:
 800fb74:	b510      	push	{r4, lr}
 800fb76:	4b0b      	ldr	r3, [pc, #44]	@ (800fba4 <global_stdio_init.part.0+0x30>)
 800fb78:	4c0b      	ldr	r4, [pc, #44]	@ (800fba8 <global_stdio_init.part.0+0x34>)
 800fb7a:	4a0c      	ldr	r2, [pc, #48]	@ (800fbac <global_stdio_init.part.0+0x38>)
 800fb7c:	601a      	str	r2, [r3, #0]
 800fb7e:	4620      	mov	r0, r4
 800fb80:	2200      	movs	r2, #0
 800fb82:	2104      	movs	r1, #4
 800fb84:	f7ff ff94 	bl	800fab0 <std>
 800fb88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fb8c:	2201      	movs	r2, #1
 800fb8e:	2109      	movs	r1, #9
 800fb90:	f7ff ff8e 	bl	800fab0 <std>
 800fb94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fb98:	2202      	movs	r2, #2
 800fb9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb9e:	2112      	movs	r1, #18
 800fba0:	f7ff bf86 	b.w	800fab0 <std>
 800fba4:	2000569c 	.word	0x2000569c
 800fba8:	20005564 	.word	0x20005564
 800fbac:	0800fb1d 	.word	0x0800fb1d

0800fbb0 <__sfp_lock_acquire>:
 800fbb0:	4801      	ldr	r0, [pc, #4]	@ (800fbb8 <__sfp_lock_acquire+0x8>)
 800fbb2:	f000 ba9e 	b.w	80100f2 <__retarget_lock_acquire_recursive>
 800fbb6:	bf00      	nop
 800fbb8:	200056a5 	.word	0x200056a5

0800fbbc <__sfp_lock_release>:
 800fbbc:	4801      	ldr	r0, [pc, #4]	@ (800fbc4 <__sfp_lock_release+0x8>)
 800fbbe:	f000 ba99 	b.w	80100f4 <__retarget_lock_release_recursive>
 800fbc2:	bf00      	nop
 800fbc4:	200056a5 	.word	0x200056a5

0800fbc8 <__sinit>:
 800fbc8:	b510      	push	{r4, lr}
 800fbca:	4604      	mov	r4, r0
 800fbcc:	f7ff fff0 	bl	800fbb0 <__sfp_lock_acquire>
 800fbd0:	6a23      	ldr	r3, [r4, #32]
 800fbd2:	b11b      	cbz	r3, 800fbdc <__sinit+0x14>
 800fbd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbd8:	f7ff bff0 	b.w	800fbbc <__sfp_lock_release>
 800fbdc:	4b04      	ldr	r3, [pc, #16]	@ (800fbf0 <__sinit+0x28>)
 800fbde:	6223      	str	r3, [r4, #32]
 800fbe0:	4b04      	ldr	r3, [pc, #16]	@ (800fbf4 <__sinit+0x2c>)
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d1f5      	bne.n	800fbd4 <__sinit+0xc>
 800fbe8:	f7ff ffc4 	bl	800fb74 <global_stdio_init.part.0>
 800fbec:	e7f2      	b.n	800fbd4 <__sinit+0xc>
 800fbee:	bf00      	nop
 800fbf0:	0800fb35 	.word	0x0800fb35
 800fbf4:	2000569c 	.word	0x2000569c

0800fbf8 <_fwalk_sglue>:
 800fbf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbfc:	4607      	mov	r7, r0
 800fbfe:	4688      	mov	r8, r1
 800fc00:	4614      	mov	r4, r2
 800fc02:	2600      	movs	r6, #0
 800fc04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fc08:	f1b9 0901 	subs.w	r9, r9, #1
 800fc0c:	d505      	bpl.n	800fc1a <_fwalk_sglue+0x22>
 800fc0e:	6824      	ldr	r4, [r4, #0]
 800fc10:	2c00      	cmp	r4, #0
 800fc12:	d1f7      	bne.n	800fc04 <_fwalk_sglue+0xc>
 800fc14:	4630      	mov	r0, r6
 800fc16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc1a:	89ab      	ldrh	r3, [r5, #12]
 800fc1c:	2b01      	cmp	r3, #1
 800fc1e:	d907      	bls.n	800fc30 <_fwalk_sglue+0x38>
 800fc20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fc24:	3301      	adds	r3, #1
 800fc26:	d003      	beq.n	800fc30 <_fwalk_sglue+0x38>
 800fc28:	4629      	mov	r1, r5
 800fc2a:	4638      	mov	r0, r7
 800fc2c:	47c0      	blx	r8
 800fc2e:	4306      	orrs	r6, r0
 800fc30:	3568      	adds	r5, #104	@ 0x68
 800fc32:	e7e9      	b.n	800fc08 <_fwalk_sglue+0x10>

0800fc34 <_puts_r>:
 800fc34:	6a03      	ldr	r3, [r0, #32]
 800fc36:	b570      	push	{r4, r5, r6, lr}
 800fc38:	6884      	ldr	r4, [r0, #8]
 800fc3a:	4605      	mov	r5, r0
 800fc3c:	460e      	mov	r6, r1
 800fc3e:	b90b      	cbnz	r3, 800fc44 <_puts_r+0x10>
 800fc40:	f7ff ffc2 	bl	800fbc8 <__sinit>
 800fc44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fc46:	07db      	lsls	r3, r3, #31
 800fc48:	d405      	bmi.n	800fc56 <_puts_r+0x22>
 800fc4a:	89a3      	ldrh	r3, [r4, #12]
 800fc4c:	0598      	lsls	r0, r3, #22
 800fc4e:	d402      	bmi.n	800fc56 <_puts_r+0x22>
 800fc50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fc52:	f000 fa4e 	bl	80100f2 <__retarget_lock_acquire_recursive>
 800fc56:	89a3      	ldrh	r3, [r4, #12]
 800fc58:	0719      	lsls	r1, r3, #28
 800fc5a:	d502      	bpl.n	800fc62 <_puts_r+0x2e>
 800fc5c:	6923      	ldr	r3, [r4, #16]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d135      	bne.n	800fcce <_puts_r+0x9a>
 800fc62:	4621      	mov	r1, r4
 800fc64:	4628      	mov	r0, r5
 800fc66:	f000 f91d 	bl	800fea4 <__swsetup_r>
 800fc6a:	b380      	cbz	r0, 800fcce <_puts_r+0x9a>
 800fc6c:	f04f 35ff 	mov.w	r5, #4294967295
 800fc70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fc72:	07da      	lsls	r2, r3, #31
 800fc74:	d405      	bmi.n	800fc82 <_puts_r+0x4e>
 800fc76:	89a3      	ldrh	r3, [r4, #12]
 800fc78:	059b      	lsls	r3, r3, #22
 800fc7a:	d402      	bmi.n	800fc82 <_puts_r+0x4e>
 800fc7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fc7e:	f000 fa39 	bl	80100f4 <__retarget_lock_release_recursive>
 800fc82:	4628      	mov	r0, r5
 800fc84:	bd70      	pop	{r4, r5, r6, pc}
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	da04      	bge.n	800fc94 <_puts_r+0x60>
 800fc8a:	69a2      	ldr	r2, [r4, #24]
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	dc17      	bgt.n	800fcc0 <_puts_r+0x8c>
 800fc90:	290a      	cmp	r1, #10
 800fc92:	d015      	beq.n	800fcc0 <_puts_r+0x8c>
 800fc94:	6823      	ldr	r3, [r4, #0]
 800fc96:	1c5a      	adds	r2, r3, #1
 800fc98:	6022      	str	r2, [r4, #0]
 800fc9a:	7019      	strb	r1, [r3, #0]
 800fc9c:	68a3      	ldr	r3, [r4, #8]
 800fc9e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fca2:	3b01      	subs	r3, #1
 800fca4:	60a3      	str	r3, [r4, #8]
 800fca6:	2900      	cmp	r1, #0
 800fca8:	d1ed      	bne.n	800fc86 <_puts_r+0x52>
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	da11      	bge.n	800fcd2 <_puts_r+0x9e>
 800fcae:	4622      	mov	r2, r4
 800fcb0:	210a      	movs	r1, #10
 800fcb2:	4628      	mov	r0, r5
 800fcb4:	f000 f8b7 	bl	800fe26 <__swbuf_r>
 800fcb8:	3001      	adds	r0, #1
 800fcba:	d0d7      	beq.n	800fc6c <_puts_r+0x38>
 800fcbc:	250a      	movs	r5, #10
 800fcbe:	e7d7      	b.n	800fc70 <_puts_r+0x3c>
 800fcc0:	4622      	mov	r2, r4
 800fcc2:	4628      	mov	r0, r5
 800fcc4:	f000 f8af 	bl	800fe26 <__swbuf_r>
 800fcc8:	3001      	adds	r0, #1
 800fcca:	d1e7      	bne.n	800fc9c <_puts_r+0x68>
 800fccc:	e7ce      	b.n	800fc6c <_puts_r+0x38>
 800fcce:	3e01      	subs	r6, #1
 800fcd0:	e7e4      	b.n	800fc9c <_puts_r+0x68>
 800fcd2:	6823      	ldr	r3, [r4, #0]
 800fcd4:	1c5a      	adds	r2, r3, #1
 800fcd6:	6022      	str	r2, [r4, #0]
 800fcd8:	220a      	movs	r2, #10
 800fcda:	701a      	strb	r2, [r3, #0]
 800fcdc:	e7ee      	b.n	800fcbc <_puts_r+0x88>
	...

0800fce0 <puts>:
 800fce0:	4b02      	ldr	r3, [pc, #8]	@ (800fcec <puts+0xc>)
 800fce2:	4601      	mov	r1, r0
 800fce4:	6818      	ldr	r0, [r3, #0]
 800fce6:	f7ff bfa5 	b.w	800fc34 <_puts_r>
 800fcea:	bf00      	nop
 800fcec:	20000020 	.word	0x20000020

0800fcf0 <sniprintf>:
 800fcf0:	b40c      	push	{r2, r3}
 800fcf2:	b530      	push	{r4, r5, lr}
 800fcf4:	4b18      	ldr	r3, [pc, #96]	@ (800fd58 <sniprintf+0x68>)
 800fcf6:	1e0c      	subs	r4, r1, #0
 800fcf8:	681d      	ldr	r5, [r3, #0]
 800fcfa:	b09d      	sub	sp, #116	@ 0x74
 800fcfc:	da08      	bge.n	800fd10 <sniprintf+0x20>
 800fcfe:	238b      	movs	r3, #139	@ 0x8b
 800fd00:	602b      	str	r3, [r5, #0]
 800fd02:	f04f 30ff 	mov.w	r0, #4294967295
 800fd06:	b01d      	add	sp, #116	@ 0x74
 800fd08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd0c:	b002      	add	sp, #8
 800fd0e:	4770      	bx	lr
 800fd10:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fd14:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fd18:	f04f 0300 	mov.w	r3, #0
 800fd1c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800fd1e:	bf14      	ite	ne
 800fd20:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fd24:	4623      	moveq	r3, r4
 800fd26:	9304      	str	r3, [sp, #16]
 800fd28:	9307      	str	r3, [sp, #28]
 800fd2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fd2e:	9002      	str	r0, [sp, #8]
 800fd30:	9006      	str	r0, [sp, #24]
 800fd32:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fd36:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fd38:	ab21      	add	r3, sp, #132	@ 0x84
 800fd3a:	a902      	add	r1, sp, #8
 800fd3c:	4628      	mov	r0, r5
 800fd3e:	9301      	str	r3, [sp, #4]
 800fd40:	f001 fc62 	bl	8011608 <_svfiprintf_r>
 800fd44:	1c43      	adds	r3, r0, #1
 800fd46:	bfbc      	itt	lt
 800fd48:	238b      	movlt	r3, #139	@ 0x8b
 800fd4a:	602b      	strlt	r3, [r5, #0]
 800fd4c:	2c00      	cmp	r4, #0
 800fd4e:	d0da      	beq.n	800fd06 <sniprintf+0x16>
 800fd50:	9b02      	ldr	r3, [sp, #8]
 800fd52:	2200      	movs	r2, #0
 800fd54:	701a      	strb	r2, [r3, #0]
 800fd56:	e7d6      	b.n	800fd06 <sniprintf+0x16>
 800fd58:	20000020 	.word	0x20000020

0800fd5c <siprintf>:
 800fd5c:	b40e      	push	{r1, r2, r3}
 800fd5e:	b510      	push	{r4, lr}
 800fd60:	b09d      	sub	sp, #116	@ 0x74
 800fd62:	ab1f      	add	r3, sp, #124	@ 0x7c
 800fd64:	9002      	str	r0, [sp, #8]
 800fd66:	9006      	str	r0, [sp, #24]
 800fd68:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fd6c:	480a      	ldr	r0, [pc, #40]	@ (800fd98 <siprintf+0x3c>)
 800fd6e:	9107      	str	r1, [sp, #28]
 800fd70:	9104      	str	r1, [sp, #16]
 800fd72:	490a      	ldr	r1, [pc, #40]	@ (800fd9c <siprintf+0x40>)
 800fd74:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd78:	9105      	str	r1, [sp, #20]
 800fd7a:	2400      	movs	r4, #0
 800fd7c:	a902      	add	r1, sp, #8
 800fd7e:	6800      	ldr	r0, [r0, #0]
 800fd80:	9301      	str	r3, [sp, #4]
 800fd82:	941b      	str	r4, [sp, #108]	@ 0x6c
 800fd84:	f001 fc40 	bl	8011608 <_svfiprintf_r>
 800fd88:	9b02      	ldr	r3, [sp, #8]
 800fd8a:	701c      	strb	r4, [r3, #0]
 800fd8c:	b01d      	add	sp, #116	@ 0x74
 800fd8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd92:	b003      	add	sp, #12
 800fd94:	4770      	bx	lr
 800fd96:	bf00      	nop
 800fd98:	20000020 	.word	0x20000020
 800fd9c:	ffff0208 	.word	0xffff0208

0800fda0 <__sread>:
 800fda0:	b510      	push	{r4, lr}
 800fda2:	460c      	mov	r4, r1
 800fda4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fda8:	f000 f930 	bl	801000c <_read_r>
 800fdac:	2800      	cmp	r0, #0
 800fdae:	bfab      	itete	ge
 800fdb0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fdb2:	89a3      	ldrhlt	r3, [r4, #12]
 800fdb4:	181b      	addge	r3, r3, r0
 800fdb6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fdba:	bfac      	ite	ge
 800fdbc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fdbe:	81a3      	strhlt	r3, [r4, #12]
 800fdc0:	bd10      	pop	{r4, pc}

0800fdc2 <__swrite>:
 800fdc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdc6:	461f      	mov	r7, r3
 800fdc8:	898b      	ldrh	r3, [r1, #12]
 800fdca:	05db      	lsls	r3, r3, #23
 800fdcc:	4605      	mov	r5, r0
 800fdce:	460c      	mov	r4, r1
 800fdd0:	4616      	mov	r6, r2
 800fdd2:	d505      	bpl.n	800fde0 <__swrite+0x1e>
 800fdd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdd8:	2302      	movs	r3, #2
 800fdda:	2200      	movs	r2, #0
 800fddc:	f000 f904 	bl	800ffe8 <_lseek_r>
 800fde0:	89a3      	ldrh	r3, [r4, #12]
 800fde2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fde6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fdea:	81a3      	strh	r3, [r4, #12]
 800fdec:	4632      	mov	r2, r6
 800fdee:	463b      	mov	r3, r7
 800fdf0:	4628      	mov	r0, r5
 800fdf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fdf6:	f000 b93f 	b.w	8010078 <_write_r>

0800fdfa <__sseek>:
 800fdfa:	b510      	push	{r4, lr}
 800fdfc:	460c      	mov	r4, r1
 800fdfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe02:	f000 f8f1 	bl	800ffe8 <_lseek_r>
 800fe06:	1c43      	adds	r3, r0, #1
 800fe08:	89a3      	ldrh	r3, [r4, #12]
 800fe0a:	bf15      	itete	ne
 800fe0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fe0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fe12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fe16:	81a3      	strheq	r3, [r4, #12]
 800fe18:	bf18      	it	ne
 800fe1a:	81a3      	strhne	r3, [r4, #12]
 800fe1c:	bd10      	pop	{r4, pc}

0800fe1e <__sclose>:
 800fe1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe22:	f000 b8d1 	b.w	800ffc8 <_close_r>

0800fe26 <__swbuf_r>:
 800fe26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe28:	460e      	mov	r6, r1
 800fe2a:	4614      	mov	r4, r2
 800fe2c:	4605      	mov	r5, r0
 800fe2e:	b118      	cbz	r0, 800fe38 <__swbuf_r+0x12>
 800fe30:	6a03      	ldr	r3, [r0, #32]
 800fe32:	b90b      	cbnz	r3, 800fe38 <__swbuf_r+0x12>
 800fe34:	f7ff fec8 	bl	800fbc8 <__sinit>
 800fe38:	69a3      	ldr	r3, [r4, #24]
 800fe3a:	60a3      	str	r3, [r4, #8]
 800fe3c:	89a3      	ldrh	r3, [r4, #12]
 800fe3e:	071a      	lsls	r2, r3, #28
 800fe40:	d501      	bpl.n	800fe46 <__swbuf_r+0x20>
 800fe42:	6923      	ldr	r3, [r4, #16]
 800fe44:	b943      	cbnz	r3, 800fe58 <__swbuf_r+0x32>
 800fe46:	4621      	mov	r1, r4
 800fe48:	4628      	mov	r0, r5
 800fe4a:	f000 f82b 	bl	800fea4 <__swsetup_r>
 800fe4e:	b118      	cbz	r0, 800fe58 <__swbuf_r+0x32>
 800fe50:	f04f 37ff 	mov.w	r7, #4294967295
 800fe54:	4638      	mov	r0, r7
 800fe56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe58:	6823      	ldr	r3, [r4, #0]
 800fe5a:	6922      	ldr	r2, [r4, #16]
 800fe5c:	1a98      	subs	r0, r3, r2
 800fe5e:	6963      	ldr	r3, [r4, #20]
 800fe60:	b2f6      	uxtb	r6, r6
 800fe62:	4283      	cmp	r3, r0
 800fe64:	4637      	mov	r7, r6
 800fe66:	dc05      	bgt.n	800fe74 <__swbuf_r+0x4e>
 800fe68:	4621      	mov	r1, r4
 800fe6a:	4628      	mov	r0, r5
 800fe6c:	f001 fd4c 	bl	8011908 <_fflush_r>
 800fe70:	2800      	cmp	r0, #0
 800fe72:	d1ed      	bne.n	800fe50 <__swbuf_r+0x2a>
 800fe74:	68a3      	ldr	r3, [r4, #8]
 800fe76:	3b01      	subs	r3, #1
 800fe78:	60a3      	str	r3, [r4, #8]
 800fe7a:	6823      	ldr	r3, [r4, #0]
 800fe7c:	1c5a      	adds	r2, r3, #1
 800fe7e:	6022      	str	r2, [r4, #0]
 800fe80:	701e      	strb	r6, [r3, #0]
 800fe82:	6962      	ldr	r2, [r4, #20]
 800fe84:	1c43      	adds	r3, r0, #1
 800fe86:	429a      	cmp	r2, r3
 800fe88:	d004      	beq.n	800fe94 <__swbuf_r+0x6e>
 800fe8a:	89a3      	ldrh	r3, [r4, #12]
 800fe8c:	07db      	lsls	r3, r3, #31
 800fe8e:	d5e1      	bpl.n	800fe54 <__swbuf_r+0x2e>
 800fe90:	2e0a      	cmp	r6, #10
 800fe92:	d1df      	bne.n	800fe54 <__swbuf_r+0x2e>
 800fe94:	4621      	mov	r1, r4
 800fe96:	4628      	mov	r0, r5
 800fe98:	f001 fd36 	bl	8011908 <_fflush_r>
 800fe9c:	2800      	cmp	r0, #0
 800fe9e:	d0d9      	beq.n	800fe54 <__swbuf_r+0x2e>
 800fea0:	e7d6      	b.n	800fe50 <__swbuf_r+0x2a>
	...

0800fea4 <__swsetup_r>:
 800fea4:	b538      	push	{r3, r4, r5, lr}
 800fea6:	4b29      	ldr	r3, [pc, #164]	@ (800ff4c <__swsetup_r+0xa8>)
 800fea8:	4605      	mov	r5, r0
 800feaa:	6818      	ldr	r0, [r3, #0]
 800feac:	460c      	mov	r4, r1
 800feae:	b118      	cbz	r0, 800feb8 <__swsetup_r+0x14>
 800feb0:	6a03      	ldr	r3, [r0, #32]
 800feb2:	b90b      	cbnz	r3, 800feb8 <__swsetup_r+0x14>
 800feb4:	f7ff fe88 	bl	800fbc8 <__sinit>
 800feb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800febc:	0719      	lsls	r1, r3, #28
 800febe:	d422      	bmi.n	800ff06 <__swsetup_r+0x62>
 800fec0:	06da      	lsls	r2, r3, #27
 800fec2:	d407      	bmi.n	800fed4 <__swsetup_r+0x30>
 800fec4:	2209      	movs	r2, #9
 800fec6:	602a      	str	r2, [r5, #0]
 800fec8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fecc:	81a3      	strh	r3, [r4, #12]
 800fece:	f04f 30ff 	mov.w	r0, #4294967295
 800fed2:	e033      	b.n	800ff3c <__swsetup_r+0x98>
 800fed4:	0758      	lsls	r0, r3, #29
 800fed6:	d512      	bpl.n	800fefe <__swsetup_r+0x5a>
 800fed8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800feda:	b141      	cbz	r1, 800feee <__swsetup_r+0x4a>
 800fedc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fee0:	4299      	cmp	r1, r3
 800fee2:	d002      	beq.n	800feea <__swsetup_r+0x46>
 800fee4:	4628      	mov	r0, r5
 800fee6:	f000 ff6f 	bl	8010dc8 <_free_r>
 800feea:	2300      	movs	r3, #0
 800feec:	6363      	str	r3, [r4, #52]	@ 0x34
 800feee:	89a3      	ldrh	r3, [r4, #12]
 800fef0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fef4:	81a3      	strh	r3, [r4, #12]
 800fef6:	2300      	movs	r3, #0
 800fef8:	6063      	str	r3, [r4, #4]
 800fefa:	6923      	ldr	r3, [r4, #16]
 800fefc:	6023      	str	r3, [r4, #0]
 800fefe:	89a3      	ldrh	r3, [r4, #12]
 800ff00:	f043 0308 	orr.w	r3, r3, #8
 800ff04:	81a3      	strh	r3, [r4, #12]
 800ff06:	6923      	ldr	r3, [r4, #16]
 800ff08:	b94b      	cbnz	r3, 800ff1e <__swsetup_r+0x7a>
 800ff0a:	89a3      	ldrh	r3, [r4, #12]
 800ff0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ff10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ff14:	d003      	beq.n	800ff1e <__swsetup_r+0x7a>
 800ff16:	4621      	mov	r1, r4
 800ff18:	4628      	mov	r0, r5
 800ff1a:	f001 fd43 	bl	80119a4 <__smakebuf_r>
 800ff1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff22:	f013 0201 	ands.w	r2, r3, #1
 800ff26:	d00a      	beq.n	800ff3e <__swsetup_r+0x9a>
 800ff28:	2200      	movs	r2, #0
 800ff2a:	60a2      	str	r2, [r4, #8]
 800ff2c:	6962      	ldr	r2, [r4, #20]
 800ff2e:	4252      	negs	r2, r2
 800ff30:	61a2      	str	r2, [r4, #24]
 800ff32:	6922      	ldr	r2, [r4, #16]
 800ff34:	b942      	cbnz	r2, 800ff48 <__swsetup_r+0xa4>
 800ff36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ff3a:	d1c5      	bne.n	800fec8 <__swsetup_r+0x24>
 800ff3c:	bd38      	pop	{r3, r4, r5, pc}
 800ff3e:	0799      	lsls	r1, r3, #30
 800ff40:	bf58      	it	pl
 800ff42:	6962      	ldrpl	r2, [r4, #20]
 800ff44:	60a2      	str	r2, [r4, #8]
 800ff46:	e7f4      	b.n	800ff32 <__swsetup_r+0x8e>
 800ff48:	2000      	movs	r0, #0
 800ff4a:	e7f7      	b.n	800ff3c <__swsetup_r+0x98>
 800ff4c:	20000020 	.word	0x20000020

0800ff50 <memset>:
 800ff50:	4402      	add	r2, r0
 800ff52:	4603      	mov	r3, r0
 800ff54:	4293      	cmp	r3, r2
 800ff56:	d100      	bne.n	800ff5a <memset+0xa>
 800ff58:	4770      	bx	lr
 800ff5a:	f803 1b01 	strb.w	r1, [r3], #1
 800ff5e:	e7f9      	b.n	800ff54 <memset+0x4>

0800ff60 <_raise_r>:
 800ff60:	291f      	cmp	r1, #31
 800ff62:	b538      	push	{r3, r4, r5, lr}
 800ff64:	4605      	mov	r5, r0
 800ff66:	460c      	mov	r4, r1
 800ff68:	d904      	bls.n	800ff74 <_raise_r+0x14>
 800ff6a:	2316      	movs	r3, #22
 800ff6c:	6003      	str	r3, [r0, #0]
 800ff6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ff72:	bd38      	pop	{r3, r4, r5, pc}
 800ff74:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ff76:	b112      	cbz	r2, 800ff7e <_raise_r+0x1e>
 800ff78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ff7c:	b94b      	cbnz	r3, 800ff92 <_raise_r+0x32>
 800ff7e:	4628      	mov	r0, r5
 800ff80:	f000 f868 	bl	8010054 <_getpid_r>
 800ff84:	4622      	mov	r2, r4
 800ff86:	4601      	mov	r1, r0
 800ff88:	4628      	mov	r0, r5
 800ff8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff8e:	f000 b84f 	b.w	8010030 <_kill_r>
 800ff92:	2b01      	cmp	r3, #1
 800ff94:	d00a      	beq.n	800ffac <_raise_r+0x4c>
 800ff96:	1c59      	adds	r1, r3, #1
 800ff98:	d103      	bne.n	800ffa2 <_raise_r+0x42>
 800ff9a:	2316      	movs	r3, #22
 800ff9c:	6003      	str	r3, [r0, #0]
 800ff9e:	2001      	movs	r0, #1
 800ffa0:	e7e7      	b.n	800ff72 <_raise_r+0x12>
 800ffa2:	2100      	movs	r1, #0
 800ffa4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ffa8:	4620      	mov	r0, r4
 800ffaa:	4798      	blx	r3
 800ffac:	2000      	movs	r0, #0
 800ffae:	e7e0      	b.n	800ff72 <_raise_r+0x12>

0800ffb0 <raise>:
 800ffb0:	4b02      	ldr	r3, [pc, #8]	@ (800ffbc <raise+0xc>)
 800ffb2:	4601      	mov	r1, r0
 800ffb4:	6818      	ldr	r0, [r3, #0]
 800ffb6:	f7ff bfd3 	b.w	800ff60 <_raise_r>
 800ffba:	bf00      	nop
 800ffbc:	20000020 	.word	0x20000020

0800ffc0 <_localeconv_r>:
 800ffc0:	4800      	ldr	r0, [pc, #0]	@ (800ffc4 <_localeconv_r+0x4>)
 800ffc2:	4770      	bx	lr
 800ffc4:	20000160 	.word	0x20000160

0800ffc8 <_close_r>:
 800ffc8:	b538      	push	{r3, r4, r5, lr}
 800ffca:	4d06      	ldr	r5, [pc, #24]	@ (800ffe4 <_close_r+0x1c>)
 800ffcc:	2300      	movs	r3, #0
 800ffce:	4604      	mov	r4, r0
 800ffd0:	4608      	mov	r0, r1
 800ffd2:	602b      	str	r3, [r5, #0]
 800ffd4:	f7f5 febc 	bl	8005d50 <_close>
 800ffd8:	1c43      	adds	r3, r0, #1
 800ffda:	d102      	bne.n	800ffe2 <_close_r+0x1a>
 800ffdc:	682b      	ldr	r3, [r5, #0]
 800ffde:	b103      	cbz	r3, 800ffe2 <_close_r+0x1a>
 800ffe0:	6023      	str	r3, [r4, #0]
 800ffe2:	bd38      	pop	{r3, r4, r5, pc}
 800ffe4:	200056a0 	.word	0x200056a0

0800ffe8 <_lseek_r>:
 800ffe8:	b538      	push	{r3, r4, r5, lr}
 800ffea:	4d07      	ldr	r5, [pc, #28]	@ (8010008 <_lseek_r+0x20>)
 800ffec:	4604      	mov	r4, r0
 800ffee:	4608      	mov	r0, r1
 800fff0:	4611      	mov	r1, r2
 800fff2:	2200      	movs	r2, #0
 800fff4:	602a      	str	r2, [r5, #0]
 800fff6:	461a      	mov	r2, r3
 800fff8:	f7f5 fed1 	bl	8005d9e <_lseek>
 800fffc:	1c43      	adds	r3, r0, #1
 800fffe:	d102      	bne.n	8010006 <_lseek_r+0x1e>
 8010000:	682b      	ldr	r3, [r5, #0]
 8010002:	b103      	cbz	r3, 8010006 <_lseek_r+0x1e>
 8010004:	6023      	str	r3, [r4, #0]
 8010006:	bd38      	pop	{r3, r4, r5, pc}
 8010008:	200056a0 	.word	0x200056a0

0801000c <_read_r>:
 801000c:	b538      	push	{r3, r4, r5, lr}
 801000e:	4d07      	ldr	r5, [pc, #28]	@ (801002c <_read_r+0x20>)
 8010010:	4604      	mov	r4, r0
 8010012:	4608      	mov	r0, r1
 8010014:	4611      	mov	r1, r2
 8010016:	2200      	movs	r2, #0
 8010018:	602a      	str	r2, [r5, #0]
 801001a:	461a      	mov	r2, r3
 801001c:	f7f5 fe5f 	bl	8005cde <_read>
 8010020:	1c43      	adds	r3, r0, #1
 8010022:	d102      	bne.n	801002a <_read_r+0x1e>
 8010024:	682b      	ldr	r3, [r5, #0]
 8010026:	b103      	cbz	r3, 801002a <_read_r+0x1e>
 8010028:	6023      	str	r3, [r4, #0]
 801002a:	bd38      	pop	{r3, r4, r5, pc}
 801002c:	200056a0 	.word	0x200056a0

08010030 <_kill_r>:
 8010030:	b538      	push	{r3, r4, r5, lr}
 8010032:	4d07      	ldr	r5, [pc, #28]	@ (8010050 <_kill_r+0x20>)
 8010034:	2300      	movs	r3, #0
 8010036:	4604      	mov	r4, r0
 8010038:	4608      	mov	r0, r1
 801003a:	4611      	mov	r1, r2
 801003c:	602b      	str	r3, [r5, #0]
 801003e:	f7f5 fe33 	bl	8005ca8 <_kill>
 8010042:	1c43      	adds	r3, r0, #1
 8010044:	d102      	bne.n	801004c <_kill_r+0x1c>
 8010046:	682b      	ldr	r3, [r5, #0]
 8010048:	b103      	cbz	r3, 801004c <_kill_r+0x1c>
 801004a:	6023      	str	r3, [r4, #0]
 801004c:	bd38      	pop	{r3, r4, r5, pc}
 801004e:	bf00      	nop
 8010050:	200056a0 	.word	0x200056a0

08010054 <_getpid_r>:
 8010054:	f7f5 be20 	b.w	8005c98 <_getpid>

08010058 <_sbrk_r>:
 8010058:	b538      	push	{r3, r4, r5, lr}
 801005a:	4d06      	ldr	r5, [pc, #24]	@ (8010074 <_sbrk_r+0x1c>)
 801005c:	2300      	movs	r3, #0
 801005e:	4604      	mov	r4, r0
 8010060:	4608      	mov	r0, r1
 8010062:	602b      	str	r3, [r5, #0]
 8010064:	f7f5 fea8 	bl	8005db8 <_sbrk>
 8010068:	1c43      	adds	r3, r0, #1
 801006a:	d102      	bne.n	8010072 <_sbrk_r+0x1a>
 801006c:	682b      	ldr	r3, [r5, #0]
 801006e:	b103      	cbz	r3, 8010072 <_sbrk_r+0x1a>
 8010070:	6023      	str	r3, [r4, #0]
 8010072:	bd38      	pop	{r3, r4, r5, pc}
 8010074:	200056a0 	.word	0x200056a0

08010078 <_write_r>:
 8010078:	b538      	push	{r3, r4, r5, lr}
 801007a:	4d07      	ldr	r5, [pc, #28]	@ (8010098 <_write_r+0x20>)
 801007c:	4604      	mov	r4, r0
 801007e:	4608      	mov	r0, r1
 8010080:	4611      	mov	r1, r2
 8010082:	2200      	movs	r2, #0
 8010084:	602a      	str	r2, [r5, #0]
 8010086:	461a      	mov	r2, r3
 8010088:	f7f5 fe46 	bl	8005d18 <_write>
 801008c:	1c43      	adds	r3, r0, #1
 801008e:	d102      	bne.n	8010096 <_write_r+0x1e>
 8010090:	682b      	ldr	r3, [r5, #0]
 8010092:	b103      	cbz	r3, 8010096 <_write_r+0x1e>
 8010094:	6023      	str	r3, [r4, #0]
 8010096:	bd38      	pop	{r3, r4, r5, pc}
 8010098:	200056a0 	.word	0x200056a0

0801009c <__errno>:
 801009c:	4b01      	ldr	r3, [pc, #4]	@ (80100a4 <__errno+0x8>)
 801009e:	6818      	ldr	r0, [r3, #0]
 80100a0:	4770      	bx	lr
 80100a2:	bf00      	nop
 80100a4:	20000020 	.word	0x20000020

080100a8 <__libc_init_array>:
 80100a8:	b570      	push	{r4, r5, r6, lr}
 80100aa:	4d0d      	ldr	r5, [pc, #52]	@ (80100e0 <__libc_init_array+0x38>)
 80100ac:	4c0d      	ldr	r4, [pc, #52]	@ (80100e4 <__libc_init_array+0x3c>)
 80100ae:	1b64      	subs	r4, r4, r5
 80100b0:	10a4      	asrs	r4, r4, #2
 80100b2:	2600      	movs	r6, #0
 80100b4:	42a6      	cmp	r6, r4
 80100b6:	d109      	bne.n	80100cc <__libc_init_array+0x24>
 80100b8:	4d0b      	ldr	r5, [pc, #44]	@ (80100e8 <__libc_init_array+0x40>)
 80100ba:	4c0c      	ldr	r4, [pc, #48]	@ (80100ec <__libc_init_array+0x44>)
 80100bc:	f001 fec6 	bl	8011e4c <_init>
 80100c0:	1b64      	subs	r4, r4, r5
 80100c2:	10a4      	asrs	r4, r4, #2
 80100c4:	2600      	movs	r6, #0
 80100c6:	42a6      	cmp	r6, r4
 80100c8:	d105      	bne.n	80100d6 <__libc_init_array+0x2e>
 80100ca:	bd70      	pop	{r4, r5, r6, pc}
 80100cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80100d0:	4798      	blx	r3
 80100d2:	3601      	adds	r6, #1
 80100d4:	e7ee      	b.n	80100b4 <__libc_init_array+0xc>
 80100d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80100da:	4798      	blx	r3
 80100dc:	3601      	adds	r6, #1
 80100de:	e7f2      	b.n	80100c6 <__libc_init_array+0x1e>
 80100e0:	08012ee8 	.word	0x08012ee8
 80100e4:	08012ee8 	.word	0x08012ee8
 80100e8:	08012ee8 	.word	0x08012ee8
 80100ec:	08012ef0 	.word	0x08012ef0

080100f0 <__retarget_lock_init_recursive>:
 80100f0:	4770      	bx	lr

080100f2 <__retarget_lock_acquire_recursive>:
 80100f2:	4770      	bx	lr

080100f4 <__retarget_lock_release_recursive>:
 80100f4:	4770      	bx	lr

080100f6 <memcpy>:
 80100f6:	440a      	add	r2, r1
 80100f8:	4291      	cmp	r1, r2
 80100fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80100fe:	d100      	bne.n	8010102 <memcpy+0xc>
 8010100:	4770      	bx	lr
 8010102:	b510      	push	{r4, lr}
 8010104:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010108:	f803 4f01 	strb.w	r4, [r3, #1]!
 801010c:	4291      	cmp	r1, r2
 801010e:	d1f9      	bne.n	8010104 <memcpy+0xe>
 8010110:	bd10      	pop	{r4, pc}

08010112 <quorem>:
 8010112:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010116:	6903      	ldr	r3, [r0, #16]
 8010118:	690c      	ldr	r4, [r1, #16]
 801011a:	42a3      	cmp	r3, r4
 801011c:	4607      	mov	r7, r0
 801011e:	db7e      	blt.n	801021e <quorem+0x10c>
 8010120:	3c01      	subs	r4, #1
 8010122:	f101 0814 	add.w	r8, r1, #20
 8010126:	00a3      	lsls	r3, r4, #2
 8010128:	f100 0514 	add.w	r5, r0, #20
 801012c:	9300      	str	r3, [sp, #0]
 801012e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010132:	9301      	str	r3, [sp, #4]
 8010134:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010138:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801013c:	3301      	adds	r3, #1
 801013e:	429a      	cmp	r2, r3
 8010140:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010144:	fbb2 f6f3 	udiv	r6, r2, r3
 8010148:	d32e      	bcc.n	80101a8 <quorem+0x96>
 801014a:	f04f 0a00 	mov.w	sl, #0
 801014e:	46c4      	mov	ip, r8
 8010150:	46ae      	mov	lr, r5
 8010152:	46d3      	mov	fp, sl
 8010154:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010158:	b298      	uxth	r0, r3
 801015a:	fb06 a000 	mla	r0, r6, r0, sl
 801015e:	0c02      	lsrs	r2, r0, #16
 8010160:	0c1b      	lsrs	r3, r3, #16
 8010162:	fb06 2303 	mla	r3, r6, r3, r2
 8010166:	f8de 2000 	ldr.w	r2, [lr]
 801016a:	b280      	uxth	r0, r0
 801016c:	b292      	uxth	r2, r2
 801016e:	1a12      	subs	r2, r2, r0
 8010170:	445a      	add	r2, fp
 8010172:	f8de 0000 	ldr.w	r0, [lr]
 8010176:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801017a:	b29b      	uxth	r3, r3
 801017c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010180:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010184:	b292      	uxth	r2, r2
 8010186:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801018a:	45e1      	cmp	r9, ip
 801018c:	f84e 2b04 	str.w	r2, [lr], #4
 8010190:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010194:	d2de      	bcs.n	8010154 <quorem+0x42>
 8010196:	9b00      	ldr	r3, [sp, #0]
 8010198:	58eb      	ldr	r3, [r5, r3]
 801019a:	b92b      	cbnz	r3, 80101a8 <quorem+0x96>
 801019c:	9b01      	ldr	r3, [sp, #4]
 801019e:	3b04      	subs	r3, #4
 80101a0:	429d      	cmp	r5, r3
 80101a2:	461a      	mov	r2, r3
 80101a4:	d32f      	bcc.n	8010206 <quorem+0xf4>
 80101a6:	613c      	str	r4, [r7, #16]
 80101a8:	4638      	mov	r0, r7
 80101aa:	f001 f8c9 	bl	8011340 <__mcmp>
 80101ae:	2800      	cmp	r0, #0
 80101b0:	db25      	blt.n	80101fe <quorem+0xec>
 80101b2:	4629      	mov	r1, r5
 80101b4:	2000      	movs	r0, #0
 80101b6:	f858 2b04 	ldr.w	r2, [r8], #4
 80101ba:	f8d1 c000 	ldr.w	ip, [r1]
 80101be:	fa1f fe82 	uxth.w	lr, r2
 80101c2:	fa1f f38c 	uxth.w	r3, ip
 80101c6:	eba3 030e 	sub.w	r3, r3, lr
 80101ca:	4403      	add	r3, r0
 80101cc:	0c12      	lsrs	r2, r2, #16
 80101ce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80101d2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80101d6:	b29b      	uxth	r3, r3
 80101d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80101dc:	45c1      	cmp	r9, r8
 80101de:	f841 3b04 	str.w	r3, [r1], #4
 80101e2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80101e6:	d2e6      	bcs.n	80101b6 <quorem+0xa4>
 80101e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80101ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80101f0:	b922      	cbnz	r2, 80101fc <quorem+0xea>
 80101f2:	3b04      	subs	r3, #4
 80101f4:	429d      	cmp	r5, r3
 80101f6:	461a      	mov	r2, r3
 80101f8:	d30b      	bcc.n	8010212 <quorem+0x100>
 80101fa:	613c      	str	r4, [r7, #16]
 80101fc:	3601      	adds	r6, #1
 80101fe:	4630      	mov	r0, r6
 8010200:	b003      	add	sp, #12
 8010202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010206:	6812      	ldr	r2, [r2, #0]
 8010208:	3b04      	subs	r3, #4
 801020a:	2a00      	cmp	r2, #0
 801020c:	d1cb      	bne.n	80101a6 <quorem+0x94>
 801020e:	3c01      	subs	r4, #1
 8010210:	e7c6      	b.n	80101a0 <quorem+0x8e>
 8010212:	6812      	ldr	r2, [r2, #0]
 8010214:	3b04      	subs	r3, #4
 8010216:	2a00      	cmp	r2, #0
 8010218:	d1ef      	bne.n	80101fa <quorem+0xe8>
 801021a:	3c01      	subs	r4, #1
 801021c:	e7ea      	b.n	80101f4 <quorem+0xe2>
 801021e:	2000      	movs	r0, #0
 8010220:	e7ee      	b.n	8010200 <quorem+0xee>
 8010222:	0000      	movs	r0, r0
 8010224:	0000      	movs	r0, r0
	...

08010228 <_dtoa_r>:
 8010228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801022c:	69c7      	ldr	r7, [r0, #28]
 801022e:	b097      	sub	sp, #92	@ 0x5c
 8010230:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010234:	ec55 4b10 	vmov	r4, r5, d0
 8010238:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801023a:	9107      	str	r1, [sp, #28]
 801023c:	4681      	mov	r9, r0
 801023e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010240:	9311      	str	r3, [sp, #68]	@ 0x44
 8010242:	b97f      	cbnz	r7, 8010264 <_dtoa_r+0x3c>
 8010244:	2010      	movs	r0, #16
 8010246:	f7fe fea3 	bl	800ef90 <malloc>
 801024a:	4602      	mov	r2, r0
 801024c:	f8c9 001c 	str.w	r0, [r9, #28]
 8010250:	b920      	cbnz	r0, 801025c <_dtoa_r+0x34>
 8010252:	4ba9      	ldr	r3, [pc, #676]	@ (80104f8 <_dtoa_r+0x2d0>)
 8010254:	21ef      	movs	r1, #239	@ 0xef
 8010256:	48a9      	ldr	r0, [pc, #676]	@ (80104fc <_dtoa_r+0x2d4>)
 8010258:	f001 fc1c 	bl	8011a94 <__assert_func>
 801025c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010260:	6007      	str	r7, [r0, #0]
 8010262:	60c7      	str	r7, [r0, #12]
 8010264:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010268:	6819      	ldr	r1, [r3, #0]
 801026a:	b159      	cbz	r1, 8010284 <_dtoa_r+0x5c>
 801026c:	685a      	ldr	r2, [r3, #4]
 801026e:	604a      	str	r2, [r1, #4]
 8010270:	2301      	movs	r3, #1
 8010272:	4093      	lsls	r3, r2
 8010274:	608b      	str	r3, [r1, #8]
 8010276:	4648      	mov	r0, r9
 8010278:	f000 fe30 	bl	8010edc <_Bfree>
 801027c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010280:	2200      	movs	r2, #0
 8010282:	601a      	str	r2, [r3, #0]
 8010284:	1e2b      	subs	r3, r5, #0
 8010286:	bfb9      	ittee	lt
 8010288:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801028c:	9305      	strlt	r3, [sp, #20]
 801028e:	2300      	movge	r3, #0
 8010290:	6033      	strge	r3, [r6, #0]
 8010292:	9f05      	ldr	r7, [sp, #20]
 8010294:	4b9a      	ldr	r3, [pc, #616]	@ (8010500 <_dtoa_r+0x2d8>)
 8010296:	bfbc      	itt	lt
 8010298:	2201      	movlt	r2, #1
 801029a:	6032      	strlt	r2, [r6, #0]
 801029c:	43bb      	bics	r3, r7
 801029e:	d112      	bne.n	80102c6 <_dtoa_r+0x9e>
 80102a0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80102a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80102a6:	6013      	str	r3, [r2, #0]
 80102a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80102ac:	4323      	orrs	r3, r4
 80102ae:	f000 855a 	beq.w	8010d66 <_dtoa_r+0xb3e>
 80102b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80102b4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8010514 <_dtoa_r+0x2ec>
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	f000 855c 	beq.w	8010d76 <_dtoa_r+0xb4e>
 80102be:	f10a 0303 	add.w	r3, sl, #3
 80102c2:	f000 bd56 	b.w	8010d72 <_dtoa_r+0xb4a>
 80102c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80102ca:	2200      	movs	r2, #0
 80102cc:	ec51 0b17 	vmov	r0, r1, d7
 80102d0:	2300      	movs	r3, #0
 80102d2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80102d6:	f7f0 fbf7 	bl	8000ac8 <__aeabi_dcmpeq>
 80102da:	4680      	mov	r8, r0
 80102dc:	b158      	cbz	r0, 80102f6 <_dtoa_r+0xce>
 80102de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80102e0:	2301      	movs	r3, #1
 80102e2:	6013      	str	r3, [r2, #0]
 80102e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80102e6:	b113      	cbz	r3, 80102ee <_dtoa_r+0xc6>
 80102e8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80102ea:	4b86      	ldr	r3, [pc, #536]	@ (8010504 <_dtoa_r+0x2dc>)
 80102ec:	6013      	str	r3, [r2, #0]
 80102ee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8010518 <_dtoa_r+0x2f0>
 80102f2:	f000 bd40 	b.w	8010d76 <_dtoa_r+0xb4e>
 80102f6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80102fa:	aa14      	add	r2, sp, #80	@ 0x50
 80102fc:	a915      	add	r1, sp, #84	@ 0x54
 80102fe:	4648      	mov	r0, r9
 8010300:	f001 f8ce 	bl	80114a0 <__d2b>
 8010304:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010308:	9002      	str	r0, [sp, #8]
 801030a:	2e00      	cmp	r6, #0
 801030c:	d078      	beq.n	8010400 <_dtoa_r+0x1d8>
 801030e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010310:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8010314:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010318:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801031c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010320:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010324:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010328:	4619      	mov	r1, r3
 801032a:	2200      	movs	r2, #0
 801032c:	4b76      	ldr	r3, [pc, #472]	@ (8010508 <_dtoa_r+0x2e0>)
 801032e:	f7ef ffab 	bl	8000288 <__aeabi_dsub>
 8010332:	a36b      	add	r3, pc, #428	@ (adr r3, 80104e0 <_dtoa_r+0x2b8>)
 8010334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010338:	f7f0 f95e 	bl	80005f8 <__aeabi_dmul>
 801033c:	a36a      	add	r3, pc, #424	@ (adr r3, 80104e8 <_dtoa_r+0x2c0>)
 801033e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010342:	f7ef ffa3 	bl	800028c <__adddf3>
 8010346:	4604      	mov	r4, r0
 8010348:	4630      	mov	r0, r6
 801034a:	460d      	mov	r5, r1
 801034c:	f7f0 f8ea 	bl	8000524 <__aeabi_i2d>
 8010350:	a367      	add	r3, pc, #412	@ (adr r3, 80104f0 <_dtoa_r+0x2c8>)
 8010352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010356:	f7f0 f94f 	bl	80005f8 <__aeabi_dmul>
 801035a:	4602      	mov	r2, r0
 801035c:	460b      	mov	r3, r1
 801035e:	4620      	mov	r0, r4
 8010360:	4629      	mov	r1, r5
 8010362:	f7ef ff93 	bl	800028c <__adddf3>
 8010366:	4604      	mov	r4, r0
 8010368:	460d      	mov	r5, r1
 801036a:	f7f0 fbf5 	bl	8000b58 <__aeabi_d2iz>
 801036e:	2200      	movs	r2, #0
 8010370:	4607      	mov	r7, r0
 8010372:	2300      	movs	r3, #0
 8010374:	4620      	mov	r0, r4
 8010376:	4629      	mov	r1, r5
 8010378:	f7f0 fbb0 	bl	8000adc <__aeabi_dcmplt>
 801037c:	b140      	cbz	r0, 8010390 <_dtoa_r+0x168>
 801037e:	4638      	mov	r0, r7
 8010380:	f7f0 f8d0 	bl	8000524 <__aeabi_i2d>
 8010384:	4622      	mov	r2, r4
 8010386:	462b      	mov	r3, r5
 8010388:	f7f0 fb9e 	bl	8000ac8 <__aeabi_dcmpeq>
 801038c:	b900      	cbnz	r0, 8010390 <_dtoa_r+0x168>
 801038e:	3f01      	subs	r7, #1
 8010390:	2f16      	cmp	r7, #22
 8010392:	d852      	bhi.n	801043a <_dtoa_r+0x212>
 8010394:	4b5d      	ldr	r3, [pc, #372]	@ (801050c <_dtoa_r+0x2e4>)
 8010396:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801039a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801039e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80103a2:	f7f0 fb9b 	bl	8000adc <__aeabi_dcmplt>
 80103a6:	2800      	cmp	r0, #0
 80103a8:	d049      	beq.n	801043e <_dtoa_r+0x216>
 80103aa:	3f01      	subs	r7, #1
 80103ac:	2300      	movs	r3, #0
 80103ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80103b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80103b2:	1b9b      	subs	r3, r3, r6
 80103b4:	1e5a      	subs	r2, r3, #1
 80103b6:	bf45      	ittet	mi
 80103b8:	f1c3 0301 	rsbmi	r3, r3, #1
 80103bc:	9300      	strmi	r3, [sp, #0]
 80103be:	2300      	movpl	r3, #0
 80103c0:	2300      	movmi	r3, #0
 80103c2:	9206      	str	r2, [sp, #24]
 80103c4:	bf54      	ite	pl
 80103c6:	9300      	strpl	r3, [sp, #0]
 80103c8:	9306      	strmi	r3, [sp, #24]
 80103ca:	2f00      	cmp	r7, #0
 80103cc:	db39      	blt.n	8010442 <_dtoa_r+0x21a>
 80103ce:	9b06      	ldr	r3, [sp, #24]
 80103d0:	970d      	str	r7, [sp, #52]	@ 0x34
 80103d2:	443b      	add	r3, r7
 80103d4:	9306      	str	r3, [sp, #24]
 80103d6:	2300      	movs	r3, #0
 80103d8:	9308      	str	r3, [sp, #32]
 80103da:	9b07      	ldr	r3, [sp, #28]
 80103dc:	2b09      	cmp	r3, #9
 80103de:	d863      	bhi.n	80104a8 <_dtoa_r+0x280>
 80103e0:	2b05      	cmp	r3, #5
 80103e2:	bfc4      	itt	gt
 80103e4:	3b04      	subgt	r3, #4
 80103e6:	9307      	strgt	r3, [sp, #28]
 80103e8:	9b07      	ldr	r3, [sp, #28]
 80103ea:	f1a3 0302 	sub.w	r3, r3, #2
 80103ee:	bfcc      	ite	gt
 80103f0:	2400      	movgt	r4, #0
 80103f2:	2401      	movle	r4, #1
 80103f4:	2b03      	cmp	r3, #3
 80103f6:	d863      	bhi.n	80104c0 <_dtoa_r+0x298>
 80103f8:	e8df f003 	tbb	[pc, r3]
 80103fc:	2b375452 	.word	0x2b375452
 8010400:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8010404:	441e      	add	r6, r3
 8010406:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801040a:	2b20      	cmp	r3, #32
 801040c:	bfc1      	itttt	gt
 801040e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010412:	409f      	lslgt	r7, r3
 8010414:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010418:	fa24 f303 	lsrgt.w	r3, r4, r3
 801041c:	bfd6      	itet	le
 801041e:	f1c3 0320 	rsble	r3, r3, #32
 8010422:	ea47 0003 	orrgt.w	r0, r7, r3
 8010426:	fa04 f003 	lslle.w	r0, r4, r3
 801042a:	f7f0 f86b 	bl	8000504 <__aeabi_ui2d>
 801042e:	2201      	movs	r2, #1
 8010430:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010434:	3e01      	subs	r6, #1
 8010436:	9212      	str	r2, [sp, #72]	@ 0x48
 8010438:	e776      	b.n	8010328 <_dtoa_r+0x100>
 801043a:	2301      	movs	r3, #1
 801043c:	e7b7      	b.n	80103ae <_dtoa_r+0x186>
 801043e:	9010      	str	r0, [sp, #64]	@ 0x40
 8010440:	e7b6      	b.n	80103b0 <_dtoa_r+0x188>
 8010442:	9b00      	ldr	r3, [sp, #0]
 8010444:	1bdb      	subs	r3, r3, r7
 8010446:	9300      	str	r3, [sp, #0]
 8010448:	427b      	negs	r3, r7
 801044a:	9308      	str	r3, [sp, #32]
 801044c:	2300      	movs	r3, #0
 801044e:	930d      	str	r3, [sp, #52]	@ 0x34
 8010450:	e7c3      	b.n	80103da <_dtoa_r+0x1b2>
 8010452:	2301      	movs	r3, #1
 8010454:	9309      	str	r3, [sp, #36]	@ 0x24
 8010456:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010458:	eb07 0b03 	add.w	fp, r7, r3
 801045c:	f10b 0301 	add.w	r3, fp, #1
 8010460:	2b01      	cmp	r3, #1
 8010462:	9303      	str	r3, [sp, #12]
 8010464:	bfb8      	it	lt
 8010466:	2301      	movlt	r3, #1
 8010468:	e006      	b.n	8010478 <_dtoa_r+0x250>
 801046a:	2301      	movs	r3, #1
 801046c:	9309      	str	r3, [sp, #36]	@ 0x24
 801046e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010470:	2b00      	cmp	r3, #0
 8010472:	dd28      	ble.n	80104c6 <_dtoa_r+0x29e>
 8010474:	469b      	mov	fp, r3
 8010476:	9303      	str	r3, [sp, #12]
 8010478:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801047c:	2100      	movs	r1, #0
 801047e:	2204      	movs	r2, #4
 8010480:	f102 0514 	add.w	r5, r2, #20
 8010484:	429d      	cmp	r5, r3
 8010486:	d926      	bls.n	80104d6 <_dtoa_r+0x2ae>
 8010488:	6041      	str	r1, [r0, #4]
 801048a:	4648      	mov	r0, r9
 801048c:	f000 fce6 	bl	8010e5c <_Balloc>
 8010490:	4682      	mov	sl, r0
 8010492:	2800      	cmp	r0, #0
 8010494:	d142      	bne.n	801051c <_dtoa_r+0x2f4>
 8010496:	4b1e      	ldr	r3, [pc, #120]	@ (8010510 <_dtoa_r+0x2e8>)
 8010498:	4602      	mov	r2, r0
 801049a:	f240 11af 	movw	r1, #431	@ 0x1af
 801049e:	e6da      	b.n	8010256 <_dtoa_r+0x2e>
 80104a0:	2300      	movs	r3, #0
 80104a2:	e7e3      	b.n	801046c <_dtoa_r+0x244>
 80104a4:	2300      	movs	r3, #0
 80104a6:	e7d5      	b.n	8010454 <_dtoa_r+0x22c>
 80104a8:	2401      	movs	r4, #1
 80104aa:	2300      	movs	r3, #0
 80104ac:	9307      	str	r3, [sp, #28]
 80104ae:	9409      	str	r4, [sp, #36]	@ 0x24
 80104b0:	f04f 3bff 	mov.w	fp, #4294967295
 80104b4:	2200      	movs	r2, #0
 80104b6:	f8cd b00c 	str.w	fp, [sp, #12]
 80104ba:	2312      	movs	r3, #18
 80104bc:	920c      	str	r2, [sp, #48]	@ 0x30
 80104be:	e7db      	b.n	8010478 <_dtoa_r+0x250>
 80104c0:	2301      	movs	r3, #1
 80104c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80104c4:	e7f4      	b.n	80104b0 <_dtoa_r+0x288>
 80104c6:	f04f 0b01 	mov.w	fp, #1
 80104ca:	f8cd b00c 	str.w	fp, [sp, #12]
 80104ce:	465b      	mov	r3, fp
 80104d0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80104d4:	e7d0      	b.n	8010478 <_dtoa_r+0x250>
 80104d6:	3101      	adds	r1, #1
 80104d8:	0052      	lsls	r2, r2, #1
 80104da:	e7d1      	b.n	8010480 <_dtoa_r+0x258>
 80104dc:	f3af 8000 	nop.w
 80104e0:	636f4361 	.word	0x636f4361
 80104e4:	3fd287a7 	.word	0x3fd287a7
 80104e8:	8b60c8b3 	.word	0x8b60c8b3
 80104ec:	3fc68a28 	.word	0x3fc68a28
 80104f0:	509f79fb 	.word	0x509f79fb
 80104f4:	3fd34413 	.word	0x3fd34413
 80104f8:	08012cb2 	.word	0x08012cb2
 80104fc:	08012cc9 	.word	0x08012cc9
 8010500:	7ff00000 	.word	0x7ff00000
 8010504:	08012c82 	.word	0x08012c82
 8010508:	3ff80000 	.word	0x3ff80000
 801050c:	08012e18 	.word	0x08012e18
 8010510:	08012d21 	.word	0x08012d21
 8010514:	08012cae 	.word	0x08012cae
 8010518:	08012c81 	.word	0x08012c81
 801051c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010520:	6018      	str	r0, [r3, #0]
 8010522:	9b03      	ldr	r3, [sp, #12]
 8010524:	2b0e      	cmp	r3, #14
 8010526:	f200 80a1 	bhi.w	801066c <_dtoa_r+0x444>
 801052a:	2c00      	cmp	r4, #0
 801052c:	f000 809e 	beq.w	801066c <_dtoa_r+0x444>
 8010530:	2f00      	cmp	r7, #0
 8010532:	dd33      	ble.n	801059c <_dtoa_r+0x374>
 8010534:	4b9c      	ldr	r3, [pc, #624]	@ (80107a8 <_dtoa_r+0x580>)
 8010536:	f007 020f 	and.w	r2, r7, #15
 801053a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801053e:	ed93 7b00 	vldr	d7, [r3]
 8010542:	05f8      	lsls	r0, r7, #23
 8010544:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010548:	ea4f 1427 	mov.w	r4, r7, asr #4
 801054c:	d516      	bpl.n	801057c <_dtoa_r+0x354>
 801054e:	4b97      	ldr	r3, [pc, #604]	@ (80107ac <_dtoa_r+0x584>)
 8010550:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010554:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010558:	f7f0 f978 	bl	800084c <__aeabi_ddiv>
 801055c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010560:	f004 040f 	and.w	r4, r4, #15
 8010564:	2603      	movs	r6, #3
 8010566:	4d91      	ldr	r5, [pc, #580]	@ (80107ac <_dtoa_r+0x584>)
 8010568:	b954      	cbnz	r4, 8010580 <_dtoa_r+0x358>
 801056a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801056e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010572:	f7f0 f96b 	bl	800084c <__aeabi_ddiv>
 8010576:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801057a:	e028      	b.n	80105ce <_dtoa_r+0x3a6>
 801057c:	2602      	movs	r6, #2
 801057e:	e7f2      	b.n	8010566 <_dtoa_r+0x33e>
 8010580:	07e1      	lsls	r1, r4, #31
 8010582:	d508      	bpl.n	8010596 <_dtoa_r+0x36e>
 8010584:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010588:	e9d5 2300 	ldrd	r2, r3, [r5]
 801058c:	f7f0 f834 	bl	80005f8 <__aeabi_dmul>
 8010590:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010594:	3601      	adds	r6, #1
 8010596:	1064      	asrs	r4, r4, #1
 8010598:	3508      	adds	r5, #8
 801059a:	e7e5      	b.n	8010568 <_dtoa_r+0x340>
 801059c:	f000 80af 	beq.w	80106fe <_dtoa_r+0x4d6>
 80105a0:	427c      	negs	r4, r7
 80105a2:	4b81      	ldr	r3, [pc, #516]	@ (80107a8 <_dtoa_r+0x580>)
 80105a4:	4d81      	ldr	r5, [pc, #516]	@ (80107ac <_dtoa_r+0x584>)
 80105a6:	f004 020f 	and.w	r2, r4, #15
 80105aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80105ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80105b6:	f7f0 f81f 	bl	80005f8 <__aeabi_dmul>
 80105ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80105be:	1124      	asrs	r4, r4, #4
 80105c0:	2300      	movs	r3, #0
 80105c2:	2602      	movs	r6, #2
 80105c4:	2c00      	cmp	r4, #0
 80105c6:	f040 808f 	bne.w	80106e8 <_dtoa_r+0x4c0>
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d1d3      	bne.n	8010576 <_dtoa_r+0x34e>
 80105ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80105d0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	f000 8094 	beq.w	8010702 <_dtoa_r+0x4da>
 80105da:	4b75      	ldr	r3, [pc, #468]	@ (80107b0 <_dtoa_r+0x588>)
 80105dc:	2200      	movs	r2, #0
 80105de:	4620      	mov	r0, r4
 80105e0:	4629      	mov	r1, r5
 80105e2:	f7f0 fa7b 	bl	8000adc <__aeabi_dcmplt>
 80105e6:	2800      	cmp	r0, #0
 80105e8:	f000 808b 	beq.w	8010702 <_dtoa_r+0x4da>
 80105ec:	9b03      	ldr	r3, [sp, #12]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	f000 8087 	beq.w	8010702 <_dtoa_r+0x4da>
 80105f4:	f1bb 0f00 	cmp.w	fp, #0
 80105f8:	dd34      	ble.n	8010664 <_dtoa_r+0x43c>
 80105fa:	4620      	mov	r0, r4
 80105fc:	4b6d      	ldr	r3, [pc, #436]	@ (80107b4 <_dtoa_r+0x58c>)
 80105fe:	2200      	movs	r2, #0
 8010600:	4629      	mov	r1, r5
 8010602:	f7ef fff9 	bl	80005f8 <__aeabi_dmul>
 8010606:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801060a:	f107 38ff 	add.w	r8, r7, #4294967295
 801060e:	3601      	adds	r6, #1
 8010610:	465c      	mov	r4, fp
 8010612:	4630      	mov	r0, r6
 8010614:	f7ef ff86 	bl	8000524 <__aeabi_i2d>
 8010618:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801061c:	f7ef ffec 	bl	80005f8 <__aeabi_dmul>
 8010620:	4b65      	ldr	r3, [pc, #404]	@ (80107b8 <_dtoa_r+0x590>)
 8010622:	2200      	movs	r2, #0
 8010624:	f7ef fe32 	bl	800028c <__adddf3>
 8010628:	4605      	mov	r5, r0
 801062a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801062e:	2c00      	cmp	r4, #0
 8010630:	d16a      	bne.n	8010708 <_dtoa_r+0x4e0>
 8010632:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010636:	4b61      	ldr	r3, [pc, #388]	@ (80107bc <_dtoa_r+0x594>)
 8010638:	2200      	movs	r2, #0
 801063a:	f7ef fe25 	bl	8000288 <__aeabi_dsub>
 801063e:	4602      	mov	r2, r0
 8010640:	460b      	mov	r3, r1
 8010642:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010646:	462a      	mov	r2, r5
 8010648:	4633      	mov	r3, r6
 801064a:	f7f0 fa65 	bl	8000b18 <__aeabi_dcmpgt>
 801064e:	2800      	cmp	r0, #0
 8010650:	f040 8298 	bne.w	8010b84 <_dtoa_r+0x95c>
 8010654:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010658:	462a      	mov	r2, r5
 801065a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801065e:	f7f0 fa3d 	bl	8000adc <__aeabi_dcmplt>
 8010662:	bb38      	cbnz	r0, 80106b4 <_dtoa_r+0x48c>
 8010664:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8010668:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801066c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801066e:	2b00      	cmp	r3, #0
 8010670:	f2c0 8157 	blt.w	8010922 <_dtoa_r+0x6fa>
 8010674:	2f0e      	cmp	r7, #14
 8010676:	f300 8154 	bgt.w	8010922 <_dtoa_r+0x6fa>
 801067a:	4b4b      	ldr	r3, [pc, #300]	@ (80107a8 <_dtoa_r+0x580>)
 801067c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010680:	ed93 7b00 	vldr	d7, [r3]
 8010684:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010686:	2b00      	cmp	r3, #0
 8010688:	ed8d 7b00 	vstr	d7, [sp]
 801068c:	f280 80e5 	bge.w	801085a <_dtoa_r+0x632>
 8010690:	9b03      	ldr	r3, [sp, #12]
 8010692:	2b00      	cmp	r3, #0
 8010694:	f300 80e1 	bgt.w	801085a <_dtoa_r+0x632>
 8010698:	d10c      	bne.n	80106b4 <_dtoa_r+0x48c>
 801069a:	4b48      	ldr	r3, [pc, #288]	@ (80107bc <_dtoa_r+0x594>)
 801069c:	2200      	movs	r2, #0
 801069e:	ec51 0b17 	vmov	r0, r1, d7
 80106a2:	f7ef ffa9 	bl	80005f8 <__aeabi_dmul>
 80106a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80106aa:	f7f0 fa2b 	bl	8000b04 <__aeabi_dcmpge>
 80106ae:	2800      	cmp	r0, #0
 80106b0:	f000 8266 	beq.w	8010b80 <_dtoa_r+0x958>
 80106b4:	2400      	movs	r4, #0
 80106b6:	4625      	mov	r5, r4
 80106b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80106ba:	4656      	mov	r6, sl
 80106bc:	ea6f 0803 	mvn.w	r8, r3
 80106c0:	2700      	movs	r7, #0
 80106c2:	4621      	mov	r1, r4
 80106c4:	4648      	mov	r0, r9
 80106c6:	f000 fc09 	bl	8010edc <_Bfree>
 80106ca:	2d00      	cmp	r5, #0
 80106cc:	f000 80bd 	beq.w	801084a <_dtoa_r+0x622>
 80106d0:	b12f      	cbz	r7, 80106de <_dtoa_r+0x4b6>
 80106d2:	42af      	cmp	r7, r5
 80106d4:	d003      	beq.n	80106de <_dtoa_r+0x4b6>
 80106d6:	4639      	mov	r1, r7
 80106d8:	4648      	mov	r0, r9
 80106da:	f000 fbff 	bl	8010edc <_Bfree>
 80106de:	4629      	mov	r1, r5
 80106e0:	4648      	mov	r0, r9
 80106e2:	f000 fbfb 	bl	8010edc <_Bfree>
 80106e6:	e0b0      	b.n	801084a <_dtoa_r+0x622>
 80106e8:	07e2      	lsls	r2, r4, #31
 80106ea:	d505      	bpl.n	80106f8 <_dtoa_r+0x4d0>
 80106ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80106f0:	f7ef ff82 	bl	80005f8 <__aeabi_dmul>
 80106f4:	3601      	adds	r6, #1
 80106f6:	2301      	movs	r3, #1
 80106f8:	1064      	asrs	r4, r4, #1
 80106fa:	3508      	adds	r5, #8
 80106fc:	e762      	b.n	80105c4 <_dtoa_r+0x39c>
 80106fe:	2602      	movs	r6, #2
 8010700:	e765      	b.n	80105ce <_dtoa_r+0x3a6>
 8010702:	9c03      	ldr	r4, [sp, #12]
 8010704:	46b8      	mov	r8, r7
 8010706:	e784      	b.n	8010612 <_dtoa_r+0x3ea>
 8010708:	4b27      	ldr	r3, [pc, #156]	@ (80107a8 <_dtoa_r+0x580>)
 801070a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801070c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010710:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010714:	4454      	add	r4, sl
 8010716:	2900      	cmp	r1, #0
 8010718:	d054      	beq.n	80107c4 <_dtoa_r+0x59c>
 801071a:	4929      	ldr	r1, [pc, #164]	@ (80107c0 <_dtoa_r+0x598>)
 801071c:	2000      	movs	r0, #0
 801071e:	f7f0 f895 	bl	800084c <__aeabi_ddiv>
 8010722:	4633      	mov	r3, r6
 8010724:	462a      	mov	r2, r5
 8010726:	f7ef fdaf 	bl	8000288 <__aeabi_dsub>
 801072a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801072e:	4656      	mov	r6, sl
 8010730:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010734:	f7f0 fa10 	bl	8000b58 <__aeabi_d2iz>
 8010738:	4605      	mov	r5, r0
 801073a:	f7ef fef3 	bl	8000524 <__aeabi_i2d>
 801073e:	4602      	mov	r2, r0
 8010740:	460b      	mov	r3, r1
 8010742:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010746:	f7ef fd9f 	bl	8000288 <__aeabi_dsub>
 801074a:	3530      	adds	r5, #48	@ 0x30
 801074c:	4602      	mov	r2, r0
 801074e:	460b      	mov	r3, r1
 8010750:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010754:	f806 5b01 	strb.w	r5, [r6], #1
 8010758:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801075c:	f7f0 f9be 	bl	8000adc <__aeabi_dcmplt>
 8010760:	2800      	cmp	r0, #0
 8010762:	d172      	bne.n	801084a <_dtoa_r+0x622>
 8010764:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010768:	4911      	ldr	r1, [pc, #68]	@ (80107b0 <_dtoa_r+0x588>)
 801076a:	2000      	movs	r0, #0
 801076c:	f7ef fd8c 	bl	8000288 <__aeabi_dsub>
 8010770:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010774:	f7f0 f9b2 	bl	8000adc <__aeabi_dcmplt>
 8010778:	2800      	cmp	r0, #0
 801077a:	f040 80b4 	bne.w	80108e6 <_dtoa_r+0x6be>
 801077e:	42a6      	cmp	r6, r4
 8010780:	f43f af70 	beq.w	8010664 <_dtoa_r+0x43c>
 8010784:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010788:	4b0a      	ldr	r3, [pc, #40]	@ (80107b4 <_dtoa_r+0x58c>)
 801078a:	2200      	movs	r2, #0
 801078c:	f7ef ff34 	bl	80005f8 <__aeabi_dmul>
 8010790:	4b08      	ldr	r3, [pc, #32]	@ (80107b4 <_dtoa_r+0x58c>)
 8010792:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010796:	2200      	movs	r2, #0
 8010798:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801079c:	f7ef ff2c 	bl	80005f8 <__aeabi_dmul>
 80107a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80107a4:	e7c4      	b.n	8010730 <_dtoa_r+0x508>
 80107a6:	bf00      	nop
 80107a8:	08012e18 	.word	0x08012e18
 80107ac:	08012df0 	.word	0x08012df0
 80107b0:	3ff00000 	.word	0x3ff00000
 80107b4:	40240000 	.word	0x40240000
 80107b8:	401c0000 	.word	0x401c0000
 80107bc:	40140000 	.word	0x40140000
 80107c0:	3fe00000 	.word	0x3fe00000
 80107c4:	4631      	mov	r1, r6
 80107c6:	4628      	mov	r0, r5
 80107c8:	f7ef ff16 	bl	80005f8 <__aeabi_dmul>
 80107cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80107d0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80107d2:	4656      	mov	r6, sl
 80107d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80107d8:	f7f0 f9be 	bl	8000b58 <__aeabi_d2iz>
 80107dc:	4605      	mov	r5, r0
 80107de:	f7ef fea1 	bl	8000524 <__aeabi_i2d>
 80107e2:	4602      	mov	r2, r0
 80107e4:	460b      	mov	r3, r1
 80107e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80107ea:	f7ef fd4d 	bl	8000288 <__aeabi_dsub>
 80107ee:	3530      	adds	r5, #48	@ 0x30
 80107f0:	f806 5b01 	strb.w	r5, [r6], #1
 80107f4:	4602      	mov	r2, r0
 80107f6:	460b      	mov	r3, r1
 80107f8:	42a6      	cmp	r6, r4
 80107fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80107fe:	f04f 0200 	mov.w	r2, #0
 8010802:	d124      	bne.n	801084e <_dtoa_r+0x626>
 8010804:	4baf      	ldr	r3, [pc, #700]	@ (8010ac4 <_dtoa_r+0x89c>)
 8010806:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801080a:	f7ef fd3f 	bl	800028c <__adddf3>
 801080e:	4602      	mov	r2, r0
 8010810:	460b      	mov	r3, r1
 8010812:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010816:	f7f0 f97f 	bl	8000b18 <__aeabi_dcmpgt>
 801081a:	2800      	cmp	r0, #0
 801081c:	d163      	bne.n	80108e6 <_dtoa_r+0x6be>
 801081e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010822:	49a8      	ldr	r1, [pc, #672]	@ (8010ac4 <_dtoa_r+0x89c>)
 8010824:	2000      	movs	r0, #0
 8010826:	f7ef fd2f 	bl	8000288 <__aeabi_dsub>
 801082a:	4602      	mov	r2, r0
 801082c:	460b      	mov	r3, r1
 801082e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010832:	f7f0 f953 	bl	8000adc <__aeabi_dcmplt>
 8010836:	2800      	cmp	r0, #0
 8010838:	f43f af14 	beq.w	8010664 <_dtoa_r+0x43c>
 801083c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801083e:	1e73      	subs	r3, r6, #1
 8010840:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010842:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010846:	2b30      	cmp	r3, #48	@ 0x30
 8010848:	d0f8      	beq.n	801083c <_dtoa_r+0x614>
 801084a:	4647      	mov	r7, r8
 801084c:	e03b      	b.n	80108c6 <_dtoa_r+0x69e>
 801084e:	4b9e      	ldr	r3, [pc, #632]	@ (8010ac8 <_dtoa_r+0x8a0>)
 8010850:	f7ef fed2 	bl	80005f8 <__aeabi_dmul>
 8010854:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010858:	e7bc      	b.n	80107d4 <_dtoa_r+0x5ac>
 801085a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801085e:	4656      	mov	r6, sl
 8010860:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010864:	4620      	mov	r0, r4
 8010866:	4629      	mov	r1, r5
 8010868:	f7ef fff0 	bl	800084c <__aeabi_ddiv>
 801086c:	f7f0 f974 	bl	8000b58 <__aeabi_d2iz>
 8010870:	4680      	mov	r8, r0
 8010872:	f7ef fe57 	bl	8000524 <__aeabi_i2d>
 8010876:	e9dd 2300 	ldrd	r2, r3, [sp]
 801087a:	f7ef febd 	bl	80005f8 <__aeabi_dmul>
 801087e:	4602      	mov	r2, r0
 8010880:	460b      	mov	r3, r1
 8010882:	4620      	mov	r0, r4
 8010884:	4629      	mov	r1, r5
 8010886:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801088a:	f7ef fcfd 	bl	8000288 <__aeabi_dsub>
 801088e:	f806 4b01 	strb.w	r4, [r6], #1
 8010892:	9d03      	ldr	r5, [sp, #12]
 8010894:	eba6 040a 	sub.w	r4, r6, sl
 8010898:	42a5      	cmp	r5, r4
 801089a:	4602      	mov	r2, r0
 801089c:	460b      	mov	r3, r1
 801089e:	d133      	bne.n	8010908 <_dtoa_r+0x6e0>
 80108a0:	f7ef fcf4 	bl	800028c <__adddf3>
 80108a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80108a8:	4604      	mov	r4, r0
 80108aa:	460d      	mov	r5, r1
 80108ac:	f7f0 f934 	bl	8000b18 <__aeabi_dcmpgt>
 80108b0:	b9c0      	cbnz	r0, 80108e4 <_dtoa_r+0x6bc>
 80108b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80108b6:	4620      	mov	r0, r4
 80108b8:	4629      	mov	r1, r5
 80108ba:	f7f0 f905 	bl	8000ac8 <__aeabi_dcmpeq>
 80108be:	b110      	cbz	r0, 80108c6 <_dtoa_r+0x69e>
 80108c0:	f018 0f01 	tst.w	r8, #1
 80108c4:	d10e      	bne.n	80108e4 <_dtoa_r+0x6bc>
 80108c6:	9902      	ldr	r1, [sp, #8]
 80108c8:	4648      	mov	r0, r9
 80108ca:	f000 fb07 	bl	8010edc <_Bfree>
 80108ce:	2300      	movs	r3, #0
 80108d0:	7033      	strb	r3, [r6, #0]
 80108d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80108d4:	3701      	adds	r7, #1
 80108d6:	601f      	str	r7, [r3, #0]
 80108d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80108da:	2b00      	cmp	r3, #0
 80108dc:	f000 824b 	beq.w	8010d76 <_dtoa_r+0xb4e>
 80108e0:	601e      	str	r6, [r3, #0]
 80108e2:	e248      	b.n	8010d76 <_dtoa_r+0xb4e>
 80108e4:	46b8      	mov	r8, r7
 80108e6:	4633      	mov	r3, r6
 80108e8:	461e      	mov	r6, r3
 80108ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80108ee:	2a39      	cmp	r2, #57	@ 0x39
 80108f0:	d106      	bne.n	8010900 <_dtoa_r+0x6d8>
 80108f2:	459a      	cmp	sl, r3
 80108f4:	d1f8      	bne.n	80108e8 <_dtoa_r+0x6c0>
 80108f6:	2230      	movs	r2, #48	@ 0x30
 80108f8:	f108 0801 	add.w	r8, r8, #1
 80108fc:	f88a 2000 	strb.w	r2, [sl]
 8010900:	781a      	ldrb	r2, [r3, #0]
 8010902:	3201      	adds	r2, #1
 8010904:	701a      	strb	r2, [r3, #0]
 8010906:	e7a0      	b.n	801084a <_dtoa_r+0x622>
 8010908:	4b6f      	ldr	r3, [pc, #444]	@ (8010ac8 <_dtoa_r+0x8a0>)
 801090a:	2200      	movs	r2, #0
 801090c:	f7ef fe74 	bl	80005f8 <__aeabi_dmul>
 8010910:	2200      	movs	r2, #0
 8010912:	2300      	movs	r3, #0
 8010914:	4604      	mov	r4, r0
 8010916:	460d      	mov	r5, r1
 8010918:	f7f0 f8d6 	bl	8000ac8 <__aeabi_dcmpeq>
 801091c:	2800      	cmp	r0, #0
 801091e:	d09f      	beq.n	8010860 <_dtoa_r+0x638>
 8010920:	e7d1      	b.n	80108c6 <_dtoa_r+0x69e>
 8010922:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010924:	2a00      	cmp	r2, #0
 8010926:	f000 80ea 	beq.w	8010afe <_dtoa_r+0x8d6>
 801092a:	9a07      	ldr	r2, [sp, #28]
 801092c:	2a01      	cmp	r2, #1
 801092e:	f300 80cd 	bgt.w	8010acc <_dtoa_r+0x8a4>
 8010932:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010934:	2a00      	cmp	r2, #0
 8010936:	f000 80c1 	beq.w	8010abc <_dtoa_r+0x894>
 801093a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801093e:	9c08      	ldr	r4, [sp, #32]
 8010940:	9e00      	ldr	r6, [sp, #0]
 8010942:	9a00      	ldr	r2, [sp, #0]
 8010944:	441a      	add	r2, r3
 8010946:	9200      	str	r2, [sp, #0]
 8010948:	9a06      	ldr	r2, [sp, #24]
 801094a:	2101      	movs	r1, #1
 801094c:	441a      	add	r2, r3
 801094e:	4648      	mov	r0, r9
 8010950:	9206      	str	r2, [sp, #24]
 8010952:	f000 fb77 	bl	8011044 <__i2b>
 8010956:	4605      	mov	r5, r0
 8010958:	b166      	cbz	r6, 8010974 <_dtoa_r+0x74c>
 801095a:	9b06      	ldr	r3, [sp, #24]
 801095c:	2b00      	cmp	r3, #0
 801095e:	dd09      	ble.n	8010974 <_dtoa_r+0x74c>
 8010960:	42b3      	cmp	r3, r6
 8010962:	9a00      	ldr	r2, [sp, #0]
 8010964:	bfa8      	it	ge
 8010966:	4633      	movge	r3, r6
 8010968:	1ad2      	subs	r2, r2, r3
 801096a:	9200      	str	r2, [sp, #0]
 801096c:	9a06      	ldr	r2, [sp, #24]
 801096e:	1af6      	subs	r6, r6, r3
 8010970:	1ad3      	subs	r3, r2, r3
 8010972:	9306      	str	r3, [sp, #24]
 8010974:	9b08      	ldr	r3, [sp, #32]
 8010976:	b30b      	cbz	r3, 80109bc <_dtoa_r+0x794>
 8010978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801097a:	2b00      	cmp	r3, #0
 801097c:	f000 80c6 	beq.w	8010b0c <_dtoa_r+0x8e4>
 8010980:	2c00      	cmp	r4, #0
 8010982:	f000 80c0 	beq.w	8010b06 <_dtoa_r+0x8de>
 8010986:	4629      	mov	r1, r5
 8010988:	4622      	mov	r2, r4
 801098a:	4648      	mov	r0, r9
 801098c:	f000 fc12 	bl	80111b4 <__pow5mult>
 8010990:	9a02      	ldr	r2, [sp, #8]
 8010992:	4601      	mov	r1, r0
 8010994:	4605      	mov	r5, r0
 8010996:	4648      	mov	r0, r9
 8010998:	f000 fb6a 	bl	8011070 <__multiply>
 801099c:	9902      	ldr	r1, [sp, #8]
 801099e:	4680      	mov	r8, r0
 80109a0:	4648      	mov	r0, r9
 80109a2:	f000 fa9b 	bl	8010edc <_Bfree>
 80109a6:	9b08      	ldr	r3, [sp, #32]
 80109a8:	1b1b      	subs	r3, r3, r4
 80109aa:	9308      	str	r3, [sp, #32]
 80109ac:	f000 80b1 	beq.w	8010b12 <_dtoa_r+0x8ea>
 80109b0:	9a08      	ldr	r2, [sp, #32]
 80109b2:	4641      	mov	r1, r8
 80109b4:	4648      	mov	r0, r9
 80109b6:	f000 fbfd 	bl	80111b4 <__pow5mult>
 80109ba:	9002      	str	r0, [sp, #8]
 80109bc:	2101      	movs	r1, #1
 80109be:	4648      	mov	r0, r9
 80109c0:	f000 fb40 	bl	8011044 <__i2b>
 80109c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80109c6:	4604      	mov	r4, r0
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	f000 81d8 	beq.w	8010d7e <_dtoa_r+0xb56>
 80109ce:	461a      	mov	r2, r3
 80109d0:	4601      	mov	r1, r0
 80109d2:	4648      	mov	r0, r9
 80109d4:	f000 fbee 	bl	80111b4 <__pow5mult>
 80109d8:	9b07      	ldr	r3, [sp, #28]
 80109da:	2b01      	cmp	r3, #1
 80109dc:	4604      	mov	r4, r0
 80109de:	f300 809f 	bgt.w	8010b20 <_dtoa_r+0x8f8>
 80109e2:	9b04      	ldr	r3, [sp, #16]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	f040 8097 	bne.w	8010b18 <_dtoa_r+0x8f0>
 80109ea:	9b05      	ldr	r3, [sp, #20]
 80109ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	f040 8093 	bne.w	8010b1c <_dtoa_r+0x8f4>
 80109f6:	9b05      	ldr	r3, [sp, #20]
 80109f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80109fc:	0d1b      	lsrs	r3, r3, #20
 80109fe:	051b      	lsls	r3, r3, #20
 8010a00:	b133      	cbz	r3, 8010a10 <_dtoa_r+0x7e8>
 8010a02:	9b00      	ldr	r3, [sp, #0]
 8010a04:	3301      	adds	r3, #1
 8010a06:	9300      	str	r3, [sp, #0]
 8010a08:	9b06      	ldr	r3, [sp, #24]
 8010a0a:	3301      	adds	r3, #1
 8010a0c:	9306      	str	r3, [sp, #24]
 8010a0e:	2301      	movs	r3, #1
 8010a10:	9308      	str	r3, [sp, #32]
 8010a12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	f000 81b8 	beq.w	8010d8a <_dtoa_r+0xb62>
 8010a1a:	6923      	ldr	r3, [r4, #16]
 8010a1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010a20:	6918      	ldr	r0, [r3, #16]
 8010a22:	f000 fac3 	bl	8010fac <__hi0bits>
 8010a26:	f1c0 0020 	rsb	r0, r0, #32
 8010a2a:	9b06      	ldr	r3, [sp, #24]
 8010a2c:	4418      	add	r0, r3
 8010a2e:	f010 001f 	ands.w	r0, r0, #31
 8010a32:	f000 8082 	beq.w	8010b3a <_dtoa_r+0x912>
 8010a36:	f1c0 0320 	rsb	r3, r0, #32
 8010a3a:	2b04      	cmp	r3, #4
 8010a3c:	dd73      	ble.n	8010b26 <_dtoa_r+0x8fe>
 8010a3e:	9b00      	ldr	r3, [sp, #0]
 8010a40:	f1c0 001c 	rsb	r0, r0, #28
 8010a44:	4403      	add	r3, r0
 8010a46:	9300      	str	r3, [sp, #0]
 8010a48:	9b06      	ldr	r3, [sp, #24]
 8010a4a:	4403      	add	r3, r0
 8010a4c:	4406      	add	r6, r0
 8010a4e:	9306      	str	r3, [sp, #24]
 8010a50:	9b00      	ldr	r3, [sp, #0]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	dd05      	ble.n	8010a62 <_dtoa_r+0x83a>
 8010a56:	9902      	ldr	r1, [sp, #8]
 8010a58:	461a      	mov	r2, r3
 8010a5a:	4648      	mov	r0, r9
 8010a5c:	f000 fc04 	bl	8011268 <__lshift>
 8010a60:	9002      	str	r0, [sp, #8]
 8010a62:	9b06      	ldr	r3, [sp, #24]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	dd05      	ble.n	8010a74 <_dtoa_r+0x84c>
 8010a68:	4621      	mov	r1, r4
 8010a6a:	461a      	mov	r2, r3
 8010a6c:	4648      	mov	r0, r9
 8010a6e:	f000 fbfb 	bl	8011268 <__lshift>
 8010a72:	4604      	mov	r4, r0
 8010a74:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d061      	beq.n	8010b3e <_dtoa_r+0x916>
 8010a7a:	9802      	ldr	r0, [sp, #8]
 8010a7c:	4621      	mov	r1, r4
 8010a7e:	f000 fc5f 	bl	8011340 <__mcmp>
 8010a82:	2800      	cmp	r0, #0
 8010a84:	da5b      	bge.n	8010b3e <_dtoa_r+0x916>
 8010a86:	2300      	movs	r3, #0
 8010a88:	9902      	ldr	r1, [sp, #8]
 8010a8a:	220a      	movs	r2, #10
 8010a8c:	4648      	mov	r0, r9
 8010a8e:	f000 fa47 	bl	8010f20 <__multadd>
 8010a92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a94:	9002      	str	r0, [sp, #8]
 8010a96:	f107 38ff 	add.w	r8, r7, #4294967295
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	f000 8177 	beq.w	8010d8e <_dtoa_r+0xb66>
 8010aa0:	4629      	mov	r1, r5
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	220a      	movs	r2, #10
 8010aa6:	4648      	mov	r0, r9
 8010aa8:	f000 fa3a 	bl	8010f20 <__multadd>
 8010aac:	f1bb 0f00 	cmp.w	fp, #0
 8010ab0:	4605      	mov	r5, r0
 8010ab2:	dc6f      	bgt.n	8010b94 <_dtoa_r+0x96c>
 8010ab4:	9b07      	ldr	r3, [sp, #28]
 8010ab6:	2b02      	cmp	r3, #2
 8010ab8:	dc49      	bgt.n	8010b4e <_dtoa_r+0x926>
 8010aba:	e06b      	b.n	8010b94 <_dtoa_r+0x96c>
 8010abc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010abe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010ac2:	e73c      	b.n	801093e <_dtoa_r+0x716>
 8010ac4:	3fe00000 	.word	0x3fe00000
 8010ac8:	40240000 	.word	0x40240000
 8010acc:	9b03      	ldr	r3, [sp, #12]
 8010ace:	1e5c      	subs	r4, r3, #1
 8010ad0:	9b08      	ldr	r3, [sp, #32]
 8010ad2:	42a3      	cmp	r3, r4
 8010ad4:	db09      	blt.n	8010aea <_dtoa_r+0x8c2>
 8010ad6:	1b1c      	subs	r4, r3, r4
 8010ad8:	9b03      	ldr	r3, [sp, #12]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	f6bf af30 	bge.w	8010940 <_dtoa_r+0x718>
 8010ae0:	9b00      	ldr	r3, [sp, #0]
 8010ae2:	9a03      	ldr	r2, [sp, #12]
 8010ae4:	1a9e      	subs	r6, r3, r2
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	e72b      	b.n	8010942 <_dtoa_r+0x71a>
 8010aea:	9b08      	ldr	r3, [sp, #32]
 8010aec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010aee:	9408      	str	r4, [sp, #32]
 8010af0:	1ae3      	subs	r3, r4, r3
 8010af2:	441a      	add	r2, r3
 8010af4:	9e00      	ldr	r6, [sp, #0]
 8010af6:	9b03      	ldr	r3, [sp, #12]
 8010af8:	920d      	str	r2, [sp, #52]	@ 0x34
 8010afa:	2400      	movs	r4, #0
 8010afc:	e721      	b.n	8010942 <_dtoa_r+0x71a>
 8010afe:	9c08      	ldr	r4, [sp, #32]
 8010b00:	9e00      	ldr	r6, [sp, #0]
 8010b02:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8010b04:	e728      	b.n	8010958 <_dtoa_r+0x730>
 8010b06:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010b0a:	e751      	b.n	80109b0 <_dtoa_r+0x788>
 8010b0c:	9a08      	ldr	r2, [sp, #32]
 8010b0e:	9902      	ldr	r1, [sp, #8]
 8010b10:	e750      	b.n	80109b4 <_dtoa_r+0x78c>
 8010b12:	f8cd 8008 	str.w	r8, [sp, #8]
 8010b16:	e751      	b.n	80109bc <_dtoa_r+0x794>
 8010b18:	2300      	movs	r3, #0
 8010b1a:	e779      	b.n	8010a10 <_dtoa_r+0x7e8>
 8010b1c:	9b04      	ldr	r3, [sp, #16]
 8010b1e:	e777      	b.n	8010a10 <_dtoa_r+0x7e8>
 8010b20:	2300      	movs	r3, #0
 8010b22:	9308      	str	r3, [sp, #32]
 8010b24:	e779      	b.n	8010a1a <_dtoa_r+0x7f2>
 8010b26:	d093      	beq.n	8010a50 <_dtoa_r+0x828>
 8010b28:	9a00      	ldr	r2, [sp, #0]
 8010b2a:	331c      	adds	r3, #28
 8010b2c:	441a      	add	r2, r3
 8010b2e:	9200      	str	r2, [sp, #0]
 8010b30:	9a06      	ldr	r2, [sp, #24]
 8010b32:	441a      	add	r2, r3
 8010b34:	441e      	add	r6, r3
 8010b36:	9206      	str	r2, [sp, #24]
 8010b38:	e78a      	b.n	8010a50 <_dtoa_r+0x828>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	e7f4      	b.n	8010b28 <_dtoa_r+0x900>
 8010b3e:	9b03      	ldr	r3, [sp, #12]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	46b8      	mov	r8, r7
 8010b44:	dc20      	bgt.n	8010b88 <_dtoa_r+0x960>
 8010b46:	469b      	mov	fp, r3
 8010b48:	9b07      	ldr	r3, [sp, #28]
 8010b4a:	2b02      	cmp	r3, #2
 8010b4c:	dd1e      	ble.n	8010b8c <_dtoa_r+0x964>
 8010b4e:	f1bb 0f00 	cmp.w	fp, #0
 8010b52:	f47f adb1 	bne.w	80106b8 <_dtoa_r+0x490>
 8010b56:	4621      	mov	r1, r4
 8010b58:	465b      	mov	r3, fp
 8010b5a:	2205      	movs	r2, #5
 8010b5c:	4648      	mov	r0, r9
 8010b5e:	f000 f9df 	bl	8010f20 <__multadd>
 8010b62:	4601      	mov	r1, r0
 8010b64:	4604      	mov	r4, r0
 8010b66:	9802      	ldr	r0, [sp, #8]
 8010b68:	f000 fbea 	bl	8011340 <__mcmp>
 8010b6c:	2800      	cmp	r0, #0
 8010b6e:	f77f ada3 	ble.w	80106b8 <_dtoa_r+0x490>
 8010b72:	4656      	mov	r6, sl
 8010b74:	2331      	movs	r3, #49	@ 0x31
 8010b76:	f806 3b01 	strb.w	r3, [r6], #1
 8010b7a:	f108 0801 	add.w	r8, r8, #1
 8010b7e:	e59f      	b.n	80106c0 <_dtoa_r+0x498>
 8010b80:	9c03      	ldr	r4, [sp, #12]
 8010b82:	46b8      	mov	r8, r7
 8010b84:	4625      	mov	r5, r4
 8010b86:	e7f4      	b.n	8010b72 <_dtoa_r+0x94a>
 8010b88:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8010b8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	f000 8101 	beq.w	8010d96 <_dtoa_r+0xb6e>
 8010b94:	2e00      	cmp	r6, #0
 8010b96:	dd05      	ble.n	8010ba4 <_dtoa_r+0x97c>
 8010b98:	4629      	mov	r1, r5
 8010b9a:	4632      	mov	r2, r6
 8010b9c:	4648      	mov	r0, r9
 8010b9e:	f000 fb63 	bl	8011268 <__lshift>
 8010ba2:	4605      	mov	r5, r0
 8010ba4:	9b08      	ldr	r3, [sp, #32]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d05c      	beq.n	8010c64 <_dtoa_r+0xa3c>
 8010baa:	6869      	ldr	r1, [r5, #4]
 8010bac:	4648      	mov	r0, r9
 8010bae:	f000 f955 	bl	8010e5c <_Balloc>
 8010bb2:	4606      	mov	r6, r0
 8010bb4:	b928      	cbnz	r0, 8010bc2 <_dtoa_r+0x99a>
 8010bb6:	4b82      	ldr	r3, [pc, #520]	@ (8010dc0 <_dtoa_r+0xb98>)
 8010bb8:	4602      	mov	r2, r0
 8010bba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010bbe:	f7ff bb4a 	b.w	8010256 <_dtoa_r+0x2e>
 8010bc2:	692a      	ldr	r2, [r5, #16]
 8010bc4:	3202      	adds	r2, #2
 8010bc6:	0092      	lsls	r2, r2, #2
 8010bc8:	f105 010c 	add.w	r1, r5, #12
 8010bcc:	300c      	adds	r0, #12
 8010bce:	f7ff fa92 	bl	80100f6 <memcpy>
 8010bd2:	2201      	movs	r2, #1
 8010bd4:	4631      	mov	r1, r6
 8010bd6:	4648      	mov	r0, r9
 8010bd8:	f000 fb46 	bl	8011268 <__lshift>
 8010bdc:	f10a 0301 	add.w	r3, sl, #1
 8010be0:	9300      	str	r3, [sp, #0]
 8010be2:	eb0a 030b 	add.w	r3, sl, fp
 8010be6:	9308      	str	r3, [sp, #32]
 8010be8:	9b04      	ldr	r3, [sp, #16]
 8010bea:	f003 0301 	and.w	r3, r3, #1
 8010bee:	462f      	mov	r7, r5
 8010bf0:	9306      	str	r3, [sp, #24]
 8010bf2:	4605      	mov	r5, r0
 8010bf4:	9b00      	ldr	r3, [sp, #0]
 8010bf6:	9802      	ldr	r0, [sp, #8]
 8010bf8:	4621      	mov	r1, r4
 8010bfa:	f103 3bff 	add.w	fp, r3, #4294967295
 8010bfe:	f7ff fa88 	bl	8010112 <quorem>
 8010c02:	4603      	mov	r3, r0
 8010c04:	3330      	adds	r3, #48	@ 0x30
 8010c06:	9003      	str	r0, [sp, #12]
 8010c08:	4639      	mov	r1, r7
 8010c0a:	9802      	ldr	r0, [sp, #8]
 8010c0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c0e:	f000 fb97 	bl	8011340 <__mcmp>
 8010c12:	462a      	mov	r2, r5
 8010c14:	9004      	str	r0, [sp, #16]
 8010c16:	4621      	mov	r1, r4
 8010c18:	4648      	mov	r0, r9
 8010c1a:	f000 fbad 	bl	8011378 <__mdiff>
 8010c1e:	68c2      	ldr	r2, [r0, #12]
 8010c20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c22:	4606      	mov	r6, r0
 8010c24:	bb02      	cbnz	r2, 8010c68 <_dtoa_r+0xa40>
 8010c26:	4601      	mov	r1, r0
 8010c28:	9802      	ldr	r0, [sp, #8]
 8010c2a:	f000 fb89 	bl	8011340 <__mcmp>
 8010c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c30:	4602      	mov	r2, r0
 8010c32:	4631      	mov	r1, r6
 8010c34:	4648      	mov	r0, r9
 8010c36:	920c      	str	r2, [sp, #48]	@ 0x30
 8010c38:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c3a:	f000 f94f 	bl	8010edc <_Bfree>
 8010c3e:	9b07      	ldr	r3, [sp, #28]
 8010c40:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010c42:	9e00      	ldr	r6, [sp, #0]
 8010c44:	ea42 0103 	orr.w	r1, r2, r3
 8010c48:	9b06      	ldr	r3, [sp, #24]
 8010c4a:	4319      	orrs	r1, r3
 8010c4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c4e:	d10d      	bne.n	8010c6c <_dtoa_r+0xa44>
 8010c50:	2b39      	cmp	r3, #57	@ 0x39
 8010c52:	d027      	beq.n	8010ca4 <_dtoa_r+0xa7c>
 8010c54:	9a04      	ldr	r2, [sp, #16]
 8010c56:	2a00      	cmp	r2, #0
 8010c58:	dd01      	ble.n	8010c5e <_dtoa_r+0xa36>
 8010c5a:	9b03      	ldr	r3, [sp, #12]
 8010c5c:	3331      	adds	r3, #49	@ 0x31
 8010c5e:	f88b 3000 	strb.w	r3, [fp]
 8010c62:	e52e      	b.n	80106c2 <_dtoa_r+0x49a>
 8010c64:	4628      	mov	r0, r5
 8010c66:	e7b9      	b.n	8010bdc <_dtoa_r+0x9b4>
 8010c68:	2201      	movs	r2, #1
 8010c6a:	e7e2      	b.n	8010c32 <_dtoa_r+0xa0a>
 8010c6c:	9904      	ldr	r1, [sp, #16]
 8010c6e:	2900      	cmp	r1, #0
 8010c70:	db04      	blt.n	8010c7c <_dtoa_r+0xa54>
 8010c72:	9807      	ldr	r0, [sp, #28]
 8010c74:	4301      	orrs	r1, r0
 8010c76:	9806      	ldr	r0, [sp, #24]
 8010c78:	4301      	orrs	r1, r0
 8010c7a:	d120      	bne.n	8010cbe <_dtoa_r+0xa96>
 8010c7c:	2a00      	cmp	r2, #0
 8010c7e:	ddee      	ble.n	8010c5e <_dtoa_r+0xa36>
 8010c80:	9902      	ldr	r1, [sp, #8]
 8010c82:	9300      	str	r3, [sp, #0]
 8010c84:	2201      	movs	r2, #1
 8010c86:	4648      	mov	r0, r9
 8010c88:	f000 faee 	bl	8011268 <__lshift>
 8010c8c:	4621      	mov	r1, r4
 8010c8e:	9002      	str	r0, [sp, #8]
 8010c90:	f000 fb56 	bl	8011340 <__mcmp>
 8010c94:	2800      	cmp	r0, #0
 8010c96:	9b00      	ldr	r3, [sp, #0]
 8010c98:	dc02      	bgt.n	8010ca0 <_dtoa_r+0xa78>
 8010c9a:	d1e0      	bne.n	8010c5e <_dtoa_r+0xa36>
 8010c9c:	07da      	lsls	r2, r3, #31
 8010c9e:	d5de      	bpl.n	8010c5e <_dtoa_r+0xa36>
 8010ca0:	2b39      	cmp	r3, #57	@ 0x39
 8010ca2:	d1da      	bne.n	8010c5a <_dtoa_r+0xa32>
 8010ca4:	2339      	movs	r3, #57	@ 0x39
 8010ca6:	f88b 3000 	strb.w	r3, [fp]
 8010caa:	4633      	mov	r3, r6
 8010cac:	461e      	mov	r6, r3
 8010cae:	3b01      	subs	r3, #1
 8010cb0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010cb4:	2a39      	cmp	r2, #57	@ 0x39
 8010cb6:	d04e      	beq.n	8010d56 <_dtoa_r+0xb2e>
 8010cb8:	3201      	adds	r2, #1
 8010cba:	701a      	strb	r2, [r3, #0]
 8010cbc:	e501      	b.n	80106c2 <_dtoa_r+0x49a>
 8010cbe:	2a00      	cmp	r2, #0
 8010cc0:	dd03      	ble.n	8010cca <_dtoa_r+0xaa2>
 8010cc2:	2b39      	cmp	r3, #57	@ 0x39
 8010cc4:	d0ee      	beq.n	8010ca4 <_dtoa_r+0xa7c>
 8010cc6:	3301      	adds	r3, #1
 8010cc8:	e7c9      	b.n	8010c5e <_dtoa_r+0xa36>
 8010cca:	9a00      	ldr	r2, [sp, #0]
 8010ccc:	9908      	ldr	r1, [sp, #32]
 8010cce:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010cd2:	428a      	cmp	r2, r1
 8010cd4:	d028      	beq.n	8010d28 <_dtoa_r+0xb00>
 8010cd6:	9902      	ldr	r1, [sp, #8]
 8010cd8:	2300      	movs	r3, #0
 8010cda:	220a      	movs	r2, #10
 8010cdc:	4648      	mov	r0, r9
 8010cde:	f000 f91f 	bl	8010f20 <__multadd>
 8010ce2:	42af      	cmp	r7, r5
 8010ce4:	9002      	str	r0, [sp, #8]
 8010ce6:	f04f 0300 	mov.w	r3, #0
 8010cea:	f04f 020a 	mov.w	r2, #10
 8010cee:	4639      	mov	r1, r7
 8010cf0:	4648      	mov	r0, r9
 8010cf2:	d107      	bne.n	8010d04 <_dtoa_r+0xadc>
 8010cf4:	f000 f914 	bl	8010f20 <__multadd>
 8010cf8:	4607      	mov	r7, r0
 8010cfa:	4605      	mov	r5, r0
 8010cfc:	9b00      	ldr	r3, [sp, #0]
 8010cfe:	3301      	adds	r3, #1
 8010d00:	9300      	str	r3, [sp, #0]
 8010d02:	e777      	b.n	8010bf4 <_dtoa_r+0x9cc>
 8010d04:	f000 f90c 	bl	8010f20 <__multadd>
 8010d08:	4629      	mov	r1, r5
 8010d0a:	4607      	mov	r7, r0
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	220a      	movs	r2, #10
 8010d10:	4648      	mov	r0, r9
 8010d12:	f000 f905 	bl	8010f20 <__multadd>
 8010d16:	4605      	mov	r5, r0
 8010d18:	e7f0      	b.n	8010cfc <_dtoa_r+0xad4>
 8010d1a:	f1bb 0f00 	cmp.w	fp, #0
 8010d1e:	bfcc      	ite	gt
 8010d20:	465e      	movgt	r6, fp
 8010d22:	2601      	movle	r6, #1
 8010d24:	4456      	add	r6, sl
 8010d26:	2700      	movs	r7, #0
 8010d28:	9902      	ldr	r1, [sp, #8]
 8010d2a:	9300      	str	r3, [sp, #0]
 8010d2c:	2201      	movs	r2, #1
 8010d2e:	4648      	mov	r0, r9
 8010d30:	f000 fa9a 	bl	8011268 <__lshift>
 8010d34:	4621      	mov	r1, r4
 8010d36:	9002      	str	r0, [sp, #8]
 8010d38:	f000 fb02 	bl	8011340 <__mcmp>
 8010d3c:	2800      	cmp	r0, #0
 8010d3e:	dcb4      	bgt.n	8010caa <_dtoa_r+0xa82>
 8010d40:	d102      	bne.n	8010d48 <_dtoa_r+0xb20>
 8010d42:	9b00      	ldr	r3, [sp, #0]
 8010d44:	07db      	lsls	r3, r3, #31
 8010d46:	d4b0      	bmi.n	8010caa <_dtoa_r+0xa82>
 8010d48:	4633      	mov	r3, r6
 8010d4a:	461e      	mov	r6, r3
 8010d4c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010d50:	2a30      	cmp	r2, #48	@ 0x30
 8010d52:	d0fa      	beq.n	8010d4a <_dtoa_r+0xb22>
 8010d54:	e4b5      	b.n	80106c2 <_dtoa_r+0x49a>
 8010d56:	459a      	cmp	sl, r3
 8010d58:	d1a8      	bne.n	8010cac <_dtoa_r+0xa84>
 8010d5a:	2331      	movs	r3, #49	@ 0x31
 8010d5c:	f108 0801 	add.w	r8, r8, #1
 8010d60:	f88a 3000 	strb.w	r3, [sl]
 8010d64:	e4ad      	b.n	80106c2 <_dtoa_r+0x49a>
 8010d66:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010d68:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8010dc4 <_dtoa_r+0xb9c>
 8010d6c:	b11b      	cbz	r3, 8010d76 <_dtoa_r+0xb4e>
 8010d6e:	f10a 0308 	add.w	r3, sl, #8
 8010d72:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010d74:	6013      	str	r3, [r2, #0]
 8010d76:	4650      	mov	r0, sl
 8010d78:	b017      	add	sp, #92	@ 0x5c
 8010d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d7e:	9b07      	ldr	r3, [sp, #28]
 8010d80:	2b01      	cmp	r3, #1
 8010d82:	f77f ae2e 	ble.w	80109e2 <_dtoa_r+0x7ba>
 8010d86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010d88:	9308      	str	r3, [sp, #32]
 8010d8a:	2001      	movs	r0, #1
 8010d8c:	e64d      	b.n	8010a2a <_dtoa_r+0x802>
 8010d8e:	f1bb 0f00 	cmp.w	fp, #0
 8010d92:	f77f aed9 	ble.w	8010b48 <_dtoa_r+0x920>
 8010d96:	4656      	mov	r6, sl
 8010d98:	9802      	ldr	r0, [sp, #8]
 8010d9a:	4621      	mov	r1, r4
 8010d9c:	f7ff f9b9 	bl	8010112 <quorem>
 8010da0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8010da4:	f806 3b01 	strb.w	r3, [r6], #1
 8010da8:	eba6 020a 	sub.w	r2, r6, sl
 8010dac:	4593      	cmp	fp, r2
 8010dae:	ddb4      	ble.n	8010d1a <_dtoa_r+0xaf2>
 8010db0:	9902      	ldr	r1, [sp, #8]
 8010db2:	2300      	movs	r3, #0
 8010db4:	220a      	movs	r2, #10
 8010db6:	4648      	mov	r0, r9
 8010db8:	f000 f8b2 	bl	8010f20 <__multadd>
 8010dbc:	9002      	str	r0, [sp, #8]
 8010dbe:	e7eb      	b.n	8010d98 <_dtoa_r+0xb70>
 8010dc0:	08012d21 	.word	0x08012d21
 8010dc4:	08012ca5 	.word	0x08012ca5

08010dc8 <_free_r>:
 8010dc8:	b538      	push	{r3, r4, r5, lr}
 8010dca:	4605      	mov	r5, r0
 8010dcc:	2900      	cmp	r1, #0
 8010dce:	d041      	beq.n	8010e54 <_free_r+0x8c>
 8010dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010dd4:	1f0c      	subs	r4, r1, #4
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	bfb8      	it	lt
 8010dda:	18e4      	addlt	r4, r4, r3
 8010ddc:	f7fe f982 	bl	800f0e4 <__malloc_lock>
 8010de0:	4a1d      	ldr	r2, [pc, #116]	@ (8010e58 <_free_r+0x90>)
 8010de2:	6813      	ldr	r3, [r2, #0]
 8010de4:	b933      	cbnz	r3, 8010df4 <_free_r+0x2c>
 8010de6:	6063      	str	r3, [r4, #4]
 8010de8:	6014      	str	r4, [r2, #0]
 8010dea:	4628      	mov	r0, r5
 8010dec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010df0:	f7fe b97e 	b.w	800f0f0 <__malloc_unlock>
 8010df4:	42a3      	cmp	r3, r4
 8010df6:	d908      	bls.n	8010e0a <_free_r+0x42>
 8010df8:	6820      	ldr	r0, [r4, #0]
 8010dfa:	1821      	adds	r1, r4, r0
 8010dfc:	428b      	cmp	r3, r1
 8010dfe:	bf01      	itttt	eq
 8010e00:	6819      	ldreq	r1, [r3, #0]
 8010e02:	685b      	ldreq	r3, [r3, #4]
 8010e04:	1809      	addeq	r1, r1, r0
 8010e06:	6021      	streq	r1, [r4, #0]
 8010e08:	e7ed      	b.n	8010de6 <_free_r+0x1e>
 8010e0a:	461a      	mov	r2, r3
 8010e0c:	685b      	ldr	r3, [r3, #4]
 8010e0e:	b10b      	cbz	r3, 8010e14 <_free_r+0x4c>
 8010e10:	42a3      	cmp	r3, r4
 8010e12:	d9fa      	bls.n	8010e0a <_free_r+0x42>
 8010e14:	6811      	ldr	r1, [r2, #0]
 8010e16:	1850      	adds	r0, r2, r1
 8010e18:	42a0      	cmp	r0, r4
 8010e1a:	d10b      	bne.n	8010e34 <_free_r+0x6c>
 8010e1c:	6820      	ldr	r0, [r4, #0]
 8010e1e:	4401      	add	r1, r0
 8010e20:	1850      	adds	r0, r2, r1
 8010e22:	4283      	cmp	r3, r0
 8010e24:	6011      	str	r1, [r2, #0]
 8010e26:	d1e0      	bne.n	8010dea <_free_r+0x22>
 8010e28:	6818      	ldr	r0, [r3, #0]
 8010e2a:	685b      	ldr	r3, [r3, #4]
 8010e2c:	6053      	str	r3, [r2, #4]
 8010e2e:	4408      	add	r0, r1
 8010e30:	6010      	str	r0, [r2, #0]
 8010e32:	e7da      	b.n	8010dea <_free_r+0x22>
 8010e34:	d902      	bls.n	8010e3c <_free_r+0x74>
 8010e36:	230c      	movs	r3, #12
 8010e38:	602b      	str	r3, [r5, #0]
 8010e3a:	e7d6      	b.n	8010dea <_free_r+0x22>
 8010e3c:	6820      	ldr	r0, [r4, #0]
 8010e3e:	1821      	adds	r1, r4, r0
 8010e40:	428b      	cmp	r3, r1
 8010e42:	bf04      	itt	eq
 8010e44:	6819      	ldreq	r1, [r3, #0]
 8010e46:	685b      	ldreq	r3, [r3, #4]
 8010e48:	6063      	str	r3, [r4, #4]
 8010e4a:	bf04      	itt	eq
 8010e4c:	1809      	addeq	r1, r1, r0
 8010e4e:	6021      	streq	r1, [r4, #0]
 8010e50:	6054      	str	r4, [r2, #4]
 8010e52:	e7ca      	b.n	8010dea <_free_r+0x22>
 8010e54:	bd38      	pop	{r3, r4, r5, pc}
 8010e56:	bf00      	nop
 8010e58:	20005560 	.word	0x20005560

08010e5c <_Balloc>:
 8010e5c:	b570      	push	{r4, r5, r6, lr}
 8010e5e:	69c6      	ldr	r6, [r0, #28]
 8010e60:	4604      	mov	r4, r0
 8010e62:	460d      	mov	r5, r1
 8010e64:	b976      	cbnz	r6, 8010e84 <_Balloc+0x28>
 8010e66:	2010      	movs	r0, #16
 8010e68:	f7fe f892 	bl	800ef90 <malloc>
 8010e6c:	4602      	mov	r2, r0
 8010e6e:	61e0      	str	r0, [r4, #28]
 8010e70:	b920      	cbnz	r0, 8010e7c <_Balloc+0x20>
 8010e72:	4b18      	ldr	r3, [pc, #96]	@ (8010ed4 <_Balloc+0x78>)
 8010e74:	4818      	ldr	r0, [pc, #96]	@ (8010ed8 <_Balloc+0x7c>)
 8010e76:	216b      	movs	r1, #107	@ 0x6b
 8010e78:	f000 fe0c 	bl	8011a94 <__assert_func>
 8010e7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e80:	6006      	str	r6, [r0, #0]
 8010e82:	60c6      	str	r6, [r0, #12]
 8010e84:	69e6      	ldr	r6, [r4, #28]
 8010e86:	68f3      	ldr	r3, [r6, #12]
 8010e88:	b183      	cbz	r3, 8010eac <_Balloc+0x50>
 8010e8a:	69e3      	ldr	r3, [r4, #28]
 8010e8c:	68db      	ldr	r3, [r3, #12]
 8010e8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010e92:	b9b8      	cbnz	r0, 8010ec4 <_Balloc+0x68>
 8010e94:	2101      	movs	r1, #1
 8010e96:	fa01 f605 	lsl.w	r6, r1, r5
 8010e9a:	1d72      	adds	r2, r6, #5
 8010e9c:	0092      	lsls	r2, r2, #2
 8010e9e:	4620      	mov	r0, r4
 8010ea0:	f000 fe16 	bl	8011ad0 <_calloc_r>
 8010ea4:	b160      	cbz	r0, 8010ec0 <_Balloc+0x64>
 8010ea6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010eaa:	e00e      	b.n	8010eca <_Balloc+0x6e>
 8010eac:	2221      	movs	r2, #33	@ 0x21
 8010eae:	2104      	movs	r1, #4
 8010eb0:	4620      	mov	r0, r4
 8010eb2:	f000 fe0d 	bl	8011ad0 <_calloc_r>
 8010eb6:	69e3      	ldr	r3, [r4, #28]
 8010eb8:	60f0      	str	r0, [r6, #12]
 8010eba:	68db      	ldr	r3, [r3, #12]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d1e4      	bne.n	8010e8a <_Balloc+0x2e>
 8010ec0:	2000      	movs	r0, #0
 8010ec2:	bd70      	pop	{r4, r5, r6, pc}
 8010ec4:	6802      	ldr	r2, [r0, #0]
 8010ec6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010eca:	2300      	movs	r3, #0
 8010ecc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010ed0:	e7f7      	b.n	8010ec2 <_Balloc+0x66>
 8010ed2:	bf00      	nop
 8010ed4:	08012cb2 	.word	0x08012cb2
 8010ed8:	08012d32 	.word	0x08012d32

08010edc <_Bfree>:
 8010edc:	b570      	push	{r4, r5, r6, lr}
 8010ede:	69c6      	ldr	r6, [r0, #28]
 8010ee0:	4605      	mov	r5, r0
 8010ee2:	460c      	mov	r4, r1
 8010ee4:	b976      	cbnz	r6, 8010f04 <_Bfree+0x28>
 8010ee6:	2010      	movs	r0, #16
 8010ee8:	f7fe f852 	bl	800ef90 <malloc>
 8010eec:	4602      	mov	r2, r0
 8010eee:	61e8      	str	r0, [r5, #28]
 8010ef0:	b920      	cbnz	r0, 8010efc <_Bfree+0x20>
 8010ef2:	4b09      	ldr	r3, [pc, #36]	@ (8010f18 <_Bfree+0x3c>)
 8010ef4:	4809      	ldr	r0, [pc, #36]	@ (8010f1c <_Bfree+0x40>)
 8010ef6:	218f      	movs	r1, #143	@ 0x8f
 8010ef8:	f000 fdcc 	bl	8011a94 <__assert_func>
 8010efc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010f00:	6006      	str	r6, [r0, #0]
 8010f02:	60c6      	str	r6, [r0, #12]
 8010f04:	b13c      	cbz	r4, 8010f16 <_Bfree+0x3a>
 8010f06:	69eb      	ldr	r3, [r5, #28]
 8010f08:	6862      	ldr	r2, [r4, #4]
 8010f0a:	68db      	ldr	r3, [r3, #12]
 8010f0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010f10:	6021      	str	r1, [r4, #0]
 8010f12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010f16:	bd70      	pop	{r4, r5, r6, pc}
 8010f18:	08012cb2 	.word	0x08012cb2
 8010f1c:	08012d32 	.word	0x08012d32

08010f20 <__multadd>:
 8010f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f24:	690d      	ldr	r5, [r1, #16]
 8010f26:	4607      	mov	r7, r0
 8010f28:	460c      	mov	r4, r1
 8010f2a:	461e      	mov	r6, r3
 8010f2c:	f101 0c14 	add.w	ip, r1, #20
 8010f30:	2000      	movs	r0, #0
 8010f32:	f8dc 3000 	ldr.w	r3, [ip]
 8010f36:	b299      	uxth	r1, r3
 8010f38:	fb02 6101 	mla	r1, r2, r1, r6
 8010f3c:	0c1e      	lsrs	r6, r3, #16
 8010f3e:	0c0b      	lsrs	r3, r1, #16
 8010f40:	fb02 3306 	mla	r3, r2, r6, r3
 8010f44:	b289      	uxth	r1, r1
 8010f46:	3001      	adds	r0, #1
 8010f48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010f4c:	4285      	cmp	r5, r0
 8010f4e:	f84c 1b04 	str.w	r1, [ip], #4
 8010f52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010f56:	dcec      	bgt.n	8010f32 <__multadd+0x12>
 8010f58:	b30e      	cbz	r6, 8010f9e <__multadd+0x7e>
 8010f5a:	68a3      	ldr	r3, [r4, #8]
 8010f5c:	42ab      	cmp	r3, r5
 8010f5e:	dc19      	bgt.n	8010f94 <__multadd+0x74>
 8010f60:	6861      	ldr	r1, [r4, #4]
 8010f62:	4638      	mov	r0, r7
 8010f64:	3101      	adds	r1, #1
 8010f66:	f7ff ff79 	bl	8010e5c <_Balloc>
 8010f6a:	4680      	mov	r8, r0
 8010f6c:	b928      	cbnz	r0, 8010f7a <__multadd+0x5a>
 8010f6e:	4602      	mov	r2, r0
 8010f70:	4b0c      	ldr	r3, [pc, #48]	@ (8010fa4 <__multadd+0x84>)
 8010f72:	480d      	ldr	r0, [pc, #52]	@ (8010fa8 <__multadd+0x88>)
 8010f74:	21ba      	movs	r1, #186	@ 0xba
 8010f76:	f000 fd8d 	bl	8011a94 <__assert_func>
 8010f7a:	6922      	ldr	r2, [r4, #16]
 8010f7c:	3202      	adds	r2, #2
 8010f7e:	f104 010c 	add.w	r1, r4, #12
 8010f82:	0092      	lsls	r2, r2, #2
 8010f84:	300c      	adds	r0, #12
 8010f86:	f7ff f8b6 	bl	80100f6 <memcpy>
 8010f8a:	4621      	mov	r1, r4
 8010f8c:	4638      	mov	r0, r7
 8010f8e:	f7ff ffa5 	bl	8010edc <_Bfree>
 8010f92:	4644      	mov	r4, r8
 8010f94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010f98:	3501      	adds	r5, #1
 8010f9a:	615e      	str	r6, [r3, #20]
 8010f9c:	6125      	str	r5, [r4, #16]
 8010f9e:	4620      	mov	r0, r4
 8010fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fa4:	08012d21 	.word	0x08012d21
 8010fa8:	08012d32 	.word	0x08012d32

08010fac <__hi0bits>:
 8010fac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	bf36      	itet	cc
 8010fb4:	0403      	lslcc	r3, r0, #16
 8010fb6:	2000      	movcs	r0, #0
 8010fb8:	2010      	movcc	r0, #16
 8010fba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010fbe:	bf3c      	itt	cc
 8010fc0:	021b      	lslcc	r3, r3, #8
 8010fc2:	3008      	addcc	r0, #8
 8010fc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010fc8:	bf3c      	itt	cc
 8010fca:	011b      	lslcc	r3, r3, #4
 8010fcc:	3004      	addcc	r0, #4
 8010fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010fd2:	bf3c      	itt	cc
 8010fd4:	009b      	lslcc	r3, r3, #2
 8010fd6:	3002      	addcc	r0, #2
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	db05      	blt.n	8010fe8 <__hi0bits+0x3c>
 8010fdc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010fe0:	f100 0001 	add.w	r0, r0, #1
 8010fe4:	bf08      	it	eq
 8010fe6:	2020      	moveq	r0, #32
 8010fe8:	4770      	bx	lr

08010fea <__lo0bits>:
 8010fea:	6803      	ldr	r3, [r0, #0]
 8010fec:	4602      	mov	r2, r0
 8010fee:	f013 0007 	ands.w	r0, r3, #7
 8010ff2:	d00b      	beq.n	801100c <__lo0bits+0x22>
 8010ff4:	07d9      	lsls	r1, r3, #31
 8010ff6:	d421      	bmi.n	801103c <__lo0bits+0x52>
 8010ff8:	0798      	lsls	r0, r3, #30
 8010ffa:	bf49      	itett	mi
 8010ffc:	085b      	lsrmi	r3, r3, #1
 8010ffe:	089b      	lsrpl	r3, r3, #2
 8011000:	2001      	movmi	r0, #1
 8011002:	6013      	strmi	r3, [r2, #0]
 8011004:	bf5c      	itt	pl
 8011006:	6013      	strpl	r3, [r2, #0]
 8011008:	2002      	movpl	r0, #2
 801100a:	4770      	bx	lr
 801100c:	b299      	uxth	r1, r3
 801100e:	b909      	cbnz	r1, 8011014 <__lo0bits+0x2a>
 8011010:	0c1b      	lsrs	r3, r3, #16
 8011012:	2010      	movs	r0, #16
 8011014:	b2d9      	uxtb	r1, r3
 8011016:	b909      	cbnz	r1, 801101c <__lo0bits+0x32>
 8011018:	3008      	adds	r0, #8
 801101a:	0a1b      	lsrs	r3, r3, #8
 801101c:	0719      	lsls	r1, r3, #28
 801101e:	bf04      	itt	eq
 8011020:	091b      	lsreq	r3, r3, #4
 8011022:	3004      	addeq	r0, #4
 8011024:	0799      	lsls	r1, r3, #30
 8011026:	bf04      	itt	eq
 8011028:	089b      	lsreq	r3, r3, #2
 801102a:	3002      	addeq	r0, #2
 801102c:	07d9      	lsls	r1, r3, #31
 801102e:	d403      	bmi.n	8011038 <__lo0bits+0x4e>
 8011030:	085b      	lsrs	r3, r3, #1
 8011032:	f100 0001 	add.w	r0, r0, #1
 8011036:	d003      	beq.n	8011040 <__lo0bits+0x56>
 8011038:	6013      	str	r3, [r2, #0]
 801103a:	4770      	bx	lr
 801103c:	2000      	movs	r0, #0
 801103e:	4770      	bx	lr
 8011040:	2020      	movs	r0, #32
 8011042:	4770      	bx	lr

08011044 <__i2b>:
 8011044:	b510      	push	{r4, lr}
 8011046:	460c      	mov	r4, r1
 8011048:	2101      	movs	r1, #1
 801104a:	f7ff ff07 	bl	8010e5c <_Balloc>
 801104e:	4602      	mov	r2, r0
 8011050:	b928      	cbnz	r0, 801105e <__i2b+0x1a>
 8011052:	4b05      	ldr	r3, [pc, #20]	@ (8011068 <__i2b+0x24>)
 8011054:	4805      	ldr	r0, [pc, #20]	@ (801106c <__i2b+0x28>)
 8011056:	f240 1145 	movw	r1, #325	@ 0x145
 801105a:	f000 fd1b 	bl	8011a94 <__assert_func>
 801105e:	2301      	movs	r3, #1
 8011060:	6144      	str	r4, [r0, #20]
 8011062:	6103      	str	r3, [r0, #16]
 8011064:	bd10      	pop	{r4, pc}
 8011066:	bf00      	nop
 8011068:	08012d21 	.word	0x08012d21
 801106c:	08012d32 	.word	0x08012d32

08011070 <__multiply>:
 8011070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011074:	4617      	mov	r7, r2
 8011076:	690a      	ldr	r2, [r1, #16]
 8011078:	693b      	ldr	r3, [r7, #16]
 801107a:	429a      	cmp	r2, r3
 801107c:	bfa8      	it	ge
 801107e:	463b      	movge	r3, r7
 8011080:	4689      	mov	r9, r1
 8011082:	bfa4      	itt	ge
 8011084:	460f      	movge	r7, r1
 8011086:	4699      	movge	r9, r3
 8011088:	693d      	ldr	r5, [r7, #16]
 801108a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801108e:	68bb      	ldr	r3, [r7, #8]
 8011090:	6879      	ldr	r1, [r7, #4]
 8011092:	eb05 060a 	add.w	r6, r5, sl
 8011096:	42b3      	cmp	r3, r6
 8011098:	b085      	sub	sp, #20
 801109a:	bfb8      	it	lt
 801109c:	3101      	addlt	r1, #1
 801109e:	f7ff fedd 	bl	8010e5c <_Balloc>
 80110a2:	b930      	cbnz	r0, 80110b2 <__multiply+0x42>
 80110a4:	4602      	mov	r2, r0
 80110a6:	4b41      	ldr	r3, [pc, #260]	@ (80111ac <__multiply+0x13c>)
 80110a8:	4841      	ldr	r0, [pc, #260]	@ (80111b0 <__multiply+0x140>)
 80110aa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80110ae:	f000 fcf1 	bl	8011a94 <__assert_func>
 80110b2:	f100 0414 	add.w	r4, r0, #20
 80110b6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80110ba:	4623      	mov	r3, r4
 80110bc:	2200      	movs	r2, #0
 80110be:	4573      	cmp	r3, lr
 80110c0:	d320      	bcc.n	8011104 <__multiply+0x94>
 80110c2:	f107 0814 	add.w	r8, r7, #20
 80110c6:	f109 0114 	add.w	r1, r9, #20
 80110ca:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80110ce:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80110d2:	9302      	str	r3, [sp, #8]
 80110d4:	1beb      	subs	r3, r5, r7
 80110d6:	3b15      	subs	r3, #21
 80110d8:	f023 0303 	bic.w	r3, r3, #3
 80110dc:	3304      	adds	r3, #4
 80110de:	3715      	adds	r7, #21
 80110e0:	42bd      	cmp	r5, r7
 80110e2:	bf38      	it	cc
 80110e4:	2304      	movcc	r3, #4
 80110e6:	9301      	str	r3, [sp, #4]
 80110e8:	9b02      	ldr	r3, [sp, #8]
 80110ea:	9103      	str	r1, [sp, #12]
 80110ec:	428b      	cmp	r3, r1
 80110ee:	d80c      	bhi.n	801110a <__multiply+0x9a>
 80110f0:	2e00      	cmp	r6, #0
 80110f2:	dd03      	ble.n	80110fc <__multiply+0x8c>
 80110f4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d055      	beq.n	80111a8 <__multiply+0x138>
 80110fc:	6106      	str	r6, [r0, #16]
 80110fe:	b005      	add	sp, #20
 8011100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011104:	f843 2b04 	str.w	r2, [r3], #4
 8011108:	e7d9      	b.n	80110be <__multiply+0x4e>
 801110a:	f8b1 a000 	ldrh.w	sl, [r1]
 801110e:	f1ba 0f00 	cmp.w	sl, #0
 8011112:	d01f      	beq.n	8011154 <__multiply+0xe4>
 8011114:	46c4      	mov	ip, r8
 8011116:	46a1      	mov	r9, r4
 8011118:	2700      	movs	r7, #0
 801111a:	f85c 2b04 	ldr.w	r2, [ip], #4
 801111e:	f8d9 3000 	ldr.w	r3, [r9]
 8011122:	fa1f fb82 	uxth.w	fp, r2
 8011126:	b29b      	uxth	r3, r3
 8011128:	fb0a 330b 	mla	r3, sl, fp, r3
 801112c:	443b      	add	r3, r7
 801112e:	f8d9 7000 	ldr.w	r7, [r9]
 8011132:	0c12      	lsrs	r2, r2, #16
 8011134:	0c3f      	lsrs	r7, r7, #16
 8011136:	fb0a 7202 	mla	r2, sl, r2, r7
 801113a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801113e:	b29b      	uxth	r3, r3
 8011140:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011144:	4565      	cmp	r5, ip
 8011146:	f849 3b04 	str.w	r3, [r9], #4
 801114a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801114e:	d8e4      	bhi.n	801111a <__multiply+0xaa>
 8011150:	9b01      	ldr	r3, [sp, #4]
 8011152:	50e7      	str	r7, [r4, r3]
 8011154:	9b03      	ldr	r3, [sp, #12]
 8011156:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801115a:	3104      	adds	r1, #4
 801115c:	f1b9 0f00 	cmp.w	r9, #0
 8011160:	d020      	beq.n	80111a4 <__multiply+0x134>
 8011162:	6823      	ldr	r3, [r4, #0]
 8011164:	4647      	mov	r7, r8
 8011166:	46a4      	mov	ip, r4
 8011168:	f04f 0a00 	mov.w	sl, #0
 801116c:	f8b7 b000 	ldrh.w	fp, [r7]
 8011170:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8011174:	fb09 220b 	mla	r2, r9, fp, r2
 8011178:	4452      	add	r2, sl
 801117a:	b29b      	uxth	r3, r3
 801117c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011180:	f84c 3b04 	str.w	r3, [ip], #4
 8011184:	f857 3b04 	ldr.w	r3, [r7], #4
 8011188:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801118c:	f8bc 3000 	ldrh.w	r3, [ip]
 8011190:	fb09 330a 	mla	r3, r9, sl, r3
 8011194:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011198:	42bd      	cmp	r5, r7
 801119a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801119e:	d8e5      	bhi.n	801116c <__multiply+0xfc>
 80111a0:	9a01      	ldr	r2, [sp, #4]
 80111a2:	50a3      	str	r3, [r4, r2]
 80111a4:	3404      	adds	r4, #4
 80111a6:	e79f      	b.n	80110e8 <__multiply+0x78>
 80111a8:	3e01      	subs	r6, #1
 80111aa:	e7a1      	b.n	80110f0 <__multiply+0x80>
 80111ac:	08012d21 	.word	0x08012d21
 80111b0:	08012d32 	.word	0x08012d32

080111b4 <__pow5mult>:
 80111b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111b8:	4615      	mov	r5, r2
 80111ba:	f012 0203 	ands.w	r2, r2, #3
 80111be:	4607      	mov	r7, r0
 80111c0:	460e      	mov	r6, r1
 80111c2:	d007      	beq.n	80111d4 <__pow5mult+0x20>
 80111c4:	4c25      	ldr	r4, [pc, #148]	@ (801125c <__pow5mult+0xa8>)
 80111c6:	3a01      	subs	r2, #1
 80111c8:	2300      	movs	r3, #0
 80111ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80111ce:	f7ff fea7 	bl	8010f20 <__multadd>
 80111d2:	4606      	mov	r6, r0
 80111d4:	10ad      	asrs	r5, r5, #2
 80111d6:	d03d      	beq.n	8011254 <__pow5mult+0xa0>
 80111d8:	69fc      	ldr	r4, [r7, #28]
 80111da:	b97c      	cbnz	r4, 80111fc <__pow5mult+0x48>
 80111dc:	2010      	movs	r0, #16
 80111de:	f7fd fed7 	bl	800ef90 <malloc>
 80111e2:	4602      	mov	r2, r0
 80111e4:	61f8      	str	r0, [r7, #28]
 80111e6:	b928      	cbnz	r0, 80111f4 <__pow5mult+0x40>
 80111e8:	4b1d      	ldr	r3, [pc, #116]	@ (8011260 <__pow5mult+0xac>)
 80111ea:	481e      	ldr	r0, [pc, #120]	@ (8011264 <__pow5mult+0xb0>)
 80111ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80111f0:	f000 fc50 	bl	8011a94 <__assert_func>
 80111f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80111f8:	6004      	str	r4, [r0, #0]
 80111fa:	60c4      	str	r4, [r0, #12]
 80111fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011200:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011204:	b94c      	cbnz	r4, 801121a <__pow5mult+0x66>
 8011206:	f240 2171 	movw	r1, #625	@ 0x271
 801120a:	4638      	mov	r0, r7
 801120c:	f7ff ff1a 	bl	8011044 <__i2b>
 8011210:	2300      	movs	r3, #0
 8011212:	f8c8 0008 	str.w	r0, [r8, #8]
 8011216:	4604      	mov	r4, r0
 8011218:	6003      	str	r3, [r0, #0]
 801121a:	f04f 0900 	mov.w	r9, #0
 801121e:	07eb      	lsls	r3, r5, #31
 8011220:	d50a      	bpl.n	8011238 <__pow5mult+0x84>
 8011222:	4631      	mov	r1, r6
 8011224:	4622      	mov	r2, r4
 8011226:	4638      	mov	r0, r7
 8011228:	f7ff ff22 	bl	8011070 <__multiply>
 801122c:	4631      	mov	r1, r6
 801122e:	4680      	mov	r8, r0
 8011230:	4638      	mov	r0, r7
 8011232:	f7ff fe53 	bl	8010edc <_Bfree>
 8011236:	4646      	mov	r6, r8
 8011238:	106d      	asrs	r5, r5, #1
 801123a:	d00b      	beq.n	8011254 <__pow5mult+0xa0>
 801123c:	6820      	ldr	r0, [r4, #0]
 801123e:	b938      	cbnz	r0, 8011250 <__pow5mult+0x9c>
 8011240:	4622      	mov	r2, r4
 8011242:	4621      	mov	r1, r4
 8011244:	4638      	mov	r0, r7
 8011246:	f7ff ff13 	bl	8011070 <__multiply>
 801124a:	6020      	str	r0, [r4, #0]
 801124c:	f8c0 9000 	str.w	r9, [r0]
 8011250:	4604      	mov	r4, r0
 8011252:	e7e4      	b.n	801121e <__pow5mult+0x6a>
 8011254:	4630      	mov	r0, r6
 8011256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801125a:	bf00      	nop
 801125c:	08012de4 	.word	0x08012de4
 8011260:	08012cb2 	.word	0x08012cb2
 8011264:	08012d32 	.word	0x08012d32

08011268 <__lshift>:
 8011268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801126c:	460c      	mov	r4, r1
 801126e:	6849      	ldr	r1, [r1, #4]
 8011270:	6923      	ldr	r3, [r4, #16]
 8011272:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011276:	68a3      	ldr	r3, [r4, #8]
 8011278:	4607      	mov	r7, r0
 801127a:	4691      	mov	r9, r2
 801127c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011280:	f108 0601 	add.w	r6, r8, #1
 8011284:	42b3      	cmp	r3, r6
 8011286:	db0b      	blt.n	80112a0 <__lshift+0x38>
 8011288:	4638      	mov	r0, r7
 801128a:	f7ff fde7 	bl	8010e5c <_Balloc>
 801128e:	4605      	mov	r5, r0
 8011290:	b948      	cbnz	r0, 80112a6 <__lshift+0x3e>
 8011292:	4602      	mov	r2, r0
 8011294:	4b28      	ldr	r3, [pc, #160]	@ (8011338 <__lshift+0xd0>)
 8011296:	4829      	ldr	r0, [pc, #164]	@ (801133c <__lshift+0xd4>)
 8011298:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801129c:	f000 fbfa 	bl	8011a94 <__assert_func>
 80112a0:	3101      	adds	r1, #1
 80112a2:	005b      	lsls	r3, r3, #1
 80112a4:	e7ee      	b.n	8011284 <__lshift+0x1c>
 80112a6:	2300      	movs	r3, #0
 80112a8:	f100 0114 	add.w	r1, r0, #20
 80112ac:	f100 0210 	add.w	r2, r0, #16
 80112b0:	4618      	mov	r0, r3
 80112b2:	4553      	cmp	r3, sl
 80112b4:	db33      	blt.n	801131e <__lshift+0xb6>
 80112b6:	6920      	ldr	r0, [r4, #16]
 80112b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80112bc:	f104 0314 	add.w	r3, r4, #20
 80112c0:	f019 091f 	ands.w	r9, r9, #31
 80112c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80112c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80112cc:	d02b      	beq.n	8011326 <__lshift+0xbe>
 80112ce:	f1c9 0e20 	rsb	lr, r9, #32
 80112d2:	468a      	mov	sl, r1
 80112d4:	2200      	movs	r2, #0
 80112d6:	6818      	ldr	r0, [r3, #0]
 80112d8:	fa00 f009 	lsl.w	r0, r0, r9
 80112dc:	4310      	orrs	r0, r2
 80112de:	f84a 0b04 	str.w	r0, [sl], #4
 80112e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80112e6:	459c      	cmp	ip, r3
 80112e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80112ec:	d8f3      	bhi.n	80112d6 <__lshift+0x6e>
 80112ee:	ebac 0304 	sub.w	r3, ip, r4
 80112f2:	3b15      	subs	r3, #21
 80112f4:	f023 0303 	bic.w	r3, r3, #3
 80112f8:	3304      	adds	r3, #4
 80112fa:	f104 0015 	add.w	r0, r4, #21
 80112fe:	4560      	cmp	r0, ip
 8011300:	bf88      	it	hi
 8011302:	2304      	movhi	r3, #4
 8011304:	50ca      	str	r2, [r1, r3]
 8011306:	b10a      	cbz	r2, 801130c <__lshift+0xa4>
 8011308:	f108 0602 	add.w	r6, r8, #2
 801130c:	3e01      	subs	r6, #1
 801130e:	4638      	mov	r0, r7
 8011310:	612e      	str	r6, [r5, #16]
 8011312:	4621      	mov	r1, r4
 8011314:	f7ff fde2 	bl	8010edc <_Bfree>
 8011318:	4628      	mov	r0, r5
 801131a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801131e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011322:	3301      	adds	r3, #1
 8011324:	e7c5      	b.n	80112b2 <__lshift+0x4a>
 8011326:	3904      	subs	r1, #4
 8011328:	f853 2b04 	ldr.w	r2, [r3], #4
 801132c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011330:	459c      	cmp	ip, r3
 8011332:	d8f9      	bhi.n	8011328 <__lshift+0xc0>
 8011334:	e7ea      	b.n	801130c <__lshift+0xa4>
 8011336:	bf00      	nop
 8011338:	08012d21 	.word	0x08012d21
 801133c:	08012d32 	.word	0x08012d32

08011340 <__mcmp>:
 8011340:	690a      	ldr	r2, [r1, #16]
 8011342:	4603      	mov	r3, r0
 8011344:	6900      	ldr	r0, [r0, #16]
 8011346:	1a80      	subs	r0, r0, r2
 8011348:	b530      	push	{r4, r5, lr}
 801134a:	d10e      	bne.n	801136a <__mcmp+0x2a>
 801134c:	3314      	adds	r3, #20
 801134e:	3114      	adds	r1, #20
 8011350:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011354:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011358:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801135c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011360:	4295      	cmp	r5, r2
 8011362:	d003      	beq.n	801136c <__mcmp+0x2c>
 8011364:	d205      	bcs.n	8011372 <__mcmp+0x32>
 8011366:	f04f 30ff 	mov.w	r0, #4294967295
 801136a:	bd30      	pop	{r4, r5, pc}
 801136c:	42a3      	cmp	r3, r4
 801136e:	d3f3      	bcc.n	8011358 <__mcmp+0x18>
 8011370:	e7fb      	b.n	801136a <__mcmp+0x2a>
 8011372:	2001      	movs	r0, #1
 8011374:	e7f9      	b.n	801136a <__mcmp+0x2a>
	...

08011378 <__mdiff>:
 8011378:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801137c:	4689      	mov	r9, r1
 801137e:	4606      	mov	r6, r0
 8011380:	4611      	mov	r1, r2
 8011382:	4648      	mov	r0, r9
 8011384:	4614      	mov	r4, r2
 8011386:	f7ff ffdb 	bl	8011340 <__mcmp>
 801138a:	1e05      	subs	r5, r0, #0
 801138c:	d112      	bne.n	80113b4 <__mdiff+0x3c>
 801138e:	4629      	mov	r1, r5
 8011390:	4630      	mov	r0, r6
 8011392:	f7ff fd63 	bl	8010e5c <_Balloc>
 8011396:	4602      	mov	r2, r0
 8011398:	b928      	cbnz	r0, 80113a6 <__mdiff+0x2e>
 801139a:	4b3f      	ldr	r3, [pc, #252]	@ (8011498 <__mdiff+0x120>)
 801139c:	f240 2137 	movw	r1, #567	@ 0x237
 80113a0:	483e      	ldr	r0, [pc, #248]	@ (801149c <__mdiff+0x124>)
 80113a2:	f000 fb77 	bl	8011a94 <__assert_func>
 80113a6:	2301      	movs	r3, #1
 80113a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80113ac:	4610      	mov	r0, r2
 80113ae:	b003      	add	sp, #12
 80113b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113b4:	bfbc      	itt	lt
 80113b6:	464b      	movlt	r3, r9
 80113b8:	46a1      	movlt	r9, r4
 80113ba:	4630      	mov	r0, r6
 80113bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80113c0:	bfba      	itte	lt
 80113c2:	461c      	movlt	r4, r3
 80113c4:	2501      	movlt	r5, #1
 80113c6:	2500      	movge	r5, #0
 80113c8:	f7ff fd48 	bl	8010e5c <_Balloc>
 80113cc:	4602      	mov	r2, r0
 80113ce:	b918      	cbnz	r0, 80113d8 <__mdiff+0x60>
 80113d0:	4b31      	ldr	r3, [pc, #196]	@ (8011498 <__mdiff+0x120>)
 80113d2:	f240 2145 	movw	r1, #581	@ 0x245
 80113d6:	e7e3      	b.n	80113a0 <__mdiff+0x28>
 80113d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80113dc:	6926      	ldr	r6, [r4, #16]
 80113de:	60c5      	str	r5, [r0, #12]
 80113e0:	f109 0310 	add.w	r3, r9, #16
 80113e4:	f109 0514 	add.w	r5, r9, #20
 80113e8:	f104 0e14 	add.w	lr, r4, #20
 80113ec:	f100 0b14 	add.w	fp, r0, #20
 80113f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80113f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80113f8:	9301      	str	r3, [sp, #4]
 80113fa:	46d9      	mov	r9, fp
 80113fc:	f04f 0c00 	mov.w	ip, #0
 8011400:	9b01      	ldr	r3, [sp, #4]
 8011402:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011406:	f853 af04 	ldr.w	sl, [r3, #4]!
 801140a:	9301      	str	r3, [sp, #4]
 801140c:	fa1f f38a 	uxth.w	r3, sl
 8011410:	4619      	mov	r1, r3
 8011412:	b283      	uxth	r3, r0
 8011414:	1acb      	subs	r3, r1, r3
 8011416:	0c00      	lsrs	r0, r0, #16
 8011418:	4463      	add	r3, ip
 801141a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801141e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011422:	b29b      	uxth	r3, r3
 8011424:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011428:	4576      	cmp	r6, lr
 801142a:	f849 3b04 	str.w	r3, [r9], #4
 801142e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011432:	d8e5      	bhi.n	8011400 <__mdiff+0x88>
 8011434:	1b33      	subs	r3, r6, r4
 8011436:	3b15      	subs	r3, #21
 8011438:	f023 0303 	bic.w	r3, r3, #3
 801143c:	3415      	adds	r4, #21
 801143e:	3304      	adds	r3, #4
 8011440:	42a6      	cmp	r6, r4
 8011442:	bf38      	it	cc
 8011444:	2304      	movcc	r3, #4
 8011446:	441d      	add	r5, r3
 8011448:	445b      	add	r3, fp
 801144a:	461e      	mov	r6, r3
 801144c:	462c      	mov	r4, r5
 801144e:	4544      	cmp	r4, r8
 8011450:	d30e      	bcc.n	8011470 <__mdiff+0xf8>
 8011452:	f108 0103 	add.w	r1, r8, #3
 8011456:	1b49      	subs	r1, r1, r5
 8011458:	f021 0103 	bic.w	r1, r1, #3
 801145c:	3d03      	subs	r5, #3
 801145e:	45a8      	cmp	r8, r5
 8011460:	bf38      	it	cc
 8011462:	2100      	movcc	r1, #0
 8011464:	440b      	add	r3, r1
 8011466:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801146a:	b191      	cbz	r1, 8011492 <__mdiff+0x11a>
 801146c:	6117      	str	r7, [r2, #16]
 801146e:	e79d      	b.n	80113ac <__mdiff+0x34>
 8011470:	f854 1b04 	ldr.w	r1, [r4], #4
 8011474:	46e6      	mov	lr, ip
 8011476:	0c08      	lsrs	r0, r1, #16
 8011478:	fa1c fc81 	uxtah	ip, ip, r1
 801147c:	4471      	add	r1, lr
 801147e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011482:	b289      	uxth	r1, r1
 8011484:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011488:	f846 1b04 	str.w	r1, [r6], #4
 801148c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011490:	e7dd      	b.n	801144e <__mdiff+0xd6>
 8011492:	3f01      	subs	r7, #1
 8011494:	e7e7      	b.n	8011466 <__mdiff+0xee>
 8011496:	bf00      	nop
 8011498:	08012d21 	.word	0x08012d21
 801149c:	08012d32 	.word	0x08012d32

080114a0 <__d2b>:
 80114a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80114a4:	460f      	mov	r7, r1
 80114a6:	2101      	movs	r1, #1
 80114a8:	ec59 8b10 	vmov	r8, r9, d0
 80114ac:	4616      	mov	r6, r2
 80114ae:	f7ff fcd5 	bl	8010e5c <_Balloc>
 80114b2:	4604      	mov	r4, r0
 80114b4:	b930      	cbnz	r0, 80114c4 <__d2b+0x24>
 80114b6:	4602      	mov	r2, r0
 80114b8:	4b23      	ldr	r3, [pc, #140]	@ (8011548 <__d2b+0xa8>)
 80114ba:	4824      	ldr	r0, [pc, #144]	@ (801154c <__d2b+0xac>)
 80114bc:	f240 310f 	movw	r1, #783	@ 0x30f
 80114c0:	f000 fae8 	bl	8011a94 <__assert_func>
 80114c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80114c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80114cc:	b10d      	cbz	r5, 80114d2 <__d2b+0x32>
 80114ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80114d2:	9301      	str	r3, [sp, #4]
 80114d4:	f1b8 0300 	subs.w	r3, r8, #0
 80114d8:	d023      	beq.n	8011522 <__d2b+0x82>
 80114da:	4668      	mov	r0, sp
 80114dc:	9300      	str	r3, [sp, #0]
 80114de:	f7ff fd84 	bl	8010fea <__lo0bits>
 80114e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80114e6:	b1d0      	cbz	r0, 801151e <__d2b+0x7e>
 80114e8:	f1c0 0320 	rsb	r3, r0, #32
 80114ec:	fa02 f303 	lsl.w	r3, r2, r3
 80114f0:	430b      	orrs	r3, r1
 80114f2:	40c2      	lsrs	r2, r0
 80114f4:	6163      	str	r3, [r4, #20]
 80114f6:	9201      	str	r2, [sp, #4]
 80114f8:	9b01      	ldr	r3, [sp, #4]
 80114fa:	61a3      	str	r3, [r4, #24]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	bf0c      	ite	eq
 8011500:	2201      	moveq	r2, #1
 8011502:	2202      	movne	r2, #2
 8011504:	6122      	str	r2, [r4, #16]
 8011506:	b1a5      	cbz	r5, 8011532 <__d2b+0x92>
 8011508:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801150c:	4405      	add	r5, r0
 801150e:	603d      	str	r5, [r7, #0]
 8011510:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011514:	6030      	str	r0, [r6, #0]
 8011516:	4620      	mov	r0, r4
 8011518:	b003      	add	sp, #12
 801151a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801151e:	6161      	str	r1, [r4, #20]
 8011520:	e7ea      	b.n	80114f8 <__d2b+0x58>
 8011522:	a801      	add	r0, sp, #4
 8011524:	f7ff fd61 	bl	8010fea <__lo0bits>
 8011528:	9b01      	ldr	r3, [sp, #4]
 801152a:	6163      	str	r3, [r4, #20]
 801152c:	3020      	adds	r0, #32
 801152e:	2201      	movs	r2, #1
 8011530:	e7e8      	b.n	8011504 <__d2b+0x64>
 8011532:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011536:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801153a:	6038      	str	r0, [r7, #0]
 801153c:	6918      	ldr	r0, [r3, #16]
 801153e:	f7ff fd35 	bl	8010fac <__hi0bits>
 8011542:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011546:	e7e5      	b.n	8011514 <__d2b+0x74>
 8011548:	08012d21 	.word	0x08012d21
 801154c:	08012d32 	.word	0x08012d32

08011550 <__ssputs_r>:
 8011550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011554:	688e      	ldr	r6, [r1, #8]
 8011556:	461f      	mov	r7, r3
 8011558:	42be      	cmp	r6, r7
 801155a:	680b      	ldr	r3, [r1, #0]
 801155c:	4682      	mov	sl, r0
 801155e:	460c      	mov	r4, r1
 8011560:	4690      	mov	r8, r2
 8011562:	d82d      	bhi.n	80115c0 <__ssputs_r+0x70>
 8011564:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011568:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801156c:	d026      	beq.n	80115bc <__ssputs_r+0x6c>
 801156e:	6965      	ldr	r5, [r4, #20]
 8011570:	6909      	ldr	r1, [r1, #16]
 8011572:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011576:	eba3 0901 	sub.w	r9, r3, r1
 801157a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801157e:	1c7b      	adds	r3, r7, #1
 8011580:	444b      	add	r3, r9
 8011582:	106d      	asrs	r5, r5, #1
 8011584:	429d      	cmp	r5, r3
 8011586:	bf38      	it	cc
 8011588:	461d      	movcc	r5, r3
 801158a:	0553      	lsls	r3, r2, #21
 801158c:	d527      	bpl.n	80115de <__ssputs_r+0x8e>
 801158e:	4629      	mov	r1, r5
 8011590:	f7fd fd28 	bl	800efe4 <_malloc_r>
 8011594:	4606      	mov	r6, r0
 8011596:	b360      	cbz	r0, 80115f2 <__ssputs_r+0xa2>
 8011598:	6921      	ldr	r1, [r4, #16]
 801159a:	464a      	mov	r2, r9
 801159c:	f7fe fdab 	bl	80100f6 <memcpy>
 80115a0:	89a3      	ldrh	r3, [r4, #12]
 80115a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80115a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80115aa:	81a3      	strh	r3, [r4, #12]
 80115ac:	6126      	str	r6, [r4, #16]
 80115ae:	6165      	str	r5, [r4, #20]
 80115b0:	444e      	add	r6, r9
 80115b2:	eba5 0509 	sub.w	r5, r5, r9
 80115b6:	6026      	str	r6, [r4, #0]
 80115b8:	60a5      	str	r5, [r4, #8]
 80115ba:	463e      	mov	r6, r7
 80115bc:	42be      	cmp	r6, r7
 80115be:	d900      	bls.n	80115c2 <__ssputs_r+0x72>
 80115c0:	463e      	mov	r6, r7
 80115c2:	6820      	ldr	r0, [r4, #0]
 80115c4:	4632      	mov	r2, r6
 80115c6:	4641      	mov	r1, r8
 80115c8:	f000 fa28 	bl	8011a1c <memmove>
 80115cc:	68a3      	ldr	r3, [r4, #8]
 80115ce:	1b9b      	subs	r3, r3, r6
 80115d0:	60a3      	str	r3, [r4, #8]
 80115d2:	6823      	ldr	r3, [r4, #0]
 80115d4:	4433      	add	r3, r6
 80115d6:	6023      	str	r3, [r4, #0]
 80115d8:	2000      	movs	r0, #0
 80115da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115de:	462a      	mov	r2, r5
 80115e0:	f000 fa9c 	bl	8011b1c <_realloc_r>
 80115e4:	4606      	mov	r6, r0
 80115e6:	2800      	cmp	r0, #0
 80115e8:	d1e0      	bne.n	80115ac <__ssputs_r+0x5c>
 80115ea:	6921      	ldr	r1, [r4, #16]
 80115ec:	4650      	mov	r0, sl
 80115ee:	f7ff fbeb 	bl	8010dc8 <_free_r>
 80115f2:	230c      	movs	r3, #12
 80115f4:	f8ca 3000 	str.w	r3, [sl]
 80115f8:	89a3      	ldrh	r3, [r4, #12]
 80115fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80115fe:	81a3      	strh	r3, [r4, #12]
 8011600:	f04f 30ff 	mov.w	r0, #4294967295
 8011604:	e7e9      	b.n	80115da <__ssputs_r+0x8a>
	...

08011608 <_svfiprintf_r>:
 8011608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801160c:	4698      	mov	r8, r3
 801160e:	898b      	ldrh	r3, [r1, #12]
 8011610:	061b      	lsls	r3, r3, #24
 8011612:	b09d      	sub	sp, #116	@ 0x74
 8011614:	4607      	mov	r7, r0
 8011616:	460d      	mov	r5, r1
 8011618:	4614      	mov	r4, r2
 801161a:	d510      	bpl.n	801163e <_svfiprintf_r+0x36>
 801161c:	690b      	ldr	r3, [r1, #16]
 801161e:	b973      	cbnz	r3, 801163e <_svfiprintf_r+0x36>
 8011620:	2140      	movs	r1, #64	@ 0x40
 8011622:	f7fd fcdf 	bl	800efe4 <_malloc_r>
 8011626:	6028      	str	r0, [r5, #0]
 8011628:	6128      	str	r0, [r5, #16]
 801162a:	b930      	cbnz	r0, 801163a <_svfiprintf_r+0x32>
 801162c:	230c      	movs	r3, #12
 801162e:	603b      	str	r3, [r7, #0]
 8011630:	f04f 30ff 	mov.w	r0, #4294967295
 8011634:	b01d      	add	sp, #116	@ 0x74
 8011636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801163a:	2340      	movs	r3, #64	@ 0x40
 801163c:	616b      	str	r3, [r5, #20]
 801163e:	2300      	movs	r3, #0
 8011640:	9309      	str	r3, [sp, #36]	@ 0x24
 8011642:	2320      	movs	r3, #32
 8011644:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011648:	f8cd 800c 	str.w	r8, [sp, #12]
 801164c:	2330      	movs	r3, #48	@ 0x30
 801164e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80117ec <_svfiprintf_r+0x1e4>
 8011652:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011656:	f04f 0901 	mov.w	r9, #1
 801165a:	4623      	mov	r3, r4
 801165c:	469a      	mov	sl, r3
 801165e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011662:	b10a      	cbz	r2, 8011668 <_svfiprintf_r+0x60>
 8011664:	2a25      	cmp	r2, #37	@ 0x25
 8011666:	d1f9      	bne.n	801165c <_svfiprintf_r+0x54>
 8011668:	ebba 0b04 	subs.w	fp, sl, r4
 801166c:	d00b      	beq.n	8011686 <_svfiprintf_r+0x7e>
 801166e:	465b      	mov	r3, fp
 8011670:	4622      	mov	r2, r4
 8011672:	4629      	mov	r1, r5
 8011674:	4638      	mov	r0, r7
 8011676:	f7ff ff6b 	bl	8011550 <__ssputs_r>
 801167a:	3001      	adds	r0, #1
 801167c:	f000 80a7 	beq.w	80117ce <_svfiprintf_r+0x1c6>
 8011680:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011682:	445a      	add	r2, fp
 8011684:	9209      	str	r2, [sp, #36]	@ 0x24
 8011686:	f89a 3000 	ldrb.w	r3, [sl]
 801168a:	2b00      	cmp	r3, #0
 801168c:	f000 809f 	beq.w	80117ce <_svfiprintf_r+0x1c6>
 8011690:	2300      	movs	r3, #0
 8011692:	f04f 32ff 	mov.w	r2, #4294967295
 8011696:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801169a:	f10a 0a01 	add.w	sl, sl, #1
 801169e:	9304      	str	r3, [sp, #16]
 80116a0:	9307      	str	r3, [sp, #28]
 80116a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80116a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80116a8:	4654      	mov	r4, sl
 80116aa:	2205      	movs	r2, #5
 80116ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116b0:	484e      	ldr	r0, [pc, #312]	@ (80117ec <_svfiprintf_r+0x1e4>)
 80116b2:	f7ee fd8d 	bl	80001d0 <memchr>
 80116b6:	9a04      	ldr	r2, [sp, #16]
 80116b8:	b9d8      	cbnz	r0, 80116f2 <_svfiprintf_r+0xea>
 80116ba:	06d0      	lsls	r0, r2, #27
 80116bc:	bf44      	itt	mi
 80116be:	2320      	movmi	r3, #32
 80116c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80116c4:	0711      	lsls	r1, r2, #28
 80116c6:	bf44      	itt	mi
 80116c8:	232b      	movmi	r3, #43	@ 0x2b
 80116ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80116ce:	f89a 3000 	ldrb.w	r3, [sl]
 80116d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80116d4:	d015      	beq.n	8011702 <_svfiprintf_r+0xfa>
 80116d6:	9a07      	ldr	r2, [sp, #28]
 80116d8:	4654      	mov	r4, sl
 80116da:	2000      	movs	r0, #0
 80116dc:	f04f 0c0a 	mov.w	ip, #10
 80116e0:	4621      	mov	r1, r4
 80116e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80116e6:	3b30      	subs	r3, #48	@ 0x30
 80116e8:	2b09      	cmp	r3, #9
 80116ea:	d94b      	bls.n	8011784 <_svfiprintf_r+0x17c>
 80116ec:	b1b0      	cbz	r0, 801171c <_svfiprintf_r+0x114>
 80116ee:	9207      	str	r2, [sp, #28]
 80116f0:	e014      	b.n	801171c <_svfiprintf_r+0x114>
 80116f2:	eba0 0308 	sub.w	r3, r0, r8
 80116f6:	fa09 f303 	lsl.w	r3, r9, r3
 80116fa:	4313      	orrs	r3, r2
 80116fc:	9304      	str	r3, [sp, #16]
 80116fe:	46a2      	mov	sl, r4
 8011700:	e7d2      	b.n	80116a8 <_svfiprintf_r+0xa0>
 8011702:	9b03      	ldr	r3, [sp, #12]
 8011704:	1d19      	adds	r1, r3, #4
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	9103      	str	r1, [sp, #12]
 801170a:	2b00      	cmp	r3, #0
 801170c:	bfbb      	ittet	lt
 801170e:	425b      	neglt	r3, r3
 8011710:	f042 0202 	orrlt.w	r2, r2, #2
 8011714:	9307      	strge	r3, [sp, #28]
 8011716:	9307      	strlt	r3, [sp, #28]
 8011718:	bfb8      	it	lt
 801171a:	9204      	strlt	r2, [sp, #16]
 801171c:	7823      	ldrb	r3, [r4, #0]
 801171e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011720:	d10a      	bne.n	8011738 <_svfiprintf_r+0x130>
 8011722:	7863      	ldrb	r3, [r4, #1]
 8011724:	2b2a      	cmp	r3, #42	@ 0x2a
 8011726:	d132      	bne.n	801178e <_svfiprintf_r+0x186>
 8011728:	9b03      	ldr	r3, [sp, #12]
 801172a:	1d1a      	adds	r2, r3, #4
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	9203      	str	r2, [sp, #12]
 8011730:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011734:	3402      	adds	r4, #2
 8011736:	9305      	str	r3, [sp, #20]
 8011738:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80117fc <_svfiprintf_r+0x1f4>
 801173c:	7821      	ldrb	r1, [r4, #0]
 801173e:	2203      	movs	r2, #3
 8011740:	4650      	mov	r0, sl
 8011742:	f7ee fd45 	bl	80001d0 <memchr>
 8011746:	b138      	cbz	r0, 8011758 <_svfiprintf_r+0x150>
 8011748:	9b04      	ldr	r3, [sp, #16]
 801174a:	eba0 000a 	sub.w	r0, r0, sl
 801174e:	2240      	movs	r2, #64	@ 0x40
 8011750:	4082      	lsls	r2, r0
 8011752:	4313      	orrs	r3, r2
 8011754:	3401      	adds	r4, #1
 8011756:	9304      	str	r3, [sp, #16]
 8011758:	f814 1b01 	ldrb.w	r1, [r4], #1
 801175c:	4824      	ldr	r0, [pc, #144]	@ (80117f0 <_svfiprintf_r+0x1e8>)
 801175e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011762:	2206      	movs	r2, #6
 8011764:	f7ee fd34 	bl	80001d0 <memchr>
 8011768:	2800      	cmp	r0, #0
 801176a:	d036      	beq.n	80117da <_svfiprintf_r+0x1d2>
 801176c:	4b21      	ldr	r3, [pc, #132]	@ (80117f4 <_svfiprintf_r+0x1ec>)
 801176e:	bb1b      	cbnz	r3, 80117b8 <_svfiprintf_r+0x1b0>
 8011770:	9b03      	ldr	r3, [sp, #12]
 8011772:	3307      	adds	r3, #7
 8011774:	f023 0307 	bic.w	r3, r3, #7
 8011778:	3308      	adds	r3, #8
 801177a:	9303      	str	r3, [sp, #12]
 801177c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801177e:	4433      	add	r3, r6
 8011780:	9309      	str	r3, [sp, #36]	@ 0x24
 8011782:	e76a      	b.n	801165a <_svfiprintf_r+0x52>
 8011784:	fb0c 3202 	mla	r2, ip, r2, r3
 8011788:	460c      	mov	r4, r1
 801178a:	2001      	movs	r0, #1
 801178c:	e7a8      	b.n	80116e0 <_svfiprintf_r+0xd8>
 801178e:	2300      	movs	r3, #0
 8011790:	3401      	adds	r4, #1
 8011792:	9305      	str	r3, [sp, #20]
 8011794:	4619      	mov	r1, r3
 8011796:	f04f 0c0a 	mov.w	ip, #10
 801179a:	4620      	mov	r0, r4
 801179c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80117a0:	3a30      	subs	r2, #48	@ 0x30
 80117a2:	2a09      	cmp	r2, #9
 80117a4:	d903      	bls.n	80117ae <_svfiprintf_r+0x1a6>
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d0c6      	beq.n	8011738 <_svfiprintf_r+0x130>
 80117aa:	9105      	str	r1, [sp, #20]
 80117ac:	e7c4      	b.n	8011738 <_svfiprintf_r+0x130>
 80117ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80117b2:	4604      	mov	r4, r0
 80117b4:	2301      	movs	r3, #1
 80117b6:	e7f0      	b.n	801179a <_svfiprintf_r+0x192>
 80117b8:	ab03      	add	r3, sp, #12
 80117ba:	9300      	str	r3, [sp, #0]
 80117bc:	462a      	mov	r2, r5
 80117be:	4b0e      	ldr	r3, [pc, #56]	@ (80117f8 <_svfiprintf_r+0x1f0>)
 80117c0:	a904      	add	r1, sp, #16
 80117c2:	4638      	mov	r0, r7
 80117c4:	f7fd fdbe 	bl	800f344 <_printf_float>
 80117c8:	1c42      	adds	r2, r0, #1
 80117ca:	4606      	mov	r6, r0
 80117cc:	d1d6      	bne.n	801177c <_svfiprintf_r+0x174>
 80117ce:	89ab      	ldrh	r3, [r5, #12]
 80117d0:	065b      	lsls	r3, r3, #25
 80117d2:	f53f af2d 	bmi.w	8011630 <_svfiprintf_r+0x28>
 80117d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80117d8:	e72c      	b.n	8011634 <_svfiprintf_r+0x2c>
 80117da:	ab03      	add	r3, sp, #12
 80117dc:	9300      	str	r3, [sp, #0]
 80117de:	462a      	mov	r2, r5
 80117e0:	4b05      	ldr	r3, [pc, #20]	@ (80117f8 <_svfiprintf_r+0x1f0>)
 80117e2:	a904      	add	r1, sp, #16
 80117e4:	4638      	mov	r0, r7
 80117e6:	f7fe f845 	bl	800f874 <_printf_i>
 80117ea:	e7ed      	b.n	80117c8 <_svfiprintf_r+0x1c0>
 80117ec:	08012d8b 	.word	0x08012d8b
 80117f0:	08012d95 	.word	0x08012d95
 80117f4:	0800f345 	.word	0x0800f345
 80117f8:	08011551 	.word	0x08011551
 80117fc:	08012d91 	.word	0x08012d91

08011800 <__sflush_r>:
 8011800:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011808:	0716      	lsls	r6, r2, #28
 801180a:	4605      	mov	r5, r0
 801180c:	460c      	mov	r4, r1
 801180e:	d454      	bmi.n	80118ba <__sflush_r+0xba>
 8011810:	684b      	ldr	r3, [r1, #4]
 8011812:	2b00      	cmp	r3, #0
 8011814:	dc02      	bgt.n	801181c <__sflush_r+0x1c>
 8011816:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011818:	2b00      	cmp	r3, #0
 801181a:	dd48      	ble.n	80118ae <__sflush_r+0xae>
 801181c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801181e:	2e00      	cmp	r6, #0
 8011820:	d045      	beq.n	80118ae <__sflush_r+0xae>
 8011822:	2300      	movs	r3, #0
 8011824:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011828:	682f      	ldr	r7, [r5, #0]
 801182a:	6a21      	ldr	r1, [r4, #32]
 801182c:	602b      	str	r3, [r5, #0]
 801182e:	d030      	beq.n	8011892 <__sflush_r+0x92>
 8011830:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011832:	89a3      	ldrh	r3, [r4, #12]
 8011834:	0759      	lsls	r1, r3, #29
 8011836:	d505      	bpl.n	8011844 <__sflush_r+0x44>
 8011838:	6863      	ldr	r3, [r4, #4]
 801183a:	1ad2      	subs	r2, r2, r3
 801183c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801183e:	b10b      	cbz	r3, 8011844 <__sflush_r+0x44>
 8011840:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011842:	1ad2      	subs	r2, r2, r3
 8011844:	2300      	movs	r3, #0
 8011846:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011848:	6a21      	ldr	r1, [r4, #32]
 801184a:	4628      	mov	r0, r5
 801184c:	47b0      	blx	r6
 801184e:	1c43      	adds	r3, r0, #1
 8011850:	89a3      	ldrh	r3, [r4, #12]
 8011852:	d106      	bne.n	8011862 <__sflush_r+0x62>
 8011854:	6829      	ldr	r1, [r5, #0]
 8011856:	291d      	cmp	r1, #29
 8011858:	d82b      	bhi.n	80118b2 <__sflush_r+0xb2>
 801185a:	4a2a      	ldr	r2, [pc, #168]	@ (8011904 <__sflush_r+0x104>)
 801185c:	40ca      	lsrs	r2, r1
 801185e:	07d6      	lsls	r6, r2, #31
 8011860:	d527      	bpl.n	80118b2 <__sflush_r+0xb2>
 8011862:	2200      	movs	r2, #0
 8011864:	6062      	str	r2, [r4, #4]
 8011866:	04d9      	lsls	r1, r3, #19
 8011868:	6922      	ldr	r2, [r4, #16]
 801186a:	6022      	str	r2, [r4, #0]
 801186c:	d504      	bpl.n	8011878 <__sflush_r+0x78>
 801186e:	1c42      	adds	r2, r0, #1
 8011870:	d101      	bne.n	8011876 <__sflush_r+0x76>
 8011872:	682b      	ldr	r3, [r5, #0]
 8011874:	b903      	cbnz	r3, 8011878 <__sflush_r+0x78>
 8011876:	6560      	str	r0, [r4, #84]	@ 0x54
 8011878:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801187a:	602f      	str	r7, [r5, #0]
 801187c:	b1b9      	cbz	r1, 80118ae <__sflush_r+0xae>
 801187e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011882:	4299      	cmp	r1, r3
 8011884:	d002      	beq.n	801188c <__sflush_r+0x8c>
 8011886:	4628      	mov	r0, r5
 8011888:	f7ff fa9e 	bl	8010dc8 <_free_r>
 801188c:	2300      	movs	r3, #0
 801188e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011890:	e00d      	b.n	80118ae <__sflush_r+0xae>
 8011892:	2301      	movs	r3, #1
 8011894:	4628      	mov	r0, r5
 8011896:	47b0      	blx	r6
 8011898:	4602      	mov	r2, r0
 801189a:	1c50      	adds	r0, r2, #1
 801189c:	d1c9      	bne.n	8011832 <__sflush_r+0x32>
 801189e:	682b      	ldr	r3, [r5, #0]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d0c6      	beq.n	8011832 <__sflush_r+0x32>
 80118a4:	2b1d      	cmp	r3, #29
 80118a6:	d001      	beq.n	80118ac <__sflush_r+0xac>
 80118a8:	2b16      	cmp	r3, #22
 80118aa:	d11e      	bne.n	80118ea <__sflush_r+0xea>
 80118ac:	602f      	str	r7, [r5, #0]
 80118ae:	2000      	movs	r0, #0
 80118b0:	e022      	b.n	80118f8 <__sflush_r+0xf8>
 80118b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80118b6:	b21b      	sxth	r3, r3
 80118b8:	e01b      	b.n	80118f2 <__sflush_r+0xf2>
 80118ba:	690f      	ldr	r7, [r1, #16]
 80118bc:	2f00      	cmp	r7, #0
 80118be:	d0f6      	beq.n	80118ae <__sflush_r+0xae>
 80118c0:	0793      	lsls	r3, r2, #30
 80118c2:	680e      	ldr	r6, [r1, #0]
 80118c4:	bf08      	it	eq
 80118c6:	694b      	ldreq	r3, [r1, #20]
 80118c8:	600f      	str	r7, [r1, #0]
 80118ca:	bf18      	it	ne
 80118cc:	2300      	movne	r3, #0
 80118ce:	eba6 0807 	sub.w	r8, r6, r7
 80118d2:	608b      	str	r3, [r1, #8]
 80118d4:	f1b8 0f00 	cmp.w	r8, #0
 80118d8:	dde9      	ble.n	80118ae <__sflush_r+0xae>
 80118da:	6a21      	ldr	r1, [r4, #32]
 80118dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80118de:	4643      	mov	r3, r8
 80118e0:	463a      	mov	r2, r7
 80118e2:	4628      	mov	r0, r5
 80118e4:	47b0      	blx	r6
 80118e6:	2800      	cmp	r0, #0
 80118e8:	dc08      	bgt.n	80118fc <__sflush_r+0xfc>
 80118ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80118f2:	81a3      	strh	r3, [r4, #12]
 80118f4:	f04f 30ff 	mov.w	r0, #4294967295
 80118f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118fc:	4407      	add	r7, r0
 80118fe:	eba8 0800 	sub.w	r8, r8, r0
 8011902:	e7e7      	b.n	80118d4 <__sflush_r+0xd4>
 8011904:	20400001 	.word	0x20400001

08011908 <_fflush_r>:
 8011908:	b538      	push	{r3, r4, r5, lr}
 801190a:	690b      	ldr	r3, [r1, #16]
 801190c:	4605      	mov	r5, r0
 801190e:	460c      	mov	r4, r1
 8011910:	b913      	cbnz	r3, 8011918 <_fflush_r+0x10>
 8011912:	2500      	movs	r5, #0
 8011914:	4628      	mov	r0, r5
 8011916:	bd38      	pop	{r3, r4, r5, pc}
 8011918:	b118      	cbz	r0, 8011922 <_fflush_r+0x1a>
 801191a:	6a03      	ldr	r3, [r0, #32]
 801191c:	b90b      	cbnz	r3, 8011922 <_fflush_r+0x1a>
 801191e:	f7fe f953 	bl	800fbc8 <__sinit>
 8011922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d0f3      	beq.n	8011912 <_fflush_r+0xa>
 801192a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801192c:	07d0      	lsls	r0, r2, #31
 801192e:	d404      	bmi.n	801193a <_fflush_r+0x32>
 8011930:	0599      	lsls	r1, r3, #22
 8011932:	d402      	bmi.n	801193a <_fflush_r+0x32>
 8011934:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011936:	f7fe fbdc 	bl	80100f2 <__retarget_lock_acquire_recursive>
 801193a:	4628      	mov	r0, r5
 801193c:	4621      	mov	r1, r4
 801193e:	f7ff ff5f 	bl	8011800 <__sflush_r>
 8011942:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011944:	07da      	lsls	r2, r3, #31
 8011946:	4605      	mov	r5, r0
 8011948:	d4e4      	bmi.n	8011914 <_fflush_r+0xc>
 801194a:	89a3      	ldrh	r3, [r4, #12]
 801194c:	059b      	lsls	r3, r3, #22
 801194e:	d4e1      	bmi.n	8011914 <_fflush_r+0xc>
 8011950:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011952:	f7fe fbcf 	bl	80100f4 <__retarget_lock_release_recursive>
 8011956:	e7dd      	b.n	8011914 <_fflush_r+0xc>

08011958 <__swhatbuf_r>:
 8011958:	b570      	push	{r4, r5, r6, lr}
 801195a:	460c      	mov	r4, r1
 801195c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011960:	2900      	cmp	r1, #0
 8011962:	b096      	sub	sp, #88	@ 0x58
 8011964:	4615      	mov	r5, r2
 8011966:	461e      	mov	r6, r3
 8011968:	da0d      	bge.n	8011986 <__swhatbuf_r+0x2e>
 801196a:	89a3      	ldrh	r3, [r4, #12]
 801196c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011970:	f04f 0100 	mov.w	r1, #0
 8011974:	bf14      	ite	ne
 8011976:	2340      	movne	r3, #64	@ 0x40
 8011978:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801197c:	2000      	movs	r0, #0
 801197e:	6031      	str	r1, [r6, #0]
 8011980:	602b      	str	r3, [r5, #0]
 8011982:	b016      	add	sp, #88	@ 0x58
 8011984:	bd70      	pop	{r4, r5, r6, pc}
 8011986:	466a      	mov	r2, sp
 8011988:	f000 f862 	bl	8011a50 <_fstat_r>
 801198c:	2800      	cmp	r0, #0
 801198e:	dbec      	blt.n	801196a <__swhatbuf_r+0x12>
 8011990:	9901      	ldr	r1, [sp, #4]
 8011992:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011996:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801199a:	4259      	negs	r1, r3
 801199c:	4159      	adcs	r1, r3
 801199e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80119a2:	e7eb      	b.n	801197c <__swhatbuf_r+0x24>

080119a4 <__smakebuf_r>:
 80119a4:	898b      	ldrh	r3, [r1, #12]
 80119a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80119a8:	079d      	lsls	r5, r3, #30
 80119aa:	4606      	mov	r6, r0
 80119ac:	460c      	mov	r4, r1
 80119ae:	d507      	bpl.n	80119c0 <__smakebuf_r+0x1c>
 80119b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80119b4:	6023      	str	r3, [r4, #0]
 80119b6:	6123      	str	r3, [r4, #16]
 80119b8:	2301      	movs	r3, #1
 80119ba:	6163      	str	r3, [r4, #20]
 80119bc:	b003      	add	sp, #12
 80119be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119c0:	ab01      	add	r3, sp, #4
 80119c2:	466a      	mov	r2, sp
 80119c4:	f7ff ffc8 	bl	8011958 <__swhatbuf_r>
 80119c8:	9f00      	ldr	r7, [sp, #0]
 80119ca:	4605      	mov	r5, r0
 80119cc:	4639      	mov	r1, r7
 80119ce:	4630      	mov	r0, r6
 80119d0:	f7fd fb08 	bl	800efe4 <_malloc_r>
 80119d4:	b948      	cbnz	r0, 80119ea <__smakebuf_r+0x46>
 80119d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119da:	059a      	lsls	r2, r3, #22
 80119dc:	d4ee      	bmi.n	80119bc <__smakebuf_r+0x18>
 80119de:	f023 0303 	bic.w	r3, r3, #3
 80119e2:	f043 0302 	orr.w	r3, r3, #2
 80119e6:	81a3      	strh	r3, [r4, #12]
 80119e8:	e7e2      	b.n	80119b0 <__smakebuf_r+0xc>
 80119ea:	89a3      	ldrh	r3, [r4, #12]
 80119ec:	6020      	str	r0, [r4, #0]
 80119ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80119f2:	81a3      	strh	r3, [r4, #12]
 80119f4:	9b01      	ldr	r3, [sp, #4]
 80119f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80119fa:	b15b      	cbz	r3, 8011a14 <__smakebuf_r+0x70>
 80119fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a00:	4630      	mov	r0, r6
 8011a02:	f000 f837 	bl	8011a74 <_isatty_r>
 8011a06:	b128      	cbz	r0, 8011a14 <__smakebuf_r+0x70>
 8011a08:	89a3      	ldrh	r3, [r4, #12]
 8011a0a:	f023 0303 	bic.w	r3, r3, #3
 8011a0e:	f043 0301 	orr.w	r3, r3, #1
 8011a12:	81a3      	strh	r3, [r4, #12]
 8011a14:	89a3      	ldrh	r3, [r4, #12]
 8011a16:	431d      	orrs	r5, r3
 8011a18:	81a5      	strh	r5, [r4, #12]
 8011a1a:	e7cf      	b.n	80119bc <__smakebuf_r+0x18>

08011a1c <memmove>:
 8011a1c:	4288      	cmp	r0, r1
 8011a1e:	b510      	push	{r4, lr}
 8011a20:	eb01 0402 	add.w	r4, r1, r2
 8011a24:	d902      	bls.n	8011a2c <memmove+0x10>
 8011a26:	4284      	cmp	r4, r0
 8011a28:	4623      	mov	r3, r4
 8011a2a:	d807      	bhi.n	8011a3c <memmove+0x20>
 8011a2c:	1e43      	subs	r3, r0, #1
 8011a2e:	42a1      	cmp	r1, r4
 8011a30:	d008      	beq.n	8011a44 <memmove+0x28>
 8011a32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011a36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011a3a:	e7f8      	b.n	8011a2e <memmove+0x12>
 8011a3c:	4402      	add	r2, r0
 8011a3e:	4601      	mov	r1, r0
 8011a40:	428a      	cmp	r2, r1
 8011a42:	d100      	bne.n	8011a46 <memmove+0x2a>
 8011a44:	bd10      	pop	{r4, pc}
 8011a46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011a4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011a4e:	e7f7      	b.n	8011a40 <memmove+0x24>

08011a50 <_fstat_r>:
 8011a50:	b538      	push	{r3, r4, r5, lr}
 8011a52:	4d07      	ldr	r5, [pc, #28]	@ (8011a70 <_fstat_r+0x20>)
 8011a54:	2300      	movs	r3, #0
 8011a56:	4604      	mov	r4, r0
 8011a58:	4608      	mov	r0, r1
 8011a5a:	4611      	mov	r1, r2
 8011a5c:	602b      	str	r3, [r5, #0]
 8011a5e:	f7f4 f983 	bl	8005d68 <_fstat>
 8011a62:	1c43      	adds	r3, r0, #1
 8011a64:	d102      	bne.n	8011a6c <_fstat_r+0x1c>
 8011a66:	682b      	ldr	r3, [r5, #0]
 8011a68:	b103      	cbz	r3, 8011a6c <_fstat_r+0x1c>
 8011a6a:	6023      	str	r3, [r4, #0]
 8011a6c:	bd38      	pop	{r3, r4, r5, pc}
 8011a6e:	bf00      	nop
 8011a70:	200056a0 	.word	0x200056a0

08011a74 <_isatty_r>:
 8011a74:	b538      	push	{r3, r4, r5, lr}
 8011a76:	4d06      	ldr	r5, [pc, #24]	@ (8011a90 <_isatty_r+0x1c>)
 8011a78:	2300      	movs	r3, #0
 8011a7a:	4604      	mov	r4, r0
 8011a7c:	4608      	mov	r0, r1
 8011a7e:	602b      	str	r3, [r5, #0]
 8011a80:	f7f4 f982 	bl	8005d88 <_isatty>
 8011a84:	1c43      	adds	r3, r0, #1
 8011a86:	d102      	bne.n	8011a8e <_isatty_r+0x1a>
 8011a88:	682b      	ldr	r3, [r5, #0]
 8011a8a:	b103      	cbz	r3, 8011a8e <_isatty_r+0x1a>
 8011a8c:	6023      	str	r3, [r4, #0]
 8011a8e:	bd38      	pop	{r3, r4, r5, pc}
 8011a90:	200056a0 	.word	0x200056a0

08011a94 <__assert_func>:
 8011a94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011a96:	4614      	mov	r4, r2
 8011a98:	461a      	mov	r2, r3
 8011a9a:	4b09      	ldr	r3, [pc, #36]	@ (8011ac0 <__assert_func+0x2c>)
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	4605      	mov	r5, r0
 8011aa0:	68d8      	ldr	r0, [r3, #12]
 8011aa2:	b14c      	cbz	r4, 8011ab8 <__assert_func+0x24>
 8011aa4:	4b07      	ldr	r3, [pc, #28]	@ (8011ac4 <__assert_func+0x30>)
 8011aa6:	9100      	str	r1, [sp, #0]
 8011aa8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011aac:	4906      	ldr	r1, [pc, #24]	@ (8011ac8 <__assert_func+0x34>)
 8011aae:	462b      	mov	r3, r5
 8011ab0:	f000 f870 	bl	8011b94 <fiprintf>
 8011ab4:	f7fd fa64 	bl	800ef80 <abort>
 8011ab8:	4b04      	ldr	r3, [pc, #16]	@ (8011acc <__assert_func+0x38>)
 8011aba:	461c      	mov	r4, r3
 8011abc:	e7f3      	b.n	8011aa6 <__assert_func+0x12>
 8011abe:	bf00      	nop
 8011ac0:	20000020 	.word	0x20000020
 8011ac4:	08012da6 	.word	0x08012da6
 8011ac8:	08012db3 	.word	0x08012db3
 8011acc:	08012de1 	.word	0x08012de1

08011ad0 <_calloc_r>:
 8011ad0:	b570      	push	{r4, r5, r6, lr}
 8011ad2:	fba1 5402 	umull	r5, r4, r1, r2
 8011ad6:	b934      	cbnz	r4, 8011ae6 <_calloc_r+0x16>
 8011ad8:	4629      	mov	r1, r5
 8011ada:	f7fd fa83 	bl	800efe4 <_malloc_r>
 8011ade:	4606      	mov	r6, r0
 8011ae0:	b928      	cbnz	r0, 8011aee <_calloc_r+0x1e>
 8011ae2:	4630      	mov	r0, r6
 8011ae4:	bd70      	pop	{r4, r5, r6, pc}
 8011ae6:	220c      	movs	r2, #12
 8011ae8:	6002      	str	r2, [r0, #0]
 8011aea:	2600      	movs	r6, #0
 8011aec:	e7f9      	b.n	8011ae2 <_calloc_r+0x12>
 8011aee:	462a      	mov	r2, r5
 8011af0:	4621      	mov	r1, r4
 8011af2:	f7fe fa2d 	bl	800ff50 <memset>
 8011af6:	e7f4      	b.n	8011ae2 <_calloc_r+0x12>

08011af8 <__ascii_mbtowc>:
 8011af8:	b082      	sub	sp, #8
 8011afa:	b901      	cbnz	r1, 8011afe <__ascii_mbtowc+0x6>
 8011afc:	a901      	add	r1, sp, #4
 8011afe:	b142      	cbz	r2, 8011b12 <__ascii_mbtowc+0x1a>
 8011b00:	b14b      	cbz	r3, 8011b16 <__ascii_mbtowc+0x1e>
 8011b02:	7813      	ldrb	r3, [r2, #0]
 8011b04:	600b      	str	r3, [r1, #0]
 8011b06:	7812      	ldrb	r2, [r2, #0]
 8011b08:	1e10      	subs	r0, r2, #0
 8011b0a:	bf18      	it	ne
 8011b0c:	2001      	movne	r0, #1
 8011b0e:	b002      	add	sp, #8
 8011b10:	4770      	bx	lr
 8011b12:	4610      	mov	r0, r2
 8011b14:	e7fb      	b.n	8011b0e <__ascii_mbtowc+0x16>
 8011b16:	f06f 0001 	mvn.w	r0, #1
 8011b1a:	e7f8      	b.n	8011b0e <__ascii_mbtowc+0x16>

08011b1c <_realloc_r>:
 8011b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b20:	4607      	mov	r7, r0
 8011b22:	4614      	mov	r4, r2
 8011b24:	460d      	mov	r5, r1
 8011b26:	b921      	cbnz	r1, 8011b32 <_realloc_r+0x16>
 8011b28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b2c:	4611      	mov	r1, r2
 8011b2e:	f7fd ba59 	b.w	800efe4 <_malloc_r>
 8011b32:	b92a      	cbnz	r2, 8011b40 <_realloc_r+0x24>
 8011b34:	f7ff f948 	bl	8010dc8 <_free_r>
 8011b38:	4625      	mov	r5, r4
 8011b3a:	4628      	mov	r0, r5
 8011b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b40:	f000 f83a 	bl	8011bb8 <_malloc_usable_size_r>
 8011b44:	4284      	cmp	r4, r0
 8011b46:	4606      	mov	r6, r0
 8011b48:	d802      	bhi.n	8011b50 <_realloc_r+0x34>
 8011b4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011b4e:	d8f4      	bhi.n	8011b3a <_realloc_r+0x1e>
 8011b50:	4621      	mov	r1, r4
 8011b52:	4638      	mov	r0, r7
 8011b54:	f7fd fa46 	bl	800efe4 <_malloc_r>
 8011b58:	4680      	mov	r8, r0
 8011b5a:	b908      	cbnz	r0, 8011b60 <_realloc_r+0x44>
 8011b5c:	4645      	mov	r5, r8
 8011b5e:	e7ec      	b.n	8011b3a <_realloc_r+0x1e>
 8011b60:	42b4      	cmp	r4, r6
 8011b62:	4622      	mov	r2, r4
 8011b64:	4629      	mov	r1, r5
 8011b66:	bf28      	it	cs
 8011b68:	4632      	movcs	r2, r6
 8011b6a:	f7fe fac4 	bl	80100f6 <memcpy>
 8011b6e:	4629      	mov	r1, r5
 8011b70:	4638      	mov	r0, r7
 8011b72:	f7ff f929 	bl	8010dc8 <_free_r>
 8011b76:	e7f1      	b.n	8011b5c <_realloc_r+0x40>

08011b78 <__ascii_wctomb>:
 8011b78:	4603      	mov	r3, r0
 8011b7a:	4608      	mov	r0, r1
 8011b7c:	b141      	cbz	r1, 8011b90 <__ascii_wctomb+0x18>
 8011b7e:	2aff      	cmp	r2, #255	@ 0xff
 8011b80:	d904      	bls.n	8011b8c <__ascii_wctomb+0x14>
 8011b82:	228a      	movs	r2, #138	@ 0x8a
 8011b84:	601a      	str	r2, [r3, #0]
 8011b86:	f04f 30ff 	mov.w	r0, #4294967295
 8011b8a:	4770      	bx	lr
 8011b8c:	700a      	strb	r2, [r1, #0]
 8011b8e:	2001      	movs	r0, #1
 8011b90:	4770      	bx	lr
	...

08011b94 <fiprintf>:
 8011b94:	b40e      	push	{r1, r2, r3}
 8011b96:	b503      	push	{r0, r1, lr}
 8011b98:	4601      	mov	r1, r0
 8011b9a:	ab03      	add	r3, sp, #12
 8011b9c:	4805      	ldr	r0, [pc, #20]	@ (8011bb4 <fiprintf+0x20>)
 8011b9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ba2:	6800      	ldr	r0, [r0, #0]
 8011ba4:	9301      	str	r3, [sp, #4]
 8011ba6:	f000 f839 	bl	8011c1c <_vfiprintf_r>
 8011baa:	b002      	add	sp, #8
 8011bac:	f85d eb04 	ldr.w	lr, [sp], #4
 8011bb0:	b003      	add	sp, #12
 8011bb2:	4770      	bx	lr
 8011bb4:	20000020 	.word	0x20000020

08011bb8 <_malloc_usable_size_r>:
 8011bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011bbc:	1f18      	subs	r0, r3, #4
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	bfbc      	itt	lt
 8011bc2:	580b      	ldrlt	r3, [r1, r0]
 8011bc4:	18c0      	addlt	r0, r0, r3
 8011bc6:	4770      	bx	lr

08011bc8 <__sfputc_r>:
 8011bc8:	6893      	ldr	r3, [r2, #8]
 8011bca:	3b01      	subs	r3, #1
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	b410      	push	{r4}
 8011bd0:	6093      	str	r3, [r2, #8]
 8011bd2:	da08      	bge.n	8011be6 <__sfputc_r+0x1e>
 8011bd4:	6994      	ldr	r4, [r2, #24]
 8011bd6:	42a3      	cmp	r3, r4
 8011bd8:	db01      	blt.n	8011bde <__sfputc_r+0x16>
 8011bda:	290a      	cmp	r1, #10
 8011bdc:	d103      	bne.n	8011be6 <__sfputc_r+0x1e>
 8011bde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011be2:	f7fe b920 	b.w	800fe26 <__swbuf_r>
 8011be6:	6813      	ldr	r3, [r2, #0]
 8011be8:	1c58      	adds	r0, r3, #1
 8011bea:	6010      	str	r0, [r2, #0]
 8011bec:	7019      	strb	r1, [r3, #0]
 8011bee:	4608      	mov	r0, r1
 8011bf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011bf4:	4770      	bx	lr

08011bf6 <__sfputs_r>:
 8011bf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bf8:	4606      	mov	r6, r0
 8011bfa:	460f      	mov	r7, r1
 8011bfc:	4614      	mov	r4, r2
 8011bfe:	18d5      	adds	r5, r2, r3
 8011c00:	42ac      	cmp	r4, r5
 8011c02:	d101      	bne.n	8011c08 <__sfputs_r+0x12>
 8011c04:	2000      	movs	r0, #0
 8011c06:	e007      	b.n	8011c18 <__sfputs_r+0x22>
 8011c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c0c:	463a      	mov	r2, r7
 8011c0e:	4630      	mov	r0, r6
 8011c10:	f7ff ffda 	bl	8011bc8 <__sfputc_r>
 8011c14:	1c43      	adds	r3, r0, #1
 8011c16:	d1f3      	bne.n	8011c00 <__sfputs_r+0xa>
 8011c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011c1c <_vfiprintf_r>:
 8011c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c20:	460d      	mov	r5, r1
 8011c22:	b09d      	sub	sp, #116	@ 0x74
 8011c24:	4614      	mov	r4, r2
 8011c26:	4698      	mov	r8, r3
 8011c28:	4606      	mov	r6, r0
 8011c2a:	b118      	cbz	r0, 8011c34 <_vfiprintf_r+0x18>
 8011c2c:	6a03      	ldr	r3, [r0, #32]
 8011c2e:	b90b      	cbnz	r3, 8011c34 <_vfiprintf_r+0x18>
 8011c30:	f7fd ffca 	bl	800fbc8 <__sinit>
 8011c34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011c36:	07d9      	lsls	r1, r3, #31
 8011c38:	d405      	bmi.n	8011c46 <_vfiprintf_r+0x2a>
 8011c3a:	89ab      	ldrh	r3, [r5, #12]
 8011c3c:	059a      	lsls	r2, r3, #22
 8011c3e:	d402      	bmi.n	8011c46 <_vfiprintf_r+0x2a>
 8011c40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011c42:	f7fe fa56 	bl	80100f2 <__retarget_lock_acquire_recursive>
 8011c46:	89ab      	ldrh	r3, [r5, #12]
 8011c48:	071b      	lsls	r3, r3, #28
 8011c4a:	d501      	bpl.n	8011c50 <_vfiprintf_r+0x34>
 8011c4c:	692b      	ldr	r3, [r5, #16]
 8011c4e:	b99b      	cbnz	r3, 8011c78 <_vfiprintf_r+0x5c>
 8011c50:	4629      	mov	r1, r5
 8011c52:	4630      	mov	r0, r6
 8011c54:	f7fe f926 	bl	800fea4 <__swsetup_r>
 8011c58:	b170      	cbz	r0, 8011c78 <_vfiprintf_r+0x5c>
 8011c5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011c5c:	07dc      	lsls	r4, r3, #31
 8011c5e:	d504      	bpl.n	8011c6a <_vfiprintf_r+0x4e>
 8011c60:	f04f 30ff 	mov.w	r0, #4294967295
 8011c64:	b01d      	add	sp, #116	@ 0x74
 8011c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c6a:	89ab      	ldrh	r3, [r5, #12]
 8011c6c:	0598      	lsls	r0, r3, #22
 8011c6e:	d4f7      	bmi.n	8011c60 <_vfiprintf_r+0x44>
 8011c70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011c72:	f7fe fa3f 	bl	80100f4 <__retarget_lock_release_recursive>
 8011c76:	e7f3      	b.n	8011c60 <_vfiprintf_r+0x44>
 8011c78:	2300      	movs	r3, #0
 8011c7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c7c:	2320      	movs	r3, #32
 8011c7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011c82:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c86:	2330      	movs	r3, #48	@ 0x30
 8011c88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011e38 <_vfiprintf_r+0x21c>
 8011c8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011c90:	f04f 0901 	mov.w	r9, #1
 8011c94:	4623      	mov	r3, r4
 8011c96:	469a      	mov	sl, r3
 8011c98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c9c:	b10a      	cbz	r2, 8011ca2 <_vfiprintf_r+0x86>
 8011c9e:	2a25      	cmp	r2, #37	@ 0x25
 8011ca0:	d1f9      	bne.n	8011c96 <_vfiprintf_r+0x7a>
 8011ca2:	ebba 0b04 	subs.w	fp, sl, r4
 8011ca6:	d00b      	beq.n	8011cc0 <_vfiprintf_r+0xa4>
 8011ca8:	465b      	mov	r3, fp
 8011caa:	4622      	mov	r2, r4
 8011cac:	4629      	mov	r1, r5
 8011cae:	4630      	mov	r0, r6
 8011cb0:	f7ff ffa1 	bl	8011bf6 <__sfputs_r>
 8011cb4:	3001      	adds	r0, #1
 8011cb6:	f000 80a7 	beq.w	8011e08 <_vfiprintf_r+0x1ec>
 8011cba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011cbc:	445a      	add	r2, fp
 8011cbe:	9209      	str	r2, [sp, #36]	@ 0x24
 8011cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	f000 809f 	beq.w	8011e08 <_vfiprintf_r+0x1ec>
 8011cca:	2300      	movs	r3, #0
 8011ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8011cd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011cd4:	f10a 0a01 	add.w	sl, sl, #1
 8011cd8:	9304      	str	r3, [sp, #16]
 8011cda:	9307      	str	r3, [sp, #28]
 8011cdc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011ce0:	931a      	str	r3, [sp, #104]	@ 0x68
 8011ce2:	4654      	mov	r4, sl
 8011ce4:	2205      	movs	r2, #5
 8011ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cea:	4853      	ldr	r0, [pc, #332]	@ (8011e38 <_vfiprintf_r+0x21c>)
 8011cec:	f7ee fa70 	bl	80001d0 <memchr>
 8011cf0:	9a04      	ldr	r2, [sp, #16]
 8011cf2:	b9d8      	cbnz	r0, 8011d2c <_vfiprintf_r+0x110>
 8011cf4:	06d1      	lsls	r1, r2, #27
 8011cf6:	bf44      	itt	mi
 8011cf8:	2320      	movmi	r3, #32
 8011cfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011cfe:	0713      	lsls	r3, r2, #28
 8011d00:	bf44      	itt	mi
 8011d02:	232b      	movmi	r3, #43	@ 0x2b
 8011d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d08:	f89a 3000 	ldrb.w	r3, [sl]
 8011d0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d0e:	d015      	beq.n	8011d3c <_vfiprintf_r+0x120>
 8011d10:	9a07      	ldr	r2, [sp, #28]
 8011d12:	4654      	mov	r4, sl
 8011d14:	2000      	movs	r0, #0
 8011d16:	f04f 0c0a 	mov.w	ip, #10
 8011d1a:	4621      	mov	r1, r4
 8011d1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d20:	3b30      	subs	r3, #48	@ 0x30
 8011d22:	2b09      	cmp	r3, #9
 8011d24:	d94b      	bls.n	8011dbe <_vfiprintf_r+0x1a2>
 8011d26:	b1b0      	cbz	r0, 8011d56 <_vfiprintf_r+0x13a>
 8011d28:	9207      	str	r2, [sp, #28]
 8011d2a:	e014      	b.n	8011d56 <_vfiprintf_r+0x13a>
 8011d2c:	eba0 0308 	sub.w	r3, r0, r8
 8011d30:	fa09 f303 	lsl.w	r3, r9, r3
 8011d34:	4313      	orrs	r3, r2
 8011d36:	9304      	str	r3, [sp, #16]
 8011d38:	46a2      	mov	sl, r4
 8011d3a:	e7d2      	b.n	8011ce2 <_vfiprintf_r+0xc6>
 8011d3c:	9b03      	ldr	r3, [sp, #12]
 8011d3e:	1d19      	adds	r1, r3, #4
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	9103      	str	r1, [sp, #12]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	bfbb      	ittet	lt
 8011d48:	425b      	neglt	r3, r3
 8011d4a:	f042 0202 	orrlt.w	r2, r2, #2
 8011d4e:	9307      	strge	r3, [sp, #28]
 8011d50:	9307      	strlt	r3, [sp, #28]
 8011d52:	bfb8      	it	lt
 8011d54:	9204      	strlt	r2, [sp, #16]
 8011d56:	7823      	ldrb	r3, [r4, #0]
 8011d58:	2b2e      	cmp	r3, #46	@ 0x2e
 8011d5a:	d10a      	bne.n	8011d72 <_vfiprintf_r+0x156>
 8011d5c:	7863      	ldrb	r3, [r4, #1]
 8011d5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d60:	d132      	bne.n	8011dc8 <_vfiprintf_r+0x1ac>
 8011d62:	9b03      	ldr	r3, [sp, #12]
 8011d64:	1d1a      	adds	r2, r3, #4
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	9203      	str	r2, [sp, #12]
 8011d6a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011d6e:	3402      	adds	r4, #2
 8011d70:	9305      	str	r3, [sp, #20]
 8011d72:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011e48 <_vfiprintf_r+0x22c>
 8011d76:	7821      	ldrb	r1, [r4, #0]
 8011d78:	2203      	movs	r2, #3
 8011d7a:	4650      	mov	r0, sl
 8011d7c:	f7ee fa28 	bl	80001d0 <memchr>
 8011d80:	b138      	cbz	r0, 8011d92 <_vfiprintf_r+0x176>
 8011d82:	9b04      	ldr	r3, [sp, #16]
 8011d84:	eba0 000a 	sub.w	r0, r0, sl
 8011d88:	2240      	movs	r2, #64	@ 0x40
 8011d8a:	4082      	lsls	r2, r0
 8011d8c:	4313      	orrs	r3, r2
 8011d8e:	3401      	adds	r4, #1
 8011d90:	9304      	str	r3, [sp, #16]
 8011d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d96:	4829      	ldr	r0, [pc, #164]	@ (8011e3c <_vfiprintf_r+0x220>)
 8011d98:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011d9c:	2206      	movs	r2, #6
 8011d9e:	f7ee fa17 	bl	80001d0 <memchr>
 8011da2:	2800      	cmp	r0, #0
 8011da4:	d03f      	beq.n	8011e26 <_vfiprintf_r+0x20a>
 8011da6:	4b26      	ldr	r3, [pc, #152]	@ (8011e40 <_vfiprintf_r+0x224>)
 8011da8:	bb1b      	cbnz	r3, 8011df2 <_vfiprintf_r+0x1d6>
 8011daa:	9b03      	ldr	r3, [sp, #12]
 8011dac:	3307      	adds	r3, #7
 8011dae:	f023 0307 	bic.w	r3, r3, #7
 8011db2:	3308      	adds	r3, #8
 8011db4:	9303      	str	r3, [sp, #12]
 8011db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011db8:	443b      	add	r3, r7
 8011dba:	9309      	str	r3, [sp, #36]	@ 0x24
 8011dbc:	e76a      	b.n	8011c94 <_vfiprintf_r+0x78>
 8011dbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8011dc2:	460c      	mov	r4, r1
 8011dc4:	2001      	movs	r0, #1
 8011dc6:	e7a8      	b.n	8011d1a <_vfiprintf_r+0xfe>
 8011dc8:	2300      	movs	r3, #0
 8011dca:	3401      	adds	r4, #1
 8011dcc:	9305      	str	r3, [sp, #20]
 8011dce:	4619      	mov	r1, r3
 8011dd0:	f04f 0c0a 	mov.w	ip, #10
 8011dd4:	4620      	mov	r0, r4
 8011dd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011dda:	3a30      	subs	r2, #48	@ 0x30
 8011ddc:	2a09      	cmp	r2, #9
 8011dde:	d903      	bls.n	8011de8 <_vfiprintf_r+0x1cc>
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d0c6      	beq.n	8011d72 <_vfiprintf_r+0x156>
 8011de4:	9105      	str	r1, [sp, #20]
 8011de6:	e7c4      	b.n	8011d72 <_vfiprintf_r+0x156>
 8011de8:	fb0c 2101 	mla	r1, ip, r1, r2
 8011dec:	4604      	mov	r4, r0
 8011dee:	2301      	movs	r3, #1
 8011df0:	e7f0      	b.n	8011dd4 <_vfiprintf_r+0x1b8>
 8011df2:	ab03      	add	r3, sp, #12
 8011df4:	9300      	str	r3, [sp, #0]
 8011df6:	462a      	mov	r2, r5
 8011df8:	4b12      	ldr	r3, [pc, #72]	@ (8011e44 <_vfiprintf_r+0x228>)
 8011dfa:	a904      	add	r1, sp, #16
 8011dfc:	4630      	mov	r0, r6
 8011dfe:	f7fd faa1 	bl	800f344 <_printf_float>
 8011e02:	4607      	mov	r7, r0
 8011e04:	1c78      	adds	r0, r7, #1
 8011e06:	d1d6      	bne.n	8011db6 <_vfiprintf_r+0x19a>
 8011e08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e0a:	07d9      	lsls	r1, r3, #31
 8011e0c:	d405      	bmi.n	8011e1a <_vfiprintf_r+0x1fe>
 8011e0e:	89ab      	ldrh	r3, [r5, #12]
 8011e10:	059a      	lsls	r2, r3, #22
 8011e12:	d402      	bmi.n	8011e1a <_vfiprintf_r+0x1fe>
 8011e14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e16:	f7fe f96d 	bl	80100f4 <__retarget_lock_release_recursive>
 8011e1a:	89ab      	ldrh	r3, [r5, #12]
 8011e1c:	065b      	lsls	r3, r3, #25
 8011e1e:	f53f af1f 	bmi.w	8011c60 <_vfiprintf_r+0x44>
 8011e22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011e24:	e71e      	b.n	8011c64 <_vfiprintf_r+0x48>
 8011e26:	ab03      	add	r3, sp, #12
 8011e28:	9300      	str	r3, [sp, #0]
 8011e2a:	462a      	mov	r2, r5
 8011e2c:	4b05      	ldr	r3, [pc, #20]	@ (8011e44 <_vfiprintf_r+0x228>)
 8011e2e:	a904      	add	r1, sp, #16
 8011e30:	4630      	mov	r0, r6
 8011e32:	f7fd fd1f 	bl	800f874 <_printf_i>
 8011e36:	e7e4      	b.n	8011e02 <_vfiprintf_r+0x1e6>
 8011e38:	08012d8b 	.word	0x08012d8b
 8011e3c:	08012d95 	.word	0x08012d95
 8011e40:	0800f345 	.word	0x0800f345
 8011e44:	08011bf7 	.word	0x08011bf7
 8011e48:	08012d91 	.word	0x08012d91

08011e4c <_init>:
 8011e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e4e:	bf00      	nop
 8011e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e52:	bc08      	pop	{r3}
 8011e54:	469e      	mov	lr, r3
 8011e56:	4770      	bx	lr

08011e58 <_fini>:
 8011e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e5a:	bf00      	nop
 8011e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e5e:	bc08      	pop	{r3}
 8011e60:	469e      	mov	lr, r3
 8011e62:	4770      	bx	lr
