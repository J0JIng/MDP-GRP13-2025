
STM32_MDP_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000134b4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010d0  08013648  08013648  00014648  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014718  08014718  000161dc  2**0
                  CONTENTS
  4 .ARM          00000008  08014718  08014718  00015718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014720  08014720  000161dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014720  08014720  00015720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08014728  08014728  00015728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08014730  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000161dc  2**0
                  CONTENTS
 10 .bss          00005548  200001dc  200001dc  000161dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005724  20005724  000161dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000161dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b4fc  00000000  00000000  0001620c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000062be  00000000  00000000  00041708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e58  00000000  00000000  000479c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000179c  00000000  00000000  00049820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cf37  00000000  00000000  0004afbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028b02  00000000  00000000  00077ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed981  00000000  00000000  000a09f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0018e376  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009280  00000000  00000000  0018e3bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000088  00000000  00000000  0019763c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801362c 	.word	0x0801362c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0801362c 	.word	0x0801362c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <IMU_Initialise>:
int16_t gyro_offset[3] = { 0 }; // gyro_offset value calibrated by Gyro_calibrate()

/*
 * INITIALISATION
 */
uint8_t* IMU_Initialise(ICM20948 *dev, I2C_HandleTypeDef *i2cHandle) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]

	char hex[2];
	uint8_t regData;

	dev->i2cHandle = i2cHandle;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	601a      	str	r2, [r3, #0]
	 buf[0] = REG_ADD_REG_BANK_SEL;  // bank select register
	 buf[1] = REG_VAL_REG_BANK_0;           // bank 0
	 ret = HAL_I2C_Master_Transmit(i2cHandle, IMU_ADDR, buf, I2C_MEMADD_SIZE_16BIT, 10);

	 */
	ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	217f      	movs	r1, #127	@ 0x7f
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f000 f8b3 	bl	8001134 <IMU_WriteOneByte>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b57      	ldr	r3, [pc, #348]	@ (8001130 <IMU_Initialise+0x17c>)
 8000fd4:	701a      	strb	r2, [r3, #0]


	//check ID
	/*	  buf[0] = REG_WHO_AM_I;  //(Should return ID =  0xEA)
	 ret = HAL_I2C_Mem_Read(i2cHandle, IMU_ADDR, REG_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, buf, I2C_MEMADD_SIZE_8BIT, 10);  */
	ret = IMU_ReadOneByte(dev, REG_WHO_AM_I, &regData);
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	f107 030b 	add.w	r3, r7, #11
 8000fdc:	461a      	mov	r2, r3
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 f8c4 	bl	800116c <IMU_ReadOneByte>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4b51      	ldr	r3, [pc, #324]	@ (8001130 <IMU_Initialise+0x17c>)
 8000fea:	701a      	strb	r2, [r3, #0]

	// Initialize
	// Bank 0 - Reset the device and then auto selects the best available clock source
	ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 8000fec:	2200      	movs	r2, #0
 8000fee:	217f      	movs	r1, #127	@ 0x7f
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 f89f 	bl	8001134 <IMU_WriteOneByte>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b4d      	ldr	r3, [pc, #308]	@ (8001130 <IMU_Initialise+0x17c>)
 8000ffc:	701a      	strb	r2, [r3, #0]

	//ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_1, REG_VAL_ALL_RGE_RESET); // reset device - check header file value should be 0xF1

	HAL_Delay(10);
 8000ffe:	200a      	movs	r0, #10
 8001000:	f005 fb28 	bl	8006654 <HAL_Delay>
	ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_1, REG_VAL_RUN_MODE); // auto selects the best available clock source for device
 8001004:	2201      	movs	r2, #1
 8001006:	2106      	movs	r1, #6
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 f893 	bl	8001134 <IMU_WriteOneByte>
 800100e:	4603      	mov	r3, r0
 8001010:	461a      	mov	r2, r3
 8001012:	4b47      	ldr	r3, [pc, #284]	@ (8001130 <IMU_Initialise+0x17c>)
 8001014:	701a      	strb	r2, [r3, #0]

	// Turn off and on Accelator and Gyro - page 28
	HAL_Delay(10);
 8001016:	200a      	movs	r0, #10
 8001018:	f005 fb1c 	bl	8006654 <HAL_Delay>
	ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_2, REG_VAL_ACCEL_GYROLL_OFF); // OFF
 800101c:	223f      	movs	r2, #63	@ 0x3f
 800101e:	2107      	movs	r1, #7
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f000 f887 	bl	8001134 <IMU_WriteOneByte>
 8001026:	4603      	mov	r3, r0
 8001028:	461a      	mov	r2, r3
 800102a:	4b41      	ldr	r3, [pc, #260]	@ (8001130 <IMU_Initialise+0x17c>)
 800102c:	701a      	strb	r2, [r3, #0]

	HAL_Delay(10);
 800102e:	200a      	movs	r0, #10
 8001030:	f005 fb10 	bl	8006654 <HAL_Delay>
	ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_2, REG_VAL_ACCEL_GYROLL_ON); // ON
 8001034:	2200      	movs	r2, #0
 8001036:	2107      	movs	r1, #7
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 f87b 	bl	8001134 <IMU_WriteOneByte>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	4b3b      	ldr	r3, [pc, #236]	@ (8001130 <IMU_Initialise+0x17c>)
 8001044:	701a      	strb	r2, [r3, #0]

	ret = IMU_WriteOneByte(dev, REG_ADD_INT_ENABLE_1, REG_VAL_INT_ENABLED); // Turn on int on pin INT1
 8001046:	2201      	movs	r2, #1
 8001048:	2110      	movs	r1, #16
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 f872 	bl	8001134 <IMU_WriteOneByte>
 8001050:	4603      	mov	r3, r0
 8001052:	461a      	mov	r2, r3
 8001054:	4b36      	ldr	r3, [pc, #216]	@ (8001130 <IMU_Initialise+0x17c>)
 8001056:	701a      	strb	r2, [r3, #0]

	uint8_t tmp = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	72bb      	strb	r3, [r7, #10]
	IMU_ReadOneByte(dev, REG_ADD_INT_PIN_CFG, &tmp);
 800105c:	f107 030a 	add.w	r3, r7, #10
 8001060:	461a      	mov	r2, r3
 8001062:	210f      	movs	r1, #15
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f000 f881 	bl	800116c <IMU_ReadOneByte>
	IMU_WriteOneByte(dev, REG_ADD_INT_PIN_CFG, tmp | 0x02);
 800106a:	7abb      	ldrb	r3, [r7, #10]
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	b2db      	uxtb	r3, r3
 8001072:	461a      	mov	r2, r3
 8001074:	210f      	movs	r1, #15
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 f85c 	bl	8001134 <IMU_WriteOneByte>

	// Bank 2 - Gyro and Acce and start running
	/* user bank 2 register */
	ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_2);
 800107c:	2220      	movs	r2, #32
 800107e:	217f      	movs	r1, #127	@ 0x7f
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f000 f857 	bl	8001134 <IMU_WriteOneByte>
 8001086:	4603      	mov	r3, r0
 8001088:	461a      	mov	r2, r3
 800108a:	4b29      	ldr	r3, [pc, #164]	@ (8001130 <IMU_Initialise+0x17c>)
 800108c:	701a      	strb	r2, [r3, #0]

	ret = IMU_WriteOneByte(dev, REG_ADD_GYRO_SMPLRT_DIV, 0x00); // changed to 0 from 0x16 **NEW**
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 f84e 	bl	8001134 <IMU_WriteOneByte>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	4b24      	ldr	r3, [pc, #144]	@ (8001130 <IMU_Initialise+0x17c>)
 800109e:	701a      	strb	r2, [r3, #0]

	ret = IMU_WriteOneByte(dev, REG_ADD_GYRO_CONFIG_1,
 80010a0:	2237      	movs	r2, #55	@ 0x37
 80010a2:	2101      	movs	r1, #1
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f000 f845 	bl	8001134 <IMU_WriteOneByte>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b20      	ldr	r3, [pc, #128]	@ (8001130 <IMU_Initialise+0x17c>)
 80010b0:	701a      	strb	r2, [r3, #0]
			REG_VAL_BIT_GYRO_DLPCFG_6 | REG_VAL_BIT_GYRO_FS_2000DPS
					| REG_VAL_BIT_GYRO_DLPF); // enable low pass filter and set Gyro FS

	ret = IMU_WriteOneByte(dev, REG_ADD_GYRO_CONFIG_2, 0x06); // 8x average **NEW**
 80010b2:	2206      	movs	r2, #6
 80010b4:	2102      	movs	r1, #2
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 f83c 	bl	8001134 <IMU_WriteOneByte>
 80010bc:	4603      	mov	r3, r0
 80010be:	461a      	mov	r2, r3
 80010c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <IMU_Initialise+0x17c>)
 80010c2:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_SMPLRT_DIV_2, 0x10); //
 80010c4:	2210      	movs	r2, #16
 80010c6:	2111      	movs	r1, #17
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 f833 	bl	8001134 <IMU_WriteOneByte>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b17      	ldr	r3, [pc, #92]	@ (8001130 <IMU_Initialise+0x17c>)
 80010d4:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_SMPLRT_DIV_1, 0x00); // upper 3 bit of sample rate = 0
 80010d6:	2200      	movs	r2, #0
 80010d8:	2110      	movs	r1, #16
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 f82a 	bl	8001134 <IMU_WriteOneByte>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <IMU_Initialise+0x17c>)
 80010e6:	701a      	strb	r2, [r3, #0]

	// enable LPF and set accel full scale to +/-2G, sensitivity scale factor = 16384 LSB/g
	ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_CONFIG,
 80010e8:	2231      	movs	r2, #49	@ 0x31
 80010ea:	2114      	movs	r1, #20
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 f821 	bl	8001134 <IMU_WriteOneByte>
 80010f2:	4603      	mov	r3, r0
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <IMU_Initialise+0x17c>)
 80010f8:	701a      	strb	r2, [r3, #0]
			REG_VAL_BIT_ACCEL_DLPCFG_6 | REG_VAL_BIT_ACCEL_FS_2g
					| REG_VAL_BIT_ACCEL_DLPF);

	IMU_WriteOneByte(dev, REG_ADD_TEMP_CONFIG, REG_VAL_TEMP_CONFIG); // Temp configuration pg 67
 80010fa:	2200      	movs	r2, #0
 80010fc:	2153      	movs	r1, #83	@ 0x53
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f818 	bl	8001134 <IMU_WriteOneByte>

	IMU_WriteOneByte(dev, 0x15, 0x03);
 8001104:	2203      	movs	r2, #3
 8001106:	2115      	movs	r1, #21
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f000 f813 	bl	8001134 <IMU_WriteOneByte>
	// back to bank 0
	ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 800110e:	2200      	movs	r2, #0
 8001110:	217f      	movs	r1, #127	@ 0x7f
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 f80e 	bl	8001134 <IMU_WriteOneByte>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	4b04      	ldr	r3, [pc, #16]	@ (8001130 <IMU_Initialise+0x17c>)
 800111e:	701a      	strb	r2, [r3, #0]

	HAL_Delay(100);
 8001120:	2064      	movs	r0, #100	@ 0x64
 8001122:	f005 fa97 	bl	8006654 <HAL_Delay>
	//Gyro_calibrate(dev);  // calibrate the offset of the gyroscope

	// everthing OK
	//strcpy((char*)buf, "Initialize OK\r\n");
	//return &buf;
	return 0; // 0 means 0 error
 8001126:	2300      	movs	r3, #0

}
 8001128:	4618      	mov	r0, r3
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200001f8 	.word	0x200001f8

08001134 <IMU_WriteOneByte>:

HAL_StatusTypeDef IMU_WriteOneByte(ICM20948 *dev, uint8_t reg, uint8_t data) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af04      	add	r7, sp, #16
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	70fb      	strb	r3, [r7, #3]
 8001140:	4613      	mov	r3, r2
 8001142:	70bb      	strb	r3, [r7, #2]

	return HAL_I2C_Mem_Write(dev->i2cHandle, IMU_ADDR, reg, 1, &data, 1, 100);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6818      	ldr	r0, [r3, #0]
 8001148:	23d0      	movs	r3, #208	@ 0xd0
 800114a:	4619      	mov	r1, r3
 800114c:	78fb      	ldrb	r3, [r7, #3]
 800114e:	b29a      	uxth	r2, r3
 8001150:	2364      	movs	r3, #100	@ 0x64
 8001152:	9302      	str	r3, [sp, #8]
 8001154:	2301      	movs	r3, #1
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	1cbb      	adds	r3, r7, #2
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2301      	movs	r3, #1
 800115e:	f006 fec3 	bl	8007ee8 <HAL_I2C_Mem_Write>
 8001162:	4603      	mov	r3, r0

}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <IMU_ReadOneByte>:

HAL_StatusTypeDef IMU_ReadOneByte(ICM20948 *dev, uint8_t reg, uint8_t *data) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af04      	add	r7, sp, #16
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	460b      	mov	r3, r1
 8001176:	607a      	str	r2, [r7, #4]
 8001178:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read(dev->i2cHandle, IMU_ADDR, reg, 1, data, 1, 100);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	6818      	ldr	r0, [r3, #0]
 800117e:	23d0      	movs	r3, #208	@ 0xd0
 8001180:	4619      	mov	r1, r3
 8001182:	7afb      	ldrb	r3, [r7, #11]
 8001184:	b29a      	uxth	r2, r3
 8001186:	2364      	movs	r3, #100	@ 0x64
 8001188:	9302      	str	r3, [sp, #8]
 800118a:	2301      	movs	r3, #1
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2301      	movs	r3, #1
 8001194:	f006 ffa2 	bl	80080dc <HAL_I2C_Mem_Read>
 8001198:	4603      	mov	r3, r0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <Mag_WriteOneByte>:

HAL_StatusTypeDef Mag_WriteOneByte(ICM20948 *dev, uint8_t reg, uint8_t data) {
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b086      	sub	sp, #24
 80011a6:	af04      	add	r7, sp, #16
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	460b      	mov	r3, r1
 80011ac:	70fb      	strb	r3, [r7, #3]
 80011ae:	4613      	mov	r3, r2
 80011b0:	70bb      	strb	r3, [r7, #2]

	return HAL_I2C_Mem_Write(dev->i2cHandle, MAG_ADDR, reg, 1, &data, 1, 100);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	2318      	movs	r3, #24
 80011b8:	4619      	mov	r1, r3
 80011ba:	78fb      	ldrb	r3, [r7, #3]
 80011bc:	b29a      	uxth	r2, r3
 80011be:	2364      	movs	r3, #100	@ 0x64
 80011c0:	9302      	str	r3, [sp, #8]
 80011c2:	2301      	movs	r3, #1
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	1cbb      	adds	r3, r7, #2
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2301      	movs	r3, #1
 80011cc:	f006 fe8c 	bl	8007ee8 <HAL_I2C_Mem_Write>
 80011d0:	4603      	mov	r3, r0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <IMU_AccelRead>:
	ret = IMU_ReadOneByte(dev, REG_ADD_TEMP_OUT_H, &u8Buf[1]);
	tempRaw = (u8Buf[1] << 8) | u8Buf[0];
	dev->temp_C = (tempRaw) / 333.81 + 21; // assuming no further offset apart from 21 dec C
}

HAL_StatusTypeDef IMU_AccelRead(ICM20948 *dev) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	uint8_t u8Buf[2] = { 0 }; // reset to zero
 80011e4:	2300      	movs	r3, #0
 80011e6:	83bb      	strh	r3, [r7, #28]
	int16_t accRaw[3] = { 0 };  // reset to zero
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	809a      	strh	r2, [r3, #4]

	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_XOUT_L, &u8Buf[0]);
 80011f2:	f107 031c 	add.w	r3, r7, #28
 80011f6:	461a      	mov	r2, r3
 80011f8:	212e      	movs	r1, #46	@ 0x2e
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ffb6 	bl	800116c <IMU_ReadOneByte>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	4b5f      	ldr	r3, [pc, #380]	@ (8001384 <IMU_AccelRead+0x1a8>)
 8001206:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_XOUT_H, &u8Buf[1]);
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	3301      	adds	r3, #1
 800120e:	461a      	mov	r2, r3
 8001210:	212d      	movs	r1, #45	@ 0x2d
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ffaa 	bl	800116c <IMU_ReadOneByte>
 8001218:	4603      	mov	r3, r0
 800121a:	461a      	mov	r2, r3
 800121c:	4b59      	ldr	r3, [pc, #356]	@ (8001384 <IMU_AccelRead+0x1a8>)
 800121e:	701a      	strb	r2, [r3, #0]
	accRaw[0] = (u8Buf[1] << 8) | u8Buf[0];
 8001220:	7f7b      	ldrb	r3, [r7, #29]
 8001222:	b21b      	sxth	r3, r3
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	b21a      	sxth	r2, r3
 8001228:	7f3b      	ldrb	r3, [r7, #28]
 800122a:	b21b      	sxth	r3, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	b21b      	sxth	r3, r3
 8001230:	82bb      	strh	r3, [r7, #20]

	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_YOUT_L, &u8Buf[0]);
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	461a      	mov	r2, r3
 8001238:	2130      	movs	r1, #48	@ 0x30
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ff96 	bl	800116c <IMU_ReadOneByte>
 8001240:	4603      	mov	r3, r0
 8001242:	461a      	mov	r2, r3
 8001244:	4b4f      	ldr	r3, [pc, #316]	@ (8001384 <IMU_AccelRead+0x1a8>)
 8001246:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_YOUT_H, &u8Buf[1]);
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	3301      	adds	r3, #1
 800124e:	461a      	mov	r2, r3
 8001250:	212f      	movs	r1, #47	@ 0x2f
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ff8a 	bl	800116c <IMU_ReadOneByte>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	4b49      	ldr	r3, [pc, #292]	@ (8001384 <IMU_AccelRead+0x1a8>)
 800125e:	701a      	strb	r2, [r3, #0]
	accRaw[1] = (u8Buf[1] << 8) | u8Buf[0];
 8001260:	7f7b      	ldrb	r3, [r7, #29]
 8001262:	b21b      	sxth	r3, r3
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21a      	sxth	r2, r3
 8001268:	7f3b      	ldrb	r3, [r7, #28]
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21b      	sxth	r3, r3
 8001270:	82fb      	strh	r3, [r7, #22]

	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_ZOUT_L, &u8Buf[0]);
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	461a      	mov	r2, r3
 8001278:	2132      	movs	r1, #50	@ 0x32
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ff76 	bl	800116c <IMU_ReadOneByte>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	4b3f      	ldr	r3, [pc, #252]	@ (8001384 <IMU_AccelRead+0x1a8>)
 8001286:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_ZOUT_H, &u8Buf[1]);
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	3301      	adds	r3, #1
 800128e:	461a      	mov	r2, r3
 8001290:	2131      	movs	r1, #49	@ 0x31
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ff6a 	bl	800116c <IMU_ReadOneByte>
 8001298:	4603      	mov	r3, r0
 800129a:	461a      	mov	r2, r3
 800129c:	4b39      	ldr	r3, [pc, #228]	@ (8001384 <IMU_AccelRead+0x1a8>)
 800129e:	701a      	strb	r2, [r3, #0]
	accRaw[2] = (u8Buf[1] << 8) | u8Buf[0];
 80012a0:	7f7b      	ldrb	r3, [r7, #29]
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	b21a      	sxth	r2, r3
 80012a8:	7f3b      	ldrb	r3, [r7, #28]
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	4313      	orrs	r3, r2
 80012ae:	b21b      	sxth	r3, r3
 80012b0:	833b      	strh	r3, [r7, #24]

	/* Convert to SIGNED integers (two's complement) */
	int32_t accRawSigned[3];

	if ((accRaw[0] & 0x00080000) == 0x00080000)
 80012b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d007      	beq.n	80012ce <IMU_AccelRead+0xf2>
		accRawSigned[0] = accRaw[0] | 0xFFF00000;
 80012be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012c2:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 80012c6:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	e002      	b.n	80012d4 <IMU_AccelRead+0xf8>
	else
		accRawSigned[0] = accRaw[0];
 80012ce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012d2:	60bb      	str	r3, [r7, #8]

	if ((accRaw[1] & 0x00080000) == 0x00080000)
 80012d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d007      	beq.n	80012f0 <IMU_AccelRead+0x114>
		accRawSigned[1] = accRaw[1] | 0xFFF00000;
 80012e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012e4:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 80012e8:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	e002      	b.n	80012f6 <IMU_AccelRead+0x11a>
	else
		accRawSigned[1] = accRaw[1];
 80012f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012f4:	60fb      	str	r3, [r7, #12]

	if ((accRaw[2] & 0x00080000) == 0x000080000)
 80012f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d007      	beq.n	8001312 <IMU_AccelRead+0x136>
		accRawSigned[2] = accRaw[2] | 0xFFF00000;
 8001302:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001306:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 800130a:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	e002      	b.n	8001318 <IMU_AccelRead+0x13c>
	else
		accRawSigned[2] = accRaw[2];
 8001312:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001316:	613b      	str	r3, [r7, #16]

	// accel full scale set to +/-2G, sensitivity scale factor = 16384 LSB/g
	dev->acc[0] = 0.00006103515625f * accRawSigned[0] * 9.81f;
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	ee07 3a90 	vmov	s15, r3
 800131e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001322:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001388 <IMU_AccelRead+0x1ac>
 8001326:	ee67 7a87 	vmul.f32	s15, s15, s14
 800132a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800138c <IMU_AccelRead+0x1b0>
 800132e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	edc3 7a01 	vstr	s15, [r3, #4]
	dev->acc[1] = 0.00006103515625f * accRawSigned[1] * 9.81f;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001342:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001388 <IMU_AccelRead+0x1ac>
 8001346:	ee67 7a87 	vmul.f32	s15, s15, s14
 800134a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800138c <IMU_AccelRead+0x1b0>
 800134e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	edc3 7a02 	vstr	s15, [r3, #8]
	dev->acc[2] = 0.00006103515625f * accRawSigned[2] * 9.81f; // * 9.81f
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001362:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001388 <IMU_AccelRead+0x1ac>
 8001366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800138c <IMU_AccelRead+0x1b0>
 800136e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edc3 7a03 	vstr	s15, [r3, #12]

	return ret;
 8001378:	4b02      	ldr	r3, [pc, #8]	@ (8001384 <IMU_AccelRead+0x1a8>)
 800137a:	781b      	ldrb	r3, [r3, #0]

}
 800137c:	4618      	mov	r0, r3
 800137e:	3720      	adds	r7, #32
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200001f8 	.word	0x200001f8
 8001388:	38800000 	.word	0x38800000
 800138c:	411cf5c3 	.word	0x411cf5c3

08001390 <Gyro_calibrate>:

HAL_StatusTypeDef Gyro_calibrate(ICM20948 *dev) // calibrate the offset of the gyro
// store the offset in int16_t gyro_offset[3]
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	uint8_t u8Buf[2] = { 0 }; // reset to zero upon entry
 8001398:	2300      	movs	r3, #0
 800139a:	823b      	strh	r3, [r7, #16]
	int16_t gyroRaw[3] = { 0 }; // reset to zero upon entry
 800139c:	f107 0308 	add.w	r3, r7, #8
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	809a      	strh	r2, [r3, #4]
	int8_t i;
	int16_t temp;

	for (i = 0; i < 32; i++) {
 80013a6:	2300      	movs	r3, #0
 80013a8:	75fb      	strb	r3, [r7, #23]
 80013aa:	e06f      	b.n	800148c <Gyro_calibrate+0xfc>
		IMU_ReadOneByte(dev, REG_ADD_GYRO_XOUT_L, &u8Buf[0]);
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	461a      	mov	r2, r3
 80013b2:	2134      	movs	r1, #52	@ 0x34
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff fed9 	bl	800116c <IMU_ReadOneByte>
		IMU_ReadOneByte(dev, REG_ADD_GYRO_XOUT_H, &u8Buf[1]);
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	3301      	adds	r3, #1
 80013c0:	461a      	mov	r2, r3
 80013c2:	2133      	movs	r1, #51	@ 0x33
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff fed1 	bl	800116c <IMU_ReadOneByte>
		temp = (u8Buf[1] << 8) | u8Buf[0]; // for debugging
 80013ca:	7c7b      	ldrb	r3, [r7, #17]
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	b21a      	sxth	r2, r3
 80013d2:	7c3b      	ldrb	r3, [r7, #16]
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	4313      	orrs	r3, r2
 80013d8:	82bb      	strh	r3, [r7, #20]
		gyroRaw[0] = temp + gyroRaw[0];
 80013da:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80013de:	b29a      	uxth	r2, r3
 80013e0:	8abb      	ldrh	r3, [r7, #20]
 80013e2:	4413      	add	r3, r2
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	b21b      	sxth	r3, r3
 80013e8:	813b      	strh	r3, [r7, #8]
		//gyroRaw[0] = (u8Buf[1]<<8)|u8Buf[0] + gyroRaw[0];
		HAL_Delay(1);
 80013ea:	2001      	movs	r0, #1
 80013ec:	f005 f932 	bl	8006654 <HAL_Delay>
		IMU_ReadOneByte(dev, REG_ADD_GYRO_YOUT_L, &u8Buf[0]);
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	461a      	mov	r2, r3
 80013f6:	2136      	movs	r1, #54	@ 0x36
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff feb7 	bl	800116c <IMU_ReadOneByte>
		IMU_ReadOneByte(dev, REG_ADD_GYRO_YOUT_H, &u8Buf[1]);
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	3301      	adds	r3, #1
 8001404:	461a      	mov	r2, r3
 8001406:	2135      	movs	r1, #53	@ 0x35
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff feaf 	bl	800116c <IMU_ReadOneByte>
		gyroRaw[1] = ((u8Buf[1] << 8) | u8Buf[0]) + gyroRaw[1];
 800140e:	7c7b      	ldrb	r3, [r7, #17]
 8001410:	b21b      	sxth	r3, r3
 8001412:	021b      	lsls	r3, r3, #8
 8001414:	b21a      	sxth	r2, r3
 8001416:	7c3b      	ldrb	r3, [r7, #16]
 8001418:	b21b      	sxth	r3, r3
 800141a:	4313      	orrs	r3, r2
 800141c:	b21b      	sxth	r3, r3
 800141e:	b29a      	uxth	r2, r3
 8001420:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001424:	b29b      	uxth	r3, r3
 8001426:	4413      	add	r3, r2
 8001428:	b29b      	uxth	r3, r3
 800142a:	b21b      	sxth	r3, r3
 800142c:	817b      	strh	r3, [r7, #10]
		HAL_Delay(1);
 800142e:	2001      	movs	r0, #1
 8001430:	f005 f910 	bl	8006654 <HAL_Delay>
		IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_L, &u8Buf[0]);
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	461a      	mov	r2, r3
 800143a:	2138      	movs	r1, #56	@ 0x38
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff fe95 	bl	800116c <IMU_ReadOneByte>
		ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_H, &u8Buf[1]);
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	3301      	adds	r3, #1
 8001448:	461a      	mov	r2, r3
 800144a:	2137      	movs	r1, #55	@ 0x37
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff fe8d 	bl	800116c <IMU_ReadOneByte>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	4b23      	ldr	r3, [pc, #140]	@ (80014e4 <Gyro_calibrate+0x154>)
 8001458:	701a      	strb	r2, [r3, #0]
		gyroRaw[2] = ((u8Buf[1] << 8) | u8Buf[0]) + gyroRaw[2];
 800145a:	7c7b      	ldrb	r3, [r7, #17]
 800145c:	b21b      	sxth	r3, r3
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	b21a      	sxth	r2, r3
 8001462:	7c3b      	ldrb	r3, [r7, #16]
 8001464:	b21b      	sxth	r3, r3
 8001466:	4313      	orrs	r3, r2
 8001468:	b21b      	sxth	r3, r3
 800146a:	b29a      	uxth	r2, r3
 800146c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001470:	b29b      	uxth	r3, r3
 8001472:	4413      	add	r3, r2
 8001474:	b29b      	uxth	r3, r3
 8001476:	b21b      	sxth	r3, r3
 8001478:	81bb      	strh	r3, [r7, #12]

		HAL_Delay(25);; // wait for 100msec
 800147a:	2019      	movs	r0, #25
 800147c:	f005 f8ea 	bl	8006654 <HAL_Delay>
	for (i = 0; i < 32; i++) {
 8001480:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	3301      	adds	r3, #1
 8001488:	b2db      	uxtb	r3, r3
 800148a:	75fb      	strb	r3, [r7, #23]
 800148c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001490:	2b1f      	cmp	r3, #31
 8001492:	dd8b      	ble.n	80013ac <Gyro_calibrate+0x1c>
	}

	dev->gyro_bias[0] = (float)(gyroRaw[0] >> 5);  // average of 32 reads
 8001494:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001498:	115b      	asrs	r3, r3, #5
 800149a:	b21b      	sxth	r3, r3
 800149c:	ee07 3a90 	vmov	s15, r3
 80014a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	dev->gyro_bias[1] = (float)(gyroRaw[1] >> 5);
 80014aa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014ae:	115b      	asrs	r3, r3, #5
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	ee07 3a90 	vmov	s15, r3
 80014b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	dev->gyro_bias[2] = (float)(gyroRaw[2] >> 5);
 80014c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014c4:	115b      	asrs	r3, r3, #5
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	ee07 3a90 	vmov	s15, r3
 80014cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c


	return ret;
 80014d6:	4b03      	ldr	r3, [pc, #12]	@ (80014e4 <Gyro_calibrate+0x154>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200001f8 	.word	0x200001f8

080014e8 <IMU_GyroRead>:

HAL_StatusTypeDef IMU_GyroRead(ICM20948 *dev) { // return the change in value instead of current value
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	@ 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	uint8_t u8Buf[2] = { 0 }; // reset to zero
 80014f0:	2300      	movs	r3, #0
 80014f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t gyroRaw[3] = { 0 };  // reset to zero
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	809a      	strh	r2, [r3, #4]
	int16_t gyroDiff[3];
	int16_t temp;

	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_YOUT_L, &u8Buf[0]);
 80014fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001502:	461a      	mov	r2, r3
 8001504:	2136      	movs	r1, #54	@ 0x36
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff fe30 	bl	800116c <IMU_ReadOneByte>
 800150c:	4603      	mov	r3, r0
 800150e:	461a      	mov	r2, r3
 8001510:	4b5a      	ldr	r3, [pc, #360]	@ (800167c <IMU_GyroRead+0x194>)
 8001512:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_YOUT_H, &u8Buf[1]);
 8001514:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001518:	3301      	adds	r3, #1
 800151a:	461a      	mov	r2, r3
 800151c:	2135      	movs	r1, #53	@ 0x35
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff fe24 	bl	800116c <IMU_ReadOneByte>
 8001524:	4603      	mov	r3, r0
 8001526:	461a      	mov	r2, r3
 8001528:	4b54      	ldr	r3, [pc, #336]	@ (800167c <IMU_GyroRead+0x194>)
 800152a:	701a      	strb	r2, [r3, #0]
	gyroRaw[1] = (u8Buf[1] << 8) | u8Buf[0];
 800152c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001530:	b21b      	sxth	r3, r3
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	b21a      	sxth	r2, r3
 8001536:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800153a:	b21b      	sxth	r3, r3
 800153c:	4313      	orrs	r3, r2
 800153e:	b21b      	sxth	r3, r3
 8001540:	83fb      	strh	r3, [r7, #30]


	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_L, &u8Buf[0]);
 8001542:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001546:	461a      	mov	r2, r3
 8001548:	2138      	movs	r1, #56	@ 0x38
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff fe0e 	bl	800116c <IMU_ReadOneByte>
 8001550:	4603      	mov	r3, r0
 8001552:	461a      	mov	r2, r3
 8001554:	4b49      	ldr	r3, [pc, #292]	@ (800167c <IMU_GyroRead+0x194>)
 8001556:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_H, &u8Buf[1]);
 8001558:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800155c:	3301      	adds	r3, #1
 800155e:	461a      	mov	r2, r3
 8001560:	2137      	movs	r1, #55	@ 0x37
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff fe02 	bl	800116c <IMU_ReadOneByte>
 8001568:	4603      	mov	r3, r0
 800156a:	461a      	mov	r2, r3
 800156c:	4b43      	ldr	r3, [pc, #268]	@ (800167c <IMU_GyroRead+0x194>)
 800156e:	701a      	strb	r2, [r3, #0]
	gyroRaw[2] = (u8Buf[1] << 8) | u8Buf[0];
 8001570:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001574:	b21b      	sxth	r3, r3
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b21a      	sxth	r2, r3
 800157a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800157e:	b21b      	sxth	r3, r3
 8001580:	4313      	orrs	r3, r2
 8001582:	b21b      	sxth	r3, r3
 8001584:	843b      	strh	r3, [r7, #32]


	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_XOUT_L, &u8Buf[0]);
 8001586:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800158a:	461a      	mov	r2, r3
 800158c:	2134      	movs	r1, #52	@ 0x34
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff fdec 	bl	800116c <IMU_ReadOneByte>
 8001594:	4603      	mov	r3, r0
 8001596:	461a      	mov	r2, r3
 8001598:	4b38      	ldr	r3, [pc, #224]	@ (800167c <IMU_GyroRead+0x194>)
 800159a:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_XOUT_H, &u8Buf[1]);
 800159c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a0:	3301      	adds	r3, #1
 80015a2:	461a      	mov	r2, r3
 80015a4:	2133      	movs	r1, #51	@ 0x33
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fde0 	bl	800116c <IMU_ReadOneByte>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	4b32      	ldr	r3, [pc, #200]	@ (800167c <IMU_GyroRead+0x194>)
 80015b2:	701a      	strb	r2, [r3, #0]
	temp = (u8Buf[1] << 8) | u8Buf[0]; // for debugging
 80015b4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	b21a      	sxth	r2, r3
 80015be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	4313      	orrs	r3, r2
 80015c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
	gyroRaw[0] = (u8Buf[1] << 8) | u8Buf[0];
 80015c8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	021b      	lsls	r3, r3, #8
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	b21b      	sxth	r3, r3
 80015dc:	83bb      	strh	r3, [r7, #28]

	float gyroRawFloat[3] = {0};
 80015de:	f107 0308 	add.w	r3, r7, #8
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
	gyroRawFloat[0] = gyroRaw[0] - dev->gyro_bias[0];
 80015ea:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80015ee:	ee07 3a90 	vmov	s15, r3
 80015f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80015fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001600:	edc7 7a02 	vstr	s15, [r7, #8]
	gyroRawFloat[1] = gyroRaw[1] - dev->gyro_bias[1];
 8001604:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001608:	ee07 3a90 	vmov	s15, r3
 800160c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800161a:	edc7 7a03 	vstr	s15, [r7, #12]
	gyroRawFloat[2] = gyroRaw[2] - dev->gyro_bias[2];
 800161e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001622:	ee07 3a90 	vmov	s15, r3
 8001626:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001630:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001634:	edc7 7a04 	vstr	s15, [r7, #16]
	// gyro full scale set to +/-500 dps, sensitivity scale factor = 65.5 LSB/dps
	// degree per second = value/65.5



	dev->gyro[0] = 0.06106870229f * gyroRawFloat[0];
 8001638:	edd7 7a02 	vldr	s15, [r7, #8]
 800163c:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001680 <IMU_GyroRead+0x198>
 8001640:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	edc3 7a04 	vstr	s15, [r3, #16]
	dev->gyro[1] = 0.06106870229f * gyroRawFloat[1];
 800164a:	edd7 7a03 	vldr	s15, [r7, #12]
 800164e:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001680 <IMU_GyroRead+0x198>
 8001652:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	edc3 7a05 	vstr	s15, [r3, #20]
	dev->gyro[2] = 0.06106870229f * gyroRawFloat[2];
 800165c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001660:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001680 <IMU_GyroRead+0x198>
 8001664:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	edc3 7a06 	vstr	s15, [r3, #24]

	return ret;
 800166e:	4b03      	ldr	r3, [pc, #12]	@ (800167c <IMU_GyroRead+0x194>)
 8001670:	781b      	ldrb	r3, [r3, #0]

}
 8001672:	4618      	mov	r0, r3
 8001674:	3728      	adds	r7, #40	@ 0x28
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200001f8 	.word	0x200001f8
 8001680:	3d7a232d 	.word	0x3d7a232d

08001684 <Mag_init>:

HAL_StatusTypeDef Mag_init(ICM20948 *dev) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	73fb      	strb	r3, [r7, #15]

	Mag_WriteOneByte(dev, AK09916__CNTL2__REGISTER, REG_VAL_MAG_MODE_10HZ);
 8001690:	2202      	movs	r2, #2
 8001692:	2131      	movs	r1, #49	@ 0x31
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff fd84 	bl	80011a2 <Mag_WriteOneByte>

}
 800169a:	bf00      	nop
 800169c:	4618      	mov	r0, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016aa:	463b      	mov	r3, r7
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016b6:	4b28      	ldr	r3, [pc, #160]	@ (8001758 <MX_ADC1_Init+0xb4>)
 80016b8:	4a28      	ldr	r2, [pc, #160]	@ (800175c <MX_ADC1_Init+0xb8>)
 80016ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016bc:	4b26      	ldr	r3, [pc, #152]	@ (8001758 <MX_ADC1_Init+0xb4>)
 80016be:	2200      	movs	r2, #0
 80016c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016c2:	4b25      	ldr	r3, [pc, #148]	@ (8001758 <MX_ADC1_Init+0xb4>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80016c8:	4b23      	ldr	r3, [pc, #140]	@ (8001758 <MX_ADC1_Init+0xb4>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016ce:	4b22      	ldr	r3, [pc, #136]	@ (8001758 <MX_ADC1_Init+0xb4>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016d4:	4b20      	ldr	r3, [pc, #128]	@ (8001758 <MX_ADC1_Init+0xb4>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001758 <MX_ADC1_Init+0xb4>)
 80016de:	2200      	movs	r2, #0
 80016e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001758 <MX_ADC1_Init+0xb4>)
 80016e4:	4a1e      	ldr	r2, [pc, #120]	@ (8001760 <MX_ADC1_Init+0xbc>)
 80016e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001758 <MX_ADC1_Init+0xb4>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80016ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001758 <MX_ADC1_Init+0xb4>)
 80016f0:	2202      	movs	r2, #2
 80016f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016f4:	4b18      	ldr	r3, [pc, #96]	@ (8001758 <MX_ADC1_Init+0xb4>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016fc:	4b16      	ldr	r3, [pc, #88]	@ (8001758 <MX_ADC1_Init+0xb4>)
 80016fe:	2201      	movs	r2, #1
 8001700:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001702:	4815      	ldr	r0, [pc, #84]	@ (8001758 <MX_ADC1_Init+0xb4>)
 8001704:	f004 ffca 	bl	800669c <HAL_ADC_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800170e:	f003 fb28 	bl	8004d62 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001712:	2307      	movs	r3, #7
 8001714:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001716:	2301      	movs	r3, #1
 8001718:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800171a:	2304      	movs	r3, #4
 800171c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800171e:	463b      	mov	r3, r7
 8001720:	4619      	mov	r1, r3
 8001722:	480d      	ldr	r0, [pc, #52]	@ (8001758 <MX_ADC1_Init+0xb4>)
 8001724:	f005 f99c 	bl	8006a60 <HAL_ADC_ConfigChannel>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800172e:	f003 fb18 	bl	8004d62 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001732:	230f      	movs	r3, #15
 8001734:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001736:	2302      	movs	r3, #2
 8001738:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800173a:	463b      	mov	r3, r7
 800173c:	4619      	mov	r1, r3
 800173e:	4806      	ldr	r0, [pc, #24]	@ (8001758 <MX_ADC1_Init+0xb4>)
 8001740:	f005 f98e 	bl	8006a60 <HAL_ADC_ConfigChannel>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800174a:	f003 fb0a 	bl	8004d62 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200001fc 	.word	0x200001fc
 800175c:	40012000 	.word	0x40012000
 8001760:	0f000001 	.word	0x0f000001

08001764 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	@ 0x28
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a24      	ldr	r2, [pc, #144]	@ (8001814 <HAL_ADC_MspInit+0xb0>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d141      	bne.n	800180a <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	4b23      	ldr	r3, [pc, #140]	@ (8001818 <HAL_ADC_MspInit+0xb4>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178e:	4a22      	ldr	r2, [pc, #136]	@ (8001818 <HAL_ADC_MspInit+0xb4>)
 8001790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001794:	6453      	str	r3, [r2, #68]	@ 0x44
 8001796:	4b20      	ldr	r3, [pc, #128]	@ (8001818 <HAL_ADC_MspInit+0xb4>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001818 <HAL_ADC_MspInit+0xb4>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	4a1b      	ldr	r2, [pc, #108]	@ (8001818 <HAL_ADC_MspInit+0xb4>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b2:	4b19      	ldr	r3, [pc, #100]	@ (8001818 <HAL_ADC_MspInit+0xb4>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <HAL_ADC_MspInit+0xb4>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	4a14      	ldr	r2, [pc, #80]	@ (8001818 <HAL_ADC_MspInit+0xb4>)
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ce:	4b12      	ldr	r3, [pc, #72]	@ (8001818 <HAL_ADC_MspInit+0xb4>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017da:	2380      	movs	r3, #128	@ 0x80
 80017dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017de:	2303      	movs	r3, #3
 80017e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	4619      	mov	r1, r3
 80017ec:	480b      	ldr	r0, [pc, #44]	@ (800181c <HAL_ADC_MspInit+0xb8>)
 80017ee:	f006 f869 	bl	80078c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017f2:	2320      	movs	r3, #32
 80017f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017f6:	2303      	movs	r3, #3
 80017f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	4619      	mov	r1, r3
 8001804:	4806      	ldr	r0, [pc, #24]	@ (8001820 <HAL_ADC_MspInit+0xbc>)
 8001806:	f006 f85d 	bl	80078c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800180a:	bf00      	nop
 800180c:	3728      	adds	r7, #40	@ 0x28
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40012000 	.word	0x40012000
 8001818:	40023800 	.word	0x40023800
 800181c:	40020000 	.word	0x40020000
 8001820:	40020800 	.word	0x40020800

08001824 <_ZN7Display8oledTaskEPv>:
#include "app_display.h"
#include <cstring>
#include <cstdio>
namespace Display {

	void oledTask(void*) {
 8001824:	b5b0      	push	{r4, r5, r7, lr}
 8001826:	b08a      	sub	sp, #40	@ 0x28
 8001828:	af04      	add	r7, sp, #16
 800182a:	6078      	str	r0, [r7, #4]

		OLED_Init();
 800182c:	f003 fd20 	bl	8005270 <OLED_Init>
		OLED_Clear();
 8001830:	f003 fb24 	bl	8004e7c <OLED_Clear>

		OLED_ShowString(0, 0, (uint8_t*) "TRD|OK");
 8001834:	4a96      	ldr	r2, [pc, #600]	@ (8001a90 <_ZN7Display8oledTaskEPv+0x26c>)
 8001836:	2100      	movs	r1, #0
 8001838:	2000      	movs	r0, #0
 800183a:	f003 fc21 	bl	8005080 <OLED_ShowString>
		OLED_Display_On();
 800183e:	f003 fb43 	bl	8004ec8 <OLED_Display_On>
		OLED_DrawRect(46, 16, 51, 21, 1);
 8001842:	2301      	movs	r3, #1
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	2315      	movs	r3, #21
 8001848:	2233      	movs	r2, #51	@ 0x33
 800184a:	2110      	movs	r1, #16
 800184c:	202e      	movs	r0, #46	@ 0x2e
 800184e:	f003 fc49 	bl	80050e4 <OLED_DrawRect>
		OLED_DrawRect(46, 28, 51, 33, 1);
 8001852:	2301      	movs	r3, #1
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	2321      	movs	r3, #33	@ 0x21
 8001858:	2233      	movs	r2, #51	@ 0x33
 800185a:	211c      	movs	r1, #28
 800185c:	202e      	movs	r0, #46	@ 0x2e
 800185e:	f003 fc41 	bl	80050e4 <OLED_DrawRect>
		OLED_DrawRect(46, 40, 51, 45, 1);
 8001862:	2301      	movs	r3, #1
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	232d      	movs	r3, #45	@ 0x2d
 8001868:	2233      	movs	r2, #51	@ 0x33
 800186a:	2128      	movs	r1, #40	@ 0x28
 800186c:	202e      	movs	r0, #46	@ 0x2e
 800186e:	f003 fc39 	bl	80050e4 <OLED_DrawRect>
		OLED_DrawRect(46, 52, 51, 57, 1);
 8001872:	2301      	movs	r3, #1
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	2339      	movs	r3, #57	@ 0x39
 8001878:	2233      	movs	r2, #51	@ 0x33
 800187a:	2134      	movs	r1, #52	@ 0x34
 800187c:	202e      	movs	r0, #46	@ 0x2e
 800187e:	f003 fc31 	bl	80050e4 <OLED_DrawRect>
		OLED_DrawVerticalLine(55, 3, 58);
 8001882:	223a      	movs	r2, #58	@ 0x3a
 8001884:	2103      	movs	r1, #3
 8001886:	2037      	movs	r0, #55	@ 0x37
 8001888:	f003 fcd1 	bl	800522e <OLED_DrawVerticalLine>

		OLED_ShowString(1, 13, (uint8_t*) "SELF");
 800188c:	4a81      	ldr	r2, [pc, #516]	@ (8001a94 <_ZN7Display8oledTaskEPv+0x270>)
 800188e:	210d      	movs	r1, #13
 8001890:	2001      	movs	r0, #1
 8001892:	f003 fbf5 	bl	8005080 <OLED_ShowString>
		OLED_ShowString(1, 25, (uint8_t*) "PROC");
 8001896:	4a80      	ldr	r2, [pc, #512]	@ (8001a98 <_ZN7Display8oledTaskEPv+0x274>)
 8001898:	2119      	movs	r1, #25
 800189a:	2001      	movs	r0, #1
 800189c:	f003 fbf0 	bl	8005080 <OLED_ShowString>
		OLED_ShowString(1, 37, (uint8_t*) "SENR");
 80018a0:	4a7e      	ldr	r2, [pc, #504]	@ (8001a9c <_ZN7Display8oledTaskEPv+0x278>)
 80018a2:	2125      	movs	r1, #37	@ 0x25
 80018a4:	2001      	movs	r0, #1
 80018a6:	f003 fbeb 	bl	8005080 <OLED_ShowString>
		OLED_ShowString(1, 49, (uint8_t*) "MOTN");
 80018aa:	4a7d      	ldr	r2, [pc, #500]	@ (8001aa0 <_ZN7Display8oledTaskEPv+0x27c>)
 80018ac:	2131      	movs	r1, #49	@ 0x31
 80018ae:	2001      	movs	r0, #1
 80018b0:	f003 fbe6 	bl	8005080 <OLED_ShowString>
		OLED_ShowString(60, 0, (uint8_t*) "gZ");
 80018b4:	4a7b      	ldr	r2, [pc, #492]	@ (8001aa4 <_ZN7Display8oledTaskEPv+0x280>)
 80018b6:	2100      	movs	r1, #0
 80018b8:	203c      	movs	r0, #60	@ 0x3c
 80018ba:	f003 fbe1 	bl	8005080 <OLED_ShowString>
		OLED_ShowString(60, 12, (uint8_t*) "YAW");
 80018be:	4a7a      	ldr	r2, [pc, #488]	@ (8001aa8 <_ZN7Display8oledTaskEPv+0x284>)
 80018c0:	210c      	movs	r1, #12
 80018c2:	203c      	movs	r0, #60	@ 0x3c
 80018c4:	f003 fbdc 	bl	8005080 <OLED_ShowString>
		OLED_ShowString(60, 36, (uint8_t*) "uS");
 80018c8:	4a78      	ldr	r2, [pc, #480]	@ (8001aac <_ZN7Display8oledTaskEPv+0x288>)
 80018ca:	2124      	movs	r1, #36	@ 0x24
 80018cc:	203c      	movs	r0, #60	@ 0x3c
 80018ce:	f003 fbd7 	bl	8005080 <OLED_ShowString>
		OLED_ShowString(60, 48, (uint8_t*) "TRX QL");
 80018d2:	4a77      	ldr	r2, [pc, #476]	@ (8001ab0 <_ZN7Display8oledTaskEPv+0x28c>)
 80018d4:	2130      	movs	r1, #48	@ 0x30
 80018d6:	203c      	movs	r0, #60	@ 0x3c
 80018d8:	f003 fbd2 	bl	8005080 <OLED_ShowString>
		OLED_Refresh_Gram();
 80018dc:	f003 fa96 	bl	8004e0c <OLED_Refresh_Gram>
		bool self = false;
 80018e0:	2300      	movs	r3, #0
 80018e2:	75fb      	strb	r3, [r7, #23]
		uint8_t buf[10] = { 0 };
 80018e4:	f107 030c 	add.w	r3, r7, #12
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	811a      	strh	r2, [r3, #8]

		for (;;) {

			OLED_DrawRectWithFill(47, 17, 50, 20, self);
 80018f0:	7dfb      	ldrb	r3, [r7, #23]
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	2314      	movs	r3, #20
 80018f6:	2232      	movs	r2, #50	@ 0x32
 80018f8:	2111      	movs	r1, #17
 80018fa:	202f      	movs	r0, #47	@ 0x2f
 80018fc:	f003 fc36 	bl	800516c <OLED_DrawRectWithFill>
			OLED_DrawRectWithFill(47, 29, 50, 32, is_task_alive_struct.proc);
 8001900:	4b6c      	ldr	r3, [pc, #432]	@ (8001ab4 <_ZN7Display8oledTaskEPv+0x290>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	2320      	movs	r3, #32
 8001908:	2232      	movs	r2, #50	@ 0x32
 800190a:	211d      	movs	r1, #29
 800190c:	202f      	movs	r0, #47	@ 0x2f
 800190e:	f003 fc2d 	bl	800516c <OLED_DrawRectWithFill>
			OLED_DrawRectWithFill(47, 41, 50, 44, is_task_alive_struct.senr);
 8001912:	4b68      	ldr	r3, [pc, #416]	@ (8001ab4 <_ZN7Display8oledTaskEPv+0x290>)
 8001914:	789b      	ldrb	r3, [r3, #2]
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	232c      	movs	r3, #44	@ 0x2c
 800191a:	2232      	movs	r2, #50	@ 0x32
 800191c:	2129      	movs	r1, #41	@ 0x29
 800191e:	202f      	movs	r0, #47	@ 0x2f
 8001920:	f003 fc24 	bl	800516c <OLED_DrawRectWithFill>
			OLED_DrawRectWithFill(47, 53, 50, 56, is_task_alive_struct.motn);
 8001924:	4b63      	ldr	r3, [pc, #396]	@ (8001ab4 <_ZN7Display8oledTaskEPv+0x290>)
 8001926:	78db      	ldrb	r3, [r3, #3]
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	2338      	movs	r3, #56	@ 0x38
 800192c:	2232      	movs	r2, #50	@ 0x32
 800192e:	2135      	movs	r1, #53	@ 0x35
 8001930:	202f      	movs	r0, #47	@ 0x2f
 8001932:	f003 fc1b 	bl	800516c <OLED_DrawRectWithFill>

			memset(&buf, 0, sizeof(buf));
 8001936:	f107 030c 	add.w	r3, r7, #12
 800193a:	220a      	movs	r2, #10
 800193c:	2100      	movs	r1, #0
 800193e:	4618      	mov	r0, r3
 8001940:	f00f fef6 	bl	8011730 <memset>
			snprintf((char*) buf, sizeof(buf), "%4.2f", sensor_data.imu->gyro[2]);
 8001944:	4b5c      	ldr	r3, [pc, #368]	@ (8001ab8 <_ZN7Display8oledTaskEPv+0x294>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fdfc 	bl	8000548 <__aeabi_f2d>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	f107 000c 	add.w	r0, r7, #12
 8001958:	e9cd 2300 	strd	r2, r3, [sp]
 800195c:	4a57      	ldr	r2, [pc, #348]	@ (8001abc <_ZN7Display8oledTaskEPv+0x298>)
 800195e:	210a      	movs	r1, #10
 8001960:	f00f fdb6 	bl	80114d0 <sniprintf>
			if (is_task_alive_struct.senr) {
 8001964:	4b53      	ldr	r3, [pc, #332]	@ (8001ab4 <_ZN7Display8oledTaskEPv+0x290>)
 8001966:	789b      	ldrb	r3, [r3, #2]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d007      	beq.n	800197c <_ZN7Display8oledTaskEPv+0x158>
				OLED_ShowString(80, 0, (uint8_t*) &buf);
 800196c:	f107 030c 	add.w	r3, r7, #12
 8001970:	461a      	mov	r2, r3
 8001972:	2100      	movs	r1, #0
 8001974:	2050      	movs	r0, #80	@ 0x50
 8001976:	f003 fb83 	bl	8005080 <OLED_ShowString>
 800197a:	e004      	b.n	8001986 <_ZN7Display8oledTaskEPv+0x162>

			} else {
				OLED_ShowString(80, 0, (uint8_t*) "NCAL");
 800197c:	4a50      	ldr	r2, [pc, #320]	@ (8001ac0 <_ZN7Display8oledTaskEPv+0x29c>)
 800197e:	2100      	movs	r1, #0
 8001980:	2050      	movs	r0, #80	@ 0x50
 8001982:	f003 fb7d 	bl	8005080 <OLED_ShowString>

			}

			memset(&buf, 0, sizeof(buf));
 8001986:	f107 030c 	add.w	r3, r7, #12
 800198a:	220a      	movs	r2, #10
 800198c:	2100      	movs	r1, #0
 800198e:	4618      	mov	r0, r3
 8001990:	f00f fece 	bl	8011730 <memset>
			snprintf((char*) buf, sizeof(buf), "%4.1f", sensor_data.yaw_abs);
 8001994:	4b48      	ldr	r3, [pc, #288]	@ (8001ab8 <_ZN7Display8oledTaskEPv+0x294>)
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe fdd5 	bl	8000548 <__aeabi_f2d>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	f107 000c 	add.w	r0, r7, #12
 80019a6:	e9cd 2300 	strd	r2, r3, [sp]
 80019aa:	4a46      	ldr	r2, [pc, #280]	@ (8001ac4 <_ZN7Display8oledTaskEPv+0x2a0>)
 80019ac:	210a      	movs	r1, #10
 80019ae:	f00f fd8f 	bl	80114d0 <sniprintf>
			OLED_ShowString(85, 12, (uint8_t*) &buf);
 80019b2:	f107 030c 	add.w	r3, r7, #12
 80019b6:	461a      	mov	r2, r3
 80019b8:	210c      	movs	r1, #12
 80019ba:	2055      	movs	r0, #85	@ 0x55
 80019bc:	f003 fb60 	bl	8005080 <OLED_ShowString>

			memset(&buf, 0, sizeof(buf));
 80019c0:	f107 030c 	add.w	r3, r7, #12
 80019c4:	220a      	movs	r2, #10
 80019c6:	2100      	movs	r1, #0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f00f feb1 	bl	8011730 <memset>
			snprintf((char*) buf, sizeof(buf), "%3.0f::%3.0f", sensor_data.ir_distL, sensor_data.ir_distR);
 80019ce:	4b3a      	ldr	r3, [pc, #232]	@ (8001ab8 <_ZN7Display8oledTaskEPv+0x294>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fdb8 	bl	8000548 <__aeabi_f2d>
 80019d8:	4604      	mov	r4, r0
 80019da:	460d      	mov	r5, r1
 80019dc:	4b36      	ldr	r3, [pc, #216]	@ (8001ab8 <_ZN7Display8oledTaskEPv+0x294>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fdb1 	bl	8000548 <__aeabi_f2d>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	f107 000c 	add.w	r0, r7, #12
 80019ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80019f2:	e9cd 4500 	strd	r4, r5, [sp]
 80019f6:	4a34      	ldr	r2, [pc, #208]	@ (8001ac8 <_ZN7Display8oledTaskEPv+0x2a4>)
 80019f8:	210a      	movs	r1, #10
 80019fa:	f00f fd69 	bl	80114d0 <sniprintf>
			OLED_ShowString(65, 24, (uint8_t*) &buf);
 80019fe:	f107 030c 	add.w	r3, r7, #12
 8001a02:	461a      	mov	r2, r3
 8001a04:	2118      	movs	r1, #24
 8001a06:	2041      	movs	r0, #65	@ 0x41
 8001a08:	f003 fb3a 	bl	8005080 <OLED_ShowString>

			memset(&buf, 0, sizeof(buf));
 8001a0c:	f107 030c 	add.w	r3, r7, #12
 8001a10:	220a      	movs	r2, #10
 8001a12:	2100      	movs	r1, #0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f00f fe8b 	bl	8011730 <memset>
			snprintf((char*) buf, sizeof(buf), "%4.2f", sensor_data.usonic_dist);
 8001a1a:	4b27      	ldr	r3, [pc, #156]	@ (8001ab8 <_ZN7Display8oledTaskEPv+0x294>)
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fd92 	bl	8000548 <__aeabi_f2d>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	f107 000c 	add.w	r0, r7, #12
 8001a2c:	e9cd 2300 	strd	r2, r3, [sp]
 8001a30:	4a22      	ldr	r2, [pc, #136]	@ (8001abc <_ZN7Display8oledTaskEPv+0x298>)
 8001a32:	210a      	movs	r1, #10
 8001a34:	f00f fd4c 	bl	80114d0 <sniprintf>
			OLED_ShowString(85, 36, (uint8_t*) &buf);
 8001a38:	f107 030c 	add.w	r3, r7, #12
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	2124      	movs	r1, #36	@ 0x24
 8001a40:	2055      	movs	r0, #85	@ 0x55
 8001a42:	f003 fb1d 	bl	8005080 <OLED_ShowString>

			memset(&buf, 0, sizeof(buf));
 8001a46:	f107 030c 	add.w	r3, r7, #12
 8001a4a:	220a      	movs	r2, #10
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f00f fe6e 	bl	8011730 <memset>
			snprintf((char*) buf, sizeof(buf), "%d", sensor_data.ql);
 8001a54:	4b18      	ldr	r3, [pc, #96]	@ (8001ab8 <_ZN7Display8oledTaskEPv+0x294>)
 8001a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a58:	f107 000c 	add.w	r0, r7, #12
 8001a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8001acc <_ZN7Display8oledTaskEPv+0x2a8>)
 8001a5e:	210a      	movs	r1, #10
 8001a60:	f00f fd36 	bl	80114d0 <sniprintf>
			OLED_ShowString(115, 48, (uint8_t*) &buf);
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	461a      	mov	r2, r3
 8001a6a:	2130      	movs	r1, #48	@ 0x30
 8001a6c:	2073      	movs	r0, #115	@ 0x73
 8001a6e:	f003 fb07 	bl	8005080 <OLED_ShowString>


			OLED_Refresh_Gram();
 8001a72:	f003 f9cb 	bl	8004e0c <OLED_Refresh_Gram>
			self = !self;
 8001a76:	7dfb      	ldrb	r3, [r7, #23]
 8001a78:	f083 0301 	eor.w	r3, r3, #1
 8001a7c:	75fb      	strb	r3, [r7, #23]
			memset((void*) &is_task_alive_struct, 0, sizeof(isTaskAlive_t));
 8001a7e:	2204      	movs	r2, #4
 8001a80:	2100      	movs	r1, #0
 8001a82:	480c      	ldr	r0, [pc, #48]	@ (8001ab4 <_ZN7Display8oledTaskEPv+0x290>)
 8001a84:	f00f fe54 	bl	8011730 <memset>
			osDelay(250);
 8001a88:	20fa      	movs	r0, #250	@ 0xfa
 8001a8a:	f00a fee1 	bl	800c850 <osDelay>
			OLED_DrawRectWithFill(47, 17, 50, 20, self);
 8001a8e:	e72f      	b.n	80018f0 <_ZN7Display8oledTaskEPv+0xcc>
 8001a90:	08013648 	.word	0x08013648
 8001a94:	08013650 	.word	0x08013650
 8001a98:	08013658 	.word	0x08013658
 8001a9c:	08013660 	.word	0x08013660
 8001aa0:	08013668 	.word	0x08013668
 8001aa4:	08013670 	.word	0x08013670
 8001aa8:	08013674 	.word	0x08013674
 8001aac:	08013678 	.word	0x08013678
 8001ab0:	0801367c 	.word	0x0801367c
 8001ab4:	20000288 	.word	0x20000288
 8001ab8:	20000244 	.word	0x20000244
 8001abc:	08013684 	.word	0x08013684
 8001ac0:	0801368c 	.word	0x0801368c
 8001ac4:	08013694 	.word	0x08013694
 8001ac8:	0801369c 	.word	0x0801369c
 8001acc:	080136ac 	.word	0x080136ac

08001ad0 <_ZN9AppMotion16MotionControllerD1Ev>:
			void move(bool isFwd, uint32_t arg, uint32_t speed, bool isCrawl, bool nostop);
			void emergencyStop();
			void task2ScanAndRot(bool dir);
			void task2ScanAndReturn(bool dir);
			void task2PassObstOne(bool dir);
			~MotionController() {
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
			}
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
	...

08001ae8 <_ZL14DWT_Delay_Initv>:
void sensorIRTask(void *pv);
void sensorUSTask(void *pv);
void sensorIMUTask(void *pv);

// ---- µs delay using DWT cycle counter (Cortex-M4) ----
static inline void DWT_Delay_Init(void){
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001aec:	4b08      	ldr	r3, [pc, #32]	@ (8001b10 <_ZL14DWT_Delay_Initv+0x28>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	4a07      	ldr	r2, [pc, #28]	@ (8001b10 <_ZL14DWT_Delay_Initv+0x28>)
 8001af2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001af6:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001af8:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <_ZL14DWT_Delay_Initv+0x2c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a05      	ldr	r2, [pc, #20]	@ (8001b14 <_ZL14DWT_Delay_Initv+0x2c>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	6013      	str	r3, [r2, #0]
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000edf0 	.word	0xe000edf0
 8001b14:	e0001000 	.word	0xe0001000

08001b18 <_ZL8delay_usm>:
static inline void delay_us(uint32_t us){
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 8001b20:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <_ZL8delay_usm+0x4c>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	60fb      	str	r3, [r7, #12]
    uint32_t cycles = (SystemCoreClock/1000000U) * us;
 8001b26:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <_ZL8delay_usm+0x50>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a10      	ldr	r2, [pc, #64]	@ (8001b6c <_ZL8delay_usm+0x54>)
 8001b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b30:	0c9a      	lsrs	r2, r3, #18
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	fb02 f303 	mul.w	r3, r2, r3
 8001b38:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < cycles) { __NOP(); }
 8001b3a:	e000      	b.n	8001b3e <_ZL8delay_usm+0x26>
 8001b3c:	bf00      	nop
 8001b3e:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <_ZL8delay_usm+0x4c>)
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	bf8c      	ite	hi
 8001b4c:	2301      	movhi	r3, #1
 8001b4e:	2300      	movls	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f2      	bne.n	8001b3c <_ZL8delay_usm+0x24>
}
 8001b56:	bf00      	nop
 8001b58:	bf00      	nop
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e0001000 	.word	0xe0001000
 8001b68:	20000004 	.word	0x20000004
 8001b6c:	431bde83 	.word	0x431bde83

08001b70 <_ZL16ticks_to_us_TIM8m>:

static inline float ticks_to_us_TIM8(uint32_t ticks) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  // adjust if you’re using a different timer/prescaler
  uint32_t tim_clk = HAL_RCC_GetPCLK2Freq();        // TIM8 on APB2
 8001b78:	f007 fe30 	bl	80097dc <HAL_RCC_GetPCLK2Freq>
 8001b7c:	60f8      	str	r0, [r7, #12]
  if ((RCC->CFGR & RCC_CFGR_PPRE2) && (RCC->CFGR & RCC_CFGR_PPRE2) != RCC_CFGR_PPRE2_DIV1) tim_clk *= 2U;
 8001b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bec <_ZL16ticks_to_us_TIM8m+0x7c>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d007      	beq.n	8001b9a <_ZL16ticks_to_us_TIM8m+0x2a>
 8001b8a:	4b18      	ldr	r3, [pc, #96]	@ (8001bec <_ZL16ticks_to_us_TIM8m+0x7c>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <_ZL16ticks_to_us_TIM8m+0x2a>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <_ZL16ticks_to_us_TIM8m+0x2c>
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d002      	beq.n	8001ba6 <_ZL16ticks_to_us_TIM8m+0x36>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	60fb      	str	r3, [r7, #12]
  float tick_us = ((float)(htim8.Init.Prescaler + 1U) * 1e6f) / (float)tim_clk;
 8001ba6:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <_ZL16ticks_to_us_TIM8m+0x80>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	3301      	adds	r3, #1
 8001bac:	ee07 3a90 	vmov	s15, r3
 8001bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bb4:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001bf4 <_ZL16ticks_to_us_TIM8m+0x84>
 8001bb8:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	ee07 3a90 	vmov	s15, r3
 8001bc2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bca:	edc7 7a02 	vstr	s15, [r7, #8]
  return ticks * tick_us;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	ee07 3a90 	vmov	s15, r3
 8001bd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bd8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001be0:	eeb0 0a67 	vmov.f32	s0, s15
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	20000aa0 	.word	0x20000aa0
 8001bf4:	49742400 	.word	0x49742400

08001bf8 <initializeCPPconstructs>:
/*****************************************************************************************/

/*
 * This function initializes the C++ stuff, called from within main() context.
 */
void initializeCPPconstructs(void) {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0

	sensor_data.is_allow_motor_override = true;
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c6c <initializeCPPconstructs+0x74>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	sensor_data.ir_dist_th_L = 10.0f;
 8001c04:	4b19      	ldr	r3, [pc, #100]	@ (8001c6c <initializeCPPconstructs+0x74>)
 8001c06:	4a1a      	ldr	r2, [pc, #104]	@ (8001c70 <initializeCPPconstructs+0x78>)
 8001c08:	62da      	str	r2, [r3, #44]	@ 0x2c
	sensor_data.ir_dist_th_R = 10.0f;
 8001c0a:	4b18      	ldr	r3, [pc, #96]	@ (8001c6c <initializeCPPconstructs+0x74>)
 8001c0c:	4a18      	ldr	r2, [pc, #96]	@ (8001c70 <initializeCPPconstructs+0x78>)
 8001c0e:	631a      	str	r2, [r3, #48]	@ 0x30

	us_evt = osEventFlagsNew(NULL);
 8001c10:	2000      	movs	r0, #0
 8001c12:	f00a fe38 	bl	800c886 <osEventFlagsNew>
 8001c16:	4603      	mov	r3, r0
 8001c18:	4a16      	ldr	r2, [pc, #88]	@ (8001c74 <initializeCPPconstructs+0x7c>)
 8001c1a:	6013      	str	r3, [r2, #0]

	// create instance of the Task
	// 1. Processor related task
	processor.start();
 8001c1c:	4816      	ldr	r0, [pc, #88]	@ (8001c78 <initializeCPPconstructs+0x80>)
 8001c1e:	f002 fa41 	bl	80040a4 <_ZN9AppParser9Processor5startEv>

	// 2. Motor related task
	controller.start();
 8001c22:	4816      	ldr	r0, [pc, #88]	@ (8001c7c <initializeCPPconstructs+0x84>)
 8001c24:	f000 ffac 	bl	8002b80 <_ZN9AppMotion16MotionController5startEv>


	// 3. Display related task
	oledTaskHandle = osThreadNew(Display::oledTask, NULL, &oledTask_attr);
 8001c28:	4a15      	ldr	r2, [pc, #84]	@ (8001c80 <initializeCPPconstructs+0x88>)
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4815      	ldr	r0, [pc, #84]	@ (8001c84 <initializeCPPconstructs+0x8c>)
 8001c2e:	f00a fd5d 	bl	800c6ec <osThreadNew>
 8001c32:	4603      	mov	r3, r0
 8001c34:	4a14      	ldr	r2, [pc, #80]	@ (8001c88 <initializeCPPconstructs+0x90>)
 8001c36:	6013      	str	r3, [r2, #0]

	// 4. Sensor related task
	imuTaskHandle = osThreadNew(sensorIMUTask, NULL, &imuTask_attr);
 8001c38:	4a14      	ldr	r2, [pc, #80]	@ (8001c8c <initializeCPPconstructs+0x94>)
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4814      	ldr	r0, [pc, #80]	@ (8001c90 <initializeCPPconstructs+0x98>)
 8001c3e:	f00a fd55 	bl	800c6ec <osThreadNew>
 8001c42:	4603      	mov	r3, r0
 8001c44:	4a13      	ldr	r2, [pc, #76]	@ (8001c94 <initializeCPPconstructs+0x9c>)
 8001c46:	6013      	str	r3, [r2, #0]
	irTaskHandle = osThreadNew(sensorIRTask, NULL, &irTask_attr);
 8001c48:	4a13      	ldr	r2, [pc, #76]	@ (8001c98 <initializeCPPconstructs+0xa0>)
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4813      	ldr	r0, [pc, #76]	@ (8001c9c <initializeCPPconstructs+0xa4>)
 8001c4e:	f00a fd4d 	bl	800c6ec <osThreadNew>
 8001c52:	4603      	mov	r3, r0
 8001c54:	4a12      	ldr	r2, [pc, #72]	@ (8001ca0 <initializeCPPconstructs+0xa8>)
 8001c56:	6013      	str	r3, [r2, #0]
	usTaskHandle = osThreadNew(sensorUSTask, NULL, &usTask_attr);
 8001c58:	4a12      	ldr	r2, [pc, #72]	@ (8001ca4 <initializeCPPconstructs+0xac>)
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4812      	ldr	r0, [pc, #72]	@ (8001ca8 <initializeCPPconstructs+0xb0>)
 8001c5e:	f00a fd45 	bl	800c6ec <osThreadNew>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4a11      	ldr	r2, [pc, #68]	@ (8001cac <initializeCPPconstructs+0xb4>)
 8001c66:	6013      	str	r3, [r2, #0]

}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20000244 	.word	0x20000244
 8001c70:	41200000 	.word	0x41200000
 8001c74:	20000294 	.word	0x20000294
 8001c78:	20000468 	.word	0x20000468
 8001c7c:	2000030c 	.word	0x2000030c
 8001c80:	080137d0 	.word	0x080137d0
 8001c84:	08001825 	.word	0x08001825
 8001c88:	20000298 	.word	0x20000298
 8001c8c:	0801383c 	.word	0x0801383c
 8001c90:	08002031 	.word	0x08002031
 8001c94:	200002a4 	.word	0x200002a4
 8001c98:	080137f4 	.word	0x080137f4
 8001c9c:	08001cb1 	.word	0x08001cb1
 8001ca0:	2000029c 	.word	0x2000029c
 8001ca4:	08013818 	.word	0x08013818
 8001ca8:	08001f3d 	.word	0x08001f3d
 8001cac:	200002a0 	.word	0x200002a0

08001cb0 <sensorIRTask>:
int bufferIndex = 0;          // Current index in the buffer
float ir_distL_Avg = 0;       // Average distance for left IR sensor
float ir_distR_Avg = 0;       // Average distance for right IR sensor


void sensorIRTask(void *pv) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b090      	sub	sp, #64	@ 0x40
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]

	// init sensorIRTask
    const int NSAMPLES = 16;
 8001cb8:	2310      	movs	r3, #16
 8001cba:	61fb      	str	r3, [r7, #28]
    const uint32_t poll_timeout = 2;  // ms per conversion
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	61bb      	str	r3, [r7, #24]

    for (;;) {
        uint32_t acc1 = 0, acc2 = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	63bb      	str	r3, [r7, #56]	@ 0x38

        for (int i = 0; i < NSAMPLES; ++i) {
 8001cc8:	2300      	movs	r3, #0
 8001cca:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ccc:	e022      	b.n	8001d14 <sensorIRTask+0x64>
            HAL_ADC_Start(&hadc1);
 8001cce:	488c      	ldr	r0, [pc, #560]	@ (8001f00 <sensorIRTask+0x250>)
 8001cd0:	f004 fd28 	bl	8006724 <HAL_ADC_Start>

            // Rank 1 -> IR Left (ADC channel configured as Rank 1 in CubeMX)
            HAL_ADC_PollForConversion(&hadc1, poll_timeout);
 8001cd4:	2102      	movs	r1, #2
 8001cd6:	488a      	ldr	r0, [pc, #552]	@ (8001f00 <sensorIRTask+0x250>)
 8001cd8:	f004 fe29 	bl	800692e <HAL_ADC_PollForConversion>
            uint16_t raw1 = HAL_ADC_GetValue(&hadc1);
 8001cdc:	4888      	ldr	r0, [pc, #544]	@ (8001f00 <sensorIRTask+0x250>)
 8001cde:	f004 feb1 	bl	8006a44 <HAL_ADC_GetValue>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	817b      	strh	r3, [r7, #10]
            acc1 += raw1;
 8001ce6:	897b      	ldrh	r3, [r7, #10]
 8001ce8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001cea:	4413      	add	r3, r2
 8001cec:	63fb      	str	r3, [r7, #60]	@ 0x3c

            // Rank 2 -> IR Right (ADC channel configured as Rank 2 in CubeMX)
            HAL_ADC_PollForConversion(&hadc1, poll_timeout);
 8001cee:	2102      	movs	r1, #2
 8001cf0:	4883      	ldr	r0, [pc, #524]	@ (8001f00 <sensorIRTask+0x250>)
 8001cf2:	f004 fe1c 	bl	800692e <HAL_ADC_PollForConversion>
            uint16_t raw2 = HAL_ADC_GetValue(&hadc1);
 8001cf6:	4882      	ldr	r0, [pc, #520]	@ (8001f00 <sensorIRTask+0x250>)
 8001cf8:	f004 fea4 	bl	8006a44 <HAL_ADC_GetValue>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	813b      	strh	r3, [r7, #8]
            acc2 += raw2;
 8001d00:	893b      	ldrh	r3, [r7, #8]
 8001d02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001d04:	4413      	add	r3, r2
 8001d06:	63bb      	str	r3, [r7, #56]	@ 0x38

            HAL_ADC_Stop(&hadc1);
 8001d08:	487d      	ldr	r0, [pc, #500]	@ (8001f00 <sensorIRTask+0x250>)
 8001d0a:	f004 fddd 	bl	80068c8 <HAL_ADC_Stop>
        for (int i = 0; i < NSAMPLES; ++i) {
 8001d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d10:	3301      	adds	r3, #1
 8001d12:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d16:	2b0f      	cmp	r3, #15
 8001d18:	ddd9      	ble.n	8001cce <sensorIRTask+0x1e>
        }

        uint16_t raw1 = acc1 / NSAMPLES;
 8001d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	82fb      	strh	r3, [r7, #22]
        uint16_t raw2 = acc2 / NSAMPLES;
 8001d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d22:	091b      	lsrs	r3, r3, #4
 8001d24:	82bb      	strh	r3, [r7, #20]

        // ADC -> volts (12-bit, 3.3 V ref)
        float v1 = (raw1 * 3.3f) / 4095.0f;
 8001d26:	8afb      	ldrh	r3, [r7, #22]
 8001d28:	ee07 3a90 	vmov	s15, r3
 8001d2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d30:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8001f04 <sensorIRTask+0x254>
 8001d34:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d38:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8001f08 <sensorIRTask+0x258>
 8001d3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d40:	edc7 7a04 	vstr	s15, [r7, #16]
        float v2 = (raw2 * 3.3f) / 4095.0f;
 8001d44:	8abb      	ldrh	r3, [r7, #20]
 8001d46:	ee07 3a90 	vmov	s15, r3
 8001d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d4e:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8001f04 <sensorIRTask+0x254>
 8001d52:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d56:	eddf 6a6c 	vldr	s13, [pc, #432]	@ 8001f08 <sensorIRTask+0x258>
 8001d5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d5e:	edc7 7a03 	vstr	s15, [r7, #12]

        // Simple inverse-voltage distance fit (same as your previous main.c)
        float d1 = (v1 > 0.1f) ? (13.0f / v1 - 0.42f) : -1.0f;
 8001d62:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d66:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8001f0c <sensorIRTask+0x25c>
 8001d6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d72:	dd0a      	ble.n	8001d8a <sensorIRTask+0xda>
 8001d74:	eef2 6a0a 	vmov.f32	s13, #42	@ 0x41500000  13.0
 8001d78:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d80:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8001f10 <sensorIRTask+0x260>
 8001d84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d88:	e001      	b.n	8001d8e <sensorIRTask+0xde>
 8001d8a:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8001d8e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        float d2 = (v2 > 0.1f) ? (13.0f / v2 - 0.42f) : -1.0f;
 8001d92:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d96:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8001f0c <sensorIRTask+0x25c>
 8001d9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da2:	dd0a      	ble.n	8001dba <sensorIRTask+0x10a>
 8001da4:	eef2 6a0a 	vmov.f32	s13, #42	@ 0x41500000  13.0
 8001da8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001dac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001db0:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8001f10 <sensorIRTask+0x260>
 8001db4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001db8:	e001      	b.n	8001dbe <sensorIRTask+0x10e>
 8001dba:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8001dbe:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

        // Clamp to a reasonable range (10–80 cm) to avoid spikes
        if (d1 > 80.0f) d1 = 80.0f; if (d1 > 0 && d1 < 10.0f) d1 = 10.0f;
 8001dc2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001dc6:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001f14 <sensorIRTask+0x264>
 8001dca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd2:	dd01      	ble.n	8001dd8 <sensorIRTask+0x128>
 8001dd4:	4b50      	ldr	r3, [pc, #320]	@ (8001f18 <sensorIRTask+0x268>)
 8001dd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8001dd8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001ddc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de4:	dd0a      	ble.n	8001dfc <sensorIRTask+0x14c>
 8001de6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001dea:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001dee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df6:	d501      	bpl.n	8001dfc <sensorIRTask+0x14c>
 8001df8:	4b48      	ldr	r3, [pc, #288]	@ (8001f1c <sensorIRTask+0x26c>)
 8001dfa:	633b      	str	r3, [r7, #48]	@ 0x30
        if (d2 > 80.0f) d2 = 80.0f; if (d2 > 0 && d2 < 10.0f) d2 = 10.0f;
 8001dfc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e00:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8001f14 <sensorIRTask+0x264>
 8001e04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0c:	dd01      	ble.n	8001e12 <sensorIRTask+0x162>
 8001e0e:	4b42      	ldr	r3, [pc, #264]	@ (8001f18 <sensorIRTask+0x268>)
 8001e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e12:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1e:	dd0a      	ble.n	8001e36 <sensorIRTask+0x186>
 8001e20:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e24:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001e28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e30:	d501      	bpl.n	8001e36 <sensorIRTask+0x186>
 8001e32:	4b3a      	ldr	r3, [pc, #232]	@ (8001f1c <sensorIRTask+0x26c>)
 8001e34:	62fb      	str	r3, [r7, #44]	@ 0x2c

        // Optional moving average using your ring buffer
        irBufferL[bufferIndex] = d1;
 8001e36:	4b3a      	ldr	r3, [pc, #232]	@ (8001f20 <sensorIRTask+0x270>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a3a      	ldr	r2, [pc, #232]	@ (8001f24 <sensorIRTask+0x274>)
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e42:	601a      	str	r2, [r3, #0]
        irBufferR[bufferIndex] = d2;
 8001e44:	4b36      	ldr	r3, [pc, #216]	@ (8001f20 <sensorIRTask+0x270>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a37      	ldr	r2, [pc, #220]	@ (8001f28 <sensorIRTask+0x278>)
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e50:	601a      	str	r2, [r3, #0]
        bufferIndex = (bufferIndex + 1) % BUFFER_SIZE;
 8001e52:	4b33      	ldr	r3, [pc, #204]	@ (8001f20 <sensorIRTask+0x270>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	3301      	adds	r3, #1
 8001e58:	425a      	negs	r2, r3
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	f002 0203 	and.w	r2, r2, #3
 8001e62:	bf58      	it	pl
 8001e64:	4253      	negpl	r3, r2
 8001e66:	4a2e      	ldr	r2, [pc, #184]	@ (8001f20 <sensorIRTask+0x270>)
 8001e68:	6013      	str	r3, [r2, #0]

        float sumL = 0, sumR = 0;
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e70:	f04f 0300 	mov.w	r3, #0
 8001e74:	627b      	str	r3, [r7, #36]	@ 0x24
        for (int i = 0; i < BUFFER_SIZE; ++i) { sumL += irBufferL[i]; sumR += irBufferR[i]; }
 8001e76:	2300      	movs	r3, #0
 8001e78:	623b      	str	r3, [r7, #32]
 8001e7a:	e01a      	b.n	8001eb2 <sensorIRTask+0x202>
 8001e7c:	4a29      	ldr	r2, [pc, #164]	@ (8001f24 <sensorIRTask+0x274>)
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	edd3 7a00 	vldr	s15, [r3]
 8001e88:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e90:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 8001e94:	4a24      	ldr	r2, [pc, #144]	@ (8001f28 <sensorIRTask+0x278>)
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	edd3 7a00 	vldr	s15, [r3]
 8001ea0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	623b      	str	r3, [r7, #32]
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	dde1      	ble.n	8001e7c <sensorIRTask+0x1cc>
        ir_distL_Avg = sumL / BUFFER_SIZE;
 8001eb8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001ebc:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001ec0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ec4:	4b19      	ldr	r3, [pc, #100]	@ (8001f2c <sensorIRTask+0x27c>)
 8001ec6:	edc3 7a00 	vstr	s15, [r3]
        ir_distR_Avg = sumR / BUFFER_SIZE;
 8001eca:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001ece:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001ed2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ed6:	4b16      	ldr	r3, [pc, #88]	@ (8001f30 <sensorIRTask+0x280>)
 8001ed8:	edc3 7a00 	vstr	s15, [r3]

        // Publish to shared sensor struct
        sensor_data.ir_distL = ir_distL_Avg;   // left IR in cm
 8001edc:	4b13      	ldr	r3, [pc, #76]	@ (8001f2c <sensorIRTask+0x27c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a14      	ldr	r2, [pc, #80]	@ (8001f34 <sensorIRTask+0x284>)
 8001ee2:	6053      	str	r3, [r2, #4]
        sensor_data.ir_distR = ir_distR_Avg;   // right IR in cm
 8001ee4:	4b12      	ldr	r3, [pc, #72]	@ (8001f30 <sensorIRTask+0x280>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a12      	ldr	r2, [pc, #72]	@ (8001f34 <sensorIRTask+0x284>)
 8001eea:	6093      	str	r3, [r2, #8]

        is_task_alive_struct.senr = true;
 8001eec:	4b12      	ldr	r3, [pc, #72]	@ (8001f38 <sensorIRTask+0x288>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	709a      	strb	r2, [r3, #2]
        osDelay(100);     // ~10 Hz
 8001ef2:	2064      	movs	r0, #100	@ 0x64
 8001ef4:	f00a fcac 	bl	800c850 <osDelay>
        osThreadYield();
 8001ef8:	f00a fc8a 	bl	800c810 <osThreadYield>
    }
 8001efc:	e6e0      	b.n	8001cc0 <sensorIRTask+0x10>
 8001efe:	bf00      	nop
 8001f00:	200001fc 	.word	0x200001fc
 8001f04:	40533333 	.word	0x40533333
 8001f08:	457ff000 	.word	0x457ff000
 8001f0c:	3dcccccd 	.word	0x3dcccccd
 8001f10:	3ed70a3d 	.word	0x3ed70a3d
 8001f14:	42a00000 	.word	0x42a00000
 8001f18:	42a00000 	.word	0x42a00000
 8001f1c:	41200000 	.word	0x41200000
 8001f20:	20000494 	.word	0x20000494
 8001f24:	20000474 	.word	0x20000474
 8001f28:	20000484 	.word	0x20000484
 8001f2c:	20000498 	.word	0x20000498
 8001f30:	2000049c 	.word	0x2000049c
 8001f34:	20000244 	.word	0x20000244
 8001f38:	20000288 	.word	0x20000288

08001f3c <sensorUSTask>:
	//	sensor_data.ir_distR = 10.0;
	// sensor_data.usonic_dist = 10.0;
	//}
}

void sensorUSTask(void *pv) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08a      	sub	sp, #40	@ 0x28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]

	// init sensorUSTask
    DWT_Delay_Init();  // precise µs timing for 10 µs TRIG pulse
 8001f44:	f7ff fdd0 	bl	8001ae8 <_ZL14DWT_Delay_Initv>

    for (;;) {
      // Arm timer for rising edge + start capture IRQ
      __HAL_TIM_SET_COUNTER(&htim8, 0);
 8001f48:	4b30      	ldr	r3, [pc, #192]	@ (800200c <sensorUSTask+0xd0>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	625a      	str	r2, [r3, #36]	@ 0x24
      __HAL_TIM_SET_CAPTUREPOLARITY(&htim8, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8001f50:	4b2e      	ldr	r3, [pc, #184]	@ (800200c <sensorUSTask+0xd0>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6a1a      	ldr	r2, [r3, #32]
 8001f56:	4b2d      	ldr	r3, [pc, #180]	@ (800200c <sensorUSTask+0xd0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001f5e:	621a      	str	r2, [r3, #32]
 8001f60:	4b2a      	ldr	r3, [pc, #168]	@ (800200c <sensorUSTask+0xd0>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b29      	ldr	r3, [pc, #164]	@ (800200c <sensorUSTask+0xd0>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6a12      	ldr	r2, [r2, #32]
 8001f6a:	621a      	str	r2, [r3, #32]
      HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_2);
 8001f6c:	2104      	movs	r1, #4
 8001f6e:	4827      	ldr	r0, [pc, #156]	@ (800200c <sensorUSTask+0xd0>)
 8001f70:	f007 fe08 	bl	8009b84 <HAL_TIM_IC_Start_IT>

      // 10–12 µs trigger pulse
      HAL_GPIO_WritePin(asy_US_TRIG_GPIO_Port, asy_US_TRIG_Pin, GPIO_PIN_SET);
 8001f74:	2201      	movs	r2, #1
 8001f76:	2104      	movs	r1, #4
 8001f78:	4825      	ldr	r0, [pc, #148]	@ (8002010 <sensorUSTask+0xd4>)
 8001f7a:	f005 fe3f 	bl	8007bfc <HAL_GPIO_WritePin>
      delay_us(12);
 8001f7e:	200c      	movs	r0, #12
 8001f80:	f7ff fdca 	bl	8001b18 <_ZL8delay_usm>
      HAL_GPIO_WritePin(asy_US_TRIG_GPIO_Port, asy_US_TRIG_Pin, GPIO_PIN_RESET);
 8001f84:	2200      	movs	r2, #0
 8001f86:	2104      	movs	r1, #4
 8001f88:	4821      	ldr	r0, [pc, #132]	@ (8002010 <sensorUSTask+0xd4>)
 8001f8a:	f005 fe37 	bl	8007bfc <HAL_GPIO_WritePin>

      // Wait for ISR to flag completion (timeout ~30 ms)
      uint32_t flags = osEventFlagsWait(us_evt, US_EVT_DONE, osFlagsWaitAny, 30);
 8001f8e:	4b21      	ldr	r3, [pc, #132]	@ (8002014 <sensorUSTask+0xd8>)
 8001f90:	6818      	ldr	r0, [r3, #0]
 8001f92:	231e      	movs	r3, #30
 8001f94:	2200      	movs	r2, #0
 8001f96:	2101      	movs	r1, #1
 8001f98:	f00a fcf6 	bl	800c988 <osEventFlagsWait>
 8001f9c:	6278      	str	r0, [r7, #36]	@ 0x24
      if ((int32_t)flags >= 0) {
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	db2c      	blt.n	8001ffe <sensorUSTask+0xc2>
        // snapshot and compute
        uint32_t rise = us_rise, fall = us_fall;
 8001fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8002018 <sensorUSTask+0xdc>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	623b      	str	r3, [r7, #32]
 8001faa:	4b1c      	ldr	r3, [pc, #112]	@ (800201c <sensorUSTask+0xe0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	61fb      	str	r3, [r7, #28]
        uint32_t period = htim8.Init.Period + 1U;
 8001fb0:	4b16      	ldr	r3, [pc, #88]	@ (800200c <sensorUSTask+0xd0>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	61bb      	str	r3, [r7, #24]
        uint32_t ticks  = (fall >= rise) ? (fall - rise) : (period - rise + fall);
 8001fb8:	69fa      	ldr	r2, [r7, #28]
 8001fba:	6a3b      	ldr	r3, [r7, #32]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d303      	bcc.n	8001fc8 <sensorUSTask+0x8c>
 8001fc0:	69fa      	ldr	r2, [r7, #28]
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	e004      	b.n	8001fd2 <sensorUSTask+0x96>
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	1ad2      	subs	r2, r2, r3
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]

        float pulse_us = ticks_to_us_TIM8(ticks);
 8001fd4:	6978      	ldr	r0, [r7, #20]
 8001fd6:	f7ff fdcb 	bl	8001b70 <_ZL16ticks_to_us_TIM8m>
 8001fda:	ed87 0a04 	vstr	s0, [r7, #16]
        float cm = (pulse_us * 0.0343f) * 0.5f;   // speed of sound, round-trip
 8001fde:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fe2:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002020 <sensorUSTask+0xe4>
 8001fe6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fea:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001fee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ff2:	edc7 7a03 	vstr	s15, [r7, #12]

        // publish (writer)
        sensor_data.usonic_dist = cm;             // <-- now the display can show it
 8001ff6:	4a0b      	ldr	r2, [pc, #44]	@ (8002024 <sensorUSTask+0xe8>)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	60d3      	str	r3, [r2, #12]
 8001ffc:	e002      	b.n	8002004 <sensorUSTask+0xc8>
      } else {
        // timeout
        sensor_data.usonic_dist = -1.0f;
 8001ffe:	4b09      	ldr	r3, [pc, #36]	@ (8002024 <sensorUSTask+0xe8>)
 8002000:	4a09      	ldr	r2, [pc, #36]	@ (8002028 <sensorUSTask+0xec>)
 8002002:	60da      	str	r2, [r3, #12]
      }

      osDelay(60);  // ~16 Hz
 8002004:	203c      	movs	r0, #60	@ 0x3c
 8002006:	f00a fc23 	bl	800c850 <osDelay>
    }
 800200a:	e79d      	b.n	8001f48 <sensorUSTask+0xc>
 800200c:	20000aa0 	.word	0x20000aa0
 8002010:	40020c00 	.word	0x40020c00
 8002014:	20000294 	.word	0x20000294
 8002018:	2000028c 	.word	0x2000028c
 800201c:	20000290 	.word	0x20000290
 8002020:	3d0c7e28 	.word	0x3d0c7e28
 8002024:	20000244 	.word	0x20000244
 8002028:	bf800000 	.word	0xbf800000
 800202c:	00000000 	.word	0x00000000

08002030 <sensorIMUTask>:
float SEq_1 = 1.0f;
float SEq_2 = 0.0f;
float SEq_3 = 0.0f;
float SEq_4 = 0.0f;

void sensorIMUTask(void *pv) {
 8002030:	b5b0      	push	{r4, r5, r7, lr}
 8002032:	ed2d 8b06 	vpush	{d8-d10}
 8002036:	b0a0      	sub	sp, #128	@ 0x80
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]

	/**Init IMU**/
	IMU_Initialise(&imu, &hi2c2);
 800203c:	498c      	ldr	r1, [pc, #560]	@ (8002270 <sensorIMUTask+0x240>)
 800203e:	488d      	ldr	r0, [pc, #564]	@ (8002274 <sensorIMUTask+0x244>)
 8002040:	f7fe ffb8 	bl	8000fb4 <IMU_Initialise>
	osDelay(400);
 8002044:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002048:	f00a fc02 	bl	800c850 <osDelay>
	Gyro_calibrate(&imu);
 800204c:	4889      	ldr	r0, [pc, #548]	@ (8002274 <sensorIMUTask+0x244>)
 800204e:	f7ff f99f 	bl	8001390 <Gyro_calibrate>
	Mag_init(&imu);
 8002052:	4888      	ldr	r0, [pc, #544]	@ (8002274 <sensorIMUTask+0x244>)
 8002054:	f7ff fb16 	bl	8001684 <Mag_init>
	sensor_data.imu = &imu;
 8002058:	4b87      	ldr	r3, [pc, #540]	@ (8002278 <sensorIMUTask+0x248>)
 800205a:	4a86      	ldr	r2, [pc, #536]	@ (8002274 <sensorIMUTask+0x244>)
 800205c:	601a      	str	r2, [r3, #0]
	char sbuf[100] = { 0 };
 800205e:	f107 030c 	add.w	r3, r7, #12
 8002062:	2264      	movs	r2, #100	@ 0x64
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f00f fb62 	bl	8011730 <memset>
	HAL_StatusTypeDef result;

	/**I2C scanner for debug purposes **/
	printf("Scanning I2C bus:\r\n");
 800206c:	4883      	ldr	r0, [pc, #524]	@ (800227c <sensorIMUTask+0x24c>)
 800206e:	f00f fa27 	bl	80114c0 <puts>
	for (uint8_t addr = 1; addr < 127; addr++) {
 8002072:	2301      	movs	r3, #1
 8002074:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002078:	e029      	b.n	80020ce <sensorIMUTask+0x9e>
		result = HAL_I2C_IsDeviceReady(&hi2c2, addr << 1, 1, 10);
 800207a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800207e:	b29b      	uxth	r3, r3
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	b299      	uxth	r1, r3
 8002084:	230a      	movs	r3, #10
 8002086:	2201      	movs	r2, #1
 8002088:	4879      	ldr	r0, [pc, #484]	@ (8002270 <sensorIMUTask+0x240>)
 800208a:	f006 fa59 	bl	8008540 <HAL_I2C_IsDeviceReady>
 800208e:	4603      	mov	r3, r0
 8002090:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
		if (result == HAL_OK) {
 8002094:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8002098:	2b00      	cmp	r3, #0
 800209a:	d113      	bne.n	80020c4 <sensorIMUTask+0x94>
			uint16_t len = sprintf(&sbuf[0], "I2C device found at 0x%02X\r\n", addr);
 800209c:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 80020a0:	f107 030c 	add.w	r3, r7, #12
 80020a4:	4976      	ldr	r1, [pc, #472]	@ (8002280 <sensorIMUTask+0x250>)
 80020a6:	4618      	mov	r0, r3
 80020a8:	f00f fa48 	bl	801153c <siprintf>
 80020ac:	4603      	mov	r3, r0
 80020ae:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
			HAL_UART_Transmit(&huart3, (uint8_t*)sbuf, len, HAL_MAX_DELAY);
 80020b2:	f8b7 2070 	ldrh.w	r2, [r7, #112]	@ 0x70
 80020b6:	f107 010c 	add.w	r1, r7, #12
 80020ba:	f04f 33ff 	mov.w	r3, #4294967295
 80020be:	4871      	ldr	r0, [pc, #452]	@ (8002284 <sensorIMUTask+0x254>)
 80020c0:	f009 f85e 	bl	800b180 <HAL_UART_Transmit>
	for (uint8_t addr = 1; addr < 127; addr++) {
 80020c4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80020c8:	3301      	adds	r3, #1
 80020ca:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80020ce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80020d2:	2b7e      	cmp	r3, #126	@ 0x7e
 80020d4:	d9d1      	bls.n	800207a <sensorIMUTask+0x4a>
		}
	}
	uint32_t timeNow = HAL_GetTick();
 80020d6:	f004 fab1 	bl	800663c <HAL_GetTick>
 80020da:	67b8      	str	r0, [r7, #120]	@ 0x78
	float DEG2RAD = 0.017453292519943295769236907684886f;
 80020dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002288 <sensorIMUTask+0x258>)
 80020de:	677b      	str	r3, [r7, #116]	@ 0x74

	for (;;) {
		osDelay(80); // 281hz gyro
 80020e0:	2050      	movs	r0, #80	@ 0x50
 80020e2:	f00a fbb5 	bl	800c850 <osDelay>
		osThreadYield();
 80020e6:	f00a fb93 	bl	800c810 <osThreadYield>

		IMU_AccelRead(&imu);
 80020ea:	4862      	ldr	r0, [pc, #392]	@ (8002274 <sensorIMUTask+0x244>)
 80020ec:	f7ff f876 	bl	80011dc <IMU_AccelRead>
		IMU_GyroRead(&imu);
 80020f0:	4860      	ldr	r0, [pc, #384]	@ (8002274 <sensorIMUTask+0x244>)
 80020f2:	f7ff f9f9 	bl	80014e8 <IMU_GyroRead>

		quaternionUpdate(
				imu.gyro[0] * DEG2RAD,
 80020f6:	4b5f      	ldr	r3, [pc, #380]	@ (8002274 <sensorIMUTask+0x244>)
 80020f8:	ed93 7a04 	vldr	s14, [r3, #16]
		quaternionUpdate(
 80020fc:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8002100:	ee27 8a27 	vmul.f32	s16, s14, s15
				imu.gyro[1] * DEG2RAD,
 8002104:	4b5b      	ldr	r3, [pc, #364]	@ (8002274 <sensorIMUTask+0x244>)
 8002106:	ed93 7a05 	vldr	s14, [r3, #20]
		quaternionUpdate(
 800210a:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800210e:	ee67 8a27 	vmul.f32	s17, s14, s15
				imu.gyro[2] * DEG2RAD,
 8002112:	4b58      	ldr	r3, [pc, #352]	@ (8002274 <sensorIMUTask+0x244>)
 8002114:	ed93 7a06 	vldr	s14, [r3, #24]
		quaternionUpdate(
 8002118:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800211c:	ee27 9a27 	vmul.f32	s18, s14, s15
 8002120:	4b54      	ldr	r3, [pc, #336]	@ (8002274 <sensorIMUTask+0x244>)
 8002122:	edd3 9a01 	vldr	s19, [r3, #4]
 8002126:	4b53      	ldr	r3, [pc, #332]	@ (8002274 <sensorIMUTask+0x244>)
 8002128:	ed93 aa02 	vldr	s20, [r3, #8]
 800212c:	4b51      	ldr	r3, [pc, #324]	@ (8002274 <sensorIMUTask+0x244>)
 800212e:	edd3 aa03 	vldr	s21, [r3, #12]
				imu.acc[0],
				imu.acc[1],
				imu.acc[2],
				(HAL_GetTick() - timeNow) * 0.001f
 8002132:	f004 fa83 	bl	800663c <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800213a:	1ad3      	subs	r3, r2, r3
		quaternionUpdate(
 800213c:	ee07 3a90 	vmov	s15, r3
 8002140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002144:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 800228c <sensorIMUTask+0x25c>
 8002148:	ee67 7a87 	vmul.f32	s15, s15, s14
 800214c:	eeb0 3a67 	vmov.f32	s6, s15
 8002150:	eef0 2a6a 	vmov.f32	s5, s21
 8002154:	eeb0 2a4a 	vmov.f32	s4, s20
 8002158:	eef0 1a69 	vmov.f32	s3, s19
 800215c:	eeb0 1a49 	vmov.f32	s2, s18
 8002160:	eef0 0a68 	vmov.f32	s1, s17
 8002164:	eeb0 0a48 	vmov.f32	s0, s16
 8002168:	f000 f89e 	bl	80022a8 <quaternionUpdate>
				);

		timeNow = HAL_GetTick();
 800216c:	f004 fa66 	bl	800663c <HAL_GetTick>
 8002170:	67b8      	str	r0, [r7, #120]	@ 0x78

		imu.q[0] = SEq_1;
 8002172:	4b47      	ldr	r3, [pc, #284]	@ (8002290 <sensorIMUTask+0x260>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a3f      	ldr	r2, [pc, #252]	@ (8002274 <sensorIMUTask+0x244>)
 8002178:	6593      	str	r3, [r2, #88]	@ 0x58
		imu.q[1] = SEq_2;
 800217a:	4b46      	ldr	r3, [pc, #280]	@ (8002294 <sensorIMUTask+0x264>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a3d      	ldr	r2, [pc, #244]	@ (8002274 <sensorIMUTask+0x244>)
 8002180:	65d3      	str	r3, [r2, #92]	@ 0x5c
		imu.q[2] = SEq_3;
 8002182:	4b45      	ldr	r3, [pc, #276]	@ (8002298 <sensorIMUTask+0x268>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a3b      	ldr	r2, [pc, #236]	@ (8002274 <sensorIMUTask+0x244>)
 8002188:	6613      	str	r3, [r2, #96]	@ 0x60
		imu.q[3] = SEq_4;
 800218a:	4b44      	ldr	r3, [pc, #272]	@ (800229c <sensorIMUTask+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a39      	ldr	r2, [pc, #228]	@ (8002274 <sensorIMUTask+0x244>)
 8002190:	6653      	str	r3, [r2, #100]	@ 0x64

		sensor_data.yaw_abs_prev = sensor_data.yaw_abs;
 8002192:	4b39      	ldr	r3, [pc, #228]	@ (8002278 <sensorIMUTask+0x248>)
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	4a38      	ldr	r2, [pc, #224]	@ (8002278 <sensorIMUTask+0x248>)
 8002198:	6153      	str	r3, [r2, #20]

		// yaw = atan2(2(q1​q2​+q0​q3​),q02​+q12​−q22​−q32​)
		sensor_data.yaw_abs = atan2(
				2.0f * (imu.q[1] * imu.q[2] + imu.q[0] * imu.q[3]),
 800219a:	4b36      	ldr	r3, [pc, #216]	@ (8002274 <sensorIMUTask+0x244>)
 800219c:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 80021a0:	4b34      	ldr	r3, [pc, #208]	@ (8002274 <sensorIMUTask+0x244>)
 80021a2:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80021a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021aa:	4b32      	ldr	r3, [pc, #200]	@ (8002274 <sensorIMUTask+0x244>)
 80021ac:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 80021b0:	4b30      	ldr	r3, [pc, #192]	@ (8002274 <sensorIMUTask+0x244>)
 80021b2:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80021b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021be:	ee77 7aa7 	vadd.f32	s15, s15, s15
		sensor_data.yaw_abs = atan2(
 80021c2:	ee17 0a90 	vmov	r0, s15
 80021c6:	f7fe f9bf 	bl	8000548 <__aeabi_f2d>
 80021ca:	4604      	mov	r4, r0
 80021cc:	460d      	mov	r5, r1
				imu.q[0] * imu.q[0] + imu.q[1] * imu.q[1] - imu.q[2] * imu.q[2] - imu.q[3] * imu.q[3])
 80021ce:	4b29      	ldr	r3, [pc, #164]	@ (8002274 <sensorIMUTask+0x244>)
 80021d0:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 80021d4:	4b27      	ldr	r3, [pc, #156]	@ (8002274 <sensorIMUTask+0x244>)
 80021d6:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80021da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021de:	4b25      	ldr	r3, [pc, #148]	@ (8002274 <sensorIMUTask+0x244>)
 80021e0:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 80021e4:	4b23      	ldr	r3, [pc, #140]	@ (8002274 <sensorIMUTask+0x244>)
 80021e6:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80021ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021f2:	4b20      	ldr	r3, [pc, #128]	@ (8002274 <sensorIMUTask+0x244>)
 80021f4:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 80021f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002274 <sensorIMUTask+0x244>)
 80021fa:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80021fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002202:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002206:	4b1b      	ldr	r3, [pc, #108]	@ (8002274 <sensorIMUTask+0x244>)
 8002208:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 800220c:	4b19      	ldr	r3, [pc, #100]	@ (8002274 <sensorIMUTask+0x244>)
 800220e:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8002212:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002216:	ee77 7a67 	vsub.f32	s15, s14, s15
		sensor_data.yaw_abs = atan2(
 800221a:	ee17 0a90 	vmov	r0, s15
 800221e:	f7fe f993 	bl	8000548 <__aeabi_f2d>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	ec43 2b11 	vmov	d1, r2, r3
 800222a:	ec45 4b10 	vmov	d0, r4, r5
 800222e:	f00d fdf5 	bl	800fe1c <atan2>
 8002232:	ec51 0b10 	vmov	r0, r1, d0
				* 57.295779513082320876798154814105f;
 8002236:	a30c      	add	r3, pc, #48	@ (adr r3, 8002268 <sensorIMUTask+0x238>)
 8002238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223c:	f7fe f9dc 	bl	80005f8 <__aeabi_dmul>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4610      	mov	r0, r2
 8002246:	4619      	mov	r1, r3
 8002248:	f7fe fcce 	bl	8000be8 <__aeabi_d2f>
 800224c:	4603      	mov	r3, r0
		sensor_data.yaw_abs = atan2(
 800224e:	4a0a      	ldr	r2, [pc, #40]	@ (8002278 <sensorIMUTask+0x248>)
 8002250:	6113      	str	r3, [r2, #16]

		sensor_data.yaw_abs_time = timeNow;
 8002252:	4a09      	ldr	r2, [pc, #36]	@ (8002278 <sensorIMUTask+0x248>)
 8002254:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002256:	6193      	str	r3, [r2, #24]
//				sensor_data.yaw_abs,
//				sensor_data.ir_distL
//				);
//
//		HAL_UART_Transmit(&huart3, (uint8_t*) sbuf, len, 10);
		is_task_alive_struct.senr = true;
 8002258:	4b11      	ldr	r3, [pc, #68]	@ (80022a0 <sensorIMUTask+0x270>)
 800225a:	2201      	movs	r2, #1
 800225c:	709a      	strb	r2, [r3, #2]
		osDelay(80); // 281hz gyro
 800225e:	bf00      	nop
 8002260:	e73e      	b.n	80020e0 <sensorIMUTask+0xb0>
 8002262:	bf00      	nop
 8002264:	f3af 8000 	nop.w
 8002268:	20000000 	.word	0x20000000
 800226c:	404ca5dc 	.word	0x404ca5dc
 8002270:	200004c0 	.word	0x200004c0
 8002274:	20000514 	.word	0x20000514
 8002278:	20000244 	.word	0x20000244
 800227c:	08013700 	.word	0x08013700
 8002280:	08013714 	.word	0x08013714
 8002284:	20000b78 	.word	0x20000b78
 8002288:	3c8efa35 	.word	0x3c8efa35
 800228c:	3a83126f 	.word	0x3a83126f
 8002290:	20000000 	.word	0x20000000
 8002294:	200004a0 	.word	0x200004a0
 8002298:	200004a4 	.word	0x200004a4
 800229c:	200004a8 	.word	0x200004a8
 80022a0:	20000288 	.word	0x20000288
 80022a4:	00000000 	.word	0x00000000

080022a8 <quaternionUpdate>:

#define gyroMeasError 3.14159265358979f * (1.0f / 180.0f)
#define beta sqrt(3.0f / 4.0f) * gyroMeasError

void quaternionUpdate(float w_x, float w_y, float w_z, float a_x, float a_y,
		float a_z, float deltat) {
 80022a8:	b5b0      	push	{r4, r5, r7, lr}
 80022aa:	b0a2      	sub	sp, #136	@ 0x88
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	ed87 0a07 	vstr	s0, [r7, #28]
 80022b2:	edc7 0a06 	vstr	s1, [r7, #24]
 80022b6:	ed87 1a05 	vstr	s2, [r7, #20]
 80022ba:	edc7 1a04 	vstr	s3, [r7, #16]
 80022be:	ed87 2a03 	vstr	s4, [r7, #12]
 80022c2:	edc7 2a02 	vstr	s5, [r7, #8]
 80022c6:	ed87 3a01 	vstr	s6, [r7, #4]
	float SEqDot_omega_1, SEqDot_omega_2, SEqDot_omega_3, SEqDot_omega_4; // quaternion derivative from gyroscopes elements
	float f_1, f_2, f_3;                          						  // objective function elements
	float J_11or24, J_12or23, J_13or22, J_14or21, J_32, J_33; 			  // objective function Jacobian elements
	float SEqHatDot_1, SEqHatDot_2, SEqHatDot_3, SEqHatDot_4; 			  // estimated direction of the gyro error

	float halfSEq_1 = 0.5f * SEq_1;
 80022ca:	4bf1      	ldr	r3, [pc, #964]	@ (8002690 <quaternionUpdate+0x3e8>)
 80022cc:	edd3 7a00 	vldr	s15, [r3]
 80022d0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80022d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022d8:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
	float halfSEq_2 = 0.5f * SEq_2;
 80022dc:	4bed      	ldr	r3, [pc, #948]	@ (8002694 <quaternionUpdate+0x3ec>)
 80022de:	edd3 7a00 	vldr	s15, [r3]
 80022e2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80022e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ea:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
	float halfSEq_3 = 0.5f * SEq_3;
 80022ee:	4bea      	ldr	r3, [pc, #936]	@ (8002698 <quaternionUpdate+0x3f0>)
 80022f0:	edd3 7a00 	vldr	s15, [r3]
 80022f4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80022f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022fc:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
	float halfSEq_4 = 0.5f * SEq_4;
 8002300:	4be6      	ldr	r3, [pc, #920]	@ (800269c <quaternionUpdate+0x3f4>)
 8002302:	edd3 7a00 	vldr	s15, [r3]
 8002306:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800230a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800230e:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
	float twoSEq_1 = 2.0f * SEq_1;
 8002312:	4bdf      	ldr	r3, [pc, #892]	@ (8002690 <quaternionUpdate+0x3e8>)
 8002314:	edd3 7a00 	vldr	s15, [r3]
 8002318:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800231c:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
	float twoSEq_2 = 2.0f * SEq_2;
 8002320:	4bdc      	ldr	r3, [pc, #880]	@ (8002694 <quaternionUpdate+0x3ec>)
 8002322:	edd3 7a00 	vldr	s15, [r3]
 8002326:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800232a:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
	float twoSEq_3 = 2.0f * SEq_3;
 800232e:	4bda      	ldr	r3, [pc, #872]	@ (8002698 <quaternionUpdate+0x3f0>)
 8002330:	edd3 7a00 	vldr	s15, [r3]
 8002334:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002338:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c

	// Normalize the accelerometer measurement
	norm = sqrt(a_x * a_x + a_y * a_y + a_z * a_z);
 800233c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002340:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002344:	edd7 7a03 	vldr	s15, [r7, #12]
 8002348:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800234c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002350:	edd7 7a02 	vldr	s15, [r7, #8]
 8002354:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800235c:	ee17 0a90 	vmov	r0, s15
 8002360:	f7fe f8f2 	bl	8000548 <__aeabi_f2d>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	ec43 2b10 	vmov	d0, r2, r3
 800236c:	f00d fd86 	bl	800fe7c <sqrt>
 8002370:	ec53 2b10 	vmov	r2, r3, d0
 8002374:	4610      	mov	r0, r2
 8002376:	4619      	mov	r1, r3
 8002378:	f7fe fc36 	bl	8000be8 <__aeabi_d2f>
 800237c:	4603      	mov	r3, r0
 800237e:	66bb      	str	r3, [r7, #104]	@ 0x68
	a_x /= norm;
 8002380:	edd7 6a04 	vldr	s13, [r7, #16]
 8002384:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8002388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800238c:	edc7 7a04 	vstr	s15, [r7, #16]
	a_y /= norm;
 8002390:	edd7 6a03 	vldr	s13, [r7, #12]
 8002394:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8002398:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800239c:	edc7 7a03 	vstr	s15, [r7, #12]
	a_z /= norm;
 80023a0:	edd7 6a02 	vldr	s13, [r7, #8]
 80023a4:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 80023a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023ac:	edc7 7a02 	vstr	s15, [r7, #8]

	// Compute the objective function and Jacobian
	f_1 = twoSEq_2 * SEq_4 - twoSEq_1 * SEq_3 - a_x;
 80023b0:	4bba      	ldr	r3, [pc, #744]	@ (800269c <quaternionUpdate+0x3f4>)
 80023b2:	ed93 7a00 	vldr	s14, [r3]
 80023b6:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80023ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023be:	4bb6      	ldr	r3, [pc, #728]	@ (8002698 <quaternionUpdate+0x3f0>)
 80023c0:	edd3 6a00 	vldr	s13, [r3]
 80023c4:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80023c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80023d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023d8:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	f_2 = twoSEq_1 * SEq_2 + twoSEq_3 * SEq_4 - a_y;
 80023dc:	4bad      	ldr	r3, [pc, #692]	@ (8002694 <quaternionUpdate+0x3ec>)
 80023de:	ed93 7a00 	vldr	s14, [r3]
 80023e2:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80023e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ea:	4bac      	ldr	r3, [pc, #688]	@ (800269c <quaternionUpdate+0x3f4>)
 80023ec:	edd3 6a00 	vldr	s13, [r3]
 80023f0:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80023f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002400:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002404:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
	f_3 = 1.0f - twoSEq_2 * SEq_2 - twoSEq_3 * SEq_3 - a_z;
 8002408:	4ba2      	ldr	r3, [pc, #648]	@ (8002694 <quaternionUpdate+0x3ec>)
 800240a:	ed93 7a00 	vldr	s14, [r3]
 800240e:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8002412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002416:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800241a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800241e:	4b9e      	ldr	r3, [pc, #632]	@ (8002698 <quaternionUpdate+0x3f0>)
 8002420:	edd3 6a00 	vldr	s13, [r3]
 8002424:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8002428:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800242c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002430:	edd7 7a02 	vldr	s15, [r7, #8]
 8002434:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002438:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
	J_11or24 = twoSEq_3;
 800243c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800243e:	65bb      	str	r3, [r7, #88]	@ 0x58
	J_12or23 = 2.0f * SEq_4;
 8002440:	4b96      	ldr	r3, [pc, #600]	@ (800269c <quaternionUpdate+0x3f4>)
 8002442:	edd3 7a00 	vldr	s15, [r3]
 8002446:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800244a:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
	J_13or22 = twoSEq_1;
 800244e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002450:	653b      	str	r3, [r7, #80]	@ 0x50
	J_14or21 = twoSEq_2;
 8002452:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002454:	64fb      	str	r3, [r7, #76]	@ 0x4c
	J_32 = 2.0f * J_14or21;
 8002456:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800245a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800245e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	J_33 = 2.0f * J_11or24;
 8002462:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002466:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800246a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

	// Compute the gradient (matrix multiplication)
	SEqHatDot_1 = J_14or21 * f_2 - J_11or24 * f_1;
 800246e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002472:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002476:	ee27 7a27 	vmul.f32	s14, s14, s15
 800247a:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 800247e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002482:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002486:	ee77 7a67 	vsub.f32	s15, s14, s15
 800248a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	SEqHatDot_2 = J_12or23 * f_1 + J_13or22 * f_2 - J_32 * f_3;
 800248e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002492:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002496:	ee27 7a27 	vmul.f32	s14, s14, s15
 800249a:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 800249e:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80024a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024aa:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80024ae:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80024b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ba:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	SEqHatDot_3 = J_12or23 * f_2 - J_33 * f_3 - J_13or22 * f_1;
 80024be:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80024c2:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80024c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024ca:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 80024ce:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80024d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024da:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80024de:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80024e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ea:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	SEqHatDot_4 = J_14or21 * f_1 + J_11or24 * f_2;
 80024ee:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80024f2:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80024f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024fa:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 80024fe:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002502:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800250a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	// Normalize the gradient
	norm = sqrt(
			SEqHatDot_1 * SEqHatDot_1 + SEqHatDot_2 * SEqHatDot_2
 800250e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002512:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002516:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800251a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800251e:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ SEqHatDot_3 * SEqHatDot_3 + SEqHatDot_4 * SEqHatDot_4);
 8002522:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002526:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800252a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800252e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002532:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002536:	ee77 7a27 	vadd.f32	s15, s14, s15
	norm = sqrt(
 800253a:	ee17 0a90 	vmov	r0, s15
 800253e:	f7fe f803 	bl	8000548 <__aeabi_f2d>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	ec43 2b10 	vmov	d0, r2, r3
 800254a:	f00d fc97 	bl	800fe7c <sqrt>
 800254e:	ec53 2b10 	vmov	r2, r3, d0
 8002552:	4610      	mov	r0, r2
 8002554:	4619      	mov	r1, r3
 8002556:	f7fe fb47 	bl	8000be8 <__aeabi_d2f>
 800255a:	4603      	mov	r3, r0
 800255c:	66bb      	str	r3, [r7, #104]	@ 0x68
	SEqHatDot_1 /= norm;
 800255e:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8002562:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8002566:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800256a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	SEqHatDot_2 /= norm;
 800256e:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8002572:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8002576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800257a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	SEqHatDot_3 /= norm;
 800257e:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8002582:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8002586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800258a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	SEqHatDot_4 /= norm;
 800258e:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8002592:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8002596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800259a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	// Compute the quaternion derivative measured by gyroscopes
	SEqDot_omega_1 = -halfSEq_2 * w_x - halfSEq_3 * w_y - halfSEq_4 * w_z;
 800259e:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80025a2:	eeb1 7a67 	vneg.f32	s14, s15
 80025a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80025aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ae:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 80025b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80025b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025be:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 80025c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80025c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025ce:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	SEqDot_omega_2 = halfSEq_1 * w_x + halfSEq_3 * w_z - halfSEq_4 * w_y;
 80025d2:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 80025d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80025da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025de:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 80025e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80025e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025ee:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 80025f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80025f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025fe:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	SEqDot_omega_3 = halfSEq_1 * w_y - halfSEq_2 * w_z + halfSEq_4 * w_x;
 8002602:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8002606:	edd7 7a06 	vldr	s15, [r7, #24]
 800260a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800260e:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 8002612:	edd7 7a05 	vldr	s15, [r7, #20]
 8002616:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800261a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800261e:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 8002622:	edd7 7a07 	vldr	s15, [r7, #28]
 8002626:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800262a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800262e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	SEqDot_omega_4 = halfSEq_1 * w_z + halfSEq_2 * w_y - halfSEq_3 * w_x;
 8002632:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8002636:	edd7 7a05 	vldr	s15, [r7, #20]
 800263a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800263e:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 8002642:	edd7 7a06 	vldr	s15, [r7, #24]
 8002646:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800264a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800264e:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8002652:	edd7 7a07 	vldr	s15, [r7, #28]
 8002656:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800265a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800265e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	// Compute then integrate the estimated quaternion derivative
	SEq_1 += (SEqDot_omega_1 - (beta * SEqHatDot_1)) * deltat;
 8002662:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002664:	f7fd ff70 	bl	8000548 <__aeabi_f2d>
 8002668:	4604      	mov	r4, r0
 800266a:	460d      	mov	r5, r1
 800266c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800266e:	f7fd ff6b 	bl	8000548 <__aeabi_f2d>
 8002672:	a305      	add	r3, pc, #20	@ (adr r3, 8002688 <quaternionUpdate+0x3e0>)
 8002674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002678:	f7fd ffbe 	bl	80005f8 <__aeabi_dmul>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	e00e      	b.n	80026a0 <quaternionUpdate+0x3f8>
 8002682:	bf00      	nop
 8002684:	f3af 8000 	nop.w
 8002688:	5a6bac7d 	.word	0x5a6bac7d
 800268c:	3f8ef49c 	.word	0x3f8ef49c
 8002690:	20000000 	.word	0x20000000
 8002694:	200004a0 	.word	0x200004a0
 8002698:	200004a4 	.word	0x200004a4
 800269c:	200004a8 	.word	0x200004a8
 80026a0:	4620      	mov	r0, r4
 80026a2:	4629      	mov	r1, r5
 80026a4:	f7fd fdf0 	bl	8000288 <__aeabi_dsub>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4614      	mov	r4, r2
 80026ae:	461d      	mov	r5, r3
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7fd ff49 	bl	8000548 <__aeabi_f2d>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4620      	mov	r0, r4
 80026bc:	4629      	mov	r1, r5
 80026be:	f7fd ff9b 	bl	80005f8 <__aeabi_dmul>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4614      	mov	r4, r2
 80026c8:	461d      	mov	r5, r3
 80026ca:	4b93      	ldr	r3, [pc, #588]	@ (8002918 <quaternionUpdate+0x670>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fd ff3a 	bl	8000548 <__aeabi_f2d>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4620      	mov	r0, r4
 80026da:	4629      	mov	r1, r5
 80026dc:	f7fd fdd6 	bl	800028c <__adddf3>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
 80026e8:	f7fe fa7e 	bl	8000be8 <__aeabi_d2f>
 80026ec:	4603      	mov	r3, r0
 80026ee:	4a8a      	ldr	r2, [pc, #552]	@ (8002918 <quaternionUpdate+0x670>)
 80026f0:	6013      	str	r3, [r2, #0]
	SEq_2 += (SEqDot_omega_2 - (beta * SEqHatDot_2)) * deltat;
 80026f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80026f4:	f7fd ff28 	bl	8000548 <__aeabi_f2d>
 80026f8:	4604      	mov	r4, r0
 80026fa:	460d      	mov	r5, r1
 80026fc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80026fe:	f7fd ff23 	bl	8000548 <__aeabi_f2d>
 8002702:	a383      	add	r3, pc, #524	@ (adr r3, 8002910 <quaternionUpdate+0x668>)
 8002704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002708:	f7fd ff76 	bl	80005f8 <__aeabi_dmul>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4620      	mov	r0, r4
 8002712:	4629      	mov	r1, r5
 8002714:	f7fd fdb8 	bl	8000288 <__aeabi_dsub>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4614      	mov	r4, r2
 800271e:	461d      	mov	r5, r3
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7fd ff11 	bl	8000548 <__aeabi_f2d>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4620      	mov	r0, r4
 800272c:	4629      	mov	r1, r5
 800272e:	f7fd ff63 	bl	80005f8 <__aeabi_dmul>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	4614      	mov	r4, r2
 8002738:	461d      	mov	r5, r3
 800273a:	4b78      	ldr	r3, [pc, #480]	@ (800291c <quaternionUpdate+0x674>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f7fd ff02 	bl	8000548 <__aeabi_f2d>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4620      	mov	r0, r4
 800274a:	4629      	mov	r1, r5
 800274c:	f7fd fd9e 	bl	800028c <__adddf3>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4610      	mov	r0, r2
 8002756:	4619      	mov	r1, r3
 8002758:	f7fe fa46 	bl	8000be8 <__aeabi_d2f>
 800275c:	4603      	mov	r3, r0
 800275e:	4a6f      	ldr	r2, [pc, #444]	@ (800291c <quaternionUpdate+0x674>)
 8002760:	6013      	str	r3, [r2, #0]
	SEq_3 += (SEqDot_omega_3 - (beta * SEqHatDot_3)) * deltat;
 8002762:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002764:	f7fd fef0 	bl	8000548 <__aeabi_f2d>
 8002768:	4604      	mov	r4, r0
 800276a:	460d      	mov	r5, r1
 800276c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800276e:	f7fd feeb 	bl	8000548 <__aeabi_f2d>
 8002772:	a367      	add	r3, pc, #412	@ (adr r3, 8002910 <quaternionUpdate+0x668>)
 8002774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002778:	f7fd ff3e 	bl	80005f8 <__aeabi_dmul>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4620      	mov	r0, r4
 8002782:	4629      	mov	r1, r5
 8002784:	f7fd fd80 	bl	8000288 <__aeabi_dsub>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	4614      	mov	r4, r2
 800278e:	461d      	mov	r5, r3
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7fd fed9 	bl	8000548 <__aeabi_f2d>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4620      	mov	r0, r4
 800279c:	4629      	mov	r1, r5
 800279e:	f7fd ff2b 	bl	80005f8 <__aeabi_dmul>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	4614      	mov	r4, r2
 80027a8:	461d      	mov	r5, r3
 80027aa:	4b5d      	ldr	r3, [pc, #372]	@ (8002920 <quaternionUpdate+0x678>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fd feca 	bl	8000548 <__aeabi_f2d>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4620      	mov	r0, r4
 80027ba:	4629      	mov	r1, r5
 80027bc:	f7fd fd66 	bl	800028c <__adddf3>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4610      	mov	r0, r2
 80027c6:	4619      	mov	r1, r3
 80027c8:	f7fe fa0e 	bl	8000be8 <__aeabi_d2f>
 80027cc:	4603      	mov	r3, r0
 80027ce:	4a54      	ldr	r2, [pc, #336]	@ (8002920 <quaternionUpdate+0x678>)
 80027d0:	6013      	str	r3, [r2, #0]
	SEq_4 += (SEqDot_omega_4 - (beta * SEqHatDot_4)) * deltat;
 80027d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80027d4:	f7fd feb8 	bl	8000548 <__aeabi_f2d>
 80027d8:	4604      	mov	r4, r0
 80027da:	460d      	mov	r5, r1
 80027dc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80027de:	f7fd feb3 	bl	8000548 <__aeabi_f2d>
 80027e2:	a34b      	add	r3, pc, #300	@ (adr r3, 8002910 <quaternionUpdate+0x668>)
 80027e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e8:	f7fd ff06 	bl	80005f8 <__aeabi_dmul>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4620      	mov	r0, r4
 80027f2:	4629      	mov	r1, r5
 80027f4:	f7fd fd48 	bl	8000288 <__aeabi_dsub>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4614      	mov	r4, r2
 80027fe:	461d      	mov	r5, r3
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7fd fea1 	bl	8000548 <__aeabi_f2d>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4620      	mov	r0, r4
 800280c:	4629      	mov	r1, r5
 800280e:	f7fd fef3 	bl	80005f8 <__aeabi_dmul>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	4614      	mov	r4, r2
 8002818:	461d      	mov	r5, r3
 800281a:	4b42      	ldr	r3, [pc, #264]	@ (8002924 <quaternionUpdate+0x67c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7fd fe92 	bl	8000548 <__aeabi_f2d>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	4620      	mov	r0, r4
 800282a:	4629      	mov	r1, r5
 800282c:	f7fd fd2e 	bl	800028c <__adddf3>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4610      	mov	r0, r2
 8002836:	4619      	mov	r1, r3
 8002838:	f7fe f9d6 	bl	8000be8 <__aeabi_d2f>
 800283c:	4603      	mov	r3, r0
 800283e:	4a39      	ldr	r2, [pc, #228]	@ (8002924 <quaternionUpdate+0x67c>)
 8002840:	6013      	str	r3, [r2, #0]

	// Normalize quaternion
	norm = sqrt(SEq_1 * SEq_1 + SEq_2 * SEq_2 + SEq_3 * SEq_3 + SEq_4 * SEq_4);
 8002842:	4b35      	ldr	r3, [pc, #212]	@ (8002918 <quaternionUpdate+0x670>)
 8002844:	ed93 7a00 	vldr	s14, [r3]
 8002848:	4b33      	ldr	r3, [pc, #204]	@ (8002918 <quaternionUpdate+0x670>)
 800284a:	edd3 7a00 	vldr	s15, [r3]
 800284e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002852:	4b32      	ldr	r3, [pc, #200]	@ (800291c <quaternionUpdate+0x674>)
 8002854:	edd3 6a00 	vldr	s13, [r3]
 8002858:	4b30      	ldr	r3, [pc, #192]	@ (800291c <quaternionUpdate+0x674>)
 800285a:	edd3 7a00 	vldr	s15, [r3]
 800285e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002862:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002866:	4b2e      	ldr	r3, [pc, #184]	@ (8002920 <quaternionUpdate+0x678>)
 8002868:	edd3 6a00 	vldr	s13, [r3]
 800286c:	4b2c      	ldr	r3, [pc, #176]	@ (8002920 <quaternionUpdate+0x678>)
 800286e:	edd3 7a00 	vldr	s15, [r3]
 8002872:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002876:	ee37 7a27 	vadd.f32	s14, s14, s15
 800287a:	4b2a      	ldr	r3, [pc, #168]	@ (8002924 <quaternionUpdate+0x67c>)
 800287c:	edd3 6a00 	vldr	s13, [r3]
 8002880:	4b28      	ldr	r3, [pc, #160]	@ (8002924 <quaternionUpdate+0x67c>)
 8002882:	edd3 7a00 	vldr	s15, [r3]
 8002886:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800288a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800288e:	ee17 0a90 	vmov	r0, s15
 8002892:	f7fd fe59 	bl	8000548 <__aeabi_f2d>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	ec43 2b10 	vmov	d0, r2, r3
 800289e:	f00d faed 	bl	800fe7c <sqrt>
 80028a2:	ec53 2b10 	vmov	r2, r3, d0
 80028a6:	4610      	mov	r0, r2
 80028a8:	4619      	mov	r1, r3
 80028aa:	f7fe f99d 	bl	8000be8 <__aeabi_d2f>
 80028ae:	4603      	mov	r3, r0
 80028b0:	66bb      	str	r3, [r7, #104]	@ 0x68
	SEq_1 /= norm;
 80028b2:	4b19      	ldr	r3, [pc, #100]	@ (8002918 <quaternionUpdate+0x670>)
 80028b4:	edd3 6a00 	vldr	s13, [r3]
 80028b8:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 80028bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028c0:	4b15      	ldr	r3, [pc, #84]	@ (8002918 <quaternionUpdate+0x670>)
 80028c2:	edc3 7a00 	vstr	s15, [r3]
	SEq_2 /= norm;
 80028c6:	4b15      	ldr	r3, [pc, #84]	@ (800291c <quaternionUpdate+0x674>)
 80028c8:	edd3 6a00 	vldr	s13, [r3]
 80028cc:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 80028d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028d4:	4b11      	ldr	r3, [pc, #68]	@ (800291c <quaternionUpdate+0x674>)
 80028d6:	edc3 7a00 	vstr	s15, [r3]
	SEq_3 /= norm;
 80028da:	4b11      	ldr	r3, [pc, #68]	@ (8002920 <quaternionUpdate+0x678>)
 80028dc:	edd3 6a00 	vldr	s13, [r3]
 80028e0:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 80028e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002920 <quaternionUpdate+0x678>)
 80028ea:	edc3 7a00 	vstr	s15, [r3]
	SEq_4 /= norm;
 80028ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002924 <quaternionUpdate+0x67c>)
 80028f0:	edd3 6a00 	vldr	s13, [r3]
 80028f4:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 80028f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028fc:	4b09      	ldr	r3, [pc, #36]	@ (8002924 <quaternionUpdate+0x67c>)
 80028fe:	edc3 7a00 	vstr	s15, [r3]
}
 8002902:	bf00      	nop
 8002904:	3788      	adds	r7, #136	@ 0x88
 8002906:	46bd      	mov	sp, r7
 8002908:	bdb0      	pop	{r4, r5, r7, pc}
 800290a:	bf00      	nop
 800290c:	f3af 8000 	nop.w
 8002910:	5a6bac7d 	.word	0x5a6bac7d
 8002914:	3f8ef49c 	.word	0x3f8ef49c
 8002918:	20000000 	.word	0x20000000
 800291c:	200004a0 	.word	0x200004a0
 8002920:	200004a4 	.word	0x200004a4
 8002924:	200004a8 	.word	0x200004a8

08002928 <_ext_sig_halt>:

//void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
//	test_run = true;
//}

void _ext_sig_halt(void) {
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
	controller.emergencyStop();
 800292c:	4802      	ldr	r0, [pc, #8]	@ (8002938 <_ext_sig_halt+0x10>)
 800292e:	f001 f8b1 	bl	8003a94 <_ZN9AppMotion16MotionController13emergencyStopEv>
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	2000030c 	.word	0x2000030c

0800293c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
	if (huart == &huart3) {
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a05      	ldr	r2, [pc, #20]	@ (800295c <HAL_UART_RxCpltCallback+0x20>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d102      	bne.n	8002952 <HAL_UART_RxCpltCallback+0x16>
		listener.invoke();
 800294c:	4804      	ldr	r0, [pc, #16]	@ (8002960 <HAL_UART_RxCpltCallback+0x24>)
 800294e:	f001 fb63 	bl	8004018 <_ZN9AppParser8Listener6invokeEv>
	}
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000b78 	.word	0x20000b78
 8002960:	20000470 	.word	0x20000470

08002964 <HAL_TIM_IC_CaptureCallback>:
//			HAL_TIM_IC_Stop_IT(&htim8, TIM_CHANNEL_2);
//		}
//	}
//}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM8 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a22      	ldr	r2, [pc, #136]	@ (80029fc <HAL_TIM_IC_CaptureCallback+0x98>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d13d      	bne.n	80029f2 <HAL_TIM_IC_CaptureCallback+0x8e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	7f1b      	ldrb	r3, [r3, #28]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d139      	bne.n	80029f2 <HAL_TIM_IC_CaptureCallback+0x8e>
    uint32_t c = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800297e:	2104      	movs	r1, #4
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f007 fe71 	bl	800a668 <HAL_TIM_ReadCapturedValue>
 8002986:	60f8      	str	r0, [r7, #12]
    static uint8_t stage = 0;          // 0=wait rising, 1=wait falling

    if (stage == 0) {                   // rising
 8002988:	4b1d      	ldr	r3, [pc, #116]	@ (8002a00 <HAL_TIM_IC_CaptureCallback+0x9c>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d116      	bne.n	80029be <HAL_TIM_IC_CaptureCallback+0x5a>
      us_rise = c;
 8002990:	4a1c      	ldr	r2, [pc, #112]	@ (8002a04 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6013      	str	r3, [r2, #0]
      stage = 1;
 8002996:	4b1a      	ldr	r3, [pc, #104]	@ (8002a00 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8002998:	2201      	movs	r2, #1
 800299a:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6a1a      	ldr	r2, [r3, #32]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80029aa:	621a      	str	r2, [r3, #32]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6a1a      	ldr	r2, [r3, #32]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0220 	orr.w	r2, r2, #32
 80029ba:	621a      	str	r2, [r3, #32]
      stage = 0;
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
      osEventFlagsSet(us_evt, US_EVT_DONE);  // notify task
    }
  }
}
 80029bc:	e019      	b.n	80029f2 <HAL_TIM_IC_CaptureCallback+0x8e>
      us_fall = c;
 80029be:	4a12      	ldr	r2, [pc, #72]	@ (8002a08 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6013      	str	r3, [r2, #0]
      stage = 0;
 80029c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a00 <HAL_TIM_IC_CaptureCallback+0x9c>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6a1a      	ldr	r2, [r3, #32]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80029d8:	621a      	str	r2, [r3, #32]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6a12      	ldr	r2, [r2, #32]
 80029e4:	621a      	str	r2, [r3, #32]
      osEventFlagsSet(us_evt, US_EVT_DONE);  // notify task
 80029e6:	4b09      	ldr	r3, [pc, #36]	@ (8002a0c <HAL_TIM_IC_CaptureCallback+0xa8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2101      	movs	r1, #1
 80029ec:	4618      	mov	r0, r3
 80029ee:	f009 ff89 	bl	800c904 <osEventFlagsSet>
}
 80029f2:	bf00      	nop
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40010400 	.word	0x40010400
 8002a00:	200004ac 	.word	0x200004ac
 8002a04:	2000028c 	.word	0x2000028c
 8002a08:	20000290 	.word	0x20000290
 8002a0c:	20000294 	.word	0x20000294

08002a10 <_Z41__static_initialization_and_destruction_0v>:
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
};
 8002a14:	4b22      	ldr	r3, [pc, #136]	@ (8002aa0 <_Z41__static_initialization_and_destruction_0v+0x90>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a22      	ldr	r2, [pc, #136]	@ (8002aa4 <_Z41__static_initialization_and_destruction_0v+0x94>)
 8002a1a:	6013      	str	r3, [r2, #0]
 8002a1c:	4b21      	ldr	r3, [pc, #132]	@ (8002aa4 <_Z41__static_initialization_and_destruction_0v+0x94>)
 8002a1e:	3304      	adds	r3, #4
 8002a20:	2224      	movs	r2, #36	@ 0x24
 8002a22:	2100      	movs	r1, #0
 8002a24:	4618      	mov	r0, r3
 8002a26:	f00e fe83 	bl	8011730 <memset>
 8002a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa4 <_Z41__static_initialization_and_destruction_0v+0x94>)
 8002a2c:	4a1e      	ldr	r2, [pc, #120]	@ (8002aa8 <_Z41__static_initialization_and_destruction_0v+0x98>)
 8002a2e:	605a      	str	r2, [r3, #4]
 8002a30:	4b1c      	ldr	r3, [pc, #112]	@ (8002aa4 <_Z41__static_initialization_and_destruction_0v+0x94>)
 8002a32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a36:	619a      	str	r2, [r3, #24]
 8002a38:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa4 <_Z41__static_initialization_and_destruction_0v+0x94>)
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	61da      	str	r2, [r3, #28]
osMessageQueueId_t ctrlQueue = osMessageQueueNew(
 8002a3e:	2200      	movs	r2, #0
 8002a40:	210c      	movs	r1, #12
 8002a42:	200a      	movs	r0, #10
 8002a44:	f00a f805 	bl	800ca52 <osMessageQueueNew>
 8002a48:	4603      	mov	r3, r0
);
 8002a4a:	4a18      	ldr	r2, [pc, #96]	@ (8002aac <_Z41__static_initialization_and_destruction_0v+0x9c>)
 8002a4c:	6013      	str	r3, [r2, #0]
};
 8002a4e:	4b18      	ldr	r3, [pc, #96]	@ (8002ab0 <_Z41__static_initialization_and_destruction_0v+0xa0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a18      	ldr	r2, [pc, #96]	@ (8002ab4 <_Z41__static_initialization_and_destruction_0v+0xa4>)
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	4b17      	ldr	r3, [pc, #92]	@ (8002ab4 <_Z41__static_initialization_and_destruction_0v+0xa4>)
 8002a58:	3304      	adds	r3, #4
 8002a5a:	2224      	movs	r2, #36	@ 0x24
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f00e fe66 	bl	8011730 <memset>
 8002a64:	4b13      	ldr	r3, [pc, #76]	@ (8002ab4 <_Z41__static_initialization_and_destruction_0v+0xa4>)
 8002a66:	4a14      	ldr	r2, [pc, #80]	@ (8002ab8 <_Z41__static_initialization_and_destruction_0v+0xa8>)
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	4b12      	ldr	r3, [pc, #72]	@ (8002ab4 <_Z41__static_initialization_and_destruction_0v+0xa4>)
 8002a6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a70:	619a      	str	r2, [r3, #24]
 8002a72:	4b10      	ldr	r3, [pc, #64]	@ (8002ab4 <_Z41__static_initialization_and_destruction_0v+0xa4>)
 8002a74:	2218      	movs	r2, #24
 8002a76:	61da      	str	r2, [r3, #28]
 8002a78:	4b0c      	ldr	r3, [pc, #48]	@ (8002aac <_Z41__static_initialization_and_destruction_0v+0x9c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ab4 <_Z41__static_initialization_and_destruction_0v+0xa4>)
 8002a7e:	6293      	str	r3, [r2, #40]	@ 0x28
AppMotion::MotionController controller(&ctrlCtx);
 8002a80:	490c      	ldr	r1, [pc, #48]	@ (8002ab4 <_Z41__static_initialization_and_destruction_0v+0xa4>)
 8002a82:	480e      	ldr	r0, [pc, #56]	@ (8002abc <_Z41__static_initialization_and_destruction_0v+0xac>)
 8002a84:	f000 f86c 	bl	8002b60 <_ZN9AppMotion16MotionControllerC1EP5u_ctx>
AppParser::Processor processor(&procCtx, &ctrlCtx);
 8002a88:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab4 <_Z41__static_initialization_and_destruction_0v+0xa4>)
 8002a8a:	4906      	ldr	r1, [pc, #24]	@ (8002aa4 <_Z41__static_initialization_and_destruction_0v+0x94>)
 8002a8c:	480c      	ldr	r0, [pc, #48]	@ (8002ac0 <_Z41__static_initialization_and_destruction_0v+0xb0>)
 8002a8e:	f001 fae3 	bl	8004058 <_ZN9AppParser9ProcessorC1EP5u_ctxS2_>
AppParser::Listener listener(&procCtx);
 8002a92:	4904      	ldr	r1, [pc, #16]	@ (8002aa4 <_Z41__static_initialization_and_destruction_0v+0x94>)
 8002a94:	480b      	ldr	r0, [pc, #44]	@ (8002ac4 <_Z41__static_initialization_and_destruction_0v+0xb4>)
 8002a96:	f001 faa5 	bl	8003fe4 <_ZN9AppParser8ListenerC1EP5u_ctx>
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	200002ac 	.word	0x200002ac
 8002aa4:	200002b0 	.word	0x200002b0
 8002aa8:	080136e8 	.word	0x080136e8
 8002aac:	200002dc 	.word	0x200002dc
 8002ab0:	200002a8 	.word	0x200002a8
 8002ab4:	200002e0 	.word	0x200002e0
 8002ab8:	080136f4 	.word	0x080136f4
 8002abc:	2000030c 	.word	0x2000030c
 8002ac0:	20000468 	.word	0x20000468
 8002ac4:	20000470 	.word	0x20000470

08002ac8 <_Z41__static_initialization_and_destruction_1v>:
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
AppParser::Listener listener(&procCtx);
 8002acc:	4805      	ldr	r0, [pc, #20]	@ (8002ae4 <_Z41__static_initialization_and_destruction_1v+0x1c>)
 8002ace:	f001 fa98 	bl	8004002 <_ZN9AppParser8ListenerD1Ev>
AppParser::Processor processor(&procCtx, &ctrlCtx);
 8002ad2:	4805      	ldr	r0, [pc, #20]	@ (8002ae8 <_Z41__static_initialization_and_destruction_1v+0x20>)
 8002ad4:	f001 fada 	bl	800408c <_ZN9AppParser9ProcessorD1Ev>
AppMotion::MotionController controller(&ctrlCtx);
 8002ad8:	4804      	ldr	r0, [pc, #16]	@ (8002aec <_Z41__static_initialization_and_destruction_1v+0x24>)
 8002ada:	f7fe fff9 	bl	8001ad0 <_ZN9AppMotion16MotionControllerD1Ev>
}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000470 	.word	0x20000470
 8002ae8:	20000468 	.word	0x20000468
 8002aec:	2000030c 	.word	0x2000030c

08002af0 <_GLOBAL__sub_I_sensor_data>:
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	f7ff ff8c 	bl	8002a10 <_Z41__static_initialization_and_destruction_0v>
 8002af8:	bd80      	pop	{r7, pc}

08002afa <_GLOBAL__sub_D_sensor_data>:
 8002afa:	b580      	push	{r7, lr}
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	f7ff ffe3 	bl	8002ac8 <_Z41__static_initialization_and_destruction_1v>
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <_ZN9AppMotion16MotionController3mapEfffff>:
			;
			u_ctx *ctx;
			static void motionTask(void *pv);
			static float map(float x, float in_min, float in_max, float out_min, float out_max) {
 8002b04:	b480      	push	{r7}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	ed87 0a05 	vstr	s0, [r7, #20]
 8002b0e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002b12:	ed87 1a03 	vstr	s2, [r7, #12]
 8002b16:	edc7 1a02 	vstr	s3, [r7, #8]
 8002b1a:	ed87 2a01 	vstr	s4, [r7, #4]
				return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002b1e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002b22:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b2a:	edd7 6a01 	vldr	s13, [r7, #4]
 8002b2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b32:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002b36:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002b3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
			}
 8002b52:	eeb0 0a67 	vmov.f32	s0, s15
 8002b56:	371c      	adds	r7, #28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <_ZN9AppMotion16MotionControllerC1EP5u_ctx>:
	#define RIGHT_ENCODER_SCALE 0.996  // adjust based on reference choice
	#define REAR_WHEEL_ROTATION_DISTANCE (3.142 * 6.5)
	#define ENCODER_PULSES_PER_WHEEL_ROTATION 1560
	#define DISTANCE_PER_ENCODER_PULSE (REAR_WHEEL_ROTATION_DISTANCE / ENCODER_PULSES_PER_WHEEL_ROTATION)

	MotionController::MotionController(u_ctx *ctx) {
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
		this->ctx = ctx;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	601a      	str	r2, [r3, #0]
		/* Instantiate the physical devices */

	}
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <_ZN9AppMotion16MotionController5startEv>:

	void MotionController::start(void) {
 8002b80:	b590      	push	{r4, r7, lr}
 8002b82:	b08f      	sub	sp, #60	@ 0x3c
 8002b84:	af02      	add	r7, sp, #8
 8002b86:	6078      	str	r0, [r7, #4]
			&htim12,
			TIM_CHANNEL_1,
			CENTER_POS_PWM - LEFT_DELTA,
			CENTER_POS_PWM + RIGHT_DELTA,
			CENTER_POS_PWM
		);
 8002b88:	2018      	movs	r0, #24
 8002b8a:	f00d f92d 	bl	800fde8 <_Znwj>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	461c      	mov	r4, r3
 8002b92:	f240 23f3 	movw	r3, #755	@ 0x2f3
 8002b96:	9301      	str	r3, [sp, #4]
 8002b98:	f240 3307 	movw	r3, #775	@ 0x307
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	f240 23e9 	movw	r3, #745	@ 0x2e9
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	4953      	ldr	r1, [pc, #332]	@ (8002cf4 <_ZN9AppMotion16MotionController5startEv+0x174>)
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	f000 ff82 	bl	8003ab0 <_ZN9AppMotion5ServoC1EP17TIM_HandleTypeDefmmmm>
		this->servo = new Servo(
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	60dc      	str	r4, [r3, #12]


		this->lencoder = new Encoder(
			&htim2,
			TIM_CHANNEL_ALL
		);
 8002bb0:	2008      	movs	r0, #8
 8002bb2:	f00d f919 	bl	800fde8 <_Znwj>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	461c      	mov	r4, r3
 8002bba:	223c      	movs	r2, #60	@ 0x3c
 8002bbc:	494e      	ldr	r1, [pc, #312]	@ (8002cf8 <_ZN9AppMotion16MotionController5startEv+0x178>)
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	f001 f996 	bl	8003ef0 <_ZN9AppMotion7EncoderC1EP17TIM_HandleTypeDefm>
		this->lencoder = new Encoder(
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	611c      	str	r4, [r3, #16]

		this->rencoder = new Encoder(
			&htim3,
			TIM_CHANNEL_ALL
		);
 8002bc8:	2008      	movs	r0, #8
 8002bca:	f00d f90d 	bl	800fde8 <_Znwj>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	461c      	mov	r4, r3
 8002bd2:	223c      	movs	r2, #60	@ 0x3c
 8002bd4:	4949      	ldr	r1, [pc, #292]	@ (8002cfc <_ZN9AppMotion16MotionController5startEv+0x17c>)
 8002bd6:	4620      	mov	r0, r4
 8002bd8:	f001 f98a 	bl	8003ef0 <_ZN9AppMotion7EncoderC1EP17TIM_HandleTypeDefm>
		this->rencoder = new Encoder(
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	615c      	str	r4, [r3, #20]
		this->lmotor = new Motor(
			&htim4,
			TIM_CHANNEL_3,
			TIM_CHANNEL_4,
			7000
		);
 8002be0:	2014      	movs	r0, #20
 8002be2:	f00d f901 	bl	800fde8 <_Znwj>
 8002be6:	4603      	mov	r3, r0
 8002be8:	461c      	mov	r4, r3
 8002bea:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	230c      	movs	r3, #12
 8002bf2:	2208      	movs	r2, #8
 8002bf4:	4942      	ldr	r1, [pc, #264]	@ (8002d00 <_ZN9AppMotion16MotionController5startEv+0x180>)
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	f000 ffac 	bl	8003b54 <_ZN9AppMotion5MotorC1EP17TIM_HandleTypeDefmmm>
		this->lmotor = new Motor(
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	605c      	str	r4, [r3, #4]
		this->rmotor = new Motor(
			&htim9,
			TIM_CHANNEL_1,
			TIM_CHANNEL_2,
			7000
		);
 8002c00:	2014      	movs	r0, #20
 8002c02:	f00d f8f1 	bl	800fde8 <_Znwj>
 8002c06:	4603      	mov	r3, r0
 8002c08:	461c      	mov	r4, r3
 8002c0a:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	2304      	movs	r3, #4
 8002c12:	2200      	movs	r2, #0
 8002c14:	493b      	ldr	r1, [pc, #236]	@ (8002d04 <_ZN9AppMotion16MotionController5startEv+0x184>)
 8002c16:	4620      	mov	r0, r4
 8002c18:	f000 ff9c 	bl	8003b54 <_ZN9AppMotion5MotorC1EP17TIM_HandleTypeDefmmm>
		this->rmotor = new Motor(
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	609c      	str	r4, [r3, #8]

		// Edit the following to control the DC motor's PID.

		float pid_param_left[3] = {
 8002c20:	4a39      	ldr	r2, [pc, #228]	@ (8002d08 <_ZN9AppMotion16MotionController5startEv+0x188>)
 8002c22:	f107 0320 	add.w	r3, r7, #32
 8002c26:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0.0,
			0.1
		};


		float pid_param_right[3] = {
 8002c2c:	4a37      	ldr	r2, [pc, #220]	@ (8002d0c <_ZN9AppMotion16MotionController5startEv+0x18c>)
 8002c2e:	f107 0314 	add.w	r3, r7, #20
 8002c32:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			3.1,  //3.1 0.35
			0.0,
			0.1
		};

		float pid_param_sync[3] = {
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	613b      	str	r3, [r7, #16]
			0,
			0,
			0
		};

		PID_init(&this->left_pid, PID_POSITION, pid_param_left, 7000, 7000);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3318      	adds	r3, #24
 8002c4e:	f107 0220 	add.w	r2, r7, #32
 8002c52:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8002d10 <_ZN9AppMotion16MotionController5startEv+0x190>
 8002c56:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8002d10 <_ZN9AppMotion16MotionController5startEv+0x190>
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f002 fb95 	bl	800538c <_Z8PID_initP12pid_type_defhPKfff>
		PID_init(&this->right_pid, PID_POSITION, pid_param_right, 7000, 7000);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3368      	adds	r3, #104	@ 0x68
 8002c66:	f107 0214 	add.w	r2, r7, #20
 8002c6a:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8002d10 <_ZN9AppMotion16MotionController5startEv+0x190>
 8002c6e:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8002d10 <_ZN9AppMotion16MotionController5startEv+0x190>
 8002c72:	2100      	movs	r1, #0
 8002c74:	4618      	mov	r0, r3
 8002c76:	f002 fb89 	bl	800538c <_Z8PID_initP12pid_type_defhPKfff>

		PID_init(&this->sync_left_pid, 0, pid_param_sync, 1000, 1000);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	33b8      	adds	r3, #184	@ 0xb8
 8002c7e:	f107 0208 	add.w	r2, r7, #8
 8002c82:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8002d14 <_ZN9AppMotion16MotionController5startEv+0x194>
 8002c86:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8002d14 <_ZN9AppMotion16MotionController5startEv+0x194>
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f002 fb7d 	bl	800538c <_Z8PID_initP12pid_type_defhPKfff>
		PID_init(&this->sync_right_pid, 0, pid_param_sync, 1000, 1000);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8002c98:	f107 0208 	add.w	r2, r7, #8
 8002c9c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8002d14 <_ZN9AppMotion16MotionController5startEv+0x194>
 8002ca0:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8002d14 <_ZN9AppMotion16MotionController5startEv+0x194>
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f002 fb70 	bl	800538c <_Z8PID_initP12pid_type_defhPKfff>
		emergency = false;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158

		instance_wrapper *wrapper_instance = new instance_wrapper();
 8002cb4:	2008      	movs	r0, #8
 8002cb6:	f00d f897 	bl	800fde8 <_Znwj>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	605a      	str	r2, [r3, #4]
 8002cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		wrapper_instance->ctx = ctx;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ccc:	601a      	str	r2, [r3, #0]
		wrapper_instance->i = this;
 8002cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	605a      	str	r2, [r3, #4]
		this->ctx->runner = osThreadNew(
				(osThreadFunc_t) MotionController::motionTask, wrapper_instance,
				&(ctx->attr));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	1d1a      	adds	r2, r3, #4
		this->ctx->runner = osThreadNew(
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681c      	ldr	r4, [r3, #0]
 8002cde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ce0:	480d      	ldr	r0, [pc, #52]	@ (8002d18 <_ZN9AppMotion16MotionController5startEv+0x198>)
 8002ce2:	f009 fd03 	bl	800c6ec <osThreadNew>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	6023      	str	r3, [r4, #0]
		return;
 8002cea:	bf00      	nop
	}
 8002cec:	3734      	adds	r7, #52	@ 0x34
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd90      	pop	{r4, r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000b30 	.word	0x20000b30
 8002cf8:	20000980 	.word	0x20000980
 8002cfc:	200009c8 	.word	0x200009c8
 8002d00:	20000a10 	.word	0x20000a10
 8002d04:	20000ae8 	.word	0x20000ae8
 8002d08:	08013748 	.word	0x08013748
 8002d0c:	08013754 	.word	0x08013754
 8002d10:	45dac000 	.word	0x45dac000
 8002d14:	447a0000 	.word	0x447a0000
 8002d18:	08002d1d 	.word	0x08002d1d

08002d1c <_ZN9AppMotion16MotionController10motionTaskEPv>:

	/* MOTIONCONTROLLER LOGIC */
	void MotionController::motionTask(void *pv) {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b092      	sub	sp, #72	@ 0x48
 8002d20:	af02      	add	r7, sp, #8
 8002d22:	6078      	str	r0, [r7, #4]

		// workaround section START
		instance_wrapper *wrapper = static_cast<instance_wrapper*>(pv);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
		u_ctx *ctx = wrapper->ctx;
 8002d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
		MotionController *self = wrapper->i;
 8002d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	637b      	str	r3, [r7, #52]	@ 0x34

		Motor *lmotor = self->lmotor;
 8002d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	633b      	str	r3, [r7, #48]	@ 0x30
		Motor *rmotor = self->rmotor;
 8002d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		Servo *servo = self->servo;
 8002d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	62bb      	str	r3, [r7, #40]	@ 0x28
		osDelay(4500);
 8002d46:	f241 1094 	movw	r0, #4500	@ 0x1194
 8002d4a:	f009 fd81 	bl	800c850 <osDelay>
//		servo->turnLeft();
//		servo->turnRight();
		servo->turnFront();
 8002d4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d50:	f000 feef 	bl	8003b32 <_ZN9AppMotion5Servo9turnFrontEv>

		/* workaround section END. henceforth refer to any "this" as "self" */


		for (;;) {
			is_task_alive_struct.motn = true;
 8002d54:	4b46      	ldr	r3, [pc, #280]	@ (8002e70 <_ZN9AppMotion16MotionController10motionTaskEPv+0x154>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	70da      	strb	r2, [r3, #3]

//			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);

			osDelay(50);
 8002d5a:	2032      	movs	r0, #50	@ 0x32
 8002d5c:	f009 fd78 	bl	800c850 <osDelay>
			osThreadYield();
 8002d60:	f009 fd56 	bl	800c810 <osThreadYield>
//			self->move(false, 10, 35, false, false);

//			while(1){} // uncomment this code if you are using any of the test code above.


			if (osMessageQueueGetCount(ctx->mailbox.queue) > 0) {
 8002d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f009 ffa3 	bl	800ccb4 <osMessageQueueGetCount>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	bf14      	ite	ne
 8002d74:	2301      	movne	r3, #1
 8002d76:	2300      	moveq	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0ea      	beq.n	8002d54 <_ZN9AppMotion16MotionController10motionTaskEPv+0x38>
				AppParser::MOTION_PKT_t pkt;
				osMessageQueueGet(ctx->mailbox.queue, &pkt, 0, 5);
 8002d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d80:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002d82:	f107 011c 	add.w	r1, r7, #28
 8002d86:	2305      	movs	r3, #5
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f009 ff35 	bl	800cbf8 <osMessageQueueGet>
				char buffer[20] = { 0 };
 8002d8e:	f107 0308 	add.w	r3, r7, #8
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	605a      	str	r2, [r3, #4]
 8002d98:	609a      	str	r2, [r3, #8]
 8002d9a:	60da      	str	r2, [r3, #12]
 8002d9c:	611a      	str	r2, [r3, #16]
				sprintf((char*) &buffer, "cmd:%ld, arg:%ld\r\n", (uint32_t) pkt.cmd, pkt.arg);
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	f107 0008 	add.w	r0, r7, #8
 8002da6:	4933      	ldr	r1, [pc, #204]	@ (8002e74 <_ZN9AppMotion16MotionController10motionTaskEPv+0x158>)
 8002da8:	f00e fbc8 	bl	801153c <siprintf>
				//HAL_UART_Transmit(&huart3, (uint8_t*) buffer, sizeof(buffer), 10);

				if (pkt.cmd == AppParser::MOTION_CMD::MOVE_FWD) {
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d110      	bne.n	8002dd4 <_ZN9AppMotion16MotionController10motionTaskEPv+0xb8>
					servo->turnFront();
 8002db2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002db4:	f000 febd 	bl	8003b32 <_ZN9AppMotion5Servo9turnFrontEv>
					self->move(true, pkt.arg, 35, pkt.is_crawl, pkt.linear);
 8002db8:	6a39      	ldr	r1, [r7, #32]
 8002dba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002dbe:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002dc2:	9201      	str	r2, [sp, #4]
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	2323      	movs	r3, #35	@ 0x23
 8002dc8:	460a      	mov	r2, r1
 8002dca:	2101      	movs	r1, #1
 8002dcc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002dce:	f000 f853 	bl	8002e78 <_ZN9AppMotion16MotionController4moveEbmmbb>
 8002dd2:	e7bf      	b.n	8002d54 <_ZN9AppMotion16MotionController10motionTaskEPv+0x38>

				} else if (pkt.cmd == AppParser::MOTION_CMD::MOVE_BWD) {
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d110      	bne.n	8002dfc <_ZN9AppMotion16MotionController10motionTaskEPv+0xe0>
					servo->turnFront();
 8002dda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ddc:	f000 fea9 	bl	8003b32 <_ZN9AppMotion5Servo9turnFrontEv>
					self->move(false, pkt.arg, 35, pkt.is_crawl, pkt.linear);
 8002de0:	6a39      	ldr	r1, [r7, #32]
 8002de2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002de6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002dea:	9201      	str	r2, [sp, #4]
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	2323      	movs	r3, #35	@ 0x23
 8002df0:	460a      	mov	r2, r1
 8002df2:	2100      	movs	r1, #0
 8002df4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002df6:	f000 f83f 	bl	8002e78 <_ZN9AppMotion16MotionController4moveEbmmbb>
 8002dfa:	e7ab      	b.n	8002d54 <_ZN9AppMotion16MotionController10motionTaskEPv+0x38>

				} else if (pkt.cmd == AppParser::MOTION_CMD::MOVE_LEFT_FWD) {
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	d10a      	bne.n	8002e18 <_ZN9AppMotion16MotionController10motionTaskEPv+0xfc>
					self->turn(false, true, pkt.linear, pkt.arg);
 8002e02:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	2100      	movs	r1, #0
 8002e10:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002e12:	f000 fae5 	bl	80033e0 <_ZN9AppMotion16MotionController4turnEbbbm>
 8002e16:	e79d      	b.n	8002d54 <_ZN9AppMotion16MotionController10motionTaskEPv+0x38>

				} else if (pkt.cmd == AppParser::MOTION_CMD::MOVE_RIGHT_FWD) {
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d10a      	bne.n	8002e34 <_ZN9AppMotion16MotionController10motionTaskEPv+0x118>
					self->turn(true, true, pkt.linear, pkt.arg);
 8002e1e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	4613      	mov	r3, r2
 8002e28:	2201      	movs	r2, #1
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002e2e:	f000 fad7 	bl	80033e0 <_ZN9AppMotion16MotionController4turnEbbbm>
 8002e32:	e78f      	b.n	8002d54 <_ZN9AppMotion16MotionController10motionTaskEPv+0x38>

				} else if (pkt.cmd == AppParser::MOTION_CMD::MOVE_LEFT_BWD) {
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	2b05      	cmp	r3, #5
 8002e38:	d10a      	bne.n	8002e50 <_ZN9AppMotion16MotionController10motionTaskEPv+0x134>
					self->turn(false, false, pkt.linear, pkt.arg);
 8002e3a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	4613      	mov	r3, r2
 8002e44:	2200      	movs	r2, #0
 8002e46:	2100      	movs	r1, #0
 8002e48:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002e4a:	f000 fac9 	bl	80033e0 <_ZN9AppMotion16MotionController4turnEbbbm>
 8002e4e:	e781      	b.n	8002d54 <_ZN9AppMotion16MotionController10motionTaskEPv+0x38>

				} else if (pkt.cmd == AppParser::MOTION_CMD::MOVE_RIGHT_BWD){
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	f47f af7e 	bne.w	8002d54 <_ZN9AppMotion16MotionController10motionTaskEPv+0x38>
					self->turn(true, false, pkt.linear, pkt.arg);
 8002e58:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	4613      	mov	r3, r2
 8002e62:	2200      	movs	r2, #0
 8002e64:	2101      	movs	r1, #1
 8002e66:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002e68:	f000 faba 	bl	80033e0 <_ZN9AppMotion16MotionController4turnEbbbm>
				}
			}
		}
 8002e6c:	e772      	b.n	8002d54 <_ZN9AppMotion16MotionController10motionTaskEPv+0x38>
 8002e6e:	bf00      	nop
 8002e70:	20000288 	.word	0x20000288
 8002e74:	08013760 	.word	0x08013760

08002e78 <_ZN9AppMotion16MotionController4moveEbmmbb>:
	    // Stop motors
	    lmotor->halt();
	    rmotor->halt();
	}

	void MotionController::move(bool isFwd, uint32_t arg, uint32_t speed, bool isCrawl, bool nostop) {
 8002e78:	b5b0      	push	{r4, r5, r7, lr}
 8002e7a:	b098      	sub	sp, #96	@ 0x60
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	607a      	str	r2, [r7, #4]
 8002e82:	603b      	str	r3, [r7, #0]
 8002e84:	460b      	mov	r3, r1
 8002e86:	72fb      	strb	r3, [r7, #11]
		emergency = false;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
		servo->turnFront();
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 fe4c 	bl	8003b32 <_ZN9AppMotion5Servo9turnFrontEv>

		lmotor->setSpeed(speed, isFwd);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	7afa      	ldrb	r2, [r7, #11]
 8002ea0:	6839      	ldr	r1, [r7, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 fe7a 	bl	8003b9c <_ZN9AppMotion5Motor8setSpeedEmb>
		rmotor->setSpeed(speed, isFwd);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	7afa      	ldrb	r2, [r7, #11]
 8002eae:	6839      	ldr	r1, [r7, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 fe73 	bl	8003b9c <_ZN9AppMotion5Motor8setSpeedEmb>

		if (isCrawl)
 8002eb6:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00d      	beq.n	8002eda <_ZN9AppMotion16MotionController4moveEbmmbb+0x62>
		{
			lmotor->setSpeed(35, isFwd);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	7afa      	ldrb	r2, [r7, #11]
 8002ec4:	2123      	movs	r1, #35	@ 0x23
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fe68 	bl	8003b9c <_ZN9AppMotion5Motor8setSpeedEmb>
			rmotor->setSpeed(35, isFwd);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	7afa      	ldrb	r2, [r7, #11]
 8002ed2:	2123      	movs	r1, #35	@ 0x23
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fe61 	bl	8003b9c <_ZN9AppMotion5Motor8setSpeedEmb>
		}

		uint32_t timeStart = HAL_GetTick();
 8002eda:	f003 fbaf 	bl	800663c <HAL_GetTick>
 8002ede:	63f8      	str	r0, [r7, #60]	@ 0x3c
		uint32_t l_encoder_count = lencoder->getCount();
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f001 f818 	bl	8003f1a <_ZN9AppMotion7Encoder8getCountEv>
 8002eea:	65f8      	str	r0, [r7, #92]	@ 0x5c
		uint32_t r_encoder_count = rencoder->getCount();
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f001 f812 	bl	8003f1a <_ZN9AppMotion7Encoder8getCountEv>
 8002ef6:	65b8      	str	r0, [r7, #88]	@ 0x58
		double target = (double) arg / DISTANCE_PER_ENCODER_PULSE;
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7fd fb03 	bl	8000504 <__aeabi_ui2d>
 8002efe:	a3d8      	add	r3, pc, #864	@ (adr r3, 8003260 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3e8>)
 8002f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f04:	f7fd fca2 	bl	800084c <__aeabi_ddiv>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

		double cur_left = 0, cur_right = 0;
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
		float count_left = 0, count_right = 0;
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f2e:	f04f 0300 	mov.w	r3, #0
 8002f32:	62bb      	str	r3, [r7, #40]	@ 0x28
		float init_angle = 0, cur_angle = 0;
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	623b      	str	r3, [r7, #32]

		sensor_data.target = target;
 8002f40:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002f44:	f7fd fe50 	bl	8000be8 <__aeabi_d2f>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	4abf      	ldr	r2, [pc, #764]	@ (8003248 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3d0>)
 8002f4c:	6413      	str	r3, [r2, #64]	@ 0x40
		sensor_data.cur_left = cur_left;
 8002f4e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002f52:	f7fd fe49 	bl	8000be8 <__aeabi_d2f>
 8002f56:	4603      	mov	r3, r0
 8002f58:	4abb      	ldr	r2, [pc, #748]	@ (8003248 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3d0>)
 8002f5a:	6393      	str	r3, [r2, #56]	@ 0x38
		sensor_data.cur_right = cur_right;
 8002f5c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002f60:	f7fd fe42 	bl	8000be8 <__aeabi_d2f>
 8002f64:	4603      	mov	r3, r0
 8002f66:	4ab8      	ldr	r2, [pc, #736]	@ (8003248 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3d0>)
 8002f68:	63d3      	str	r3, [r2, #60]	@ 0x3c
		init_angle = sensor_data.yaw_abs;
 8002f6a:	4bb7      	ldr	r3, [pc, #732]	@ (8003248 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3d0>)
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	627b      	str	r3, [r7, #36]	@ 0x24

//		 OLED_ShowString(0, 10, (uint8_t*)"Entered move()");
//		 OLED_Refresh_Gram();


		double speed_error = 0;
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		do {

//    		OLED_ShowString(0, 20, (uint8_t*)"looping...");
//			OLED_Refresh_Gram();

			count_left = (double) lencoder->getDelta(l_encoder_count, lencoder->getCount());
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	691c      	ldr	r4, [r3, #16]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 ffc8 	bl	8003f1a <_ZN9AppMotion7Encoder8getCountEv>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002f90:	4620      	mov	r0, r4
 8002f92:	f000 ffd0 	bl	8003f36 <_ZN9AppMotion7Encoder8getDeltaEmm>
 8002f96:	4603      	mov	r3, r0
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fd fab3 	bl	8000504 <__aeabi_ui2d>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	f7fd fe1f 	bl	8000be8 <__aeabi_d2f>
 8002faa:	4603      	mov	r3, r0
 8002fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			count_right = (double) rencoder->getDelta(r_encoder_count, rencoder->getCount());
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	695c      	ldr	r4, [r3, #20]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 ffaf 	bl	8003f1a <_ZN9AppMotion7Encoder8getCountEv>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	f000 ffb7 	bl	8003f36 <_ZN9AppMotion7Encoder8getDeltaEmm>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fd fa9a 	bl	8000504 <__aeabi_ui2d>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	f7fd fe06 	bl	8000be8 <__aeabi_d2f>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	62bb      	str	r3, [r7, #40]	@ 0x28
			cur_angle = sensor_data.yaw_abs;
 8002fe0:	4b99      	ldr	r3, [pc, #612]	@ (8003248 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3d0>)
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	623b      	str	r3, [r7, #32]


			cur_left += count_left * LEFT_ENCODER_SCALE;
 8002fe6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002fe8:	f7fd faae 	bl	8000548 <__aeabi_f2d>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002ff4:	f7fd f94a 	bl	800028c <__adddf3>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
			cur_right += count_right * RIGHT_ENCODER_SCALE;
 8003000:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003002:	f7fd faa1 	bl	8000548 <__aeabi_f2d>
 8003006:	a38e      	add	r3, pc, #568	@ (adr r3, 8003240 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3c8>)
 8003008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300c:	f7fd faf4 	bl	80005f8 <__aeabi_dmul>
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8003018:	f7fd f938 	bl	800028c <__adddf3>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
			speed_error += (count_left - count_right);
 8003024:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003028:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800302c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003030:	ee17 0a90 	vmov	r0, s15
 8003034:	f7fd fa88 	bl	8000548 <__aeabi_f2d>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8003040:	f7fd f924 	bl	800028c <__adddf3>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

			if (!isCrawl && !nostop) {
 800304c:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8003050:	f083 0301 	eor.w	r3, r3, #1
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 812e 	beq.w	80032b8 <_ZN9AppMotion16MotionController4moveEbmmbb+0x440>
 800305c:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8003060:	f083 0301 	eor.w	r3, r3, #1
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 8126 	beq.w	80032b8 <_ZN9AppMotion16MotionController4moveEbmmbb+0x440>

				// Close to target check
				if (cur_left > target - 2000 || cur_right > target - 2000) {
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	4b76      	ldr	r3, [pc, #472]	@ (800324c <_ZN9AppMotion16MotionController4moveEbmmbb+0x3d4>)
 8003072:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003076:	f7fd f907 	bl	8000288 <__aeabi_dsub>
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8003082:	f7fd fd49 	bl	8000b18 <__aeabi_dcmpgt>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10f      	bne.n	80030ac <_ZN9AppMotion16MotionController4moveEbmmbb+0x234>
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	4b6e      	ldr	r3, [pc, #440]	@ (800324c <_ZN9AppMotion16MotionController4moveEbmmbb+0x3d4>)
 8003092:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003096:	f7fd f8f7 	bl	8000288 <__aeabi_dsub>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80030a2:	f7fd fd39 	bl	8000b18 <__aeabi_dcmpgt>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d04c      	beq.n	8003146 <_ZN9AppMotion16MotionController4moveEbmmbb+0x2ce>
					lmotor->setSpeed(map(target - cur_left, 2000, 330, 35, 15), isFwd);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	685c      	ldr	r4, [r3, #4]
 80030b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80030b4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80030b8:	f7fd f8e6 	bl	8000288 <__aeabi_dsub>
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
 80030c0:	4610      	mov	r0, r2
 80030c2:	4619      	mov	r1, r3
 80030c4:	f7fd fd90 	bl	8000be8 <__aeabi_d2f>
 80030c8:	4603      	mov	r3, r0
 80030ca:	eeb2 2a0e 	vmov.f32	s4, #46	@ 0x41700000  15.0
 80030ce:	eddf 1a60 	vldr	s3, [pc, #384]	@ 8003250 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3d8>
 80030d2:	ed9f 1a60 	vldr	s2, [pc, #384]	@ 8003254 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3dc>
 80030d6:	eddf 0a60 	vldr	s1, [pc, #384]	@ 8003258 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3e0>
 80030da:	ee00 3a10 	vmov	s0, r3
 80030de:	f7ff fd11 	bl	8002b04 <_ZN9AppMotion16MotionController3mapEfffff>
 80030e2:	eef0 7a40 	vmov.f32	s15, s0
 80030e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030ea:	7afb      	ldrb	r3, [r7, #11]
 80030ec:	461a      	mov	r2, r3
 80030ee:	ee17 1a90 	vmov	r1, s15
 80030f2:	4620      	mov	r0, r4
 80030f4:	f000 fd52 	bl	8003b9c <_ZN9AppMotion5Motor8setSpeedEmb>
					rmotor->setSpeed(map(target - cur_right, 2000, 330, 35, 15), isFwd);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	689c      	ldr	r4, [r3, #8]
 80030fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003100:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003104:	f7fd f8c0 	bl	8000288 <__aeabi_dsub>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4610      	mov	r0, r2
 800310e:	4619      	mov	r1, r3
 8003110:	f7fd fd6a 	bl	8000be8 <__aeabi_d2f>
 8003114:	4603      	mov	r3, r0
 8003116:	eeb2 2a0e 	vmov.f32	s4, #46	@ 0x41700000  15.0
 800311a:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 8003250 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3d8>
 800311e:	ed9f 1a4d 	vldr	s2, [pc, #308]	@ 8003254 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3dc>
 8003122:	eddf 0a4d 	vldr	s1, [pc, #308]	@ 8003258 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3e0>
 8003126:	ee00 3a10 	vmov	s0, r3
 800312a:	f7ff fceb 	bl	8002b04 <_ZN9AppMotion16MotionController3mapEfffff>
 800312e:	eef0 7a40 	vmov.f32	s15, s0
 8003132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003136:	7afb      	ldrb	r3, [r7, #11]
 8003138:	461a      	mov	r2, r3
 800313a:	ee17 1a90 	vmov	r1, s15
 800313e:	4620      	mov	r0, r4
 8003140:	f000 fd2c 	bl	8003b9c <_ZN9AppMotion5Motor8setSpeedEmb>
 8003144:	e0b8      	b.n	80032b8 <_ZN9AppMotion16MotionController4moveEbmmbb+0x440>
				}

				// Use PID
				else {

					float pid_left = PID_calc(&this->left_pid, target - cur_left, target);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f103 0418 	add.w	r4, r3, #24
 800314c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003150:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003154:	f7fd f898 	bl	8000288 <__aeabi_dsub>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	4610      	mov	r0, r2
 800315e:	4619      	mov	r1, r3
 8003160:	f7fd fd42 	bl	8000be8 <__aeabi_d2f>
 8003164:	4605      	mov	r5, r0
 8003166:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800316a:	f7fd fd3d 	bl	8000be8 <__aeabi_d2f>
 800316e:	4603      	mov	r3, r0
 8003170:	ee00 3a90 	vmov	s1, r3
 8003174:	ee00 5a10 	vmov	s0, r5
 8003178:	4620      	mov	r0, r4
 800317a:	f002 f95e 	bl	800543a <_Z8PID_calcP12pid_type_defff>
 800317e:	ed87 0a07 	vstr	s0, [r7, #28]
					float pid_right = PID_calc(&this->right_pid, target - cur_right, target);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f103 0468 	add.w	r4, r3, #104	@ 0x68
 8003188:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800318c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003190:	f7fd f87a 	bl	8000288 <__aeabi_dsub>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4610      	mov	r0, r2
 800319a:	4619      	mov	r1, r3
 800319c:	f7fd fd24 	bl	8000be8 <__aeabi_d2f>
 80031a0:	4605      	mov	r5, r0
 80031a2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80031a6:	f7fd fd1f 	bl	8000be8 <__aeabi_d2f>
 80031aa:	4603      	mov	r3, r0
 80031ac:	ee00 3a90 	vmov	s1, r3
 80031b0:	ee00 5a10 	vmov	s0, r5
 80031b4:	4620      	mov	r0, r4
 80031b6:	f002 f940 	bl	800543a <_Z8PID_calcP12pid_type_defff>
 80031ba:	ed87 0a06 	vstr	s0, [r7, #24]
					float pid_left_d = PID_calc(&this->sync_left_pid, speed_error, 0);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f103 04b8 	add.w	r4, r3, #184	@ 0xb8
 80031c4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80031c8:	f7fd fd0e 	bl	8000be8 <__aeabi_d2f>
 80031cc:	4603      	mov	r3, r0
 80031ce:	eddf 0a23 	vldr	s1, [pc, #140]	@ 800325c <_ZN9AppMotion16MotionController4moveEbmmbb+0x3e4>
 80031d2:	ee00 3a10 	vmov	s0, r3
 80031d6:	4620      	mov	r0, r4
 80031d8:	f002 f92f 	bl	800543a <_Z8PID_calcP12pid_type_defff>
 80031dc:	ed87 0a05 	vstr	s0, [r7, #20]
					float pid_right_d = PID_calc(&this->sync_right_pid, -speed_error, 0);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f503 7484 	add.w	r4, r3, #264	@ 0x108
 80031e6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80031ea:	f7fd fcfd 	bl	8000be8 <__aeabi_d2f>
 80031ee:	4603      	mov	r3, r0
 80031f0:	ee07 3a90 	vmov	s15, r3
 80031f4:	eef1 7a67 	vneg.f32	s15, s15
 80031f8:	eddf 0a18 	vldr	s1, [pc, #96]	@ 800325c <_ZN9AppMotion16MotionController4moveEbmmbb+0x3e4>
 80031fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003200:	4620      	mov	r0, r4
 8003202:	f002 f91a 	bl	800543a <_Z8PID_calcP12pid_type_defff>
 8003206:	ed87 0a04 	vstr	s0, [r7, #16]

					// Update the speed
					lmotor->_setDutyCycleVal((uint32_t) ((pid_left + pid_left_d) > 1000 ?(pid_left + pid_left_d) : 1000), isFwd);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003212:	edd7 7a05 	vldr	s15, [r7, #20]
 8003216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800321a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8003268 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3f0>
 800321e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003226:	dd21      	ble.n	800326c <_ZN9AppMotion16MotionController4moveEbmmbb+0x3f4>
 8003228:	ed97 7a07 	vldr	s14, [r7, #28]
 800322c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003238:	ee17 1a90 	vmov	r1, s15
 800323c:	e018      	b.n	8003270 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3f8>
 800323e:	bf00      	nop
 8003240:	645a1cac 	.word	0x645a1cac
 8003244:	3fefdf3b 	.word	0x3fefdf3b
 8003248:	20000244 	.word	0x20000244
 800324c:	409f4000 	.word	0x409f4000
 8003250:	420c0000 	.word	0x420c0000
 8003254:	43a50000 	.word	0x43a50000
 8003258:	44fa0000 	.word	0x44fa0000
 800325c:	00000000 	.word	0x00000000
 8003260:	c177bd5f 	.word	0xc177bd5f
 8003264:	3f8acfcd 	.word	0x3f8acfcd
 8003268:	447a0000 	.word	0x447a0000
 800326c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003270:	7afa      	ldrb	r2, [r7, #11]
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fd44 	bl	8003d00 <_ZN9AppMotion5Motor16_setDutyCycleValEmb>
					rmotor->_setDutyCycleVal((uint32_t) ((pid_right + pid_right_d) > 1000 ?(pid_right + pid_right_d) : 1000), isFwd);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003280:	edd7 7a04 	vldr	s15, [r7, #16]
 8003284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003288:	ed1f 7a09 	vldr	s14, [pc, #-36]	@ 8003268 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3f0>
 800328c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003294:	dd0a      	ble.n	80032ac <_ZN9AppMotion16MotionController4moveEbmmbb+0x434>
 8003296:	ed97 7a06 	vldr	s14, [r7, #24]
 800329a:	edd7 7a04 	vldr	s15, [r7, #16]
 800329e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032a6:	ee17 1a90 	vmov	r1, s15
 80032aa:	e001      	b.n	80032b0 <_ZN9AppMotion16MotionController4moveEbmmbb+0x438>
 80032ac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80032b0:	7afa      	ldrb	r2, [r7, #11]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 fd24 	bl	8003d00 <_ZN9AppMotion5Motor16_setDutyCycleValEmb>
				}
			}

			l_encoder_count = lencoder->getCount();
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 fe2c 	bl	8003f1a <_ZN9AppMotion7Encoder8getCountEv>
 80032c2:	65f8      	str	r0, [r7, #92]	@ 0x5c
			r_encoder_count = rencoder->getCount();
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 fe26 	bl	8003f1a <_ZN9AppMotion7Encoder8getCountEv>
 80032ce:	65b8      	str	r0, [r7, #88]	@ 0x58

			if ((cur_left > target && cur_right > target) || emergency)
 80032d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80032d4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80032d8:	f7fd fc1e 	bl	8000b18 <__aeabi_dcmpgt>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d008      	beq.n	80032f4 <_ZN9AppMotion16MotionController4moveEbmmbb+0x47c>
 80032e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80032e6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80032ea:	f7fd fc15 	bl	8000b18 <__aeabi_dcmpgt>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d104      	bne.n	80032fe <_ZN9AppMotion16MotionController4moveEbmmbb+0x486>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f893 3158 	ldrb.w	r3, [r3, #344]	@ 0x158
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d040      	beq.n	8003380 <_ZN9AppMotion16MotionController4moveEbmmbb+0x508>
			{
				sensor_data.last_halt_val = (uint32_t) (cur_left>cur_right?cur_right:cur_left) * DISTANCE_PER_ENCODER_PULSE;
 80032fe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003302:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8003306:	f7fd fc07 	bl	8000b18 <__aeabi_dcmpgt>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d008      	beq.n	8003322 <_ZN9AppMotion16MotionController4moveEbmmbb+0x4aa>
 8003310:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8003314:	f7fd fc48 	bl	8000ba8 <__aeabi_d2uiz>
 8003318:	4603      	mov	r3, r0
 800331a:	4618      	mov	r0, r3
 800331c:	f7fd f8f2 	bl	8000504 <__aeabi_ui2d>
 8003320:	e007      	b.n	8003332 <_ZN9AppMotion16MotionController4moveEbmmbb+0x4ba>
 8003322:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8003326:	f7fd fc3f 	bl	8000ba8 <__aeabi_d2uiz>
 800332a:	4603      	mov	r3, r0
 800332c:	4618      	mov	r0, r3
 800332e:	f7fd f8e9 	bl	8000504 <__aeabi_ui2d>
 8003332:	a328      	add	r3, pc, #160	@ (adr r3, 80033d4 <_ZN9AppMotion16MotionController4moveEbmmbb+0x55c>)
 8003334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003338:	f7fd f95e 	bl	80005f8 <__aeabi_dmul>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4610      	mov	r0, r2
 8003342:	4619      	mov	r1, r3
 8003344:	f7fd fc30 	bl	8000ba8 <__aeabi_d2uiz>
 8003348:	4603      	mov	r3, r0
 800334a:	4a21      	ldr	r2, [pc, #132]	@ (80033d0 <_ZN9AppMotion16MotionController4moveEbmmbb+0x558>)
 800334c:	6353      	str	r3, [r2, #52]	@ 0x34
				sensor_data.cur_left = cur_left;
 800334e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8003352:	f7fd fc49 	bl	8000be8 <__aeabi_d2f>
 8003356:	4603      	mov	r3, r0
 8003358:	4a1d      	ldr	r2, [pc, #116]	@ (80033d0 <_ZN9AppMotion16MotionController4moveEbmmbb+0x558>)
 800335a:	6393      	str	r3, [r2, #56]	@ 0x38
				sensor_data.cur_right = cur_right;
 800335c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8003360:	f7fd fc42 	bl	8000be8 <__aeabi_d2f>
 8003364:	4603      	mov	r3, r0
 8003366:	4a1a      	ldr	r2, [pc, #104]	@ (80033d0 <_ZN9AppMotion16MotionController4moveEbmmbb+0x558>)
 8003368:	63d3      	str	r3, [r2, #60]	@ 0x3c
				lmotor->halt();
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	4618      	mov	r0, r3
 8003370:	f000 fd6e 	bl	8003e50 <_ZN9AppMotion5Motor4haltEv>
				rmotor->halt();
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	4618      	mov	r0, r3
 800337a:	f000 fd69 	bl	8003e50 <_ZN9AppMotion5Motor4haltEv>
				break;
 800337e:	e013      	b.n	80033a8 <_ZN9AppMotion16MotionController4moveEbmmbb+0x530>
			}

			osDelay(10);
 8003380:	200a      	movs	r0, #10
 8003382:	f009 fa65 	bl	800c850 <osDelay>
			sensor_data.cur_left = cur_left;
 8003386:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800338a:	f7fd fc2d 	bl	8000be8 <__aeabi_d2f>
 800338e:	4603      	mov	r3, r0
 8003390:	4a0f      	ldr	r2, [pc, #60]	@ (80033d0 <_ZN9AppMotion16MotionController4moveEbmmbb+0x558>)
 8003392:	6393      	str	r3, [r2, #56]	@ 0x38
			sensor_data.cur_right = cur_right;
 8003394:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8003398:	f7fd fc26 	bl	8000be8 <__aeabi_d2f>
 800339c:	4603      	mov	r3, r0
 800339e:	4a0c      	ldr	r2, [pc, #48]	@ (80033d0 <_ZN9AppMotion16MotionController4moveEbmmbb+0x558>)
 80033a0:	63d3      	str	r3, [r2, #60]	@ 0x3c
//			char buf[50];
//			snprintf(buf, sizeof(buf), "L:%3.2f R:%3.2f T:%3.2f", cur_left, cur_right, target);
//			OLED_ShowString(0, 30, (uint8_t*)buf);
//			OLED_Refresh_Gram();
			osThreadYield();
 80033a2:	f009 fa35 	bl	800c810 <osThreadYield>

		} while (1);
 80033a6:	e5e9      	b.n	8002f7c <_ZN9AppMotion16MotionController4moveEbmmbb+0x104>


		emergency = false;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
		lmotor->halt();
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fd4b 	bl	8003e50 <_ZN9AppMotion5Motor4haltEv>
		rmotor->halt();
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fd46 	bl	8003e50 <_ZN9AppMotion5Motor4haltEv>
	}
 80033c4:	bf00      	nop
 80033c6:	3760      	adds	r7, #96	@ 0x60
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bdb0      	pop	{r4, r5, r7, pc}
 80033cc:	f3af 8000 	nop.w
 80033d0:	20000244 	.word	0x20000244
 80033d4:	c177bd5f 	.word	0xc177bd5f
 80033d8:	3f8acfcd 	.word	0x3f8acfcd
 80033dc:	00000000 	.word	0x00000000

080033e0 <_ZN9AppMotion16MotionController4turnEbbbm>:

	void MotionController::turn(bool isRight, bool isFwd, bool arc, uint32_t arg) {
 80033e0:	b590      	push	{r4, r7, lr}
 80033e2:	ed2d 8b02 	vpush	{d8}
 80033e6:	b093      	sub	sp, #76	@ 0x4c
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	4608      	mov	r0, r1
 80033ee:	4611      	mov	r1, r2
 80033f0:	461a      	mov	r2, r3
 80033f2:	4603      	mov	r3, r0
 80033f4:	70fb      	strb	r3, [r7, #3]
 80033f6:	460b      	mov	r3, r1
 80033f8:	70bb      	strb	r3, [r7, #2]
 80033fa:	4613      	mov	r3, r2
 80033fc:	707b      	strb	r3, [r7, #1]
		emergency = false;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
		isRight ? servo->turnRight() : servo->turnLeft();
 8003406:	78fb      	ldrb	r3, [r7, #3]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d005      	beq.n	8003418 <_ZN9AppMotion16MotionController4turnEbbbm+0x38>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	4618      	mov	r0, r3
 8003412:	f000 fb7d 	bl	8003b10 <_ZN9AppMotion5Servo9turnRightEv>
 8003416:	e004      	b.n	8003422 <_ZN9AppMotion16MotionController4turnEbbbm+0x42>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	4618      	mov	r0, r3
 800341e:	f000 fb66 	bl	8003aee <_ZN9AppMotion5Servo8turnLeftEv>

		isRight ? lmotor->setSpeed(51, isFwd) : lmotor->setSpeed(20, !isFwd);
 8003422:	78fb      	ldrb	r3, [r7, #3]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d007      	beq.n	8003438 <_ZN9AppMotion16MotionController4turnEbbbm+0x58>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	78ba      	ldrb	r2, [r7, #2]
 800342e:	2133      	movs	r1, #51	@ 0x33
 8003430:	4618      	mov	r0, r3
 8003432:	f000 fbb3 	bl	8003b9c <_ZN9AppMotion5Motor8setSpeedEmb>
 8003436:	e009      	b.n	800344c <_ZN9AppMotion16MotionController4turnEbbbm+0x6c>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6858      	ldr	r0, [r3, #4]
 800343c:	78bb      	ldrb	r3, [r7, #2]
 800343e:	f083 0301 	eor.w	r3, r3, #1
 8003442:	b2db      	uxtb	r3, r3
 8003444:	461a      	mov	r2, r3
 8003446:	2114      	movs	r1, #20
 8003448:	f000 fba8 	bl	8003b9c <_ZN9AppMotion5Motor8setSpeedEmb>
		isRight ? rmotor->setSpeed(20, !isFwd) : rmotor->setSpeed(51, isFwd);
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00a      	beq.n	8003468 <_ZN9AppMotion16MotionController4turnEbbbm+0x88>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6898      	ldr	r0, [r3, #8]
 8003456:	78bb      	ldrb	r3, [r7, #2]
 8003458:	f083 0301 	eor.w	r3, r3, #1
 800345c:	b2db      	uxtb	r3, r3
 800345e:	461a      	mov	r2, r3
 8003460:	2114      	movs	r1, #20
 8003462:	f000 fb9b 	bl	8003b9c <_ZN9AppMotion5Motor8setSpeedEmb>
 8003466:	e006      	b.n	8003476 <_ZN9AppMotion16MotionController4turnEbbbm+0x96>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	78ba      	ldrb	r2, [r7, #2]
 800346e:	2133      	movs	r1, #51	@ 0x33
 8003470:	4618      	mov	r0, r3
 8003472:	f000 fb93 	bl	8003b9c <_ZN9AppMotion5Motor8setSpeedEmb>

		if(arc) // arc increases turn radius
 8003476:	787b      	ldrb	r3, [r7, #1]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d023      	beq.n	80034c4 <_ZN9AppMotion16MotionController4turnEbbbm+0xe4>
		{
			isRight ? lmotor->setSpeed(55, isFwd) : lmotor->setSpeed(20, isFwd);
 800347c:	78fb      	ldrb	r3, [r7, #3]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d007      	beq.n	8003492 <_ZN9AppMotion16MotionController4turnEbbbm+0xb2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	78ba      	ldrb	r2, [r7, #2]
 8003488:	2137      	movs	r1, #55	@ 0x37
 800348a:	4618      	mov	r0, r3
 800348c:	f000 fb86 	bl	8003b9c <_ZN9AppMotion5Motor8setSpeedEmb>
 8003490:	e006      	b.n	80034a0 <_ZN9AppMotion16MotionController4turnEbbbm+0xc0>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	78ba      	ldrb	r2, [r7, #2]
 8003498:	2114      	movs	r1, #20
 800349a:	4618      	mov	r0, r3
 800349c:	f000 fb7e 	bl	8003b9c <_ZN9AppMotion5Motor8setSpeedEmb>
			isRight ? rmotor->setSpeed(20, isFwd) : rmotor->setSpeed(55, isFwd);
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d007      	beq.n	80034b6 <_ZN9AppMotion16MotionController4turnEbbbm+0xd6>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	78ba      	ldrb	r2, [r7, #2]
 80034ac:	2114      	movs	r1, #20
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 fb74 	bl	8003b9c <_ZN9AppMotion5Motor8setSpeedEmb>
 80034b4:	e006      	b.n	80034c4 <_ZN9AppMotion16MotionController4turnEbbbm+0xe4>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	78ba      	ldrb	r2, [r7, #2]
 80034bc:	2137      	movs	r1, #55	@ 0x37
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 fb6c 	bl	8003b9c <_ZN9AppMotion5Motor8setSpeedEmb>
		}
		uint32_t timeNow = HAL_GetTick();
 80034c4:	f003 f8ba 	bl	800663c <HAL_GetTick>
 80034c8:	6378      	str	r0, [r7, #52]	@ 0x34
		uint32_t timeStart = timeNow;
 80034ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034cc:	633b      	str	r3, [r7, #48]	@ 0x30
		uint8_t buf[30] = { 0 };
 80034ce:	f107 0308 	add.w	r3, r7, #8
 80034d2:	221e      	movs	r2, #30
 80034d4:	2100      	movs	r1, #0
 80034d6:	4618      	mov	r0, r3
 80034d8:	f00e f92a 	bl	8011730 <memset>
		float target_yaw = 0;
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	647b      	str	r3, [r7, #68]	@ 0x44
		float req = ((float) arg) ;
 80034e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034e4:	ee07 3a90 	vmov	s15, r3
 80034e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ec:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		float cur = sensor_data.yaw_abs; //[-179,180]
 80034f0:	4ba7      	ldr	r3, [pc, #668]	@ (8003790 <_ZN9AppMotion16MotionController4turnEbbbm+0x3b0>)
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	643b      	str	r3, [r7, #64]	@ 0x40
		float prev_yaw = cur;
 80034f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034f8:	62bb      	str	r3, [r7, #40]	@ 0x28
		float last_target_dist = 99999.0f; // overshoot protection
 80034fa:	4ba6      	ldr	r3, [pc, #664]	@ (8003794 <_ZN9AppMotion16MotionController4turnEbbbm+0x3b4>)
 80034fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
		float bwd_diffn_delta = 0;
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	63bb      	str	r3, [r7, #56]	@ 0x38

		if((!isRight && isFwd) || (isRight && !isFwd) ) //increase
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	f083 0301 	eor.w	r3, r3, #1
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <_ZN9AppMotion16MotionController4turnEbbbm+0x136>
 8003510:	78bb      	ldrb	r3, [r7, #2]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d108      	bne.n	8003528 <_ZN9AppMotion16MotionController4turnEbbbm+0x148>
 8003516:	78fb      	ldrb	r3, [r7, #3]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d02c      	beq.n	8003576 <_ZN9AppMotion16MotionController4turnEbbbm+0x196>
 800351c:	78bb      	ldrb	r3, [r7, #2]
 800351e:	f083 0301 	eor.w	r3, r3, #1
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d026      	beq.n	8003576 <_ZN9AppMotion16MotionController4turnEbbbm+0x196>
		{
			if((req + cur) > 179) target_yaw = -180 + (req - (180 - cur));
 8003528:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800352c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8003530:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003534:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 8003798 <_ZN9AppMotion16MotionController4turnEbbbm+0x3b8>
 8003538:	eef4 7ac7 	vcmpe.f32	s15, s14
 800353c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003540:	dd10      	ble.n	8003564 <_ZN9AppMotion16MotionController4turnEbbbm+0x184>
 8003542:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 800379c <_ZN9AppMotion16MotionController4turnEbbbm+0x3bc>
 8003546:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800354a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800354e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003552:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003556:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 800379c <_ZN9AppMotion16MotionController4turnEbbbm+0x3bc>
 800355a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800355e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 8003562:	e02e      	b.n	80035c2 <_ZN9AppMotion16MotionController4turnEbbbm+0x1e2>
			else target_yaw = req + cur;
 8003564:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003568:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800356c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003570:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
			if((req + cur) > 179) target_yaw = -180 + (req - (180 - cur));
 8003574:	e025      	b.n	80035c2 <_ZN9AppMotion16MotionController4turnEbbbm+0x1e2>
		}
		else
		{
			if((cur - req) < -179) target_yaw = 180 - (req + (-180 - cur));
 8003576:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800357a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800357e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003582:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 80037a0 <_ZN9AppMotion16MotionController4turnEbbbm+0x3c0>
 8003586:	eef4 7ac7 	vcmpe.f32	s15, s14
 800358a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800358e:	d510      	bpl.n	80035b2 <_ZN9AppMotion16MotionController4turnEbbbm+0x1d2>
 8003590:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 80037a4 <_ZN9AppMotion16MotionController4turnEbbbm+0x3c4>
 8003594:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8003598:	ee37 7a67 	vsub.f32	s14, s14, s15
 800359c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80035a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035a4:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 800379c <_ZN9AppMotion16MotionController4turnEbbbm+0x3bc>
 80035a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035ac:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 80035b0:	e007      	b.n	80035c2 <_ZN9AppMotion16MotionController4turnEbbbm+0x1e2>
			else target_yaw = cur - req;
 80035b2:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80035b6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80035ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035be:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		}

		do{
			if (abs(target_yaw - cur) < 45 ) {
 80035c2:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80035c6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80035ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035d2:	ee17 3a90 	vmov	r3, s15
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	bfb8      	it	lt
 80035da:	425b      	neglt	r3, r3
 80035dc:	2b2c      	cmp	r3, #44	@ 0x2c
 80035de:	dc58      	bgt.n	8003692 <_ZN9AppMotion16MotionController4turnEbbbm+0x2b2>
				if(isRight) lmotor->setSpeed((uint32_t)map(abs(target_yaw - cur), 45, 0, 30, 15), isFwd);
 80035e0:	78fb      	ldrb	r3, [r7, #3]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d02a      	beq.n	800363c <_ZN9AppMotion16MotionController4turnEbbbm+0x25c>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685c      	ldr	r4, [r3, #4]
 80035ea:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80035ee:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80035f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035fa:	ee17 3a90 	vmov	r3, s15
 80035fe:	2b00      	cmp	r3, #0
 8003600:	bfb8      	it	lt
 8003602:	425b      	neglt	r3, r3
 8003604:	ee07 3a90 	vmov	s15, r3
 8003608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800360c:	eeb2 2a0e 	vmov.f32	s4, #46	@ 0x41700000  15.0
 8003610:	eef3 1a0e 	vmov.f32	s3, #62	@ 0x41f00000  30.0
 8003614:	ed9f 1a64 	vldr	s2, [pc, #400]	@ 80037a8 <_ZN9AppMotion16MotionController4turnEbbbm+0x3c8>
 8003618:	eddf 0a64 	vldr	s1, [pc, #400]	@ 80037ac <_ZN9AppMotion16MotionController4turnEbbbm+0x3cc>
 800361c:	eeb0 0a67 	vmov.f32	s0, s15
 8003620:	f7ff fa70 	bl	8002b04 <_ZN9AppMotion16MotionController3mapEfffff>
 8003624:	eef0 7a40 	vmov.f32	s15, s0
 8003628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800362c:	78bb      	ldrb	r3, [r7, #2]
 800362e:	461a      	mov	r2, r3
 8003630:	ee17 1a90 	vmov	r1, s15
 8003634:	4620      	mov	r0, r4
 8003636:	f000 fab1 	bl	8003b9c <_ZN9AppMotion5Motor8setSpeedEmb>
 800363a:	e0fd      	b.n	8003838 <_ZN9AppMotion16MotionController4turnEbbbm+0x458>

				else rmotor->setSpeed((uint32_t)map(abs(target_yaw - cur), 45, 0, 30, 15), isFwd);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689c      	ldr	r4, [r3, #8]
 8003640:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8003644:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8003648:	ee77 7a67 	vsub.f32	s15, s14, s15
 800364c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003650:	ee17 3a90 	vmov	r3, s15
 8003654:	2b00      	cmp	r3, #0
 8003656:	bfb8      	it	lt
 8003658:	425b      	neglt	r3, r3
 800365a:	ee07 3a90 	vmov	s15, r3
 800365e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003662:	eeb2 2a0e 	vmov.f32	s4, #46	@ 0x41700000  15.0
 8003666:	eef3 1a0e 	vmov.f32	s3, #62	@ 0x41f00000  30.0
 800366a:	ed9f 1a4f 	vldr	s2, [pc, #316]	@ 80037a8 <_ZN9AppMotion16MotionController4turnEbbbm+0x3c8>
 800366e:	eddf 0a4f 	vldr	s1, [pc, #316]	@ 80037ac <_ZN9AppMotion16MotionController4turnEbbbm+0x3cc>
 8003672:	eeb0 0a67 	vmov.f32	s0, s15
 8003676:	f7ff fa45 	bl	8002b04 <_ZN9AppMotion16MotionController3mapEfffff>
 800367a:	eef0 7a40 	vmov.f32	s15, s0
 800367e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003682:	78bb      	ldrb	r3, [r7, #2]
 8003684:	461a      	mov	r2, r3
 8003686:	ee17 1a90 	vmov	r1, s15
 800368a:	4620      	mov	r0, r4
 800368c:	f000 fa86 	bl	8003b9c <_ZN9AppMotion5Motor8setSpeedEmb>
 8003690:	e0d2      	b.n	8003838 <_ZN9AppMotion16MotionController4turnEbbbm+0x458>
			}
			else if(fmod(abs(abs(target_yaw) - abs(cur)), 180) < 45 )
 8003692:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003696:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800369a:	ee17 3a90 	vmov	r3, s15
 800369e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80036a2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80036a6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80036aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036ae:	ee17 3a90 	vmov	r3, s15
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	bfb8      	it	lt
 80036b6:	425b      	neglt	r3, r3
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	bfb8      	it	lt
 80036be:	425b      	neglt	r3, r3
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fc ff2f 	bl	8000524 <__aeabi_i2d>
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	ed9f 1b2f 	vldr	d1, [pc, #188]	@ 8003788 <_ZN9AppMotion16MotionController4turnEbbbm+0x3a8>
 80036ce:	ec43 2b10 	vmov	d0, r2, r3
 80036d2:	f00c fba5 	bl	800fe20 <fmod>
 80036d6:	ec51 0b10 	vmov	r0, r1, d0
 80036da:	2301      	movs	r3, #1
 80036dc:	461c      	mov	r4, r3
 80036de:	f04f 0200 	mov.w	r2, #0
 80036e2:	4b33      	ldr	r3, [pc, #204]	@ (80037b0 <_ZN9AppMotion16MotionController4turnEbbbm+0x3d0>)
 80036e4:	f7fd f9fa 	bl	8000adc <__aeabi_dcmplt>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <_ZN9AppMotion16MotionController4turnEbbbm+0x312>
 80036ee:	2300      	movs	r3, #0
 80036f0:	461c      	mov	r4, r3
 80036f2:	b2e3      	uxtb	r3, r4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 809f 	beq.w	8003838 <_ZN9AppMotion16MotionController4turnEbbbm+0x458>
			{
				if(isRight) lmotor->setSpeed((uint32_t)map(fmod(abs(abs(target_yaw) - abs(cur)), 180), 45, 0, 30, 15), isFwd);
 80036fa:	78fb      	ldrb	r3, [r7, #3]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d059      	beq.n	80037b4 <_ZN9AppMotion16MotionController4turnEbbbm+0x3d4>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685c      	ldr	r4, [r3, #4]
 8003704:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003708:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800370c:	ee17 3a90 	vmov	r3, s15
 8003710:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003714:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003718:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800371c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003720:	ee17 3a90 	vmov	r3, s15
 8003724:	2b00      	cmp	r3, #0
 8003726:	bfb8      	it	lt
 8003728:	425b      	neglt	r3, r3
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	bfb8      	it	lt
 8003730:	425b      	neglt	r3, r3
 8003732:	4618      	mov	r0, r3
 8003734:	f7fc fef6 	bl	8000524 <__aeabi_i2d>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 8003788 <_ZN9AppMotion16MotionController4turnEbbbm+0x3a8>
 8003740:	ec43 2b10 	vmov	d0, r2, r3
 8003744:	f00c fb6c 	bl	800fe20 <fmod>
 8003748:	ec53 2b10 	vmov	r2, r3, d0
 800374c:	4610      	mov	r0, r2
 800374e:	4619      	mov	r1, r3
 8003750:	f7fd fa4a 	bl	8000be8 <__aeabi_d2f>
 8003754:	4603      	mov	r3, r0
 8003756:	eeb2 2a0e 	vmov.f32	s4, #46	@ 0x41700000  15.0
 800375a:	eef3 1a0e 	vmov.f32	s3, #62	@ 0x41f00000  30.0
 800375e:	ed9f 1a12 	vldr	s2, [pc, #72]	@ 80037a8 <_ZN9AppMotion16MotionController4turnEbbbm+0x3c8>
 8003762:	eddf 0a12 	vldr	s1, [pc, #72]	@ 80037ac <_ZN9AppMotion16MotionController4turnEbbbm+0x3cc>
 8003766:	ee00 3a10 	vmov	s0, r3
 800376a:	f7ff f9cb 	bl	8002b04 <_ZN9AppMotion16MotionController3mapEfffff>
 800376e:	eef0 7a40 	vmov.f32	s15, s0
 8003772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003776:	78bb      	ldrb	r3, [r7, #2]
 8003778:	461a      	mov	r2, r3
 800377a:	ee17 1a90 	vmov	r1, s15
 800377e:	4620      	mov	r0, r4
 8003780:	f000 fa0c 	bl	8003b9c <_ZN9AppMotion5Motor8setSpeedEmb>
 8003784:	e058      	b.n	8003838 <_ZN9AppMotion16MotionController4turnEbbbm+0x458>
 8003786:	bf00      	nop
 8003788:	00000000 	.word	0x00000000
 800378c:	40668000 	.word	0x40668000
 8003790:	20000244 	.word	0x20000244
 8003794:	47c34f80 	.word	0x47c34f80
 8003798:	43330000 	.word	0x43330000
 800379c:	43340000 	.word	0x43340000
 80037a0:	c3330000 	.word	0xc3330000
 80037a4:	c3340000 	.word	0xc3340000
 80037a8:	00000000 	.word	0x00000000
 80037ac:	42340000 	.word	0x42340000
 80037b0:	40468000 	.word	0x40468000

				else rmotor->setSpeed((uint32_t)map(fmod(abs(abs(target_yaw) - abs(cur)), 180), 45, 0, 30, 15), isFwd);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689c      	ldr	r4, [r3, #8]
 80037b8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80037bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037c0:	ee17 3a90 	vmov	r3, s15
 80037c4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80037c8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80037cc:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80037d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037d4:	ee17 3a90 	vmov	r3, s15
 80037d8:	2b00      	cmp	r3, #0
 80037da:	bfb8      	it	lt
 80037dc:	425b      	neglt	r3, r3
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	bfb8      	it	lt
 80037e4:	425b      	neglt	r3, r3
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fc fe9c 	bl	8000524 <__aeabi_i2d>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	ed9f 1b9f 	vldr	d1, [pc, #636]	@ 8003a70 <_ZN9AppMotion16MotionController4turnEbbbm+0x690>
 80037f4:	ec43 2b10 	vmov	d0, r2, r3
 80037f8:	f00c fb12 	bl	800fe20 <fmod>
 80037fc:	ec53 2b10 	vmov	r2, r3, d0
 8003800:	4610      	mov	r0, r2
 8003802:	4619      	mov	r1, r3
 8003804:	f7fd f9f0 	bl	8000be8 <__aeabi_d2f>
 8003808:	4603      	mov	r3, r0
 800380a:	eeb2 2a0e 	vmov.f32	s4, #46	@ 0x41700000  15.0
 800380e:	eef3 1a0e 	vmov.f32	s3, #62	@ 0x41f00000  30.0
 8003812:	ed9f 1a99 	vldr	s2, [pc, #612]	@ 8003a78 <_ZN9AppMotion16MotionController4turnEbbbm+0x698>
 8003816:	eddf 0a99 	vldr	s1, [pc, #612]	@ 8003a7c <_ZN9AppMotion16MotionController4turnEbbbm+0x69c>
 800381a:	ee00 3a10 	vmov	s0, r3
 800381e:	f7ff f971 	bl	8002b04 <_ZN9AppMotion16MotionController3mapEfffff>
 8003822:	eef0 7a40 	vmov.f32	s15, s0
 8003826:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800382a:	78bb      	ldrb	r3, [r7, #2]
 800382c:	461a      	mov	r2, r3
 800382e:	ee17 1a90 	vmov	r1, s15
 8003832:	4620      	mov	r0, r4
 8003834:	f000 f9b2 	bl	8003b9c <_ZN9AppMotion5Motor8setSpeedEmb>
			}

			timeNow = HAL_GetTick();
 8003838:	f002 ff00 	bl	800663c <HAL_GetTick>
 800383c:	6378      	str	r0, [r7, #52]	@ 0x34
			 * abs(sensor_data.yaw_abs - sensor_data.yaw_abs_prev) is STEP SIZE
			 * 50 is TIME PER STEP
			 * sgn(sensor_data.yaw_abs - sensor_data.yaw_abs_prev) is DIRECTION
			 *
			 * */
			if(timeNow != sensor_data.yaw_abs_time)
 800383e:	4b90      	ldr	r3, [pc, #576]	@ (8003a80 <_ZN9AppMotion16MotionController4turnEbbbm+0x6a0>)
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003844:	429a      	cmp	r2, r3
 8003846:	d028      	beq.n	800389a <_ZN9AppMotion16MotionController4turnEbbbm+0x4ba>
				bwd_diffn_delta = abs(sensor_data.yaw_abs - sensor_data.yaw_abs_prev) * (float)(abs(timeNow - sensor_data.yaw_abs_time)/80);
 8003848:	4b8d      	ldr	r3, [pc, #564]	@ (8003a80 <_ZN9AppMotion16MotionController4turnEbbbm+0x6a0>)
 800384a:	ed93 7a04 	vldr	s14, [r3, #16]
 800384e:	4b8c      	ldr	r3, [pc, #560]	@ (8003a80 <_ZN9AppMotion16MotionController4turnEbbbm+0x6a0>)
 8003850:	edd3 7a05 	vldr	s15, [r3, #20]
 8003854:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800385c:	ee17 3a90 	vmov	r3, s15
 8003860:	2b00      	cmp	r3, #0
 8003862:	bfb8      	it	lt
 8003864:	425b      	neglt	r3, r3
 8003866:	ee07 3a90 	vmov	s15, r3
 800386a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800386e:	4b84      	ldr	r3, [pc, #528]	@ (8003a80 <_ZN9AppMotion16MotionController4turnEbbbm+0x6a0>)
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	bfb8      	it	lt
 800387a:	425b      	neglt	r3, r3
 800387c:	4a81      	ldr	r2, [pc, #516]	@ (8003a84 <_ZN9AppMotion16MotionController4turnEbbbm+0x6a4>)
 800387e:	fb82 1203 	smull	r1, r2, r2, r3
 8003882:	1152      	asrs	r2, r2, #5
 8003884:	17db      	asrs	r3, r3, #31
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	ee07 3a90 	vmov	s15, r3
 800388c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003894:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
 8003898:	e002      	b.n	80038a0 <_ZN9AppMotion16MotionController4turnEbbbm+0x4c0>
			else
				bwd_diffn_delta = 0;
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	63bb      	str	r3, [r7, #56]	@ 0x38
			cur = sensor_data.yaw_abs +  (bwd_diffn_delta * sgn(sensor_data.yaw_abs - sensor_data.yaw_abs_prev)); // already dlpf and qtn filtered
 80038a0:	4b77      	ldr	r3, [pc, #476]	@ (8003a80 <_ZN9AppMotion16MotionController4turnEbbbm+0x6a0>)
 80038a2:	ed93 8a04 	vldr	s16, [r3, #16]
 80038a6:	4b76      	ldr	r3, [pc, #472]	@ (8003a80 <_ZN9AppMotion16MotionController4turnEbbbm+0x6a0>)
 80038a8:	ed93 7a04 	vldr	s14, [r3, #16]
 80038ac:	4b74      	ldr	r3, [pc, #464]	@ (8003a80 <_ZN9AppMotion16MotionController4turnEbbbm+0x6a0>)
 80038ae:	edd3 7a05 	vldr	s15, [r3, #20]
 80038b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038b6:	eeb0 0a67 	vmov.f32	s0, s15
 80038ba:	f000 fb72 	bl	8003fa2 <_ZN9AppMotion16MotionController3sgnIfEEiT_>
 80038be:	ee07 0a90 	vmov	s15, r0
 80038c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038c6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80038ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ce:	ee78 7a27 	vadd.f32	s15, s16, s15
 80038d2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
			sensor_data.yaw_cur_dbg = cur;
 80038d6:	4a6a      	ldr	r2, [pc, #424]	@ (8003a80 <_ZN9AppMotion16MotionController4turnEbbbm+0x6a0>)
 80038d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038da:	61d3      	str	r3, [r2, #28]
			prev_yaw = cur;
 80038dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038de:	62bb      	str	r3, [r7, #40]	@ 0x28
			//break off immediately if overshoot
			if (last_target_dist < abs(target_yaw - cur) && abs(target_yaw - cur) < 15) {
 80038e0:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80038e4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80038e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038f0:	ee17 3a90 	vmov	r3, s15
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	bfb8      	it	lt
 80038f8:	425b      	neglt	r3, r3
 80038fa:	ee07 3a90 	vmov	s15, r3
 80038fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003902:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003906:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800390a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800390e:	d519      	bpl.n	8003944 <_ZN9AppMotion16MotionController4turnEbbbm+0x564>
 8003910:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8003914:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8003918:	ee77 7a67 	vsub.f32	s15, s14, s15
 800391c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003920:	ee17 3a90 	vmov	r3, s15
 8003924:	2b00      	cmp	r3, #0
 8003926:	bfb8      	it	lt
 8003928:	425b      	neglt	r3, r3
 800392a:	2b0e      	cmp	r3, #14
 800392c:	dc0a      	bgt.n	8003944 <_ZN9AppMotion16MotionController4turnEbbbm+0x564>
				lmotor->halt();
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fa8c 	bl	8003e50 <_ZN9AppMotion5Motor4haltEv>
				rmotor->halt();
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	4618      	mov	r0, r3
 800393e:	f000 fa87 	bl	8003e50 <_ZN9AppMotion5Motor4haltEv>
				break;
 8003942:	e080      	b.n	8003a46 <_ZN9AppMotion16MotionController4turnEbbbm+0x666>
			}
			else last_target_dist = abs(target_yaw - cur);
 8003944:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8003948:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800394c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003950:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003954:	ee17 3a90 	vmov	r3, s15
 8003958:	2b00      	cmp	r3, #0
 800395a:	bfb8      	it	lt
 800395c:	425b      	neglt	r3, r3
 800395e:	ee07 3a90 	vmov	s15, r3
 8003962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003966:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

			if (abs(target_yaw - cur) <= 0.375 || (abs(target_yaw - cur) <= 1.5 && arc) || (HAL_GetTick() - timeStart) > 10000)
 800396a:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800396e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8003972:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003976:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800397a:	ee17 3a90 	vmov	r3, s15
 800397e:	2b00      	cmp	r3, #0
 8003980:	bfb8      	it	lt
 8003982:	425b      	neglt	r3, r3
 8003984:	4618      	mov	r0, r3
 8003986:	f7fc fdcd 	bl	8000524 <__aeabi_i2d>
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	4b3e      	ldr	r3, [pc, #248]	@ (8003a88 <_ZN9AppMotion16MotionController4turnEbbbm+0x6a8>)
 8003990:	f7fd f8ae 	bl	8000af0 <__aeabi_dcmple>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d123      	bne.n	80039e2 <_ZN9AppMotion16MotionController4turnEbbbm+0x602>
 800399a:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800399e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80039a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039aa:	ee17 3a90 	vmov	r3, s15
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	bfb8      	it	lt
 80039b2:	425b      	neglt	r3, r3
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fc fdb5 	bl	8000524 <__aeabi_i2d>
 80039ba:	f04f 0200 	mov.w	r2, #0
 80039be:	4b33      	ldr	r3, [pc, #204]	@ (8003a8c <_ZN9AppMotion16MotionController4turnEbbbm+0x6ac>)
 80039c0:	f7fd f896 	bl	8000af0 <__aeabi_dcmple>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d002      	beq.n	80039d0 <_ZN9AppMotion16MotionController4turnEbbbm+0x5f0>
 80039ca:	787b      	ldrb	r3, [r7, #1]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d108      	bne.n	80039e2 <_ZN9AppMotion16MotionController4turnEbbbm+0x602>
 80039d0:	f002 fe34 	bl	800663c <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	f242 7210 	movw	r2, #10000	@ 0x2710
 80039de:	4293      	cmp	r3, r2
 80039e0:	d901      	bls.n	80039e6 <_ZN9AppMotion16MotionController4turnEbbbm+0x606>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <_ZN9AppMotion16MotionController4turnEbbbm+0x608>
 80039e6:	2300      	movs	r3, #0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d023      	beq.n	8003a34 <_ZN9AppMotion16MotionController4turnEbbbm+0x654>
			{
				sensor_data.last_halt_val = ((uint32_t)abs(target_yaw - cur)) %180;
 80039ec:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80039f0:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80039f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039fc:	ee17 3a90 	vmov	r3, s15
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	bfb8      	it	lt
 8003a04:	425b      	neglt	r3, r3
 8003a06:	461a      	mov	r2, r3
 8003a08:	0893      	lsrs	r3, r2, #2
 8003a0a:	4921      	ldr	r1, [pc, #132]	@ (8003a90 <_ZN9AppMotion16MotionController4turnEbbbm+0x6b0>)
 8003a0c:	fba1 1303 	umull	r1, r3, r1, r3
 8003a10:	089b      	lsrs	r3, r3, #2
 8003a12:	21b4      	movs	r1, #180	@ 0xb4
 8003a14:	fb01 f303 	mul.w	r3, r1, r3
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	4a19      	ldr	r2, [pc, #100]	@ (8003a80 <_ZN9AppMotion16MotionController4turnEbbbm+0x6a0>)
 8003a1c:	6353      	str	r3, [r2, #52]	@ 0x34
				lmotor->halt();
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 fa14 	bl	8003e50 <_ZN9AppMotion5Motor4haltEv>
				rmotor->halt();
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 fa0f 	bl	8003e50 <_ZN9AppMotion5Motor4haltEv>
				break;
 8003a32:	e008      	b.n	8003a46 <_ZN9AppMotion16MotionController4turnEbbbm+0x666>
			}

			sensor_data.last_halt_val = arg;
 8003a34:	4a12      	ldr	r2, [pc, #72]	@ (8003a80 <_ZN9AppMotion16MotionController4turnEbbbm+0x6a0>)
 8003a36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a38:	6353      	str	r3, [r2, #52]	@ 0x34
			osDelay(2);
 8003a3a:	2002      	movs	r0, #2
 8003a3c:	f008 ff08 	bl	800c850 <osDelay>
			osThreadYield(); // need to ensure yield for the sensortask
 8003a40:	f008 fee6 	bl	800c810 <osThreadYield>
			if (abs(target_yaw - cur) < 45 ) {
 8003a44:	e5bd      	b.n	80035c2 <_ZN9AppMotion16MotionController4turnEbbbm+0x1e2>

		} while (1);

		emergency = false;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
		lmotor->halt();
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 f9fc 	bl	8003e50 <_ZN9AppMotion5Motor4haltEv>
		rmotor->halt();
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 f9f7 	bl	8003e50 <_ZN9AppMotion5Motor4haltEv>
	}
 8003a62:	bf00      	nop
 8003a64:	374c      	adds	r7, #76	@ 0x4c
 8003a66:	46bd      	mov	sp, r7
 8003a68:	ecbd 8b02 	vpop	{d8}
 8003a6c:	bd90      	pop	{r4, r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	00000000 	.word	0x00000000
 8003a74:	40668000 	.word	0x40668000
 8003a78:	00000000 	.word	0x00000000
 8003a7c:	42340000 	.word	0x42340000
 8003a80:	20000244 	.word	0x20000244
 8003a84:	66666667 	.word	0x66666667
 8003a88:	3fd80000 	.word	0x3fd80000
 8003a8c:	3ff80000 	.word	0x3ff80000
 8003a90:	16c16c17 	.word	0x16c16c17

08003a94 <_ZN9AppMotion16MotionController13emergencyStopEv>:

	void MotionController::emergencyStop() {
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
		emergency = true;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2158 	strb.w	r2, [r3, #344]	@ 0x158
	}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <_ZN9AppMotion5ServoC1EP17TIM_HandleTypeDefmmmm>:

	/* SERVO LOGIC */
	Servo::Servo(TIM_HandleTypeDef *ctrl, uint32_t channel, uint32_t min,
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	603b      	str	r3, [r7, #0]
			uint32_t max, uint32_t center) {
		this->htimer = ctrl;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	601a      	str	r2, [r3, #0]
		this->channel = channel;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	605a      	str	r2, [r3, #4]
		this->MIN_PWM = min;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	60da      	str	r2, [r3, #12]
		this->MAX_PWM = max;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	611a      	str	r2, [r3, #16]
		this->CTR_PWM = center;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	69fa      	ldr	r2, [r7, #28]
 8003ada:	615a      	str	r2, [r3, #20]
		HAL_TIM_PWM_Start(ctrl, channel);
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	68b8      	ldr	r0, [r7, #8]
 8003ae0:	f005 ff38 	bl	8009954 <HAL_TIM_PWM_Start>
	}
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <_ZN9AppMotion5Servo8turnLeftEv>:

	void Servo::turnLeft() {
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b082      	sub	sp, #8
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
		this->htimer->Instance->CCR1 = MIN_PWM;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	68d2      	ldr	r2, [r2, #12]
 8003b00:	635a      	str	r2, [r3, #52]	@ 0x34
		osDelay(TURN_DELAY_MS);
 8003b02:	20fa      	movs	r0, #250	@ 0xfa
 8003b04:	f008 fea4 	bl	800c850 <osDelay>

	}
 8003b08:	bf00      	nop
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <_ZN9AppMotion5Servo9turnRightEv>:
	void Servo::turnRight() {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
		this->htimer->Instance->CCR1 = MAX_PWM;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6912      	ldr	r2, [r2, #16]
 8003b22:	635a      	str	r2, [r3, #52]	@ 0x34
		osDelay(TURN_DELAY_MS);
 8003b24:	20fa      	movs	r0, #250	@ 0xfa
 8003b26:	f008 fe93 	bl	800c850 <osDelay>
	}
 8003b2a:	bf00      	nop
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <_ZN9AppMotion5Servo9turnFrontEv>:

	void Servo::turnFront() {
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
		this->htimer->Instance->CCR1 = CTR_PWM;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6952      	ldr	r2, [r2, #20]
 8003b44:	635a      	str	r2, [r3, #52]	@ 0x34
		osDelay(TURN_DELAY_MS);
 8003b46:	20fa      	movs	r0, #250	@ 0xfa
 8003b48:	f008 fe82 	bl	800c850 <osDelay>
	}
 8003b4c:	bf00      	nop
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <_ZN9AppMotion5MotorC1EP17TIM_HandleTypeDefmmm>:


	/* MOTOR LOGIC */
	Motor::Motor(TIM_HandleTypeDef *ctrl,
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
 8003b60:	603b      	str	r3, [r7, #0]
			uint32_t channelA,
			uint32_t channelB,
			uint32_t max_period
	) {

		this->htimer = ctrl;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	601a      	str	r2, [r3, #0]
		this->channelA = channelA;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	605a      	str	r2, [r3, #4]
		this->channelB = channelB;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	609a      	str	r2, [r3, #8]
		this->max_period = max_period;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	60da      	str	r2, [r3, #12]
		this->cur_value = max_period;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	611a      	str	r2, [r3, #16]

		HAL_TIM_PWM_Start(ctrl, channelA);
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	68b8      	ldr	r0, [r7, #8]
 8003b84:	f005 fee6 	bl	8009954 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(ctrl, channelB);
 8003b88:	6839      	ldr	r1, [r7, #0]
 8003b8a:	68b8      	ldr	r0, [r7, #8]
 8003b8c:	f005 fee2 	bl	8009954 <HAL_TIM_PWM_Start>
	}
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
	...

08003b9c <_ZN9AppMotion5Motor8setSpeedEmb>:

	bool Motor::setSpeed(uint32_t percent, bool isFwd) {
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	71fb      	strb	r3, [r7, #7]
		if (percent > 100){
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b64      	cmp	r3, #100	@ 0x64
 8003bae:	d901      	bls.n	8003bb4 <_ZN9AppMotion5Motor8setSpeedEmb+0x18>
			return false;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	e09d      	b.n	8003cf0 <_ZN9AppMotion5Motor8setSpeedEmb+0x154>
		}
		uint32_t value = this->max_period / 100 * percent;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	4a50      	ldr	r2, [pc, #320]	@ (8003cfc <_ZN9AppMotion5Motor8setSpeedEmb+0x160>)
 8003bba:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbe:	095a      	lsrs	r2, r3, #5
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	fb02 f303 	mul.w	r3, r2, r3
 8003bc6:	617b      	str	r3, [r7, #20]
		this->cur_value = value;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	611a      	str	r2, [r3, #16]

		if (isFwd){
 8003bce:	79fb      	ldrb	r3, [r7, #7]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d046      	beq.n	8003c62 <_ZN9AppMotion5Motor8setSpeedEmb+0xc6>
			__HAL_TIM_SetCompare(this->htimer, this->channelA, value);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d105      	bne.n	8003be8 <_ZN9AppMotion5Motor8setSpeedEmb+0x4c>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003be6:	e018      	b.n	8003c1a <_ZN9AppMotion5Motor8setSpeedEmb+0x7e>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2b04      	cmp	r3, #4
 8003bee:	d105      	bne.n	8003bfc <_ZN9AppMotion5Motor8setSpeedEmb+0x60>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	639a      	str	r2, [r3, #56]	@ 0x38
 8003bfa:	e00e      	b.n	8003c1a <_ZN9AppMotion5Motor8setSpeedEmb+0x7e>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d105      	bne.n	8003c10 <_ZN9AppMotion5Motor8setSpeedEmb+0x74>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003c0e:	e004      	b.n	8003c1a <_ZN9AppMotion5Motor8setSpeedEmb+0x7e>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	641a      	str	r2, [r3, #64]	@ 0x40
			__HAL_TIM_SetCompare(this->htimer, this->channelB, 1);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d105      	bne.n	8003c2e <_ZN9AppMotion5Motor8setSpeedEmb+0x92>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c2c:	e05f      	b.n	8003cee <_ZN9AppMotion5Motor8setSpeedEmb+0x152>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d105      	bne.n	8003c42 <_ZN9AppMotion5Motor8setSpeedEmb+0xa6>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c40:	e055      	b.n	8003cee <_ZN9AppMotion5Motor8setSpeedEmb+0x152>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b08      	cmp	r3, #8
 8003c48:	d105      	bne.n	8003c56 <_ZN9AppMotion5Motor8setSpeedEmb+0xba>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2201      	movs	r2, #1
 8003c52:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003c54:	e04b      	b.n	8003cee <_ZN9AppMotion5Motor8setSpeedEmb+0x152>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c60:	e045      	b.n	8003cee <_ZN9AppMotion5Motor8setSpeedEmb+0x152>
		} else {
			__HAL_TIM_SetCompare(this->htimer, this->channelA, 1);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d105      	bne.n	8003c76 <_ZN9AppMotion5Motor8setSpeedEmb+0xda>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2201      	movs	r2, #1
 8003c72:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c74:	e018      	b.n	8003ca8 <_ZN9AppMotion5Motor8setSpeedEmb+0x10c>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d105      	bne.n	8003c8a <_ZN9AppMotion5Motor8setSpeedEmb+0xee>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2201      	movs	r2, #1
 8003c86:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c88:	e00e      	b.n	8003ca8 <_ZN9AppMotion5Motor8setSpeedEmb+0x10c>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b08      	cmp	r3, #8
 8003c90:	d105      	bne.n	8003c9e <_ZN9AppMotion5Motor8setSpeedEmb+0x102>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003c9c:	e004      	b.n	8003ca8 <_ZN9AppMotion5Motor8setSpeedEmb+0x10c>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	641a      	str	r2, [r3, #64]	@ 0x40
			__HAL_TIM_SetCompare(this->htimer, this->channelB, value);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d105      	bne.n	8003cbc <_ZN9AppMotion5Motor8setSpeedEmb+0x120>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003cba:	e018      	b.n	8003cee <_ZN9AppMotion5Motor8setSpeedEmb+0x152>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d105      	bne.n	8003cd0 <_ZN9AppMotion5Motor8setSpeedEmb+0x134>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	639a      	str	r2, [r3, #56]	@ 0x38
 8003cce:	e00e      	b.n	8003cee <_ZN9AppMotion5Motor8setSpeedEmb+0x152>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d105      	bne.n	8003ce4 <_ZN9AppMotion5Motor8setSpeedEmb+0x148>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003ce2:	e004      	b.n	8003cee <_ZN9AppMotion5Motor8setSpeedEmb+0x152>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	641a      	str	r2, [r3, #64]	@ 0x40
		}

		return true;
 8003cee:	2301      	movs	r3, #1
	}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	371c      	adds	r7, #28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	51eb851f 	.word	0x51eb851f

08003d00 <_ZN9AppMotion5Motor16_setDutyCycleValEmb>:

	bool Motor::_setDutyCycleVal(uint32_t dc, bool isFwd) {
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	71fb      	strb	r3, [r7, #7]
		if (dc > this->max_period){
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d901      	bls.n	8003d1c <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x1c>
			return false;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e093      	b.n	8003e44 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x144>
		}
		this->cur_value = dc;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	611a      	str	r2, [r3, #16]

		if (isFwd){
 8003d22:	79fb      	ldrb	r3, [r7, #7]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d046      	beq.n	8003db6 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0xb6>
			__HAL_TIM_SetCompare(this->htimer, this->channelA, dc);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d105      	bne.n	8003d3c <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x3c>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	635a      	str	r2, [r3, #52]	@ 0x34
 8003d3a:	e018      	b.n	8003d6e <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x6e>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d105      	bne.n	8003d50 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x50>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	639a      	str	r2, [r3, #56]	@ 0x38
 8003d4e:	e00e      	b.n	8003d6e <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x6e>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d105      	bne.n	8003d64 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x64>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003d62:	e004      	b.n	8003d6e <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x6e>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	641a      	str	r2, [r3, #64]	@ 0x40
			__HAL_TIM_SetCompare(this->htimer, this->channelB, 1);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d105      	bne.n	8003d82 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x82>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003d80:	e05f      	b.n	8003e42 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x142>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d105      	bne.n	8003d96 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x96>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2201      	movs	r2, #1
 8003d92:	639a      	str	r2, [r3, #56]	@ 0x38
 8003d94:	e055      	b.n	8003e42 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x142>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b08      	cmp	r3, #8
 8003d9c:	d105      	bne.n	8003daa <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0xaa>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2201      	movs	r2, #1
 8003da6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003da8:	e04b      	b.n	8003e42 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x142>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2201      	movs	r2, #1
 8003db2:	641a      	str	r2, [r3, #64]	@ 0x40
 8003db4:	e045      	b.n	8003e42 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x142>
		} else {
			__HAL_TIM_SetCompare(this->htimer, this->channelA, 1);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d105      	bne.n	8003dca <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0xca>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	635a      	str	r2, [r3, #52]	@ 0x34
 8003dc8:	e018      	b.n	8003dfc <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0xfc>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d105      	bne.n	8003dde <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0xde>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ddc:	e00e      	b.n	8003dfc <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0xfc>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d105      	bne.n	8003df2 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0xf2>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2201      	movs	r2, #1
 8003dee:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003df0:	e004      	b.n	8003dfc <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0xfc>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	641a      	str	r2, [r3, #64]	@ 0x40
			__HAL_TIM_SetCompare(this->htimer, this->channelB, dc);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d105      	bne.n	8003e10 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x110>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e0e:	e018      	b.n	8003e42 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x142>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	2b04      	cmp	r3, #4
 8003e16:	d105      	bne.n	8003e24 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x124>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	639a      	str	r2, [r3, #56]	@ 0x38
 8003e22:	e00e      	b.n	8003e42 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x142>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d105      	bne.n	8003e38 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x138>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003e36:	e004      	b.n	8003e42 <_ZN9AppMotion5Motor16_setDutyCycleValEmb+0x142>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	641a      	str	r2, [r3, #64]	@ 0x40
		}

		return true;
 8003e42:	2301      	movs	r3, #1
	}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <_ZN9AppMotion5Motor4haltEv>:

	void Motor::halt() {
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SET_COMPARE(this->htimer, this->channelA, 1);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d105      	bne.n	8003e6c <_ZN9AppMotion5Motor4haltEv+0x1c>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2201      	movs	r2, #1
 8003e68:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e6a:	e018      	b.n	8003e9e <_ZN9AppMotion5Motor4haltEv+0x4e>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d105      	bne.n	8003e80 <_ZN9AppMotion5Motor4haltEv+0x30>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	639a      	str	r2, [r3, #56]	@ 0x38
 8003e7e:	e00e      	b.n	8003e9e <_ZN9AppMotion5Motor4haltEv+0x4e>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d105      	bne.n	8003e94 <_ZN9AppMotion5Motor4haltEv+0x44>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003e92:	e004      	b.n	8003e9e <_ZN9AppMotion5Motor4haltEv+0x4e>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	641a      	str	r2, [r3, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(this->htimer, this->channelB, 1);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d105      	bne.n	8003eb2 <_ZN9AppMotion5Motor4haltEv+0x62>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2201      	movs	r2, #1
 8003eae:	635a      	str	r2, [r3, #52]	@ 0x34
	}
 8003eb0:	e018      	b.n	8003ee4 <_ZN9AppMotion5Motor4haltEv+0x94>
		__HAL_TIM_SET_COMPARE(this->htimer, this->channelB, 1);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d105      	bne.n	8003ec6 <_ZN9AppMotion5Motor4haltEv+0x76>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	639a      	str	r2, [r3, #56]	@ 0x38
	}
 8003ec4:	e00e      	b.n	8003ee4 <_ZN9AppMotion5Motor4haltEv+0x94>
		__HAL_TIM_SET_COMPARE(this->htimer, this->channelB, 1);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	d105      	bne.n	8003eda <_ZN9AppMotion5Motor4haltEv+0x8a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
 8003ed8:	e004      	b.n	8003ee4 <_ZN9AppMotion5Motor4haltEv+0x94>
		__HAL_TIM_SET_COMPARE(this->htimer, this->channelB, 1);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	641a      	str	r2, [r3, #64]	@ 0x40
	}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <_ZN9AppMotion7EncoderC1EP17TIM_HandleTypeDefm>:
		__HAL_TIM_SetCompare(this->htimer, this->channelB, this->max_period);
	}


	/* ENCODER LOGIC */
	Encoder::Encoder(TIM_HandleTypeDef *ctrl, uint32_t channel) {
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]

		this->htimer = ctrl;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	601a      	str	r2, [r3, #0]
		this->channel = channel;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	605a      	str	r2, [r3, #4]
		HAL_TIM_Encoder_Start(ctrl, channel);
 8003f08:	6879      	ldr	r1, [r7, #4]
 8003f0a:	68b8      	ldr	r0, [r7, #8]
 8003f0c:	f006 f808 	bl	8009f20 <HAL_TIM_Encoder_Start>

	}
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <_ZN9AppMotion7Encoder8getCountEv>:

	uint32_t Encoder::getCount(void) {
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
		return (uint32_t) __HAL_TIM_GET_COUNTER(this->htimer);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <_ZN9AppMotion7Encoder8getDeltaEmm>:

	uint32_t Encoder::getDelta(uint32_t ct1, uint32_t ct2) {
 8003f36:	b480      	push	{r7}
 8003f38:	b085      	sub	sp, #20
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	607a      	str	r2, [r7, #4]
		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(this->htimer)) {
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	2b10      	cmp	r3, #16
 8003f50:	bf0c      	ite	eq
 8003f52:	2301      	moveq	r3, #1
 8003f54:	2300      	movne	r3, #0
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00e      	beq.n	8003f7a <_ZN9AppMotion7Encoder8getDeltaEmm+0x44>
			if (ct2 <= ct1) {
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d803      	bhi.n	8003f6c <_ZN9AppMotion7Encoder8getDeltaEmm+0x36>
				return ct1 - ct2;
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	e014      	b.n	8003f96 <_ZN9AppMotion7Encoder8getDeltaEmm+0x60>
			} else {
				return (65535 - ct2) + ct1;
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003f76:	33ff      	adds	r3, #255	@ 0xff
 8003f78:	e00d      	b.n	8003f96 <_ZN9AppMotion7Encoder8getDeltaEmm+0x60>
			}
		} else {
			if (ct2 >= ct1) {
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d303      	bcc.n	8003f8a <_ZN9AppMotion7Encoder8getDeltaEmm+0x54>
				return ct2 - ct1;
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	e005      	b.n	8003f96 <_ZN9AppMotion7Encoder8getDeltaEmm+0x60>
			} else {
				return (65535 - ct1) + ct2;
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003f94:	33ff      	adds	r3, #255	@ 0xff
			}
		}
	}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <_ZN9AppMotion16MotionController3sgnIfEEiT_>:
			template <typename T> static int sgn(T val) {
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	ed87 0a01 	vstr	s0, [r7, #4]
				return (T(0) < val) - (val < T(0));
 8003fac:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb8:	bfcc      	ite	gt
 8003fba:	2301      	movgt	r3, #1
 8003fbc:	2300      	movle	r3, #0
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fce:	bf4c      	ite	mi
 8003fd0:	2301      	movmi	r3, #1
 8003fd2:	2300      	movpl	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	1ad3      	subs	r3, r2, r3
			}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <_ZN9AppParser8ListenerC1EP5u_ctx>:
	bool Processor::_signal_obstr = false;
	bool Processor::_obstr_txed = false;

	static volatile BUF_CMP_t uartRxBuf[10];
	static volatile BUF_CMP_t uartOKBuf[10];
	Listener::Listener(u_ctx *ctx) {
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
		this->ctx = ctx;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	601a      	str	r2, [r3, #0]
	}
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <_ZN9AppParser8ListenerD1Ev>:

	Listener::~Listener() {
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
	}
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4618      	mov	r0, r3
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <_ZN9AppParser8Listener6invokeEv>:
	;
	// not needed

	/*! called from ISR */
	volatile void Listener::invoke() {
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
		AppMessage_t msg;
		memcpy(&msg.buffer, (const BUF_CMP_t*) &uartRxBuf, 10);
 8004020:	4a0c      	ldr	r2, [pc, #48]	@ (8004054 <_ZN9AppParser8Listener6invokeEv+0x3c>)
 8004022:	f107 030c 	add.w	r3, r7, #12
 8004026:	ca07      	ldmia	r2, {r0, r1, r2}
 8004028:	c303      	stmia	r3!, {r0, r1}
 800402a:	801a      	strh	r2, [r3, #0]
		memset((BUF_CMP_t*) &uartRxBuf, 0, 10);
 800402c:	220a      	movs	r2, #10
 800402e:	2100      	movs	r1, #0
 8004030:	4808      	ldr	r0, [pc, #32]	@ (8004054 <_ZN9AppParser8Listener6invokeEv+0x3c>)
 8004032:	f00d fb7d 	bl	8011730 <memset>
		osStatus_t tmp = osMessageQueuePut(
				ctx->mailbox.queue,    // queue ID
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
		osStatus_t tmp = osMessageQueuePut(
 800403a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800403c:	f107 010c 	add.w	r1, r7, #12
 8004040:	2300      	movs	r3, #0
 8004042:	2200      	movs	r2, #0
 8004044:	f008 fd78 	bl	800cb38 <osMessageQueuePut>
 8004048:	61f8      	str	r0, [r7, #28]
//						111.11
//						);
//
//		HAL_UART_Transmit(&huart3, (uint8_t*) sbuf, len, 10);
//		HAL_UART_Transmit(&huart3, (uint8_t *)msg.buffer, sizeof(msg.buffer), 10);
}
 800404a:	bf00      	nop
 800404c:	3720      	adds	r7, #32
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	200004b0 	.word	0x200004b0

08004058 <_ZN9AppParser9ProcessorC1EP5u_ctxS2_>:

Processor::Processor(u_ctx *rx_ctx, u_ctx *tx_ctx) {
 8004058:	b590      	push	{r4, r7, lr}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
	this->this_ctx = rx_ctx;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	601a      	str	r2, [r3, #0]
	this->o_ctx = tx_ctx;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	605a      	str	r2, [r3, #4]
	this->this_ctx->mailbox.queue = osMessageQueueNew(10, sizeof(AppMessage_t),
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681c      	ldr	r4, [r3, #0]
 8004074:	2200      	movs	r2, #0
 8004076:	2110      	movs	r1, #16
 8004078:	200a      	movs	r0, #10
 800407a:	f008 fcea 	bl	800ca52 <osMessageQueueNew>
 800407e:	4603      	mov	r3, r0
 8004080:	62a3      	str	r3, [r4, #40]	@ 0x28
	NULL);
}
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4618      	mov	r0, r3
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	bd90      	pop	{r4, r7, pc}

0800408c <_ZN9AppParser9ProcessorD1Ev>:

Processor::~Processor() {
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
}
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4618      	mov	r0, r3
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
	...

080040a4 <_ZN9AppParser9Processor5startEv>:
void Processor::startImpl(void *_this) // hardfaults on queue for some reason so made static
		{
	//static_cast<Processor *>(_this)->processorTask();
}

void Processor::start(void) {
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
	ctx_wrapper *wrapper_instance = new ctx_wrapper();
 80040ac:	2008      	movs	r0, #8
 80040ae:	f00b fe9b 	bl	800fde8 <_Znwj>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	2200      	movs	r2, #0
 80040ba:	605a      	str	r2, [r3, #4]
 80040bc:	60fb      	str	r3, [r7, #12]
	wrapper_instance->rx_ctx = this_ctx;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	601a      	str	r2, [r3, #0]
	wrapper_instance->tx_ctx = o_ctx;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	605a      	str	r2, [r3, #4]
// pass context information to the thread fn since there is some issue with making the fn a class instance.
// note that this_ctx refers to this class and o_ctx refers to the (o)ther class, i.e. the destination, MotionController
	this->this_ctx->runner = osThreadNew(
			(osThreadFunc_t) Processor::processorTask,
			wrapper_instance,
			&(this_ctx->attr));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	1d1a      	adds	r2, r3, #4
	this->this_ctx->runner = osThreadNew(
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681c      	ldr	r4, [r3, #0]
 80040d8:	68f9      	ldr	r1, [r7, #12]
 80040da:	4804      	ldr	r0, [pc, #16]	@ (80040ec <_ZN9AppParser9Processor5startEv+0x48>)
 80040dc:	f008 fb06 	bl	800c6ec <osThreadNew>
 80040e0:	4603      	mov	r3, r0
 80040e2:	6023      	str	r3, [r4, #0]

	return;
 80040e4:	bf00      	nop
}
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd90      	pop	{r4, r7, pc}
 80040ec:	080040f1 	.word	0x080040f1

080040f0 <_ZN9AppParser9Processor13processorTaskEPv>:

void Processor::processorTask(void *pv) {
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b098      	sub	sp, #96	@ 0x60
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart3, (BUF_CMP_t*) uartRxBuf, 10);
 80040f8:	220a      	movs	r2, #10
 80040fa:	49a3      	ldr	r1, [pc, #652]	@ (8004388 <_ZN9AppParser9Processor13processorTaskEPv+0x298>)
 80040fc:	48a3      	ldr	r0, [pc, #652]	@ (800438c <_ZN9AppParser9Processor13processorTaskEPv+0x29c>)
 80040fe:	f007 f8ca 	bl	800b296 <HAL_UART_Receive_DMA>

	ctx_wrapper *wrapper = static_cast<ctx_wrapper*>(pv);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	65bb      	str	r3, [r7, #88]	@ 0x58

	// Access rx_ctx and tx_ctx pointers from the wrapper
	u_ctx *rx_ctx = wrapper->rx_ctx;
 8004106:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	657b      	str	r3, [r7, #84]	@ 0x54
	u_ctx *tx_ctx = wrapper->tx_ctx;
 800410c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	653b      	str	r3, [r7, #80]	@ 0x50

	for (;;) {
		is_task_alive_struct.proc = true;
 8004112:	4b9f      	ldr	r3, [pc, #636]	@ (8004390 <_ZN9AppParser9Processor13processorTaskEPv+0x2a0>)
 8004114:	2201      	movs	r2, #1
 8004116:	701a      	strb	r2, [r3, #0]

//		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);

		osDelay(10);
 8004118:	200a      	movs	r0, #10
 800411a:	f008 fb99 	bl	800c850 <osDelay>
		osThreadYield();
 800411e:	f008 fb77 	bl	800c810 <osThreadYield>
		 * enough for this purpose..
		 *
		 * Any alternative to get per-byte interrupt etc., will require rewriting of the HAL funcs
		 * or polling mechanism.
		 */
		uint32_t buf_fill = 0;
 8004122:	2300      	movs	r3, #0
 8004124:	64fb      	str	r3, [r7, #76]	@ 0x4c
		for (uint32_t i = 0; i < sizeof(uartRxBuf); i++) {
 8004126:	2300      	movs	r3, #0
 8004128:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800412a:	e01c      	b.n	8004166 <_ZN9AppParser9Processor13processorTaskEPv+0x76>
			if (uartRxBuf[i] != 0) {
 800412c:	4a96      	ldr	r2, [pc, #600]	@ (8004388 <_ZN9AppParser9Processor13processorTaskEPv+0x298>)
 800412e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004130:	4413      	add	r3, r2
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	bf14      	ite	ne
 800413a:	2301      	movne	r3, #1
 800413c:	2300      	moveq	r3, #0
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00d      	beq.n	8004160 <_ZN9AppParser9Processor13processorTaskEPv+0x70>
				HAL_UART_DMAStop(&huart3);
 8004144:	4891      	ldr	r0, [pc, #580]	@ (800438c <_ZN9AppParser9Processor13processorTaskEPv+0x29c>)
 8004146:	f007 f8cb 	bl	800b2e0 <HAL_UART_DMAStop>
				HAL_UART_Receive_DMA(&huart3, (BUF_CMP_t*) uartRxBuf, 10);
 800414a:	220a      	movs	r2, #10
 800414c:	498e      	ldr	r1, [pc, #568]	@ (8004388 <_ZN9AppParser9Processor13processorTaskEPv+0x298>)
 800414e:	488f      	ldr	r0, [pc, #572]	@ (800438c <_ZN9AppParser9Processor13processorTaskEPv+0x29c>)
 8004150:	f007 f8a1 	bl	800b296 <HAL_UART_Receive_DMA>
				memset((BUF_CMP_t*) &uartRxBuf, 0, 10);
 8004154:	220a      	movs	r2, #10
 8004156:	2100      	movs	r1, #0
 8004158:	488b      	ldr	r0, [pc, #556]	@ (8004388 <_ZN9AppParser9Processor13processorTaskEPv+0x298>)
 800415a:	f00d fae9 	bl	8011730 <memset>
				break;
 800415e:	e005      	b.n	800416c <_ZN9AppParser9Processor13processorTaskEPv+0x7c>
		for (uint32_t i = 0; i < sizeof(uartRxBuf); i++) {
 8004160:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004162:	3301      	adds	r3, #1
 8004164:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004166:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004168:	2b09      	cmp	r3, #9
 800416a:	d9df      	bls.n	800412c <_ZN9AppParser9Processor13processorTaskEPv+0x3c>
			}
		}

		/* end buffer cleaning algorithm */
		sensor_data.ql = osMessageQueueGetCount(rx_ctx->mailbox.queue);
 800416c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800416e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004170:	4618      	mov	r0, r3
 8004172:	f008 fd9f 	bl	800ccb4 <osMessageQueueGetCount>
 8004176:	4603      	mov	r3, r0
 8004178:	4a86      	ldr	r2, [pc, #536]	@ (8004394 <_ZN9AppParser9Processor13processorTaskEPv+0x2a4>)
 800417a:	6253      	str	r3, [r2, #36]	@ 0x24
		if (uxQueueMessagesWaiting((QueueHandle_t) rx_ctx->mailbox.queue)) {
 800417c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800417e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004180:	4618      	mov	r0, r3
 8004182:	f009 fd01 	bl	800db88 <uxQueueMessagesWaiting>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	bf14      	ite	ne
 800418c:	2301      	movne	r3, #1
 800418e:	2300      	moveq	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 81c6 	beq.w	8004524 <_ZN9AppParser9Processor13processorTaskEPv+0x434>

			AppMessage_t msg;
			osMessageQueueGet(
 8004198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800419a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800419c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80041a0:	2305      	movs	r3, #5
 80041a2:	2200      	movs	r2, #0
 80041a4:	f008 fd28 	bl	800cbf8 <osMessageQueueGet>
					0,                      // optional pointer
					5                       // timeout
				);

			/* DATA VALIDATION */
			if (!isEq<BUF_CMP_t>(START_CHAR, msg.buffer[0])) {
 80041a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80041ac:	4619      	mov	r1, r3
 80041ae:	487a      	ldr	r0, [pc, #488]	@ (8004398 <_ZN9AppParser9Processor13processorTaskEPv+0x2a8>)
 80041b0:	f000 fbc8 	bl	8004944 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80041b4:	4603      	mov	r3, r0
 80041b6:	f083 0301 	eor.w	r3, r3, #1
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d005      	beq.n	80041cc <_ZN9AppParser9Processor13processorTaskEPv+0xdc>
				HAL_UART_Transmit(&huart3, (BUF_CMP_t*) nack, sizeof(nack), 10);
 80041c0:	230a      	movs	r3, #10
 80041c2:	2204      	movs	r2, #4
 80041c4:	4975      	ldr	r1, [pc, #468]	@ (800439c <_ZN9AppParser9Processor13processorTaskEPv+0x2ac>)
 80041c6:	4871      	ldr	r0, [pc, #452]	@ (800438c <_ZN9AppParser9Processor13processorTaskEPv+0x29c>)
 80041c8:	f006 ffda 	bl	800b180 <HAL_UART_Transmit>
			}
			if (!isEq<BUF_CMP_t>(END_CHAR, msg.buffer[9])) {
 80041cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80041d0:	3309      	adds	r3, #9
 80041d2:	4619      	mov	r1, r3
 80041d4:	4872      	ldr	r0, [pc, #456]	@ (80043a0 <_ZN9AppParser9Processor13processorTaskEPv+0x2b0>)
 80041d6:	f000 fbb5 	bl	8004944 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80041da:	4603      	mov	r3, r0
 80041dc:	f083 0301 	eor.w	r3, r3, #1
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d005      	beq.n	80041f2 <_ZN9AppParser9Processor13processorTaskEPv+0x102>
				HAL_UART_Transmit(&huart3, (BUF_CMP_t*) nack, sizeof(nack), 10);
 80041e6:	230a      	movs	r3, #10
 80041e8:	2204      	movs	r2, #4
 80041ea:	496c      	ldr	r1, [pc, #432]	@ (800439c <_ZN9AppParser9Processor13processorTaskEPv+0x2ac>)
 80041ec:	4867      	ldr	r0, [pc, #412]	@ (800438c <_ZN9AppParser9Processor13processorTaskEPv+0x29c>)
 80041ee:	f006 ffc7 	bl	800b180 <HAL_UART_Transmit>
			}
			/******************/

			// do request stuff
			if (isEq<BUF_CMP_t>(REQ_CHAR, msg.buffer[1])) {
 80041f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80041f6:	3301      	adds	r3, #1
 80041f8:	4619      	mov	r1, r3
 80041fa:	486a      	ldr	r0, [pc, #424]	@ (80043a4 <_ZN9AppParser9Processor13processorTaskEPv+0x2b4>)
 80041fc:	f000 fba2 	bl	8004944 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d045      	beq.n	8004292 <_ZN9AppParser9Processor13processorTaskEPv+0x1a2>
				if (isEq(SENSOR_CHAR, msg.buffer[2])) {
 8004206:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800420a:	3302      	adds	r3, #2
 800420c:	4619      	mov	r1, r3
 800420e:	4866      	ldr	r0, [pc, #408]	@ (80043a8 <_ZN9AppParser9Processor13processorTaskEPv+0x2b8>)
 8004210:	f000 fb98 	bl	8004944 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d005      	beq.n	8004226 <_ZN9AppParser9Processor13processorTaskEPv+0x136>
					returnSensorRequestCmd(msg.buffer[3]);
 800421a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800421e:	4618      	mov	r0, r3
 8004220:	f000 f9ae 	bl	8004580 <_ZN9AppParser9Processor22returnSensorRequestCmdEh>
 8004224:	e178      	b.n	8004518 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
				}

				else if (isEq(AUX_CHAR, msg.buffer[2])) {
 8004226:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800422a:	3302      	adds	r3, #2
 800422c:	4619      	mov	r1, r3
 800422e:	485f      	ldr	r0, [pc, #380]	@ (80043ac <_ZN9AppParser9Processor13processorTaskEPv+0x2bc>)
 8004230:	f000 fb88 	bl	8004944 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 816e 	beq.w	8004518 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
					if (isEq(LAST_HALT_CHAR, msg.buffer[3])) {
 800423c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004240:	3303      	adds	r3, #3
 8004242:	4619      	mov	r1, r3
 8004244:	485a      	ldr	r0, [pc, #360]	@ (80043b0 <_ZN9AppParser9Processor13processorTaskEPv+0x2c0>)
 8004246:	f000 fb7d 	bl	8004944 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 8163 	beq.w	8004518 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
						uint8_t tx_buf[25] = { 0 };
 8004252:	f107 030c 	add.w	r3, r7, #12
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	605a      	str	r2, [r3, #4]
 800425c:	609a      	str	r2, [r3, #8]
 800425e:	60da      	str	r2, [r3, #12]
 8004260:	611a      	str	r2, [r3, #16]
 8004262:	615a      	str	r2, [r3, #20]
 8004264:	761a      	strb	r2, [r3, #24]
						snprintf((char*) &tx_buf, sizeof(tx_buf), "%ld",
 8004266:	4b4b      	ldr	r3, [pc, #300]	@ (8004394 <_ZN9AppParser9Processor13processorTaskEPv+0x2a4>)
 8004268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800426a:	f107 000c 	add.w	r0, r7, #12
 800426e:	4a51      	ldr	r2, [pc, #324]	@ (80043b4 <_ZN9AppParser9Processor13processorTaskEPv+0x2c4>)
 8004270:	2119      	movs	r1, #25
 8004272:	f00d f92d 	bl	80114d0 <sniprintf>
										sensor_data.last_halt_val);
								HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 8004276:	f107 030c 	add.w	r3, r7, #12
 800427a:	4618      	mov	r0, r3
 800427c:	f7fb fff8 	bl	8000270 <strlen>
 8004280:	4603      	mov	r3, r0
 8004282:	b29a      	uxth	r2, r3
 8004284:	f107 010c 	add.w	r1, r7, #12
 8004288:	230a      	movs	r3, #10
 800428a:	4840      	ldr	r0, [pc, #256]	@ (800438c <_ZN9AppParser9Processor13processorTaskEPv+0x29c>)
 800428c:	f006 ff78 	bl	800b180 <HAL_UART_Transmit>
 8004290:	e142      	b.n	8004518 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
										10);
					}
				}

			} else if (isEq<BUF_CMP_t>(CMD_CHAR, msg.buffer[1])) {
 8004292:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004296:	3301      	adds	r3, #1
 8004298:	4619      	mov	r1, r3
 800429a:	4847      	ldr	r0, [pc, #284]	@ (80043b8 <_ZN9AppParser9Processor13processorTaskEPv+0x2c8>)
 800429c:	f000 fb52 	bl	8004944 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f000 8130 	beq.w	8004508 <_ZN9AppParser9Processor13processorTaskEPv+0x418>
				// do command stuff

				switch (msg.buffer[2]) {
 80042a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80042ac:	2b73      	cmp	r3, #115	@ 0x73
 80042ae:	d03e      	beq.n	800432e <_ZN9AppParser9Processor13processorTaskEPv+0x23e>
 80042b0:	2b73      	cmp	r3, #115	@ 0x73
 80042b2:	f300 8131 	bgt.w	8004518 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
 80042b6:	2b61      	cmp	r3, #97	@ 0x61
 80042b8:	f000 809c 	beq.w	80043f4 <_ZN9AppParser9Processor13processorTaskEPv+0x304>
 80042bc:	2b6d      	cmp	r3, #109	@ 0x6d
 80042be:	f040 812b 	bne.w	8004518 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
				case MOTOR_CHAR: {
					if (isEq(HALT_CHAR, msg.buffer[3])) {
 80042c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80042c6:	3303      	adds	r3, #3
 80042c8:	4619      	mov	r1, r3
 80042ca:	483c      	ldr	r0, [pc, #240]	@ (80043bc <_ZN9AppParser9Processor13processorTaskEPv+0x2cc>)
 80042cc:	f000 fb3a 	bl	8004944 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00d      	beq.n	80042f2 <_ZN9AppParser9Processor13processorTaskEPv+0x202>
						_ext_sig_halt();
 80042d6:	f7fe fb27 	bl	8002928 <_ext_sig_halt>
						osMessageQueueReset(rx_ctx->mailbox.queue); // remove all movement from queue such that it works async
 80042da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042de:	4618      	mov	r0, r3
 80042e0:	f008 fd08 	bl	800ccf4 <osMessageQueueReset>
						HAL_UART_Transmit(&huart3, (BUF_CMP_t*) ack, sizeof(ack), 10);
 80042e4:	230a      	movs	r3, #10
 80042e6:	2204      	movs	r2, #4
 80042e8:	4935      	ldr	r1, [pc, #212]	@ (80043c0 <_ZN9AppParser9Processor13processorTaskEPv+0x2d0>)
 80042ea:	4828      	ldr	r0, [pc, #160]	@ (800438c <_ZN9AppParser9Processor13processorTaskEPv+0x29c>)
 80042ec:	f006 ff48 	bl	800b180 <HAL_UART_Transmit>
						break;
 80042f0:	e112      	b.n	8004518 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
					}
					MOTION_PKT_t *pkt = getMotionCmdFromBytes(
 80042f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 fa68 	bl	80047cc <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh>
 80042fc:	6478      	str	r0, [r7, #68]	@ 0x44
							(uint8_t*) &msg.buffer);
					if (pkt == NULL) {
 80042fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004300:	2b00      	cmp	r3, #0
 8004302:	d106      	bne.n	8004312 <_ZN9AppParser9Processor13processorTaskEPv+0x222>
						HAL_UART_Transmit(&huart3, (BUF_CMP_t*) nack, sizeof(nack), 10);
 8004304:	230a      	movs	r3, #10
 8004306:	2204      	movs	r2, #4
 8004308:	4924      	ldr	r1, [pc, #144]	@ (800439c <_ZN9AppParser9Processor13processorTaskEPv+0x2ac>)
 800430a:	4820      	ldr	r0, [pc, #128]	@ (800438c <_ZN9AppParser9Processor13processorTaskEPv+0x29c>)
 800430c:	f006 ff38 	bl	800b180 <HAL_UART_Transmit>
						break;
 8004310:	e102      	b.n	8004518 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
					}

					osMessageQueuePut(tx_ctx->mailbox.queue, pkt, 0, 0);
 8004312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004314:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004316:	2300      	movs	r3, #0
 8004318:	2200      	movs	r2, #0
 800431a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800431c:	f008 fc0c 	bl	800cb38 <osMessageQueuePut>
					HAL_UART_Transmit(&huart3, (BUF_CMP_t*) ack, sizeof(ack),
 8004320:	230a      	movs	r3, #10
 8004322:	2204      	movs	r2, #4
 8004324:	4926      	ldr	r1, [pc, #152]	@ (80043c0 <_ZN9AppParser9Processor13processorTaskEPv+0x2d0>)
 8004326:	4819      	ldr	r0, [pc, #100]	@ (800438c <_ZN9AppParser9Processor13processorTaskEPv+0x29c>)
 8004328:	f006 ff2a 	bl	800b180 <HAL_UART_Transmit>
							10);
					break;
 800432c:	e0f4      	b.n	8004518 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
				}
				case SENSOR_CHAR: {
					uint32_t val = strtol((const char*) &msg.buffer[4], NULL,
 800432e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004332:	3304      	adds	r3, #4
 8004334:	220a      	movs	r2, #10
 8004336:	2100      	movs	r1, #0
 8004338:	4618      	mov	r0, r3
 800433a:	f00c fb49 	bl	80109d0 <strtol>
 800433e:	4603      	mov	r3, r0
							10);
 8004340:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (val == 0)
 8004342:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 80e6 	beq.w	8004516 <_ZN9AppParser9Processor13processorTaskEPv+0x426>
						break;

					switch (msg.buffer[3]) {
 800434a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800434e:	2b65      	cmp	r3, #101	@ 0x65
 8004350:	d038      	beq.n	80043c4 <_ZN9AppParser9Processor13processorTaskEPv+0x2d4>
 8004352:	2b77      	cmp	r3, #119	@ 0x77
 8004354:	d14e      	bne.n	80043f4 <_ZN9AppParser9Processor13processorTaskEPv+0x304>

					case IR_L_CHAR: {
						sensor_data.ir_dist_th_L = (float) val;
 8004356:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004358:	ee07 3a90 	vmov	s15, r3
 800435c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004360:	4b0c      	ldr	r3, [pc, #48]	@ (8004394 <_ZN9AppParser9Processor13processorTaskEPv+0x2a4>)
 8004362:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
						if (val == 999)
 8004366:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004368:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800436c:	4293      	cmp	r3, r2
 800436e:	d103      	bne.n	8004378 <_ZN9AppParser9Processor13processorTaskEPv+0x288>
							sensor_data.ir_dist_th_L = 0;
 8004370:	4b08      	ldr	r3, [pc, #32]	@ (8004394 <_ZN9AppParser9Processor13processorTaskEPv+0x2a4>)
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	62da      	str	r2, [r3, #44]	@ 0x2c
						HAL_UART_Transmit(&huart3, (BUF_CMP_t*) ack,
 8004378:	230a      	movs	r3, #10
 800437a:	2204      	movs	r2, #4
 800437c:	4910      	ldr	r1, [pc, #64]	@ (80043c0 <_ZN9AppParser9Processor13processorTaskEPv+0x2d0>)
 800437e:	4803      	ldr	r0, [pc, #12]	@ (800438c <_ZN9AppParser9Processor13processorTaskEPv+0x29c>)
 8004380:	f006 fefe 	bl	800b180 <HAL_UART_Transmit>
								sizeof(ack), 10);
						break;
 8004384:	e036      	b.n	80043f4 <_ZN9AppParser9Processor13processorTaskEPv+0x304>
 8004386:	bf00      	nop
 8004388:	200004b0 	.word	0x200004b0
 800438c:	20000b78 	.word	0x20000b78
 8004390:	20000288 	.word	0x20000288
 8004394:	20000244 	.word	0x20000244
 8004398:	08013860 	.word	0x08013860
 800439c:	08013778 	.word	0x08013778
 80043a0:	0801386e 	.word	0x0801386e
 80043a4:	08013862 	.word	0x08013862
 80043a8:	08013863 	.word	0x08013863
 80043ac:	08013864 	.word	0x08013864
 80043b0:	0801386a 	.word	0x0801386a
 80043b4:	08013788 	.word	0x08013788
 80043b8:	08013861 	.word	0x08013861
 80043bc:	08013867 	.word	0x08013867
 80043c0:	08013774 	.word	0x08013774
					}
					case IR_R_CHAR: {
						sensor_data.ir_dist_th_R = (float) val;
 80043c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043c6:	ee07 3a90 	vmov	s15, r3
 80043ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ce:	4b60      	ldr	r3, [pc, #384]	@ (8004550 <_ZN9AppParser9Processor13processorTaskEPv+0x460>)
 80043d0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
						if (val == 999)
 80043d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043d6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80043da:	4293      	cmp	r3, r2
 80043dc:	d103      	bne.n	80043e6 <_ZN9AppParser9Processor13processorTaskEPv+0x2f6>
							sensor_data.ir_dist_th_R = 0;
 80043de:	4b5c      	ldr	r3, [pc, #368]	@ (8004550 <_ZN9AppParser9Processor13processorTaskEPv+0x460>)
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	631a      	str	r2, [r3, #48]	@ 0x30
						HAL_UART_Transmit(&huart3, (BUF_CMP_t*) ack,
 80043e6:	230a      	movs	r3, #10
 80043e8:	2204      	movs	r2, #4
 80043ea:	495a      	ldr	r1, [pc, #360]	@ (8004554 <_ZN9AppParser9Processor13processorTaskEPv+0x464>)
 80043ec:	485a      	ldr	r0, [pc, #360]	@ (8004558 <_ZN9AppParser9Processor13processorTaskEPv+0x468>)
 80043ee:	f006 fec7 	bl	800b180 <HAL_UART_Transmit>
								sizeof(ack), 10);
						break;
 80043f2:	bf00      	nop

					}

				}
				case AUX_CHAR: {
					if (isEq(T2_180R_CHAR, msg.buffer[3])) {
 80043f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80043f8:	3303      	adds	r3, #3
 80043fa:	4619      	mov	r1, r3
 80043fc:	4857      	ldr	r0, [pc, #348]	@ (800455c <_ZN9AppParser9Processor13processorTaskEPv+0x46c>)
 80043fe:	f000 faa1 	bl	8004944 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d023      	beq.n	8004450 <_ZN9AppParser9Processor13processorTaskEPv+0x360>
						MOTION_PKT_t *pkt = new MOTION_PKT_t();
 8004408:	200c      	movs	r0, #12
 800440a:	f00b fced 	bl	800fde8 <_Znwj>
 800440e:	4603      	mov	r3, r0
 8004410:	4619      	mov	r1, r3
 8004412:	460a      	mov	r2, r1
 8004414:	2300      	movs	r3, #0
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	6053      	str	r3, [r2, #4]
 800441a:	6093      	str	r3, [r2, #8]
 800441c:	63b9      	str	r1, [r7, #56]	@ 0x38
						pkt->turn_opt = isEq(LEFT_CHAR, msg.buffer[4]);
 800441e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004422:	3304      	adds	r3, #4
 8004424:	4619      	mov	r1, r3
 8004426:	484e      	ldr	r0, [pc, #312]	@ (8004560 <_ZN9AppParser9Processor13processorTaskEPv+0x470>)
 8004428:	f000 fa8c 	bl	8004944 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 800442c:	4603      	mov	r3, r0
 800442e:	461a      	mov	r2, r3
 8004430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004432:	725a      	strb	r2, [r3, #9]
						osMessageQueuePut(tx_ctx->mailbox.queue, pkt, 0, 0);
 8004434:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004436:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004438:	2300      	movs	r3, #0
 800443a:	2200      	movs	r2, #0
 800443c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800443e:	f008 fb7b 	bl	800cb38 <osMessageQueuePut>
						HAL_UART_Transmit(&huart3, (BUF_CMP_t*) ack,
 8004442:	230a      	movs	r3, #10
 8004444:	2204      	movs	r2, #4
 8004446:	4943      	ldr	r1, [pc, #268]	@ (8004554 <_ZN9AppParser9Processor13processorTaskEPv+0x464>)
 8004448:	4843      	ldr	r0, [pc, #268]	@ (8004558 <_ZN9AppParser9Processor13processorTaskEPv+0x468>)
 800444a:	f006 fe99 	bl	800b180 <HAL_UART_Transmit>
 800444e:	e063      	b.n	8004518 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
								sizeof(ack), 10);
					} else if (isEq(T2_90R_CHAR, msg.buffer[3])) {
 8004450:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004454:	3303      	adds	r3, #3
 8004456:	4619      	mov	r1, r3
 8004458:	4842      	ldr	r0, [pc, #264]	@ (8004564 <_ZN9AppParser9Processor13processorTaskEPv+0x474>)
 800445a:	f000 fa73 	bl	8004944 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d023      	beq.n	80044ac <_ZN9AppParser9Processor13processorTaskEPv+0x3bc>
						MOTION_PKT_t *pkt = new MOTION_PKT_t();
 8004464:	200c      	movs	r0, #12
 8004466:	f00b fcbf 	bl	800fde8 <_Znwj>
 800446a:	4603      	mov	r3, r0
 800446c:	4619      	mov	r1, r3
 800446e:	460a      	mov	r2, r1
 8004470:	2300      	movs	r3, #0
 8004472:	6013      	str	r3, [r2, #0]
 8004474:	6053      	str	r3, [r2, #4]
 8004476:	6093      	str	r3, [r2, #8]
 8004478:	63f9      	str	r1, [r7, #60]	@ 0x3c
						pkt->turn_opt = isEq(LEFT_CHAR, msg.buffer[4]);
 800447a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800447e:	3304      	adds	r3, #4
 8004480:	4619      	mov	r1, r3
 8004482:	4837      	ldr	r0, [pc, #220]	@ (8004560 <_ZN9AppParser9Processor13processorTaskEPv+0x470>)
 8004484:	f000 fa5e 	bl	8004944 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8004488:	4603      	mov	r3, r0
 800448a:	461a      	mov	r2, r3
 800448c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800448e:	725a      	strb	r2, [r3, #9]
						osMessageQueuePut(tx_ctx->mailbox.queue, pkt, 0, 0);
 8004490:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004492:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004494:	2300      	movs	r3, #0
 8004496:	2200      	movs	r2, #0
 8004498:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800449a:	f008 fb4d 	bl	800cb38 <osMessageQueuePut>
						HAL_UART_Transmit(&huart3, (BUF_CMP_t*) ack,
 800449e:	230a      	movs	r3, #10
 80044a0:	2204      	movs	r2, #4
 80044a2:	492c      	ldr	r1, [pc, #176]	@ (8004554 <_ZN9AppParser9Processor13processorTaskEPv+0x464>)
 80044a4:	482c      	ldr	r0, [pc, #176]	@ (8004558 <_ZN9AppParser9Processor13processorTaskEPv+0x468>)
 80044a6:	f006 fe6b 	bl	800b180 <HAL_UART_Transmit>
 80044aa:	e035      	b.n	8004518 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
								sizeof(ack), 10);
					}
					else if (isEq(T2_O1_CHAR, msg.buffer[3])) {
 80044ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80044b0:	3303      	adds	r3, #3
 80044b2:	4619      	mov	r1, r3
 80044b4:	482c      	ldr	r0, [pc, #176]	@ (8004568 <_ZN9AppParser9Processor13processorTaskEPv+0x478>)
 80044b6:	f000 fa45 	bl	8004944 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d02b      	beq.n	8004518 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
						MOTION_PKT_t *pkt = new MOTION_PKT_t();
 80044c0:	200c      	movs	r0, #12
 80044c2:	f00b fc91 	bl	800fde8 <_Znwj>
 80044c6:	4603      	mov	r3, r0
 80044c8:	4619      	mov	r1, r3
 80044ca:	460a      	mov	r2, r1
 80044cc:	2300      	movs	r3, #0
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	6053      	str	r3, [r2, #4]
 80044d2:	6093      	str	r3, [r2, #8]
 80044d4:	6439      	str	r1, [r7, #64]	@ 0x40
						pkt->turn_opt = isEq(LEFT_CHAR, msg.buffer[4]);
 80044d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80044da:	3304      	adds	r3, #4
 80044dc:	4619      	mov	r1, r3
 80044de:	4820      	ldr	r0, [pc, #128]	@ (8004560 <_ZN9AppParser9Processor13processorTaskEPv+0x470>)
 80044e0:	f000 fa30 	bl	8004944 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80044e4:	4603      	mov	r3, r0
 80044e6:	461a      	mov	r2, r3
 80044e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044ea:	725a      	strb	r2, [r3, #9]
						osMessageQueuePut(tx_ctx->mailbox.queue, pkt, 0, 0);
 80044ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044ee:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80044f0:	2300      	movs	r3, #0
 80044f2:	2200      	movs	r2, #0
 80044f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044f6:	f008 fb1f 	bl	800cb38 <osMessageQueuePut>
						HAL_UART_Transmit(&huart3, (BUF_CMP_t*) ack,
 80044fa:	230a      	movs	r3, #10
 80044fc:	2204      	movs	r2, #4
 80044fe:	4915      	ldr	r1, [pc, #84]	@ (8004554 <_ZN9AppParser9Processor13processorTaskEPv+0x464>)
 8004500:	4815      	ldr	r0, [pc, #84]	@ (8004558 <_ZN9AppParser9Processor13processorTaskEPv+0x468>)
 8004502:	f006 fe3d 	bl	800b180 <HAL_UART_Transmit>
 8004506:	e007      	b.n	8004518 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
				default: {
					// something went wrong..
				}
				}
			} else {
				HAL_UART_Transmit(&huart3, (BUF_CMP_t*) nack, sizeof(nack), 10);
 8004508:	230a      	movs	r3, #10
 800450a:	2204      	movs	r2, #4
 800450c:	4917      	ldr	r1, [pc, #92]	@ (800456c <_ZN9AppParser9Processor13processorTaskEPv+0x47c>)
 800450e:	4812      	ldr	r0, [pc, #72]	@ (8004558 <_ZN9AppParser9Processor13processorTaskEPv+0x468>)
 8004510:	f006 fe36 	bl	800b180 <HAL_UART_Transmit>
 8004514:	e000      	b.n	8004518 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
						break;
 8004516:	bf00      	nop
			}

			HAL_UART_Receive_DMA(&huart3, (BUF_CMP_t*) uartRxBuf, 10); // re-enable DMA buf for rx
 8004518:	220a      	movs	r2, #10
 800451a:	4915      	ldr	r1, [pc, #84]	@ (8004570 <_ZN9AppParser9Processor13processorTaskEPv+0x480>)
 800451c:	480e      	ldr	r0, [pc, #56]	@ (8004558 <_ZN9AppParser9Processor13processorTaskEPv+0x468>)
 800451e:	f006 feba 	bl	800b296 <HAL_UART_Receive_DMA>
 8004522:	e5f6      	b.n	8004112 <_ZN9AppParser9Processor13processorTaskEPv+0x22>
		} else if (_signal_obstr) // specifically lower priority than RX
 8004524:	4b13      	ldr	r3, [pc, #76]	@ (8004574 <_ZN9AppParser9Processor13processorTaskEPv+0x484>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	f43f adf2 	beq.w	8004112 <_ZN9AppParser9Processor13processorTaskEPv+0x22>
		{
			if (!_obstr_txed)
 800452e:	4b12      	ldr	r3, [pc, #72]	@ (8004578 <_ZN9AppParser9Processor13processorTaskEPv+0x488>)
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	f083 0301 	eor.w	r3, r3, #1
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <_ZN9AppParser9Processor13processorTaskEPv+0x458>
				HAL_UART_Transmit(&huart3, (BUF_CMP_t*) obstr, sizeof(obstr), 10);
 800453c:	230a      	movs	r3, #10
 800453e:	2204      	movs	r2, #4
 8004540:	490e      	ldr	r1, [pc, #56]	@ (800457c <_ZN9AppParser9Processor13processorTaskEPv+0x48c>)
 8004542:	4805      	ldr	r0, [pc, #20]	@ (8004558 <_ZN9AppParser9Processor13processorTaskEPv+0x468>)
 8004544:	f006 fe1c 	bl	800b180 <HAL_UART_Transmit>
			_obstr_txed = true;
 8004548:	4b0b      	ldr	r3, [pc, #44]	@ (8004578 <_ZN9AppParser9Processor13processorTaskEPv+0x488>)
 800454a:	2201      	movs	r2, #1
 800454c:	701a      	strb	r2, [r3, #0]
		}
	}
 800454e:	e5e0      	b.n	8004112 <_ZN9AppParser9Processor13processorTaskEPv+0x22>
 8004550:	20000244 	.word	0x20000244
 8004554:	08013774 	.word	0x08013774
 8004558:	20000b78 	.word	0x20000b78
 800455c:	0801386b 	.word	0x0801386b
 8004560:	08013866 	.word	0x08013866
 8004564:	0801386c 	.word	0x0801386c
 8004568:	0801386d 	.word	0x0801386d
 800456c:	08013778 	.word	0x08013778
 8004570:	200004b0 	.word	0x200004b0
 8004574:	200004ad 	.word	0x200004ad
 8004578:	200004ae 	.word	0x200004ae
 800457c:	08013780 	.word	0x08013780

08004580 <_ZN9AppParser9Processor22returnSensorRequestCmdEh>:

}

void Processor::returnSensorRequestCmd(BUF_CMP_t id) {
 8004580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004584:	b092      	sub	sp, #72	@ 0x48
 8004586:	af08      	add	r7, sp, #32
 8004588:	4603      	mov	r3, r0
 800458a:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buf[25] = { 0 };
 800458c:	f107 030c 	add.w	r3, r7, #12
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	605a      	str	r2, [r3, #4]
 8004596:	609a      	str	r2, [r3, #8]
 8004598:	60da      	str	r2, [r3, #12]
 800459a:	611a      	str	r2, [r3, #16]
 800459c:	615a      	str	r2, [r3, #20]
 800459e:	761a      	strb	r2, [r3, #24]

	switch (id) {
 80045a0:	79fb      	ldrb	r3, [r7, #7]
 80045a2:	3b65      	subs	r3, #101	@ 0x65
 80045a4:	2b14      	cmp	r3, #20
 80045a6:	f200 80fb 	bhi.w	80047a0 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x220>
 80045aa:	a201      	add	r2, pc, #4	@ (adr r2, 80045b0 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x30>)
 80045ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b0:	0800463f 	.word	0x0800463f
 80045b4:	080047a1 	.word	0x080047a1
 80045b8:	080046b3 	.word	0x080046b3
 80045bc:	080047a1 	.word	0x080047a1
 80045c0:	080047a1 	.word	0x080047a1
 80045c4:	080047a1 	.word	0x080047a1
 80045c8:	08004729 	.word	0x08004729
 80045cc:	080047a1 	.word	0x080047a1
 80045d0:	080047a1 	.word	0x080047a1
 80045d4:	080047a1 	.word	0x080047a1
 80045d8:	080047a1 	.word	0x080047a1
 80045dc:	080047a1 	.word	0x080047a1
 80045e0:	080047a1 	.word	0x080047a1
 80045e4:	080047a1 	.word	0x080047a1
 80045e8:	080047a1 	.word	0x080047a1
 80045ec:	080047a1 	.word	0x080047a1
 80045f0:	08004679 	.word	0x08004679
 80045f4:	080047a1 	.word	0x080047a1
 80045f8:	08004605 	.word	0x08004605
 80045fc:	080047a1 	.word	0x080047a1
 8004600:	080046ef 	.word	0x080046ef
	case IR_L_CHAR: {
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
				sensor_data.ir_distL);
 8004604:	4b6c      	ldr	r3, [pc, #432]	@ (80047b8 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x238>)
 8004606:	685b      	ldr	r3, [r3, #4]
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
 8004608:	4618      	mov	r0, r3
 800460a:	f7fb ff9d 	bl	8000548 <__aeabi_f2d>
 800460e:	4602      	mov	r2, r0
 8004610:	460b      	mov	r3, r1
 8004612:	f107 000c 	add.w	r0, r7, #12
 8004616:	e9cd 2300 	strd	r2, r3, [sp]
 800461a:	4a68      	ldr	r2, [pc, #416]	@ (80047bc <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 800461c:	2119      	movs	r1, #25
 800461e:	f00c ff57 	bl	80114d0 <sniprintf>
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 8004622:	f107 030c 	add.w	r3, r7, #12
 8004626:	4618      	mov	r0, r3
 8004628:	f7fb fe22 	bl	8000270 <strlen>
 800462c:	4603      	mov	r3, r0
 800462e:	b29a      	uxth	r2, r3
 8004630:	f107 010c 	add.w	r1, r7, #12
 8004634:	230a      	movs	r3, #10
 8004636:	4862      	ldr	r0, [pc, #392]	@ (80047c0 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x240>)
 8004638:	f006 fda2 	bl	800b180 <HAL_UART_Transmit>
				10);
		break;
 800463c:	e0b7      	b.n	80047ae <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x22e>
	}
	case IR_R_CHAR: {
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
				sensor_data.ir_distR);
 800463e:	4b5e      	ldr	r3, [pc, #376]	@ (80047b8 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x238>)
 8004640:	689b      	ldr	r3, [r3, #8]
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
 8004642:	4618      	mov	r0, r3
 8004644:	f7fb ff80 	bl	8000548 <__aeabi_f2d>
 8004648:	4602      	mov	r2, r0
 800464a:	460b      	mov	r3, r1
 800464c:	f107 000c 	add.w	r0, r7, #12
 8004650:	e9cd 2300 	strd	r2, r3, [sp]
 8004654:	4a59      	ldr	r2, [pc, #356]	@ (80047bc <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 8004656:	2119      	movs	r1, #25
 8004658:	f00c ff3a 	bl	80114d0 <sniprintf>
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 800465c:	f107 030c 	add.w	r3, r7, #12
 8004660:	4618      	mov	r0, r3
 8004662:	f7fb fe05 	bl	8000270 <strlen>
 8004666:	4603      	mov	r3, r0
 8004668:	b29a      	uxth	r2, r3
 800466a:	f107 010c 	add.w	r1, r7, #12
 800466e:	230a      	movs	r3, #10
 8004670:	4853      	ldr	r0, [pc, #332]	@ (80047c0 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x240>)
 8004672:	f006 fd85 	bl	800b180 <HAL_UART_Transmit>
				10);
		break;
 8004676:	e09a      	b.n	80047ae <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x22e>
	}
	case USOUND_CHAR: {
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
				sensor_data.usonic_dist);
 8004678:	4b4f      	ldr	r3, [pc, #316]	@ (80047b8 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x238>)
 800467a:	68db      	ldr	r3, [r3, #12]
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
 800467c:	4618      	mov	r0, r3
 800467e:	f7fb ff63 	bl	8000548 <__aeabi_f2d>
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	f107 000c 	add.w	r0, r7, #12
 800468a:	e9cd 2300 	strd	r2, r3, [sp]
 800468e:	4a4b      	ldr	r2, [pc, #300]	@ (80047bc <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 8004690:	2119      	movs	r1, #25
 8004692:	f00c ff1d 	bl	80114d0 <sniprintf>
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 8004696:	f107 030c 	add.w	r3, r7, #12
 800469a:	4618      	mov	r0, r3
 800469c:	f7fb fde8 	bl	8000270 <strlen>
 80046a0:	4603      	mov	r3, r0
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	f107 010c 	add.w	r1, r7, #12
 80046a8:	230a      	movs	r3, #10
 80046aa:	4845      	ldr	r0, [pc, #276]	@ (80047c0 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x240>)
 80046ac:	f006 fd68 	bl	800b180 <HAL_UART_Transmit>
				10);
		break;
 80046b0:	e07d      	b.n	80047ae <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x22e>
	}
	case GY_Z_CHAR: {
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
				sensor_data.imu->gyro[2]);
 80046b2:	4b41      	ldr	r3, [pc, #260]	@ (80047b8 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x238>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	699b      	ldr	r3, [r3, #24]
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fb ff45 	bl	8000548 <__aeabi_f2d>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	f107 000c 	add.w	r0, r7, #12
 80046c6:	e9cd 2300 	strd	r2, r3, [sp]
 80046ca:	4a3c      	ldr	r2, [pc, #240]	@ (80047bc <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 80046cc:	2119      	movs	r1, #25
 80046ce:	f00c feff 	bl	80114d0 <sniprintf>
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 80046d2:	f107 030c 	add.w	r3, r7, #12
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fb fdca 	bl	8000270 <strlen>
 80046dc:	4603      	mov	r3, r0
 80046de:	b29a      	uxth	r2, r3
 80046e0:	f107 010c 	add.w	r1, r7, #12
 80046e4:	230a      	movs	r3, #10
 80046e6:	4836      	ldr	r0, [pc, #216]	@ (80047c0 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x240>)
 80046e8:	f006 fd4a 	bl	800b180 <HAL_UART_Transmit>
				10);
		break;
 80046ec:	e05f      	b.n	80047ae <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x22e>
	}
	case QTRN_YAW_CHAR: {
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f", sensor_data.yaw_abs);
 80046ee:	4b32      	ldr	r3, [pc, #200]	@ (80047b8 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x238>)
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fb ff28 	bl	8000548 <__aeabi_f2d>
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	f107 000c 	add.w	r0, r7, #12
 8004700:	e9cd 2300 	strd	r2, r3, [sp]
 8004704:	4a2d      	ldr	r2, [pc, #180]	@ (80047bc <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 8004706:	2119      	movs	r1, #25
 8004708:	f00c fee2 	bl	80114d0 <sniprintf>
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf), 10);
 800470c:	f107 030c 	add.w	r3, r7, #12
 8004710:	4618      	mov	r0, r3
 8004712:	f7fb fdad 	bl	8000270 <strlen>
 8004716:	4603      	mov	r3, r0
 8004718:	b29a      	uxth	r2, r3
 800471a:	f107 010c 	add.w	r1, r7, #12
 800471e:	230a      	movs	r3, #10
 8004720:	4827      	ldr	r0, [pc, #156]	@ (80047c0 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x240>)
 8004722:	f006 fd2d 	bl	800b180 <HAL_UART_Transmit>
		break;
 8004726:	e042      	b.n	80047ae <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x22e>
	}
	case QTRN_ALL_CHAR: {
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.1f;%4.1f;%4.1f;%4.1f",
				sensor_data.imu->q[0], sensor_data.imu->q[1],
 8004728:	4b23      	ldr	r3, [pc, #140]	@ (80047b8 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x238>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.1f;%4.1f;%4.1f;%4.1f",
 800472e:	4618      	mov	r0, r3
 8004730:	f7fb ff0a 	bl	8000548 <__aeabi_f2d>
 8004734:	4604      	mov	r4, r0
 8004736:	460d      	mov	r5, r1
				sensor_data.imu->q[0], sensor_data.imu->q[1],
 8004738:	4b1f      	ldr	r3, [pc, #124]	@ (80047b8 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x238>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.1f;%4.1f;%4.1f;%4.1f",
 800473e:	4618      	mov	r0, r3
 8004740:	f7fb ff02 	bl	8000548 <__aeabi_f2d>
 8004744:	4680      	mov	r8, r0
 8004746:	4689      	mov	r9, r1
				sensor_data.imu->q[2], sensor_data.imu->q[3]);
 8004748:	4b1b      	ldr	r3, [pc, #108]	@ (80047b8 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x238>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.1f;%4.1f;%4.1f;%4.1f",
 800474e:	4618      	mov	r0, r3
 8004750:	f7fb fefa 	bl	8000548 <__aeabi_f2d>
 8004754:	4682      	mov	sl, r0
 8004756:	468b      	mov	fp, r1
				sensor_data.imu->q[2], sensor_data.imu->q[3]);
 8004758:	4b17      	ldr	r3, [pc, #92]	@ (80047b8 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x238>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.1f;%4.1f;%4.1f;%4.1f",
 800475e:	4618      	mov	r0, r3
 8004760:	f7fb fef2 	bl	8000548 <__aeabi_f2d>
 8004764:	4602      	mov	r2, r0
 8004766:	460b      	mov	r3, r1
 8004768:	f107 000c 	add.w	r0, r7, #12
 800476c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004770:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8004774:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004778:	e9cd 4500 	strd	r4, r5, [sp]
 800477c:	4a11      	ldr	r2, [pc, #68]	@ (80047c4 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x244>)
 800477e:	2119      	movs	r1, #25
 8004780:	f00c fea6 	bl	80114d0 <sniprintf>
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 8004784:	f107 030c 	add.w	r3, r7, #12
 8004788:	4618      	mov	r0, r3
 800478a:	f7fb fd71 	bl	8000270 <strlen>
 800478e:	4603      	mov	r3, r0
 8004790:	b29a      	uxth	r2, r3
 8004792:	f107 010c 	add.w	r1, r7, #12
 8004796:	230a      	movs	r3, #10
 8004798:	4809      	ldr	r0, [pc, #36]	@ (80047c0 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x240>)
 800479a:	f006 fcf1 	bl	800b180 <HAL_UART_Transmit>
				10);
		break;
 800479e:	e006      	b.n	80047ae <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x22e>
	}
	default: {
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) nack, sizeof(nack), 10);
 80047a0:	230a      	movs	r3, #10
 80047a2:	2204      	movs	r2, #4
 80047a4:	4908      	ldr	r1, [pc, #32]	@ (80047c8 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x248>)
 80047a6:	4806      	ldr	r0, [pc, #24]	@ (80047c0 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x240>)
 80047a8:	f006 fcea 	bl	800b180 <HAL_UART_Transmit>
	}
	}
}
 80047ac:	bf00      	nop
 80047ae:	bf00      	nop
 80047b0:	3728      	adds	r7, #40	@ 0x28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047b8:	20000244 	.word	0x20000244
 80047bc:	0801378c 	.word	0x0801378c
 80047c0:	20000b78 	.word	0x20000b78
 80047c4:	08013794 	.word	0x08013794
 80047c8:	08013778 	.word	0x08013778

080047cc <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh>:

MOTION_PKT_t* Processor::getMotionCmdFromBytes(BUF_CMP_t *bytes) {
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]

	uint32_t val = strtol((const char*) &bytes[4], NULL, 10);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3304      	adds	r3, #4
 80047d8:	220a      	movs	r2, #10
 80047da:	2100      	movs	r1, #0
 80047dc:	4618      	mov	r0, r3
 80047de:	f00c f8f7 	bl	80109d0 <strtol>
 80047e2:	4603      	mov	r3, r0
 80047e4:	60fb      	str	r3, [r7, #12]
	if (val == 0)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x24>
		return NULL; // invalid input or no action
 80047ec:	2300      	movs	r3, #0
 80047ee:	e09e      	b.n	800492e <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x162>
	MOTION_PKT_t *pkt = new MOTION_PKT_t();
 80047f0:	200c      	movs	r0, #12
 80047f2:	f00b faf9 	bl	800fde8 <_Znwj>
 80047f6:	4603      	mov	r3, r0
 80047f8:	4619      	mov	r1, r3
 80047fa:	460a      	mov	r2, r1
 80047fc:	2300      	movs	r3, #0
 80047fe:	6013      	str	r3, [r2, #0]
 8004800:	6053      	str	r3, [r2, #4]
 8004802:	6093      	str	r3, [r2, #8]
 8004804:	60b9      	str	r1, [r7, #8]
	pkt->arg = val;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	605a      	str	r2, [r3, #4]

	switch (bytes[3]) {
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3303      	adds	r3, #3
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	3b62      	subs	r3, #98	@ 0x62
 8004814:	2b10      	cmp	r3, #16
 8004816:	f200 8087 	bhi.w	8004928 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x15c>
 800481a:	a201      	add	r2, pc, #4	@ (adr r2, 8004820 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x54>)
 800481c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004820:	08004895 	.word	0x08004895
 8004824:	08004929 	.word	0x08004929
 8004828:	08004929 	.word	0x08004929
 800482c:	08004929 	.word	0x08004929
 8004830:	08004865 	.word	0x08004865
 8004834:	08004929 	.word	0x08004929
 8004838:	08004929 	.word	0x08004929
 800483c:	08004929 	.word	0x08004929
 8004840:	08004929 	.word	0x08004929
 8004844:	08004929 	.word	0x08004929
 8004848:	080048c5 	.word	0x080048c5
 800484c:	08004929 	.word	0x08004929
 8004850:	08004929 	.word	0x08004929
 8004854:	08004929 	.word	0x08004929
 8004858:	08004929 	.word	0x08004929
 800485c:	08004929 	.word	0x08004929
 8004860:	080048f7 	.word	0x080048f7
	case FWD_CHAR: {
		pkt->cmd = MOVE_FWD;
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]
		pkt->is_crawl =(bool) (isEq<BUF_CMP_t>(CRAWL_CHAR, bytes[7]));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3307      	adds	r3, #7
 800486e:	4619      	mov	r1, r3
 8004870:	4831      	ldr	r0, [pc, #196]	@ (8004938 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x16c>)
 8004872:	f000 f867 	bl	8004944 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8004876:	4603      	mov	r3, r0
 8004878:	461a      	mov	r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	729a      	strb	r2, [r3, #10]
		pkt->linear =(bool) (isEq<BUF_CMP_t>(LINEAR_CHAR, bytes[8]));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3308      	adds	r3, #8
 8004882:	4619      	mov	r1, r3
 8004884:	482d      	ldr	r0, [pc, #180]	@ (800493c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x170>)
 8004886:	f000 f85d 	bl	8004944 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 800488a:	4603      	mov	r3, r0
 800488c:	461a      	mov	r2, r3
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	72da      	strb	r2, [r3, #11]
		break;
 8004892:	e04b      	b.n	800492c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x160>
	}
	case BWD_CHAR: {
		pkt->cmd = MOVE_BWD;
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	2201      	movs	r2, #1
 8004898:	601a      	str	r2, [r3, #0]
		pkt->is_crawl =(bool) (isEq<BUF_CMP_t>(CRAWL_CHAR, bytes[7]));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3307      	adds	r3, #7
 800489e:	4619      	mov	r1, r3
 80048a0:	4825      	ldr	r0, [pc, #148]	@ (8004938 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x16c>)
 80048a2:	f000 f84f 	bl	8004944 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80048a6:	4603      	mov	r3, r0
 80048a8:	461a      	mov	r2, r3
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	729a      	strb	r2, [r3, #10]
		pkt->linear =(bool) (isEq<BUF_CMP_t>(LINEAR_CHAR, bytes[8]));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	3308      	adds	r3, #8
 80048b2:	4619      	mov	r1, r3
 80048b4:	4821      	ldr	r0, [pc, #132]	@ (800493c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x170>)
 80048b6:	f000 f845 	bl	8004944 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80048ba:	4603      	mov	r3, r0
 80048bc:	461a      	mov	r2, r3
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	72da      	strb	r2, [r3, #11]
		break;
 80048c2:	e033      	b.n	800492c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x160>
	}
	case LEFT_CHAR: {
		pkt->cmd =
				(bool) (isEq<BUF_CMP_t>(BWD_CHAR, bytes[7])) ?
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	3307      	adds	r3, #7
 80048c8:	4619      	mov	r1, r3
 80048ca:	481d      	ldr	r0, [pc, #116]	@ (8004940 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x174>)
 80048cc:	f000 f83a 	bl	8004944 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x10e>
 80048d6:	2205      	movs	r2, #5
 80048d8:	e000      	b.n	80048dc <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x110>
 80048da:	2203      	movs	r2, #3
		pkt->cmd =
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	601a      	str	r2, [r3, #0]
						MOVE_LEFT_BWD : MOVE_LEFT_FWD;
		pkt->linear =(bool) (isEq<BUF_CMP_t>(LINEAR_CHAR, bytes[8]));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3308      	adds	r3, #8
 80048e4:	4619      	mov	r1, r3
 80048e6:	4815      	ldr	r0, [pc, #84]	@ (800493c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x170>)
 80048e8:	f000 f82c 	bl	8004944 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80048ec:	4603      	mov	r3, r0
 80048ee:	461a      	mov	r2, r3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	72da      	strb	r2, [r3, #11]
		break;
 80048f4:	e01a      	b.n	800492c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x160>
	}
	case RIGHT_CHAR: {
		pkt->cmd =
				(bool) (isEq<BUF_CMP_t>(BWD_CHAR, bytes[7])) ?
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	3307      	adds	r3, #7
 80048fa:	4619      	mov	r1, r3
 80048fc:	4810      	ldr	r0, [pc, #64]	@ (8004940 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x174>)
 80048fe:	f000 f821 	bl	8004944 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x140>
 8004908:	2204      	movs	r2, #4
 800490a:	e000      	b.n	800490e <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x142>
 800490c:	2202      	movs	r2, #2
		pkt->cmd =
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	601a      	str	r2, [r3, #0]
						MOVE_RIGHT_BWD : MOVE_RIGHT_FWD;
		pkt->linear =(bool) (isEq<BUF_CMP_t>(LINEAR_CHAR, bytes[8]));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	3308      	adds	r3, #8
 8004916:	4619      	mov	r1, r3
 8004918:	4808      	ldr	r0, [pc, #32]	@ (800493c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x170>)
 800491a:	f000 f813 	bl	8004944 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 800491e:	4603      	mov	r3, r0
 8004920:	461a      	mov	r2, r3
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	72da      	strb	r2, [r3, #11]
		break;
 8004926:	e001      	b.n	800492c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x160>

	}

	default:
		// something went wrong..
		return NULL;
 8004928:	2300      	movs	r3, #0
 800492a:	e000      	b.n	800492e <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x162>
	}

	return pkt;
 800492c:	68bb      	ldr	r3, [r7, #8]

}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	08013868 	.word	0x08013868
 800493c:	08013869 	.word	0x08013869
 8004940:	08013865 	.word	0x08013865

08004944 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>:

	private:
	// static all to workaround the queue in instance error
		static void startImpl(void * _this); //unused
		template <typename T> // no type bounds enforcement, must be uint8_t, char etc.
		static bool isEq(const T &a, const T &b)
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
		{
			return a == b;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	781a      	ldrb	r2, [r3, #0]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	bf0c      	ite	eq
 800495a:	2301      	moveq	r3, #1
 800495c:	2300      	movne	r3, #0
 800495e:	b2db      	uxtb	r3, r3
		}
 8004960:	4618      	mov	r0, r3
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004972:	2300      	movs	r3, #0
 8004974:	607b      	str	r3, [r7, #4]
 8004976:	4b10      	ldr	r3, [pc, #64]	@ (80049b8 <MX_DMA_Init+0x4c>)
 8004978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497a:	4a0f      	ldr	r2, [pc, #60]	@ (80049b8 <MX_DMA_Init+0x4c>)
 800497c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004980:	6313      	str	r3, [r2, #48]	@ 0x30
 8004982:	4b0d      	ldr	r3, [pc, #52]	@ (80049b8 <MX_DMA_Init+0x4c>)
 8004984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004986:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800498a:	607b      	str	r3, [r7, #4]
 800498c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800498e:	2200      	movs	r2, #0
 8004990:	2105      	movs	r1, #5
 8004992:	200c      	movs	r0, #12
 8004994:	f002 fb5d 	bl	8007052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004998:	200c      	movs	r0, #12
 800499a:	f002 fb76 	bl	800708a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800499e:	2200      	movs	r2, #0
 80049a0:	2105      	movs	r1, #5
 80049a2:	200e      	movs	r0, #14
 80049a4:	f002 fb55 	bl	8007052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80049a8:	200e      	movs	r0, #14
 80049aa:	f002 fb6e 	bl	800708a <HAL_NVIC_EnableIRQ>

}
 80049ae:	bf00      	nop
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	40023800 	.word	0x40023800

080049bc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80049c0:	4a04      	ldr	r2, [pc, #16]	@ (80049d4 <MX_FREERTOS_Init+0x18>)
 80049c2:	2100      	movs	r1, #0
 80049c4:	4804      	ldr	r0, [pc, #16]	@ (80049d8 <MX_FREERTOS_Init+0x1c>)
 80049c6:	f007 fe91 	bl	800c6ec <osThreadNew>
 80049ca:	4603      	mov	r3, r0
 80049cc:	4a03      	ldr	r2, [pc, #12]	@ (80049dc <MX_FREERTOS_Init+0x20>)
 80049ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80049d0:	bf00      	nop
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	08013870 	.word	0x08013870
 80049d8:	080049e1 	.word	0x080049e1
 80049dc:	200004bc 	.word	0x200004bc

080049e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80049e8:	2001      	movs	r0, #1
 80049ea:	f007 ff31 	bl	800c850 <osDelay>
 80049ee:	e7fb      	b.n	80049e8 <StartDefaultTask+0x8>

080049f0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b08a      	sub	sp, #40	@ 0x28
 80049f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049f6:	f107 0314 	add.w	r3, r7, #20
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	605a      	str	r2, [r3, #4]
 8004a00:	609a      	str	r2, [r3, #8]
 8004a02:	60da      	str	r2, [r3, #12]
 8004a04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a06:	2300      	movs	r3, #0
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	4b4e      	ldr	r3, [pc, #312]	@ (8004b44 <MX_GPIO_Init+0x154>)
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0e:	4a4d      	ldr	r2, [pc, #308]	@ (8004b44 <MX_GPIO_Init+0x154>)
 8004a10:	f043 0310 	orr.w	r3, r3, #16
 8004a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a16:	4b4b      	ldr	r3, [pc, #300]	@ (8004b44 <MX_GPIO_Init+0x154>)
 8004a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1a:	f003 0310 	and.w	r3, r3, #16
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a22:	2300      	movs	r3, #0
 8004a24:	60fb      	str	r3, [r7, #12]
 8004a26:	4b47      	ldr	r3, [pc, #284]	@ (8004b44 <MX_GPIO_Init+0x154>)
 8004a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2a:	4a46      	ldr	r2, [pc, #280]	@ (8004b44 <MX_GPIO_Init+0x154>)
 8004a2c:	f043 0301 	orr.w	r3, r3, #1
 8004a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a32:	4b44      	ldr	r3, [pc, #272]	@ (8004b44 <MX_GPIO_Init+0x154>)
 8004a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60bb      	str	r3, [r7, #8]
 8004a42:	4b40      	ldr	r3, [pc, #256]	@ (8004b44 <MX_GPIO_Init+0x154>)
 8004a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a46:	4a3f      	ldr	r2, [pc, #252]	@ (8004b44 <MX_GPIO_Init+0x154>)
 8004a48:	f043 0304 	orr.w	r3, r3, #4
 8004a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a4e:	4b3d      	ldr	r3, [pc, #244]	@ (8004b44 <MX_GPIO_Init+0x154>)
 8004a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	60bb      	str	r3, [r7, #8]
 8004a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	607b      	str	r3, [r7, #4]
 8004a5e:	4b39      	ldr	r3, [pc, #228]	@ (8004b44 <MX_GPIO_Init+0x154>)
 8004a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a62:	4a38      	ldr	r2, [pc, #224]	@ (8004b44 <MX_GPIO_Init+0x154>)
 8004a64:	f043 0302 	orr.w	r3, r3, #2
 8004a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a6a:	4b36      	ldr	r3, [pc, #216]	@ (8004b44 <MX_GPIO_Init+0x154>)
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	607b      	str	r3, [r7, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a76:	2300      	movs	r3, #0
 8004a78:	603b      	str	r3, [r7, #0]
 8004a7a:	4b32      	ldr	r3, [pc, #200]	@ (8004b44 <MX_GPIO_Init+0x154>)
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7e:	4a31      	ldr	r2, [pc, #196]	@ (8004b44 <MX_GPIO_Init+0x154>)
 8004a80:	f043 0308 	orr.w	r3, r3, #8
 8004a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a86:	4b2f      	ldr	r3, [pc, #188]	@ (8004b44 <MX_GPIO_Init+0x154>)
 8004a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a8a:	f003 0308 	and.w	r3, r3, #8
 8004a8e:	603b      	str	r3, [r7, #0]
 8004a90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8004a92:	2200      	movs	r2, #0
 8004a94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004a98:	482b      	ldr	r0, [pc, #172]	@ (8004b48 <MX_GPIO_Init+0x158>)
 8004a9a:	f003 f8af 	bl	8007bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SN_US_TRIG_GPIO_Port, SN_US_TRIG_Pin, GPIO_PIN_RESET);
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004aa4:	4829      	ldr	r0, [pc, #164]	@ (8004b4c <MX_GPIO_Init+0x15c>)
 8004aa6:	f003 f8a9 	bl	8007bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OLED_DC_Pin|OLED_RST_Pin|OLED_SDA_Pin|OLED_SCL_Pin
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f647 0104 	movw	r1, #30724	@ 0x7804
 8004ab0:	4827      	ldr	r0, [pc, #156]	@ (8004b50 <MX_GPIO_Init+0x160>)
 8004ab2:	f003 f8a3 	bl	8007bfc <HAL_GPIO_WritePin>
                          |asy_US_TRIG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8004ab6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004abc:	2301      	movs	r3, #1
 8004abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8004ac8:	f107 0314 	add.w	r3, r7, #20
 8004acc:	4619      	mov	r1, r3
 8004ace:	481e      	ldr	r0, [pc, #120]	@ (8004b48 <MX_GPIO_Init+0x158>)
 8004ad0:	f002 fef8 	bl	80078c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SN_US_TRIG_Pin */
  GPIO_InitStruct.Pin = SN_US_TRIG_Pin;
 8004ad4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ada:	2301      	movs	r3, #1
 8004adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SN_US_TRIG_GPIO_Port, &GPIO_InitStruct);
 8004ae6:	f107 0314 	add.w	r3, r7, #20
 8004aea:	4619      	mov	r1, r3
 8004aec:	4817      	ldr	r0, [pc, #92]	@ (8004b4c <MX_GPIO_Init+0x15c>)
 8004aee:	f002 fee9 	bl	80078c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_DC_Pin OLED_RST_Pin OLED_SDA_Pin OLED_SCL_Pin
                           asy_US_TRIG_Pin */
  GPIO_InitStruct.Pin = OLED_DC_Pin|OLED_RST_Pin|OLED_SDA_Pin|OLED_SCL_Pin
 8004af2:	f647 0304 	movw	r3, #30724	@ 0x7804
 8004af6:	617b      	str	r3, [r7, #20]
                          |asy_US_TRIG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004af8:	2301      	movs	r3, #1
 8004afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004afc:	2300      	movs	r3, #0
 8004afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b00:	2300      	movs	r3, #0
 8004b02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b04:	f107 0314 	add.w	r3, r7, #20
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4811      	ldr	r0, [pc, #68]	@ (8004b50 <MX_GPIO_Init+0x160>)
 8004b0c:	f002 feda 	bl	80078c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_PB_Pin */
  GPIO_InitStruct.Pin = USER_PB_Pin;
 8004b10:	2301      	movs	r3, #1
 8004b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004b14:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_PB_GPIO_Port, &GPIO_InitStruct);
 8004b1e:	f107 0314 	add.w	r3, r7, #20
 8004b22:	4619      	mov	r1, r3
 8004b24:	4808      	ldr	r0, [pc, #32]	@ (8004b48 <MX_GPIO_Init+0x158>)
 8004b26:	f002 fecd 	bl	80078c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	2105      	movs	r1, #5
 8004b2e:	2006      	movs	r0, #6
 8004b30:	f002 fa8f 	bl	8007052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004b34:	2006      	movs	r0, #6
 8004b36:	f002 faa8 	bl	800708a <HAL_NVIC_EnableIRQ>

}
 8004b3a:	bf00      	nop
 8004b3c:	3728      	adds	r7, #40	@ 0x28
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	40023800 	.word	0x40023800
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	40020400 	.word	0x40020400
 8004b50:	40020c00 	.word	0x40020c00

08004b54 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004b58:	4b12      	ldr	r3, [pc, #72]	@ (8004ba4 <MX_I2C2_Init+0x50>)
 8004b5a:	4a13      	ldr	r2, [pc, #76]	@ (8004ba8 <MX_I2C2_Init+0x54>)
 8004b5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8004b5e:	4b11      	ldr	r3, [pc, #68]	@ (8004ba4 <MX_I2C2_Init+0x50>)
 8004b60:	4a12      	ldr	r2, [pc, #72]	@ (8004bac <MX_I2C2_Init+0x58>)
 8004b62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004b64:	4b0f      	ldr	r3, [pc, #60]	@ (8004ba4 <MX_I2C2_Init+0x50>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8004ba4 <MX_I2C2_Init+0x50>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b70:	4b0c      	ldr	r3, [pc, #48]	@ (8004ba4 <MX_I2C2_Init+0x50>)
 8004b72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004b76:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b78:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba4 <MX_I2C2_Init+0x50>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004b7e:	4b09      	ldr	r3, [pc, #36]	@ (8004ba4 <MX_I2C2_Init+0x50>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b84:	4b07      	ldr	r3, [pc, #28]	@ (8004ba4 <MX_I2C2_Init+0x50>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b8a:	4b06      	ldr	r3, [pc, #24]	@ (8004ba4 <MX_I2C2_Init+0x50>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004b90:	4804      	ldr	r0, [pc, #16]	@ (8004ba4 <MX_I2C2_Init+0x50>)
 8004b92:	f003 f865 	bl	8007c60 <HAL_I2C_Init>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004b9c:	f000 f8e1 	bl	8004d62 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004ba0:	bf00      	nop
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	200004c0 	.word	0x200004c0
 8004ba8:	40005800 	.word	0x40005800
 8004bac:	000186a0 	.word	0x000186a0

08004bb0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08a      	sub	sp, #40	@ 0x28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bb8:	f107 0314 	add.w	r3, r7, #20
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	605a      	str	r2, [r3, #4]
 8004bc2:	609a      	str	r2, [r3, #8]
 8004bc4:	60da      	str	r2, [r3, #12]
 8004bc6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a19      	ldr	r2, [pc, #100]	@ (8004c34 <HAL_I2C_MspInit+0x84>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d12c      	bne.n	8004c2c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	613b      	str	r3, [r7, #16]
 8004bd6:	4b18      	ldr	r3, [pc, #96]	@ (8004c38 <HAL_I2C_MspInit+0x88>)
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bda:	4a17      	ldr	r2, [pc, #92]	@ (8004c38 <HAL_I2C_MspInit+0x88>)
 8004bdc:	f043 0302 	orr.w	r3, r3, #2
 8004be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004be2:	4b15      	ldr	r3, [pc, #84]	@ (8004c38 <HAL_I2C_MspInit+0x88>)
 8004be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	613b      	str	r3, [r7, #16]
 8004bec:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004bee:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004bf4:	2312      	movs	r3, #18
 8004bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004c00:	2304      	movs	r3, #4
 8004c02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c04:	f107 0314 	add.w	r3, r7, #20
 8004c08:	4619      	mov	r1, r3
 8004c0a:	480c      	ldr	r0, [pc, #48]	@ (8004c3c <HAL_I2C_MspInit+0x8c>)
 8004c0c:	f002 fe5a 	bl	80078c4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004c10:	2300      	movs	r3, #0
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	4b08      	ldr	r3, [pc, #32]	@ (8004c38 <HAL_I2C_MspInit+0x88>)
 8004c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c18:	4a07      	ldr	r2, [pc, #28]	@ (8004c38 <HAL_I2C_MspInit+0x88>)
 8004c1a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004c1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c20:	4b05      	ldr	r3, [pc, #20]	@ (8004c38 <HAL_I2C_MspInit+0x88>)
 8004c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004c2c:	bf00      	nop
 8004c2e:	3728      	adds	r7, #40	@ 0x28
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40005800 	.word	0x40005800
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	40020400 	.word	0x40020400

08004c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004c44:	f001 fc94 	bl	8006570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004c48:	f000 f822 	bl	8004c90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004c4c:	f7ff fed0 	bl	80049f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8004c50:	f7ff fe8c 	bl	800496c <MX_DMA_Init>
  MX_TIM6_Init();
 8004c54:	f000 ffee 	bl	8005c34 <MX_TIM6_Init>
  MX_TIM8_Init();
 8004c58:	f001 f822 	bl	8005ca0 <MX_TIM8_Init>
  MX_TIM4_Init();
 8004c5c:	f000 ff68 	bl	8005b30 <MX_TIM4_Init>
  MX_TIM9_Init();
 8004c60:	f001 f892 	bl	8005d88 <MX_TIM9_Init>
  MX_TIM12_Init();
 8004c64:	f001 f8fe 	bl	8005e64 <MX_TIM12_Init>
  MX_I2C2_Init();
 8004c68:	f7ff ff74 	bl	8004b54 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8004c6c:	f001 fb66 	bl	800633c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8004c70:	f000 fe92 	bl	8005998 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004c74:	f000 fee4 	bl	8005a40 <MX_TIM3_Init>
  MX_ADC1_Init();
 8004c78:	f7fc fd14 	bl	80016a4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  initializeCPPconstructs();
 8004c7c:	f7fc ffbc 	bl	8001bf8 <initializeCPPconstructs>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 8004c80:	f007 fcea 	bl	800c658 <osKernelInitialize>
  MX_FREERTOS_Init();
 8004c84:	f7ff fe9a 	bl	80049bc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004c88:	f007 fd0a 	bl	800c6a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8004c8c:	bf00      	nop
 8004c8e:	e7fd      	b.n	8004c8c <main+0x4c>

08004c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b094      	sub	sp, #80	@ 0x50
 8004c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004c96:	f107 0320 	add.w	r3, r7, #32
 8004c9a:	2230      	movs	r2, #48	@ 0x30
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f00c fd46 	bl	8011730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ca4:	f107 030c 	add.w	r3, r7, #12
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	605a      	str	r2, [r3, #4]
 8004cae:	609a      	str	r2, [r3, #8]
 8004cb0:	60da      	str	r2, [r3, #12]
 8004cb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	60bb      	str	r3, [r7, #8]
 8004cb8:	4b22      	ldr	r3, [pc, #136]	@ (8004d44 <SystemClock_Config+0xb4>)
 8004cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cbc:	4a21      	ldr	r2, [pc, #132]	@ (8004d44 <SystemClock_Config+0xb4>)
 8004cbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8004d44 <SystemClock_Config+0xb4>)
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ccc:	60bb      	str	r3, [r7, #8]
 8004cce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	607b      	str	r3, [r7, #4]
 8004cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8004d48 <SystemClock_Config+0xb8>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a1b      	ldr	r2, [pc, #108]	@ (8004d48 <SystemClock_Config+0xb8>)
 8004cda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	4b19      	ldr	r3, [pc, #100]	@ (8004d48 <SystemClock_Config+0xb8>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ce8:	607b      	str	r3, [r7, #4]
 8004cea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004cec:	2302      	movs	r3, #2
 8004cee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004cf4:	2310      	movs	r3, #16
 8004cf6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004cfc:	f107 0320 	add.w	r3, r7, #32
 8004d00:	4618      	mov	r0, r3
 8004d02:	f004 f927 	bl	8008f54 <HAL_RCC_OscConfig>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8004d0c:	f000 f829 	bl	8004d62 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d10:	230f      	movs	r3, #15
 8004d12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004d14:	2300      	movs	r3, #0
 8004d16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004d20:	2300      	movs	r3, #0
 8004d22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004d24:	f107 030c 	add.w	r3, r7, #12
 8004d28:	2100      	movs	r1, #0
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f004 fb8a 	bl	8009444 <HAL_RCC_ClockConfig>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8004d36:	f000 f814 	bl	8004d62 <Error_Handler>
  }
}
 8004d3a:	bf00      	nop
 8004d3c:	3750      	adds	r7, #80	@ 0x50
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	40023800 	.word	0x40023800
 8004d48:	40007000 	.word	0x40007000

08004d4c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin ) {
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	4603      	mov	r3, r0
 8004d54:	80fb      	strh	r3, [r7, #6]
     // see EXTI0_IRQHandler() in stm32f4xx_it.c for interrupt
	if (GPIO_Pin == USER_PB_Pin) {
//	        buttonPressed = 1;
	}
}
 8004d56:	bf00      	nop
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d62:	b480      	push	{r7}
 8004d64:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d66:	b672      	cpsid	i
}
 8004d68:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004d6a:	bf00      	nop
 8004d6c:	e7fd      	b.n	8004d6a <Error_Handler+0x8>
	...

08004d70 <OLED_WR_Byte>:
#include <oledfont.h>
#include "stdlib.h"
#include "stdbool.h"

void OLED_WR_Byte(uint8_t dat,uint8_t DataCmd)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	4603      	mov	r3, r0
 8004d78:	460a      	mov	r2, r1
 8004d7a:	71fb      	strb	r3, [r7, #7]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	if(DataCmd == 1)    // Data write
 8004d80:	79bb      	ldrb	r3, [r7, #6]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d106      	bne.n	8004d94 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8004d86:	2201      	movs	r2, #1
 8004d88:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004d8c:	481e      	ldr	r0, [pc, #120]	@ (8004e08 <OLED_WR_Byte+0x98>)
 8004d8e:	f002 ff35 	bl	8007bfc <HAL_GPIO_WritePin>
 8004d92:	e005      	b.n	8004da0 <OLED_WR_Byte+0x30>
	else                // Command write
	  OLED_RS_Clr();
 8004d94:	2200      	movs	r2, #0
 8004d96:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004d9a:	481b      	ldr	r0, [pc, #108]	@ (8004e08 <OLED_WR_Byte+0x98>)
 8004d9c:	f002 ff2e 	bl	8007bfc <HAL_GPIO_WritePin>

	for(i=0;i<8;i++)
 8004da0:	2300      	movs	r3, #0
 8004da2:	73fb      	strb	r3, [r7, #15]
 8004da4:	e022      	b.n	8004dec <OLED_WR_Byte+0x7c>
	{	OLED_SCLK_Clr();  // clear the clock
 8004da6:	2200      	movs	r2, #0
 8004da8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004dac:	4816      	ldr	r0, [pc, #88]	@ (8004e08 <OLED_WR_Byte+0x98>)
 8004dae:	f002 ff25 	bl	8007bfc <HAL_GPIO_WritePin>
		if(dat&0x80)      // check data bit
 8004db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	da06      	bge.n	8004dc8 <OLED_WR_Byte+0x58>
		   OLED_SDIN_Set();
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004dc0:	4811      	ldr	r0, [pc, #68]	@ (8004e08 <OLED_WR_Byte+0x98>)
 8004dc2:	f002 ff1b 	bl	8007bfc <HAL_GPIO_WritePin>
 8004dc6:	e005      	b.n	8004dd4 <OLED_WR_Byte+0x64>
		else 
		   OLED_SDIN_Clr();
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004dce:	480e      	ldr	r0, [pc, #56]	@ (8004e08 <OLED_WR_Byte+0x98>)
 8004dd0:	f002 ff14 	bl	8007bfc <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004dda:	480b      	ldr	r0, [pc, #44]	@ (8004e08 <OLED_WR_Byte+0x98>)
 8004ddc:	f002 ff0e 	bl	8007bfc <HAL_GPIO_WritePin>
		dat<<=1;          // check next data bit
 8004de0:	79fb      	ldrb	r3, [r7, #7]
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
 8004de8:	3301      	adds	r3, #1
 8004dea:	73fb      	strb	r3, [r7, #15]
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
 8004dee:	2b07      	cmp	r3, #7
 8004df0:	d9d9      	bls.n	8004da6 <OLED_WR_Byte+0x36>
	}

	OLED_RS_Set();   	  // Set RS=1 upon exit
 8004df2:	2201      	movs	r2, #1
 8004df4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004df8:	4803      	ldr	r0, [pc, #12]	@ (8004e08 <OLED_WR_Byte+0x98>)
 8004dfa:	f002 feff 	bl	8007bfc <HAL_GPIO_WritePin>
} 
 8004dfe:	bf00      	nop
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	40020c00 	.word	0x40020c00

08004e0c <OLED_Refresh_Gram>:

// Refresh the GRAM
uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 8004e12:	2300      	movs	r3, #0
 8004e14:	71fb      	strb	r3, [r7, #7]
 8004e16:	e026      	b.n	8004e66 <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);
 8004e18:	79fb      	ldrb	r3, [r7, #7]
 8004e1a:	3b50      	subs	r3, #80	@ 0x50
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2100      	movs	r1, #0
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff ffa5 	bl	8004d70 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);
 8004e26:	2100      	movs	r1, #0
 8004e28:	2000      	movs	r0, #0
 8004e2a:	f7ff ffa1 	bl	8004d70 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);
 8004e2e:	2100      	movs	r1, #0
 8004e30:	2010      	movs	r0, #16
 8004e32:	f7ff ff9d 	bl	8004d70 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 8004e36:	2300      	movs	r3, #0
 8004e38:	71bb      	strb	r3, [r7, #6]
 8004e3a:	e00d      	b.n	8004e58 <OLED_Refresh_Gram+0x4c>
 8004e3c:	79ba      	ldrb	r2, [r7, #6]
 8004e3e:	79fb      	ldrb	r3, [r7, #7]
 8004e40:	490d      	ldr	r1, [pc, #52]	@ (8004e78 <OLED_Refresh_Gram+0x6c>)
 8004e42:	00d2      	lsls	r2, r2, #3
 8004e44:	440a      	add	r2, r1
 8004e46:	4413      	add	r3, r2
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff ff8f 	bl	8004d70 <OLED_WR_Byte>
 8004e52:	79bb      	ldrb	r3, [r7, #6]
 8004e54:	3301      	adds	r3, #1
 8004e56:	71bb      	strb	r3, [r7, #6]
 8004e58:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	daed      	bge.n	8004e3c <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)
 8004e60:	79fb      	ldrb	r3, [r7, #7]
 8004e62:	3301      	adds	r3, #1
 8004e64:	71fb      	strb	r3, [r7, #7]
 8004e66:	79fb      	ldrb	r3, [r7, #7]
 8004e68:	2b07      	cmp	r3, #7
 8004e6a:	d9d5      	bls.n	8004e18 <OLED_Refresh_Gram+0xc>
	}
}
 8004e6c:	bf00      	nop
 8004e6e:	bf00      	nop
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	2000057c 	.word	0x2000057c

08004e7c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8004e82:	2300      	movs	r3, #0
 8004e84:	71fb      	strb	r3, [r7, #7]
 8004e86:	e014      	b.n	8004eb2 <OLED_Clear+0x36>
 8004e88:	2300      	movs	r3, #0
 8004e8a:	71bb      	strb	r3, [r7, #6]
 8004e8c:	e00a      	b.n	8004ea4 <OLED_Clear+0x28>
 8004e8e:	79ba      	ldrb	r2, [r7, #6]
 8004e90:	79fb      	ldrb	r3, [r7, #7]
 8004e92:	490c      	ldr	r1, [pc, #48]	@ (8004ec4 <OLED_Clear+0x48>)
 8004e94:	00d2      	lsls	r2, r2, #3
 8004e96:	440a      	add	r2, r1
 8004e98:	4413      	add	r3, r2
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	701a      	strb	r2, [r3, #0]
 8004e9e:	79bb      	ldrb	r3, [r7, #6]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	71bb      	strb	r3, [r7, #6]
 8004ea4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	daf0      	bge.n	8004e8e <OLED_Clear+0x12>
 8004eac:	79fb      	ldrb	r3, [r7, #7]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	71fb      	strb	r3, [r7, #7]
 8004eb2:	79fb      	ldrb	r3, [r7, #7]
 8004eb4:	2b07      	cmp	r3, #7
 8004eb6:	d9e7      	bls.n	8004e88 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8004eb8:	f7ff ffa8 	bl	8004e0c <OLED_Refresh_Gram>
}
 8004ebc:	bf00      	nop
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	2000057c 	.word	0x2000057c

08004ec8 <OLED_Display_On>:

 /**************************************************************************
Turn On Display
**************************************************************************/  
void OLED_Display_On(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
	OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC Command
 8004ecc:	2100      	movs	r1, #0
 8004ece:	208d      	movs	r0, #141	@ 0x8d
 8004ed0:	f7ff ff4e 	bl	8004d70 <OLED_WR_Byte>
	OLED_WR_Byte(0X14,OLED_CMD);  //DCDC ON
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	2014      	movs	r0, #20
 8004ed8:	f7ff ff4a 	bl	8004d70 <OLED_WR_Byte>
	OLED_WR_Byte(0XAF,OLED_CMD);  //DISPLAY ON
 8004edc:	2100      	movs	r1, #0
 8004ede:	20af      	movs	r0, #175	@ 0xaf
 8004ee0:	f7ff ff46 	bl	8004d70 <OLED_WR_Byte>
}
 8004ee4:	bf00      	nop
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	4603      	mov	r3, r0
 8004ef0:	71fb      	strb	r3, [r7, #7]
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	71bb      	strb	r3, [r7, #6]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8004efa:	2300      	movs	r3, #0
 8004efc:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8004efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	db41      	blt.n	8004f8a <OLED_DrawPoint+0xa2>
 8004f06:	79bb      	ldrb	r3, [r7, #6]
 8004f08:	2b3f      	cmp	r3, #63	@ 0x3f
 8004f0a:	d83e      	bhi.n	8004f8a <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8004f0c:	79bb      	ldrb	r3, [r7, #6]
 8004f0e:	08db      	lsrs	r3, r3, #3
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	f1c3 0307 	rsb	r3, r3, #7
 8004f16:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8004f18:	79bb      	ldrb	r3, [r7, #6]
 8004f1a:	f003 0307 	and.w	r3, r3, #7
 8004f1e:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8004f20:	7b7b      	ldrb	r3, [r7, #13]
 8004f22:	f1c3 0307 	rsb	r3, r3, #7
 8004f26:	2201      	movs	r2, #1
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8004f2e:	797b      	ldrb	r3, [r7, #5]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d012      	beq.n	8004f5a <OLED_DrawPoint+0x72>
 8004f34:	79fa      	ldrb	r2, [r7, #7]
 8004f36:	7bbb      	ldrb	r3, [r7, #14]
 8004f38:	4917      	ldr	r1, [pc, #92]	@ (8004f98 <OLED_DrawPoint+0xb0>)
 8004f3a:	00d2      	lsls	r2, r2, #3
 8004f3c:	440a      	add	r2, r1
 8004f3e:	4413      	add	r3, r2
 8004f40:	7818      	ldrb	r0, [r3, #0]
 8004f42:	79fa      	ldrb	r2, [r7, #7]
 8004f44:	7bbb      	ldrb	r3, [r7, #14]
 8004f46:	7bf9      	ldrb	r1, [r7, #15]
 8004f48:	4301      	orrs	r1, r0
 8004f4a:	b2c8      	uxtb	r0, r1
 8004f4c:	4912      	ldr	r1, [pc, #72]	@ (8004f98 <OLED_DrawPoint+0xb0>)
 8004f4e:	00d2      	lsls	r2, r2, #3
 8004f50:	440a      	add	r2, r1
 8004f52:	4413      	add	r3, r2
 8004f54:	4602      	mov	r2, r0
 8004f56:	701a      	strb	r2, [r3, #0]
 8004f58:	e018      	b.n	8004f8c <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8004f5a:	79fa      	ldrb	r2, [r7, #7]
 8004f5c:	7bbb      	ldrb	r3, [r7, #14]
 8004f5e:	490e      	ldr	r1, [pc, #56]	@ (8004f98 <OLED_DrawPoint+0xb0>)
 8004f60:	00d2      	lsls	r2, r2, #3
 8004f62:	440a      	add	r2, r1
 8004f64:	4413      	add	r3, r2
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	b25a      	sxtb	r2, r3
 8004f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	b25b      	sxtb	r3, r3
 8004f72:	4013      	ands	r3, r2
 8004f74:	b259      	sxtb	r1, r3
 8004f76:	79fa      	ldrb	r2, [r7, #7]
 8004f78:	7bbb      	ldrb	r3, [r7, #14]
 8004f7a:	b2c8      	uxtb	r0, r1
 8004f7c:	4906      	ldr	r1, [pc, #24]	@ (8004f98 <OLED_DrawPoint+0xb0>)
 8004f7e:	00d2      	lsls	r2, r2, #3
 8004f80:	440a      	add	r2, r1
 8004f82:	4413      	add	r3, r2
 8004f84:	4602      	mov	r2, r0
 8004f86:	701a      	strb	r2, [r3, #0]
 8004f88:	e000      	b.n	8004f8c <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8004f8a:	bf00      	nop
}
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	2000057c 	.word	0x2000057c

08004f9c <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8004f9c:	b590      	push	{r4, r7, lr}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	4604      	mov	r4, r0
 8004fa4:	4608      	mov	r0, r1
 8004fa6:	4611      	mov	r1, r2
 8004fa8:	461a      	mov	r2, r3
 8004faa:	4623      	mov	r3, r4
 8004fac:	71fb      	strb	r3, [r7, #7]
 8004fae:	4603      	mov	r3, r0
 8004fb0:	71bb      	strb	r3, [r7, #6]
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	717b      	strb	r3, [r7, #5]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8004fba:	79bb      	ldrb	r3, [r7, #6]
 8004fbc:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8004fbe:	797b      	ldrb	r3, [r7, #5]
 8004fc0:	3b20      	subs	r3, #32
 8004fc2:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	73bb      	strb	r3, [r7, #14]
 8004fc8:	e04d      	b.n	8005066 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8004fca:	793b      	ldrb	r3, [r7, #4]
 8004fcc:	2b0c      	cmp	r3, #12
 8004fce:	d10b      	bne.n	8004fe8 <OLED_ShowChar+0x4c>
 8004fd0:	797a      	ldrb	r2, [r7, #5]
 8004fd2:	7bb9      	ldrb	r1, [r7, #14]
 8004fd4:	4828      	ldr	r0, [pc, #160]	@ (8005078 <OLED_ShowChar+0xdc>)
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	4413      	add	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4403      	add	r3, r0
 8004fe0:	440b      	add	r3, r1
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	73fb      	strb	r3, [r7, #15]
 8004fe6:	e007      	b.n	8004ff8 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8004fe8:	797a      	ldrb	r2, [r7, #5]
 8004fea:	7bbb      	ldrb	r3, [r7, #14]
 8004fec:	4923      	ldr	r1, [pc, #140]	@ (800507c <OLED_ShowChar+0xe0>)
 8004fee:	0112      	lsls	r2, r2, #4
 8004ff0:	440a      	add	r2, r1
 8004ff2:	4413      	add	r3, r2
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	737b      	strb	r3, [r7, #13]
 8004ffc:	e02d      	b.n	800505a <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8004ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005002:	2b00      	cmp	r3, #0
 8005004:	da07      	bge.n	8005016 <OLED_ShowChar+0x7a>
 8005006:	f897 2020 	ldrb.w	r2, [r7, #32]
 800500a:	79b9      	ldrb	r1, [r7, #6]
 800500c:	79fb      	ldrb	r3, [r7, #7]
 800500e:	4618      	mov	r0, r3
 8005010:	f7ff ff6a 	bl	8004ee8 <OLED_DrawPoint>
 8005014:	e00c      	b.n	8005030 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8005016:	f897 3020 	ldrb.w	r3, [r7, #32]
 800501a:	2b00      	cmp	r3, #0
 800501c:	bf0c      	ite	eq
 800501e:	2301      	moveq	r3, #1
 8005020:	2300      	movne	r3, #0
 8005022:	b2db      	uxtb	r3, r3
 8005024:	461a      	mov	r2, r3
 8005026:	79b9      	ldrb	r1, [r7, #6]
 8005028:	79fb      	ldrb	r3, [r7, #7]
 800502a:	4618      	mov	r0, r3
 800502c:	f7ff ff5c 	bl	8004ee8 <OLED_DrawPoint>
			temp<<=1;
 8005030:	7bfb      	ldrb	r3, [r7, #15]
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	73fb      	strb	r3, [r7, #15]
			y++;
 8005036:	79bb      	ldrb	r3, [r7, #6]
 8005038:	3301      	adds	r3, #1
 800503a:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800503c:	79ba      	ldrb	r2, [r7, #6]
 800503e:	7b3b      	ldrb	r3, [r7, #12]
 8005040:	1ad2      	subs	r2, r2, r3
 8005042:	793b      	ldrb	r3, [r7, #4]
 8005044:	429a      	cmp	r2, r3
 8005046:	d105      	bne.n	8005054 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8005048:	7b3b      	ldrb	r3, [r7, #12]
 800504a:	71bb      	strb	r3, [r7, #6]
				x++;
 800504c:	79fb      	ldrb	r3, [r7, #7]
 800504e:	3301      	adds	r3, #1
 8005050:	71fb      	strb	r3, [r7, #7]
				break;
 8005052:	e005      	b.n	8005060 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8005054:	7b7b      	ldrb	r3, [r7, #13]
 8005056:	3301      	adds	r3, #1
 8005058:	737b      	strb	r3, [r7, #13]
 800505a:	7b7b      	ldrb	r3, [r7, #13]
 800505c:	2b07      	cmp	r3, #7
 800505e:	d9ce      	bls.n	8004ffe <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8005060:	7bbb      	ldrb	r3, [r7, #14]
 8005062:	3301      	adds	r3, #1
 8005064:	73bb      	strb	r3, [r7, #14]
 8005066:	7bba      	ldrb	r2, [r7, #14]
 8005068:	793b      	ldrb	r3, [r7, #4]
 800506a:	429a      	cmp	r2, r3
 800506c:	d3ad      	bcc.n	8004fca <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800506e:	bf00      	nop
 8005070:	bf00      	nop
 8005072:	3714      	adds	r7, #20
 8005074:	46bd      	mov	sp, r7
 8005076:	bd90      	pop	{r4, r7, pc}
 8005078:	08013894 	.word	0x08013894
 800507c:	08013d08 	.word	0x08013d08

08005080 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af02      	add	r7, sp, #8
 8005086:	4603      	mov	r3, r0
 8005088:	603a      	str	r2, [r7, #0]
 800508a:	71fb      	strb	r3, [r7, #7]
 800508c:	460b      	mov	r3, r1
 800508e:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8005090:	e01f      	b.n	80050d2 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8005092:	79fb      	ldrb	r3, [r7, #7]
 8005094:	2b7a      	cmp	r3, #122	@ 0x7a
 8005096:	d904      	bls.n	80050a2 <OLED_ShowString+0x22>
 8005098:	2300      	movs	r3, #0
 800509a:	71fb      	strb	r3, [r7, #7]
 800509c:	79bb      	ldrb	r3, [r7, #6]
 800509e:	3310      	adds	r3, #16
 80050a0:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 80050a2:	79bb      	ldrb	r3, [r7, #6]
 80050a4:	2b3a      	cmp	r3, #58	@ 0x3a
 80050a6:	d905      	bls.n	80050b4 <OLED_ShowString+0x34>
 80050a8:	2300      	movs	r3, #0
 80050aa:	71fb      	strb	r3, [r7, #7]
 80050ac:	79fb      	ldrb	r3, [r7, #7]
 80050ae:	71bb      	strb	r3, [r7, #6]
 80050b0:	f7ff fee4 	bl	8004e7c <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781a      	ldrb	r2, [r3, #0]
 80050b8:	79b9      	ldrb	r1, [r7, #6]
 80050ba:	79f8      	ldrb	r0, [r7, #7]
 80050bc:	2301      	movs	r3, #1
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	230c      	movs	r3, #12
 80050c2:	f7ff ff6b 	bl	8004f9c <OLED_ShowChar>
        x+=8;
 80050c6:	79fb      	ldrb	r3, [r7, #7]
 80050c8:	3308      	adds	r3, #8
 80050ca:	71fb      	strb	r3, [r7, #7]
        p++;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	3301      	adds	r3, #1
 80050d0:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1db      	bne.n	8005092 <OLED_ShowString+0x12>
    }  
}	 
 80050da:	bf00      	nop
 80050dc:	bf00      	nop
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <OLED_DrawRect>:
/**************************************************************************
Show The Shape
**************************************************************************/
void OLED_DrawRect(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, bool color) {
 80050e4:	b590      	push	{r4, r7, lr}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	4604      	mov	r4, r0
 80050ec:	4608      	mov	r0, r1
 80050ee:	4611      	mov	r1, r2
 80050f0:	461a      	mov	r2, r3
 80050f2:	4623      	mov	r3, r4
 80050f4:	71fb      	strb	r3, [r7, #7]
 80050f6:	4603      	mov	r3, r0
 80050f8:	71bb      	strb	r3, [r7, #6]
 80050fa:	460b      	mov	r3, r1
 80050fc:	717b      	strb	r3, [r7, #5]
 80050fe:	4613      	mov	r3, r2
 8005100:	713b      	strb	r3, [r7, #4]
    // Draw horizontal lines
    for (uint8_t x = x1; x <= x2; x++) {
 8005102:	79fb      	ldrb	r3, [r7, #7]
 8005104:	73fb      	strb	r3, [r7, #15]
 8005106:	e010      	b.n	800512a <OLED_DrawRect+0x46>
        OLED_DrawPoint(x, y1, color); // Draw top border
 8005108:	f897 2020 	ldrb.w	r2, [r7, #32]
 800510c:	79b9      	ldrb	r1, [r7, #6]
 800510e:	7bfb      	ldrb	r3, [r7, #15]
 8005110:	4618      	mov	r0, r3
 8005112:	f7ff fee9 	bl	8004ee8 <OLED_DrawPoint>
        OLED_DrawPoint(x, y2, color); // Draw bottom border
 8005116:	f897 2020 	ldrb.w	r2, [r7, #32]
 800511a:	7939      	ldrb	r1, [r7, #4]
 800511c:	7bfb      	ldrb	r3, [r7, #15]
 800511e:	4618      	mov	r0, r3
 8005120:	f7ff fee2 	bl	8004ee8 <OLED_DrawPoint>
    for (uint8_t x = x1; x <= x2; x++) {
 8005124:	7bfb      	ldrb	r3, [r7, #15]
 8005126:	3301      	adds	r3, #1
 8005128:	73fb      	strb	r3, [r7, #15]
 800512a:	7bfa      	ldrb	r2, [r7, #15]
 800512c:	797b      	ldrb	r3, [r7, #5]
 800512e:	429a      	cmp	r2, r3
 8005130:	d9ea      	bls.n	8005108 <OLED_DrawRect+0x24>
    }

    // Draw vertical lines
    for (uint8_t y = y1; y <= y2; y++) {
 8005132:	79bb      	ldrb	r3, [r7, #6]
 8005134:	73bb      	strb	r3, [r7, #14]
 8005136:	e010      	b.n	800515a <OLED_DrawRect+0x76>
        OLED_DrawPoint(x1, y, color); // Draw left border
 8005138:	f897 2020 	ldrb.w	r2, [r7, #32]
 800513c:	7bb9      	ldrb	r1, [r7, #14]
 800513e:	79fb      	ldrb	r3, [r7, #7]
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff fed1 	bl	8004ee8 <OLED_DrawPoint>
        OLED_DrawPoint(x2, y, color); // Draw right border
 8005146:	f897 2020 	ldrb.w	r2, [r7, #32]
 800514a:	7bb9      	ldrb	r1, [r7, #14]
 800514c:	797b      	ldrb	r3, [r7, #5]
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff feca 	bl	8004ee8 <OLED_DrawPoint>
    for (uint8_t y = y1; y <= y2; y++) {
 8005154:	7bbb      	ldrb	r3, [r7, #14]
 8005156:	3301      	adds	r3, #1
 8005158:	73bb      	strb	r3, [r7, #14]
 800515a:	7bba      	ldrb	r2, [r7, #14]
 800515c:	793b      	ldrb	r3, [r7, #4]
 800515e:	429a      	cmp	r2, r3
 8005160:	d9ea      	bls.n	8005138 <OLED_DrawRect+0x54>
    }
}
 8005162:	bf00      	nop
 8005164:	bf00      	nop
 8005166:	3714      	adds	r7, #20
 8005168:	46bd      	mov	sp, r7
 800516a:	bd90      	pop	{r4, r7, pc}

0800516c <OLED_DrawRectWithFill>:

void OLED_DrawRectWithFill(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, bool color) {
 800516c:	b590      	push	{r4, r7, lr}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	4604      	mov	r4, r0
 8005174:	4608      	mov	r0, r1
 8005176:	4611      	mov	r1, r2
 8005178:	461a      	mov	r2, r3
 800517a:	4623      	mov	r3, r4
 800517c:	71fb      	strb	r3, [r7, #7]
 800517e:	4603      	mov	r3, r0
 8005180:	71bb      	strb	r3, [r7, #6]
 8005182:	460b      	mov	r3, r1
 8005184:	717b      	strb	r3, [r7, #5]
 8005186:	4613      	mov	r3, r2
 8005188:	713b      	strb	r3, [r7, #4]
    // Draw borders
    for (uint8_t x = x1; x <= x2; x++) {
 800518a:	79fb      	ldrb	r3, [r7, #7]
 800518c:	73fb      	strb	r3, [r7, #15]
 800518e:	e010      	b.n	80051b2 <OLED_DrawRectWithFill+0x46>
        OLED_DrawPoint(x, y1, color); // Draw top border
 8005190:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005194:	79b9      	ldrb	r1, [r7, #6]
 8005196:	7bfb      	ldrb	r3, [r7, #15]
 8005198:	4618      	mov	r0, r3
 800519a:	f7ff fea5 	bl	8004ee8 <OLED_DrawPoint>
        OLED_DrawPoint(x, y2, color); // Draw bottom border
 800519e:	f897 2020 	ldrb.w	r2, [r7, #32]
 80051a2:	7939      	ldrb	r1, [r7, #4]
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff fe9e 	bl	8004ee8 <OLED_DrawPoint>
    for (uint8_t x = x1; x <= x2; x++) {
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
 80051ae:	3301      	adds	r3, #1
 80051b0:	73fb      	strb	r3, [r7, #15]
 80051b2:	7bfa      	ldrb	r2, [r7, #15]
 80051b4:	797b      	ldrb	r3, [r7, #5]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d9ea      	bls.n	8005190 <OLED_DrawRectWithFill+0x24>
    }

    for (uint8_t y = y1; y <= y2; y++) {
 80051ba:	79bb      	ldrb	r3, [r7, #6]
 80051bc:	73bb      	strb	r3, [r7, #14]
 80051be:	e010      	b.n	80051e2 <OLED_DrawRectWithFill+0x76>
        OLED_DrawPoint(x1, y, color); // Draw left border
 80051c0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80051c4:	7bb9      	ldrb	r1, [r7, #14]
 80051c6:	79fb      	ldrb	r3, [r7, #7]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7ff fe8d 	bl	8004ee8 <OLED_DrawPoint>
        OLED_DrawPoint(x2, y, color); // Draw right border
 80051ce:	f897 2020 	ldrb.w	r2, [r7, #32]
 80051d2:	7bb9      	ldrb	r1, [r7, #14]
 80051d4:	797b      	ldrb	r3, [r7, #5]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff fe86 	bl	8004ee8 <OLED_DrawPoint>
    for (uint8_t y = y1; y <= y2; y++) {
 80051dc:	7bbb      	ldrb	r3, [r7, #14]
 80051de:	3301      	adds	r3, #1
 80051e0:	73bb      	strb	r3, [r7, #14]
 80051e2:	7bba      	ldrb	r2, [r7, #14]
 80051e4:	793b      	ldrb	r3, [r7, #4]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d9ea      	bls.n	80051c0 <OLED_DrawRectWithFill+0x54>
    }

    // Fill the interior
    for (uint8_t y = y1 + 1; y < y2; y++) {
 80051ea:	79bb      	ldrb	r3, [r7, #6]
 80051ec:	3301      	adds	r3, #1
 80051ee:	737b      	strb	r3, [r7, #13]
 80051f0:	e014      	b.n	800521c <OLED_DrawRectWithFill+0xb0>
        for (uint8_t x = x1 + 1; x < x2; x++) {
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	3301      	adds	r3, #1
 80051f6:	733b      	strb	r3, [r7, #12]
 80051f8:	e009      	b.n	800520e <OLED_DrawRectWithFill+0xa2>
            OLED_DrawPoint(x, y, color); // Draw points within the rectangle
 80051fa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80051fe:	7b79      	ldrb	r1, [r7, #13]
 8005200:	7b3b      	ldrb	r3, [r7, #12]
 8005202:	4618      	mov	r0, r3
 8005204:	f7ff fe70 	bl	8004ee8 <OLED_DrawPoint>
        for (uint8_t x = x1 + 1; x < x2; x++) {
 8005208:	7b3b      	ldrb	r3, [r7, #12]
 800520a:	3301      	adds	r3, #1
 800520c:	733b      	strb	r3, [r7, #12]
 800520e:	7b3a      	ldrb	r2, [r7, #12]
 8005210:	797b      	ldrb	r3, [r7, #5]
 8005212:	429a      	cmp	r2, r3
 8005214:	d3f1      	bcc.n	80051fa <OLED_DrawRectWithFill+0x8e>
    for (uint8_t y = y1 + 1; y < y2; y++) {
 8005216:	7b7b      	ldrb	r3, [r7, #13]
 8005218:	3301      	adds	r3, #1
 800521a:	737b      	strb	r3, [r7, #13]
 800521c:	7b7a      	ldrb	r2, [r7, #13]
 800521e:	793b      	ldrb	r3, [r7, #4]
 8005220:	429a      	cmp	r2, r3
 8005222:	d3e6      	bcc.n	80051f2 <OLED_DrawRectWithFill+0x86>
        }
    }
}
 8005224:	bf00      	nop
 8005226:	bf00      	nop
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	bd90      	pop	{r4, r7, pc}

0800522e <OLED_DrawVerticalLine>:
    for (uint8_t i = x; i < x + length; i++) {
        OLED_DrawPoint(i, y, 1);
    }
}

void OLED_DrawVerticalLine(uint8_t x, uint8_t y, uint8_t length) {
 800522e:	b580      	push	{r7, lr}
 8005230:	b084      	sub	sp, #16
 8005232:	af00      	add	r7, sp, #0
 8005234:	4603      	mov	r3, r0
 8005236:	71fb      	strb	r3, [r7, #7]
 8005238:	460b      	mov	r3, r1
 800523a:	71bb      	strb	r3, [r7, #6]
 800523c:	4613      	mov	r3, r2
 800523e:	717b      	strb	r3, [r7, #5]
    for (uint8_t i = y; i < y + length; i++) {
 8005240:	79bb      	ldrb	r3, [r7, #6]
 8005242:	73fb      	strb	r3, [r7, #15]
 8005244:	e008      	b.n	8005258 <OLED_DrawVerticalLine+0x2a>
        OLED_DrawPoint(x, i, 1);
 8005246:	7bf9      	ldrb	r1, [r7, #15]
 8005248:	79fb      	ldrb	r3, [r7, #7]
 800524a:	2201      	movs	r2, #1
 800524c:	4618      	mov	r0, r3
 800524e:	f7ff fe4b 	bl	8004ee8 <OLED_DrawPoint>
    for (uint8_t i = y; i < y + length; i++) {
 8005252:	7bfb      	ldrb	r3, [r7, #15]
 8005254:	3301      	adds	r3, #1
 8005256:	73fb      	strb	r3, [r7, #15]
 8005258:	7bfa      	ldrb	r2, [r7, #15]
 800525a:	79b9      	ldrb	r1, [r7, #6]
 800525c:	797b      	ldrb	r3, [r7, #5]
 800525e:	440b      	add	r3, r1
 8005260:	429a      	cmp	r2, r3
 8005262:	dbf0      	blt.n	8005246 <OLED_DrawVerticalLine+0x18>
    }
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
	...

08005270 <OLED_Init>:

void OLED_Init(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8005274:	f003 fe46 	bl	8008f04 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8005278:	4b42      	ldr	r3, [pc, #264]	@ (8005384 <OLED_Init+0x114>)
 800527a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800527c:	4a41      	ldr	r2, [pc, #260]	@ (8005384 <OLED_Init+0x114>)
 800527e:	f023 0301 	bic.w	r3, r3, #1
 8005282:	6713      	str	r3, [r2, #112]	@ 0x70
 8005284:	4b3f      	ldr	r3, [pc, #252]	@ (8005384 <OLED_Init+0x114>)
 8005286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005288:	4a3e      	ldr	r2, [pc, #248]	@ (8005384 <OLED_Init+0x114>)
 800528a:	f023 0304 	bic.w	r3, r3, #4
 800528e:	6713      	str	r3, [r2, #112]	@ 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8005290:	f003 fe4c 	bl	8008f2c <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8005294:	2200      	movs	r2, #0
 8005296:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800529a:	483b      	ldr	r0, [pc, #236]	@ (8005388 <OLED_Init+0x118>)
 800529c:	f002 fcae 	bl	8007bfc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80052a0:	2064      	movs	r0, #100	@ 0x64
 80052a2:	f001 f9d7 	bl	8006654 <HAL_Delay>
	OLED_RST_Set();
 80052a6:	2201      	movs	r2, #1
 80052a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80052ac:	4836      	ldr	r0, [pc, #216]	@ (8005388 <OLED_Init+0x118>)
 80052ae:	f002 fca5 	bl	8007bfc <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 80052b2:	2100      	movs	r1, #0
 80052b4:	20ae      	movs	r0, #174	@ 0xae
 80052b6:	f7ff fd5b 	bl	8004d70 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 80052ba:	2100      	movs	r1, #0
 80052bc:	20d5      	movs	r0, #213	@ 0xd5
 80052be:	f7ff fd57 	bl	8004d70 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80052c2:	2100      	movs	r1, #0
 80052c4:	2050      	movs	r0, #80	@ 0x50
 80052c6:	f7ff fd53 	bl	8004d70 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 80052ca:	2100      	movs	r1, #0
 80052cc:	20a8      	movs	r0, #168	@ 0xa8
 80052ce:	f7ff fd4f 	bl	8004d70 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 80052d2:	2100      	movs	r1, #0
 80052d4:	203f      	movs	r0, #63	@ 0x3f
 80052d6:	f7ff fd4b 	bl	8004d70 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 80052da:	2100      	movs	r1, #0
 80052dc:	20d3      	movs	r0, #211	@ 0xd3
 80052de:	f7ff fd47 	bl	8004d70 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 80052e2:	2100      	movs	r1, #0
 80052e4:	2000      	movs	r0, #0
 80052e6:	f7ff fd43 	bl	8004d70 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 80052ea:	2100      	movs	r1, #0
 80052ec:	2040      	movs	r0, #64	@ 0x40
 80052ee:	f7ff fd3f 	bl	8004d70 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 80052f2:	2100      	movs	r1, #0
 80052f4:	208d      	movs	r0, #141	@ 0x8d
 80052f6:	f7ff fd3b 	bl	8004d70 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 80052fa:	2100      	movs	r1, #0
 80052fc:	2014      	movs	r0, #20
 80052fe:	f7ff fd37 	bl	8004d70 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8005302:	2100      	movs	r1, #0
 8005304:	2020      	movs	r0, #32
 8005306:	f7ff fd33 	bl	8004d70 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800530a:	2100      	movs	r1, #0
 800530c:	2002      	movs	r0, #2
 800530e:	f7ff fd2f 	bl	8004d70 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8005312:	2100      	movs	r1, #0
 8005314:	20a1      	movs	r0, #161	@ 0xa1
 8005316:	f7ff fd2b 	bl	8004d70 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800531a:	2100      	movs	r1, #0
 800531c:	20c0      	movs	r0, #192	@ 0xc0
 800531e:	f7ff fd27 	bl	8004d70 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8005322:	2100      	movs	r1, #0
 8005324:	20da      	movs	r0, #218	@ 0xda
 8005326:	f7ff fd23 	bl	8004d70 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800532a:	2100      	movs	r1, #0
 800532c:	2012      	movs	r0, #18
 800532e:	f7ff fd1f 	bl	8004d70 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8005332:	2100      	movs	r1, #0
 8005334:	2081      	movs	r0, #129	@ 0x81
 8005336:	f7ff fd1b 	bl	8004d70 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800533a:	2100      	movs	r1, #0
 800533c:	20ef      	movs	r0, #239	@ 0xef
 800533e:	f7ff fd17 	bl	8004d70 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8005342:	2100      	movs	r1, #0
 8005344:	20d9      	movs	r0, #217	@ 0xd9
 8005346:	f7ff fd13 	bl	8004d70 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800534a:	2100      	movs	r1, #0
 800534c:	20f1      	movs	r0, #241	@ 0xf1
 800534e:	f7ff fd0f 	bl	8004d70 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8005352:	2100      	movs	r1, #0
 8005354:	20db      	movs	r0, #219	@ 0xdb
 8005356:	f7ff fd0b 	bl	8004d70 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800535a:	2100      	movs	r1, #0
 800535c:	2030      	movs	r0, #48	@ 0x30
 800535e:	f7ff fd07 	bl	8004d70 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8005362:	2100      	movs	r1, #0
 8005364:	20a4      	movs	r0, #164	@ 0xa4
 8005366:	f7ff fd03 	bl	8004d70 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800536a:	2100      	movs	r1, #0
 800536c:	20a6      	movs	r0, #166	@ 0xa6
 800536e:	f7ff fcff 	bl	8004d70 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8005372:	2100      	movs	r1, #0
 8005374:	20af      	movs	r0, #175	@ 0xaf
 8005376:	f7ff fcfb 	bl	8004d70 <OLED_WR_Byte>
	OLED_Clear(); 
 800537a:	f7ff fd7f 	bl	8004e7c <OLED_Clear>
}
 800537e:	bf00      	nop
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	40023800 	.word	0x40023800
 8005388:	40020c00 	.word	0x40020c00

0800538c <_Z8PID_initP12pid_type_defhPKfff>:
  * @param[in]      max_out: pid最大输出
  * @param[in]      max_iout: pid最大积分输出
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	6178      	str	r0, [r7, #20]
 8005394:	460b      	mov	r3, r1
 8005396:	60fa      	str	r2, [r7, #12]
 8005398:	ed87 0a02 	vstr	s0, [r7, #8]
 800539c:	edc7 0a01 	vstr	s1, [r7, #4]
 80053a0:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d042      	beq.n	800542e <_Z8PID_initP12pid_type_defhPKfff+0xa2>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d03f      	beq.n	800542e <_Z8PID_initP12pid_type_defhPKfff+0xa2>
    {
        return;
    }
    pid->mode = mode;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	7cfa      	ldrb	r2, [r7, #19]
 80053b2:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	3304      	adds	r3, #4
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	3308      	adds	r3, #8
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f04f 0200 	mov.w	r2, #0
 80053e2:	639a      	str	r2, [r3, #56]	@ 0x38
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f04f 0200 	mov.w	r2, #0
 80053fa:	621a      	str	r2, [r3, #32]
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	6a1a      	ldr	r2, [r3, #32]
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	629a      	str	r2, [r3, #40]	@ 0x28
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	625a      	str	r2, [r3, #36]	@ 0x24
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	645a      	str	r2, [r3, #68]	@ 0x44
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	641a      	str	r2, [r3, #64]	@ 0x40
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800542c:	e000      	b.n	8005430 <_Z8PID_initP12pid_type_defhPKfff+0xa4>
        return;
 800542e:	bf00      	nop
}
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <_Z8PID_calcP12pid_type_defff>:
  * @param[in]      ref: 反馈数据
  * @param[in]      set: 设定值
  * @retval         pid输出
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 800543a:	b480      	push	{r7}
 800543c:	b085      	sub	sp, #20
 800543e:	af00      	add	r7, sp, #0
 8005440:	60f8      	str	r0, [r7, #12]
 8005442:	ed87 0a02 	vstr	s0, [r7, #8]
 8005446:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d102      	bne.n	8005456 <_Z8PID_calcP12pid_type_defff+0x1c>
    {
        return 0.0f;
 8005450:	f04f 0300 	mov.w	r3, #0
 8005454:	e130      	b.n	80056b8 <_Z8PID_calcP12pid_type_defff+0x27e>
    }

    pid->error[2] = pid->error[1];
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->error[1] = pid->error[0];
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->set = set;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 8005472:	ed97 7a01 	vldr	s14, [r7, #4]
 8005476:	edd7 7a02 	vldr	s15, [r7, #8]
 800547a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (pid->mode == PID_POSITION)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	f040 8095 	bne.w	80055b8 <_Z8PID_calcP12pid_type_defff+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	ed93 7a01 	vldr	s14, [r3, #4]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800549a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout += pid->Ki * pid->error[0];
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	edd3 6a02 	vldr	s13, [r3, #8]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80054b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80054e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	ed93 7a03 	vldr	s14, [r3, #12]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80054f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	edd3 7a05 	vldr	s15, [r3, #20]
 800550c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005514:	dd04      	ble.n	8005520 <_Z8PID_calcP12pid_type_defff+0xe6>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	695a      	ldr	r2, [r3, #20]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	629a      	str	r2, [r3, #40]	@ 0x28
 800551e:	e014      	b.n	800554a <_Z8PID_calcP12pid_type_defff+0x110>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	edd3 7a05 	vldr	s15, [r3, #20]
 800552c:	eef1 7a67 	vneg.f32	s15, s15
 8005530:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005538:	d507      	bpl.n	800554a <_Z8PID_calcP12pid_type_defff+0x110>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	edd3 7a05 	vldr	s15, [r3, #20]
 8005540:	eef1 7a67 	vneg.f32	s15, s15
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8005556:	ee37 7a27 	vadd.f32	s14, s14, s15
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	ed93 7a08 	vldr	s14, [r3, #32]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	edd3 7a04 	vldr	s15, [r3, #16]
 8005576:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800557a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800557e:	dd04      	ble.n	800558a <_Z8PID_calcP12pid_type_defff+0x150>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	691a      	ldr	r2, [r3, #16]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	621a      	str	r2, [r3, #32]
 8005588:	e094      	b.n	80056b4 <_Z8PID_calcP12pid_type_defff+0x27a>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	ed93 7a08 	vldr	s14, [r3, #32]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	edd3 7a04 	vldr	s15, [r3, #16]
 8005596:	eef1 7a67 	vneg.f32	s15, s15
 800559a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800559e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a2:	f140 8087 	bpl.w	80056b4 <_Z8PID_calcP12pid_type_defff+0x27a>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	edd3 7a04 	vldr	s15, [r3, #16]
 80055ac:	eef1 7a67 	vneg.f32	s15, s15
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	edc3 7a08 	vstr	s15, [r3, #32]
 80055b6:	e07d      	b.n	80056b4 <_Z8PID_calcP12pid_type_defff+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d179      	bne.n	80056b4 <_Z8PID_calcP12pid_type_defff+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	ed93 7a01 	vldr	s14, [r3, #4]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80055d2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80055d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout = pid->Ki * pid->error[0];
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	ed93 7a02 	vldr	s14, [r3, #8]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80055ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005612:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005616:	ee37 7a67 	vsub.f32	s14, s14, s15
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8005620:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	ed93 7a03 	vldr	s14, [r3, #12]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8005636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	ed93 7a08 	vldr	s14, [r3, #32]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8005652:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800565c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	ed93 7a08 	vldr	s14, [r3, #32]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	edd3 7a04 	vldr	s15, [r3, #16]
 8005676:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800567a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800567e:	dd04      	ble.n	800568a <_Z8PID_calcP12pid_type_defff+0x250>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	691a      	ldr	r2, [r3, #16]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	621a      	str	r2, [r3, #32]
 8005688:	e014      	b.n	80056b4 <_Z8PID_calcP12pid_type_defff+0x27a>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	ed93 7a08 	vldr	s14, [r3, #32]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	edd3 7a04 	vldr	s15, [r3, #16]
 8005696:	eef1 7a67 	vneg.f32	s15, s15
 800569a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800569e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056a2:	d507      	bpl.n	80056b4 <_Z8PID_calcP12pid_type_defff+0x27a>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80056aa:	eef1 7a67 	vneg.f32	s15, s15
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6a1b      	ldr	r3, [r3, #32]
}
 80056b8:	ee07 3a90 	vmov	s15, r3
 80056bc:	eeb0 0a67 	vmov.f32	s0, s15
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
	...

080056cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056d2:	2300      	movs	r3, #0
 80056d4:	607b      	str	r3, [r7, #4]
 80056d6:	4b12      	ldr	r3, [pc, #72]	@ (8005720 <HAL_MspInit+0x54>)
 80056d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056da:	4a11      	ldr	r2, [pc, #68]	@ (8005720 <HAL_MspInit+0x54>)
 80056dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80056e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80056e2:	4b0f      	ldr	r3, [pc, #60]	@ (8005720 <HAL_MspInit+0x54>)
 80056e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056ea:	607b      	str	r3, [r7, #4]
 80056ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80056ee:	2300      	movs	r3, #0
 80056f0:	603b      	str	r3, [r7, #0]
 80056f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005720 <HAL_MspInit+0x54>)
 80056f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005720 <HAL_MspInit+0x54>)
 80056f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80056fe:	4b08      	ldr	r3, [pc, #32]	@ (8005720 <HAL_MspInit+0x54>)
 8005700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005706:	603b      	str	r3, [r7, #0]
 8005708:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800570a:	2200      	movs	r2, #0
 800570c:	210f      	movs	r1, #15
 800570e:	f06f 0001 	mvn.w	r0, #1
 8005712:	f001 fc9e 	bl	8007052 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005716:	bf00      	nop
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	40023800 	.word	0x40023800

08005724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005728:	bf00      	nop
 800572a:	e7fd      	b.n	8005728 <NMI_Handler+0x4>

0800572c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800572c:	b480      	push	{r7}
 800572e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005730:	bf00      	nop
 8005732:	e7fd      	b.n	8005730 <HardFault_Handler+0x4>

08005734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005734:	b480      	push	{r7}
 8005736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005738:	bf00      	nop
 800573a:	e7fd      	b.n	8005738 <MemManage_Handler+0x4>

0800573c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005740:	bf00      	nop
 8005742:	e7fd      	b.n	8005740 <BusFault_Handler+0x4>

08005744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005748:	bf00      	nop
 800574a:	e7fd      	b.n	8005748 <UsageFault_Handler+0x4>

0800574c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005750:	bf00      	nop
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800575e:	f000 ff59 	bl	8006614 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005762:	f009 fa89 	bl	800ec78 <xTaskGetSchedulerState>
 8005766:	4603      	mov	r3, r0
 8005768:	2b01      	cmp	r3, #1
 800576a:	d001      	beq.n	8005770 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800576c:	f00a f8bc 	bl	800f8e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005770:	bf00      	nop
 8005772:	bd80      	pop	{r7, pc}

08005774 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_PB_Pin);
 8005778:	2001      	movs	r0, #1
 800577a:	f002 fa59 	bl	8007c30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800577e:	bf00      	nop
 8005780:	bd80      	pop	{r7, pc}
	...

08005784 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005788:	4802      	ldr	r0, [pc, #8]	@ (8005794 <DMA1_Stream1_IRQHandler+0x10>)
 800578a:	f001 fe31 	bl	80073f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800578e:	bf00      	nop
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	20000bc0 	.word	0x20000bc0

08005798 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800579c:	4802      	ldr	r0, [pc, #8]	@ (80057a8 <DMA1_Stream3_IRQHandler+0x10>)
 800579e:	f001 fe27 	bl	80073f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80057a2:	bf00      	nop
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	20000c20 	.word	0x20000c20

080057ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80057b0:	4802      	ldr	r0, [pc, #8]	@ (80057bc <TIM3_IRQHandler+0x10>)
 80057b2:	f004 fc43 	bl	800a03c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80057b6:	bf00      	nop
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	200009c8 	.word	0x200009c8

080057c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80057c4:	4802      	ldr	r0, [pc, #8]	@ (80057d0 <USART3_IRQHandler+0x10>)
 80057c6:	f005 fe0b 	bl	800b3e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80057ca:	bf00      	nop
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	20000b78 	.word	0x20000b78

080057d4 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80057d8:	4802      	ldr	r0, [pc, #8]	@ (80057e4 <TIM8_CC_IRQHandler+0x10>)
 80057da:	f004 fc2f 	bl	800a03c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80057de:	bf00      	nop
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	20000aa0 	.word	0x20000aa0

080057e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
  return 1;
 80057ec:	2301      	movs	r3, #1
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <_kill>:

int _kill(int pid, int sig)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005802:	f00c f83b 	bl	801187c <__errno>
 8005806:	4603      	mov	r3, r0
 8005808:	2216      	movs	r2, #22
 800580a:	601a      	str	r2, [r3, #0]
  return -1;
 800580c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005810:	4618      	mov	r0, r3
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <_exit>:

void _exit (int status)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005820:	f04f 31ff 	mov.w	r1, #4294967295
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f7ff ffe7 	bl	80057f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800582a:	bf00      	nop
 800582c:	e7fd      	b.n	800582a <_exit+0x12>

0800582e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b086      	sub	sp, #24
 8005832:	af00      	add	r7, sp, #0
 8005834:	60f8      	str	r0, [r7, #12]
 8005836:	60b9      	str	r1, [r7, #8]
 8005838:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800583a:	2300      	movs	r3, #0
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	e00a      	b.n	8005856 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005840:	f3af 8000 	nop.w
 8005844:	4601      	mov	r1, r0
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	1c5a      	adds	r2, r3, #1
 800584a:	60ba      	str	r2, [r7, #8]
 800584c:	b2ca      	uxtb	r2, r1
 800584e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	3301      	adds	r3, #1
 8005854:	617b      	str	r3, [r7, #20]
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	429a      	cmp	r2, r3
 800585c:	dbf0      	blt.n	8005840 <_read+0x12>
  }

  return len;
 800585e:	687b      	ldr	r3, [r7, #4]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005874:	2300      	movs	r3, #0
 8005876:	617b      	str	r3, [r7, #20]
 8005878:	e009      	b.n	800588e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	60ba      	str	r2, [r7, #8]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	4618      	mov	r0, r3
 8005884:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	3301      	adds	r3, #1
 800588c:	617b      	str	r3, [r7, #20]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	429a      	cmp	r2, r3
 8005894:	dbf1      	blt.n	800587a <_write+0x12>
  }
  return len;
 8005896:	687b      	ldr	r3, [r7, #4]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3718      	adds	r7, #24
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <_close>:

int _close(int file)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80058a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80058c8:	605a      	str	r2, [r3, #4]
  return 0;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <_isatty>:

int _isatty(int file)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80058e0:	2301      	movs	r3, #1
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b085      	sub	sp, #20
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	60f8      	str	r0, [r7, #12]
 80058f6:	60b9      	str	r1, [r7, #8]
 80058f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005910:	4a14      	ldr	r2, [pc, #80]	@ (8005964 <_sbrk+0x5c>)
 8005912:	4b15      	ldr	r3, [pc, #84]	@ (8005968 <_sbrk+0x60>)
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800591c:	4b13      	ldr	r3, [pc, #76]	@ (800596c <_sbrk+0x64>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d102      	bne.n	800592a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005924:	4b11      	ldr	r3, [pc, #68]	@ (800596c <_sbrk+0x64>)
 8005926:	4a12      	ldr	r2, [pc, #72]	@ (8005970 <_sbrk+0x68>)
 8005928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800592a:	4b10      	ldr	r3, [pc, #64]	@ (800596c <_sbrk+0x64>)
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4413      	add	r3, r2
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	429a      	cmp	r2, r3
 8005936:	d207      	bcs.n	8005948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005938:	f00b ffa0 	bl	801187c <__errno>
 800593c:	4603      	mov	r3, r0
 800593e:	220c      	movs	r2, #12
 8005940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005942:	f04f 33ff 	mov.w	r3, #4294967295
 8005946:	e009      	b.n	800595c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005948:	4b08      	ldr	r3, [pc, #32]	@ (800596c <_sbrk+0x64>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800594e:	4b07      	ldr	r3, [pc, #28]	@ (800596c <_sbrk+0x64>)
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4413      	add	r3, r2
 8005956:	4a05      	ldr	r2, [pc, #20]	@ (800596c <_sbrk+0x64>)
 8005958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800595a:	68fb      	ldr	r3, [r7, #12]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3718      	adds	r7, #24
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	20020000 	.word	0x20020000
 8005968:	00000400 	.word	0x00000400
 800596c:	2000097c 	.word	0x2000097c
 8005970:	20005728 	.word	0x20005728

08005974 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005974:	b480      	push	{r7}
 8005976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005978:	4b06      	ldr	r3, [pc, #24]	@ (8005994 <SystemInit+0x20>)
 800597a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800597e:	4a05      	ldr	r2, [pc, #20]	@ (8005994 <SystemInit+0x20>)
 8005980:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005984:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005988:	bf00      	nop
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	e000ed00 	.word	0xe000ed00

08005998 <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b08c      	sub	sp, #48	@ 0x30
 800599c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800599e:	f107 030c 	add.w	r3, r7, #12
 80059a2:	2224      	movs	r2, #36	@ 0x24
 80059a4:	2100      	movs	r1, #0
 80059a6:	4618      	mov	r0, r3
 80059a8:	f00b fec2 	bl	8011730 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059ac:	1d3b      	adds	r3, r7, #4
 80059ae:	2200      	movs	r2, #0
 80059b0:	601a      	str	r2, [r3, #0]
 80059b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80059b4:	4b21      	ldr	r3, [pc, #132]	@ (8005a3c <MX_TIM2_Init+0xa4>)
 80059b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80059ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80059bc:	4b1f      	ldr	r3, [pc, #124]	@ (8005a3c <MX_TIM2_Init+0xa4>)
 80059be:	2200      	movs	r2, #0
 80059c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059c2:	4b1e      	ldr	r3, [pc, #120]	@ (8005a3c <MX_TIM2_Init+0xa4>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80059c8:	4b1c      	ldr	r3, [pc, #112]	@ (8005a3c <MX_TIM2_Init+0xa4>)
 80059ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80059ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059d0:	4b1a      	ldr	r3, [pc, #104]	@ (8005a3c <MX_TIM2_Init+0xa4>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80059d6:	4b19      	ldr	r3, [pc, #100]	@ (8005a3c <MX_TIM2_Init+0xa4>)
 80059d8:	2200      	movs	r2, #0
 80059da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80059dc:	2303      	movs	r3, #3
 80059de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80059e0:	2300      	movs	r3, #0
 80059e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80059e4:	2301      	movs	r3, #1
 80059e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80059e8:	2300      	movs	r3, #0
 80059ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80059ec:	2300      	movs	r3, #0
 80059ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80059f0:	2300      	movs	r3, #0
 80059f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80059f4:	2301      	movs	r3, #1
 80059f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80059f8:	2300      	movs	r3, #0
 80059fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80059fc:	2300      	movs	r3, #0
 80059fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8005a00:	f107 030c 	add.w	r3, r7, #12
 8005a04:	4619      	mov	r1, r3
 8005a06:	480d      	ldr	r0, [pc, #52]	@ (8005a3c <MX_TIM2_Init+0xa4>)
 8005a08:	f004 f9e4 	bl	8009dd4 <HAL_TIM_Encoder_Init>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8005a12:	f7ff f9a6 	bl	8004d62 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a16:	2300      	movs	r3, #0
 8005a18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005a1e:	1d3b      	adds	r3, r7, #4
 8005a20:	4619      	mov	r1, r3
 8005a22:	4806      	ldr	r0, [pc, #24]	@ (8005a3c <MX_TIM2_Init+0xa4>)
 8005a24:	f005 facc 	bl	800afc0 <HAL_TIMEx_MasterConfigSynchronization>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8005a2e:	f7ff f998 	bl	8004d62 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005a32:	bf00      	nop
 8005a34:	3730      	adds	r7, #48	@ 0x30
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20000980 	.word	0x20000980

08005a40 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b090      	sub	sp, #64	@ 0x40
 8005a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005a46:	f107 031c 	add.w	r3, r7, #28
 8005a4a:	2224      	movs	r2, #36	@ 0x24
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f00b fe6e 	bl	8011730 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a54:	f107 0314 	add.w	r3, r7, #20
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005a5e:	1d3b      	adds	r3, r7, #4
 8005a60:	2200      	movs	r2, #0
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	605a      	str	r2, [r3, #4]
 8005a66:	609a      	str	r2, [r3, #8]
 8005a68:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8005b28 <MX_TIM3_Init+0xe8>)
 8005a6c:	4a2f      	ldr	r2, [pc, #188]	@ (8005b2c <MX_TIM3_Init+0xec>)
 8005a6e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005a70:	4b2d      	ldr	r3, [pc, #180]	@ (8005b28 <MX_TIM3_Init+0xe8>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a76:	4b2c      	ldr	r3, [pc, #176]	@ (8005b28 <MX_TIM3_Init+0xe8>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8005b28 <MX_TIM3_Init+0xe8>)
 8005a7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005a82:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a84:	4b28      	ldr	r3, [pc, #160]	@ (8005b28 <MX_TIM3_Init+0xe8>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a8a:	4b27      	ldr	r3, [pc, #156]	@ (8005b28 <MX_TIM3_Init+0xe8>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8005a90:	4825      	ldr	r0, [pc, #148]	@ (8005b28 <MX_TIM3_Init+0xe8>)
 8005a92:	f004 f827 	bl	8009ae4 <HAL_TIM_IC_Init>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d001      	beq.n	8005aa0 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8005a9c:	f7ff f961 	bl	8004d62 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	61fb      	str	r3, [r7, #28]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	623b      	str	r3, [r7, #32]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005aac:	2300      	movs	r3, #0
 8005aae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Filter = 0;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005abc:	2300      	movs	r3, #0
 8005abe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Filter = 0;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8005ac4:	f107 031c 	add.w	r3, r7, #28
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4817      	ldr	r0, [pc, #92]	@ (8005b28 <MX_TIM3_Init+0xe8>)
 8005acc:	f004 f982 	bl	8009dd4 <HAL_TIM_Encoder_Init>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8005ad6:	f7ff f944 	bl	8004d62 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ada:	2300      	movs	r3, #0
 8005adc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005ae2:	f107 0314 	add.w	r3, r7, #20
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	480f      	ldr	r0, [pc, #60]	@ (8005b28 <MX_TIM3_Init+0xe8>)
 8005aea:	f005 fa69 	bl	800afc0 <HAL_TIMEx_MasterConfigSynchronization>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d001      	beq.n	8005af8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8005af4:	f7ff f935 	bl	8004d62 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005af8:	2300      	movs	r3, #0
 8005afa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005afc:	2301      	movs	r3, #1
 8005afe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005b00:	2300      	movs	r3, #0
 8005b02:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8005b04:	2300      	movs	r3, #0
 8005b06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8005b08:	1d3b      	adds	r3, r7, #4
 8005b0a:	2208      	movs	r2, #8
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4806      	ldr	r0, [pc, #24]	@ (8005b28 <MX_TIM3_Init+0xe8>)
 8005b10:	f004 fb84 	bl	800a21c <HAL_TIM_IC_ConfigChannel>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8005b1a:	f7ff f922 	bl	8004d62 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005b1e:	bf00      	nop
 8005b20:	3740      	adds	r7, #64	@ 0x40
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	200009c8 	.word	0x200009c8
 8005b2c:	40000400 	.word	0x40000400

08005b30 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b08e      	sub	sp, #56	@ 0x38
 8005b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	605a      	str	r2, [r3, #4]
 8005b40:	609a      	str	r2, [r3, #8]
 8005b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b44:	f107 0320 	add.w	r3, r7, #32
 8005b48:	2200      	movs	r2, #0
 8005b4a:	601a      	str	r2, [r3, #0]
 8005b4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005b4e:	1d3b      	adds	r3, r7, #4
 8005b50:	2200      	movs	r2, #0
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	605a      	str	r2, [r3, #4]
 8005b56:	609a      	str	r2, [r3, #8]
 8005b58:	60da      	str	r2, [r3, #12]
 8005b5a:	611a      	str	r2, [r3, #16]
 8005b5c:	615a      	str	r2, [r3, #20]
 8005b5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005b60:	4b32      	ldr	r3, [pc, #200]	@ (8005c2c <MX_TIM4_Init+0xfc>)
 8005b62:	4a33      	ldr	r2, [pc, #204]	@ (8005c30 <MX_TIM4_Init+0x100>)
 8005b64:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005b66:	4b31      	ldr	r3, [pc, #196]	@ (8005c2c <MX_TIM4_Init+0xfc>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b6c:	4b2f      	ldr	r3, [pc, #188]	@ (8005c2c <MX_TIM4_Init+0xfc>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7199;
 8005b72:	4b2e      	ldr	r3, [pc, #184]	@ (8005c2c <MX_TIM4_Init+0xfc>)
 8005b74:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8005b78:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b7a:	4b2c      	ldr	r3, [pc, #176]	@ (8005c2c <MX_TIM4_Init+0xfc>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b80:	4b2a      	ldr	r3, [pc, #168]	@ (8005c2c <MX_TIM4_Init+0xfc>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005b86:	4829      	ldr	r0, [pc, #164]	@ (8005c2c <MX_TIM4_Init+0xfc>)
 8005b88:	f003 fe3c 	bl	8009804 <HAL_TIM_Base_Init>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8005b92:	f7ff f8e6 	bl	8004d62 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005b9c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	4822      	ldr	r0, [pc, #136]	@ (8005c2c <MX_TIM4_Init+0xfc>)
 8005ba4:	f004 fc98 	bl	800a4d8 <HAL_TIM_ConfigClockSource>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8005bae:	f7ff f8d8 	bl	8004d62 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005bb2:	481e      	ldr	r0, [pc, #120]	@ (8005c2c <MX_TIM4_Init+0xfc>)
 8005bb4:	f003 fe75 	bl	80098a2 <HAL_TIM_PWM_Init>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8005bbe:	f7ff f8d0 	bl	8004d62 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005bca:	f107 0320 	add.w	r3, r7, #32
 8005bce:	4619      	mov	r1, r3
 8005bd0:	4816      	ldr	r0, [pc, #88]	@ (8005c2c <MX_TIM4_Init+0xfc>)
 8005bd2:	f005 f9f5 	bl	800afc0 <HAL_TIMEx_MasterConfigSynchronization>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8005bdc:	f7ff f8c1 	bl	8004d62 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005be0:	2360      	movs	r3, #96	@ 0x60
 8005be2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005be4:	2300      	movs	r3, #0
 8005be6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8005be8:	2302      	movs	r3, #2
 8005bea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005bec:	2300      	movs	r3, #0
 8005bee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005bf0:	1d3b      	adds	r3, r7, #4
 8005bf2:	2208      	movs	r2, #8
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	480d      	ldr	r0, [pc, #52]	@ (8005c2c <MX_TIM4_Init+0xfc>)
 8005bf8:	f004 fbac 	bl	800a354 <HAL_TIM_PWM_ConfigChannel>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8005c02:	f7ff f8ae 	bl	8004d62 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005c06:	1d3b      	adds	r3, r7, #4
 8005c08:	220c      	movs	r2, #12
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	4807      	ldr	r0, [pc, #28]	@ (8005c2c <MX_TIM4_Init+0xfc>)
 8005c0e:	f004 fba1 	bl	800a354 <HAL_TIM_PWM_ConfigChannel>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8005c18:	f7ff f8a3 	bl	8004d62 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005c1c:	4803      	ldr	r0, [pc, #12]	@ (8005c2c <MX_TIM4_Init+0xfc>)
 8005c1e:	f000 fb03 	bl	8006228 <HAL_TIM_MspPostInit>

}
 8005c22:	bf00      	nop
 8005c24:	3738      	adds	r7, #56	@ 0x38
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	20000a10 	.word	0x20000a10
 8005c30:	40000800 	.word	0x40000800

08005c34 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c3a:	463b      	mov	r3, r7
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	601a      	str	r2, [r3, #0]
 8005c40:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005c42:	4b15      	ldr	r3, [pc, #84]	@ (8005c98 <MX_TIM6_Init+0x64>)
 8005c44:	4a15      	ldr	r2, [pc, #84]	@ (8005c9c <MX_TIM6_Init+0x68>)
 8005c46:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8005c48:	4b13      	ldr	r3, [pc, #76]	@ (8005c98 <MX_TIM6_Init+0x64>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c4e:	4b12      	ldr	r3, [pc, #72]	@ (8005c98 <MX_TIM6_Init+0x64>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8005c54:	4b10      	ldr	r3, [pc, #64]	@ (8005c98 <MX_TIM6_Init+0x64>)
 8005c56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c5a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8005c98 <MX_TIM6_Init+0x64>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005c62:	480d      	ldr	r0, [pc, #52]	@ (8005c98 <MX_TIM6_Init+0x64>)
 8005c64:	f003 fdce 	bl	8009804 <HAL_TIM_Base_Init>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8005c6e:	f7ff f878 	bl	8004d62 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c72:	2300      	movs	r3, #0
 8005c74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c76:	2300      	movs	r3, #0
 8005c78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005c7a:	463b      	mov	r3, r7
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	4806      	ldr	r0, [pc, #24]	@ (8005c98 <MX_TIM6_Init+0x64>)
 8005c80:	f005 f99e 	bl	800afc0 <HAL_TIMEx_MasterConfigSynchronization>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8005c8a:	f7ff f86a 	bl	8004d62 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005c8e:	bf00      	nop
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	20000a58 	.word	0x20000a58
 8005c9c:	40001000 	.word	0x40001000

08005ca0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b08a      	sub	sp, #40	@ 0x28
 8005ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005ca6:	f107 0318 	add.w	r3, r7, #24
 8005caa:	2200      	movs	r2, #0
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	605a      	str	r2, [r3, #4]
 8005cb0:	609a      	str	r2, [r3, #8]
 8005cb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005cb4:	f107 0310 	add.w	r3, r7, #16
 8005cb8:	2200      	movs	r2, #0
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005cbe:	463b      	mov	r3, r7
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	605a      	str	r2, [r3, #4]
 8005cc6:	609a      	str	r2, [r3, #8]
 8005cc8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005cca:	4b2d      	ldr	r3, [pc, #180]	@ (8005d80 <MX_TIM8_Init+0xe0>)
 8005ccc:	4a2d      	ldr	r2, [pc, #180]	@ (8005d84 <MX_TIM8_Init+0xe4>)
 8005cce:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16-1;
 8005cd0:	4b2b      	ldr	r3, [pc, #172]	@ (8005d80 <MX_TIM8_Init+0xe0>)
 8005cd2:	220f      	movs	r2, #15
 8005cd4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cd6:	4b2a      	ldr	r3, [pc, #168]	@ (8005d80 <MX_TIM8_Init+0xe0>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8005cdc:	4b28      	ldr	r3, [pc, #160]	@ (8005d80 <MX_TIM8_Init+0xe0>)
 8005cde:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ce2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ce4:	4b26      	ldr	r3, [pc, #152]	@ (8005d80 <MX_TIM8_Init+0xe0>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005cea:	4b25      	ldr	r3, [pc, #148]	@ (8005d80 <MX_TIM8_Init+0xe0>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005cf0:	4b23      	ldr	r3, [pc, #140]	@ (8005d80 <MX_TIM8_Init+0xe0>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8005cf6:	4822      	ldr	r0, [pc, #136]	@ (8005d80 <MX_TIM8_Init+0xe0>)
 8005cf8:	f003 fd84 	bl	8009804 <HAL_TIM_Base_Init>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d001      	beq.n	8005d06 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8005d02:	f7ff f82e 	bl	8004d62 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005d0a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8005d0c:	f107 0318 	add.w	r3, r7, #24
 8005d10:	4619      	mov	r1, r3
 8005d12:	481b      	ldr	r0, [pc, #108]	@ (8005d80 <MX_TIM8_Init+0xe0>)
 8005d14:	f004 fbe0 	bl	800a4d8 <HAL_TIM_ConfigClockSource>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8005d1e:	f7ff f820 	bl	8004d62 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8005d22:	4817      	ldr	r0, [pc, #92]	@ (8005d80 <MX_TIM8_Init+0xe0>)
 8005d24:	f003 fede 	bl	8009ae4 <HAL_TIM_IC_Init>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8005d2e:	f7ff f818 	bl	8004d62 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d32:	2300      	movs	r3, #0
 8005d34:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d36:	2300      	movs	r3, #0
 8005d38:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005d3a:	f107 0310 	add.w	r3, r7, #16
 8005d3e:	4619      	mov	r1, r3
 8005d40:	480f      	ldr	r0, [pc, #60]	@ (8005d80 <MX_TIM8_Init+0xe0>)
 8005d42:	f005 f93d 	bl	800afc0 <HAL_TIMEx_MasterConfigSynchronization>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 8005d4c:	f7ff f809 	bl	8004d62 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8005d50:	230a      	movs	r3, #10
 8005d52:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005d54:	2301      	movs	r3, #1
 8005d56:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8005d60:	463b      	mov	r3, r7
 8005d62:	2204      	movs	r2, #4
 8005d64:	4619      	mov	r1, r3
 8005d66:	4806      	ldr	r0, [pc, #24]	@ (8005d80 <MX_TIM8_Init+0xe0>)
 8005d68:	f004 fa58 	bl	800a21c <HAL_TIM_IC_ConfigChannel>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8005d72:	f7fe fff6 	bl	8004d62 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8005d76:	bf00      	nop
 8005d78:	3728      	adds	r7, #40	@ 0x28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	20000aa0 	.word	0x20000aa0
 8005d84:	40010400 	.word	0x40010400

08005d88 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08c      	sub	sp, #48	@ 0x30
 8005d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005d8e:	f107 0320 	add.w	r3, r7, #32
 8005d92:	2200      	movs	r2, #0
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	605a      	str	r2, [r3, #4]
 8005d98:	609a      	str	r2, [r3, #8]
 8005d9a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005d9c:	1d3b      	adds	r3, r7, #4
 8005d9e:	2200      	movs	r2, #0
 8005da0:	601a      	str	r2, [r3, #0]
 8005da2:	605a      	str	r2, [r3, #4]
 8005da4:	609a      	str	r2, [r3, #8]
 8005da6:	60da      	str	r2, [r3, #12]
 8005da8:	611a      	str	r2, [r3, #16]
 8005daa:	615a      	str	r2, [r3, #20]
 8005dac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8005dae:	4b2b      	ldr	r3, [pc, #172]	@ (8005e5c <MX_TIM9_Init+0xd4>)
 8005db0:	4a2b      	ldr	r2, [pc, #172]	@ (8005e60 <MX_TIM9_Init+0xd8>)
 8005db2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8005db4:	4b29      	ldr	r3, [pc, #164]	@ (8005e5c <MX_TIM9_Init+0xd4>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005dba:	4b28      	ldr	r3, [pc, #160]	@ (8005e5c <MX_TIM9_Init+0xd4>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 7199;
 8005dc0:	4b26      	ldr	r3, [pc, #152]	@ (8005e5c <MX_TIM9_Init+0xd4>)
 8005dc2:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8005dc6:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005dc8:	4b24      	ldr	r3, [pc, #144]	@ (8005e5c <MX_TIM9_Init+0xd4>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005dce:	4b23      	ldr	r3, [pc, #140]	@ (8005e5c <MX_TIM9_Init+0xd4>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8005dd4:	4821      	ldr	r0, [pc, #132]	@ (8005e5c <MX_TIM9_Init+0xd4>)
 8005dd6:	f003 fd15 	bl	8009804 <HAL_TIM_Base_Init>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8005de0:	f7fe ffbf 	bl	8004d62 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005de4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005de8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8005dea:	f107 0320 	add.w	r3, r7, #32
 8005dee:	4619      	mov	r1, r3
 8005df0:	481a      	ldr	r0, [pc, #104]	@ (8005e5c <MX_TIM9_Init+0xd4>)
 8005df2:	f004 fb71 	bl	800a4d8 <HAL_TIM_ConfigClockSource>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8005dfc:	f7fe ffb1 	bl	8004d62 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8005e00:	4816      	ldr	r0, [pc, #88]	@ (8005e5c <MX_TIM9_Init+0xd4>)
 8005e02:	f003 fd4e 	bl	80098a2 <HAL_TIM_PWM_Init>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8005e0c:	f7fe ffa9 	bl	8004d62 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005e10:	2360      	movs	r3, #96	@ 0x60
 8005e12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005e14:	2300      	movs	r3, #0
 8005e16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8005e18:	2302      	movs	r3, #2
 8005e1a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005e20:	1d3b      	adds	r3, r7, #4
 8005e22:	2200      	movs	r2, #0
 8005e24:	4619      	mov	r1, r3
 8005e26:	480d      	ldr	r0, [pc, #52]	@ (8005e5c <MX_TIM9_Init+0xd4>)
 8005e28:	f004 fa94 	bl	800a354 <HAL_TIM_PWM_ConfigChannel>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8005e32:	f7fe ff96 	bl	8004d62 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005e36:	1d3b      	adds	r3, r7, #4
 8005e38:	2204      	movs	r2, #4
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	4807      	ldr	r0, [pc, #28]	@ (8005e5c <MX_TIM9_Init+0xd4>)
 8005e3e:	f004 fa89 	bl	800a354 <HAL_TIM_PWM_ConfigChannel>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 8005e48:	f7fe ff8b 	bl	8004d62 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8005e4c:	4803      	ldr	r0, [pc, #12]	@ (8005e5c <MX_TIM9_Init+0xd4>)
 8005e4e:	f000 f9eb 	bl	8006228 <HAL_TIM_MspPostInit>

}
 8005e52:	bf00      	nop
 8005e54:	3730      	adds	r7, #48	@ 0x30
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20000ae8 	.word	0x20000ae8
 8005e60:	40014000 	.word	0x40014000

08005e64 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08c      	sub	sp, #48	@ 0x30
 8005e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e6a:	f107 0320 	add.w	r3, r7, #32
 8005e6e:	2200      	movs	r2, #0
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	605a      	str	r2, [r3, #4]
 8005e74:	609a      	str	r2, [r3, #8]
 8005e76:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005e78:	1d3b      	adds	r3, r7, #4
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	601a      	str	r2, [r3, #0]
 8005e7e:	605a      	str	r2, [r3, #4]
 8005e80:	609a      	str	r2, [r3, #8]
 8005e82:	60da      	str	r2, [r3, #12]
 8005e84:	611a      	str	r2, [r3, #16]
 8005e86:	615a      	str	r2, [r3, #20]
 8005e88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8005e8a:	4b26      	ldr	r3, [pc, #152]	@ (8005f24 <MX_TIM12_Init+0xc0>)
 8005e8c:	4a26      	ldr	r2, [pc, #152]	@ (8005f28 <MX_TIM12_Init+0xc4>)
 8005e8e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 720;
 8005e90:	4b24      	ldr	r3, [pc, #144]	@ (8005f24 <MX_TIM12_Init+0xc0>)
 8005e92:	f44f 7234 	mov.w	r2, #720	@ 0x2d0
 8005e96:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e98:	4b22      	ldr	r3, [pc, #136]	@ (8005f24 <MX_TIM12_Init+0xc0>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 2000;
 8005e9e:	4b21      	ldr	r3, [pc, #132]	@ (8005f24 <MX_TIM12_Init+0xc0>)
 8005ea0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005ea4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8005f24 <MX_TIM12_Init+0xc0>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005eac:	4b1d      	ldr	r3, [pc, #116]	@ (8005f24 <MX_TIM12_Init+0xc0>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8005eb2:	481c      	ldr	r0, [pc, #112]	@ (8005f24 <MX_TIM12_Init+0xc0>)
 8005eb4:	f003 fca6 	bl	8009804 <HAL_TIM_Base_Init>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 8005ebe:	f7fe ff50 	bl	8004d62 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ec2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ec6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8005ec8:	f107 0320 	add.w	r3, r7, #32
 8005ecc:	4619      	mov	r1, r3
 8005ece:	4815      	ldr	r0, [pc, #84]	@ (8005f24 <MX_TIM12_Init+0xc0>)
 8005ed0:	f004 fb02 	bl	800a4d8 <HAL_TIM_ConfigClockSource>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 8005eda:	f7fe ff42 	bl	8004d62 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8005ede:	4811      	ldr	r0, [pc, #68]	@ (8005f24 <MX_TIM12_Init+0xc0>)
 8005ee0:	f003 fcdf 	bl	80098a2 <HAL_TIM_PWM_Init>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8005eea:	f7fe ff3a 	bl	8004d62 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005eee:	2360      	movs	r3, #96	@ 0x60
 8005ef0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005efa:	2300      	movs	r3, #0
 8005efc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005efe:	1d3b      	adds	r3, r7, #4
 8005f00:	2200      	movs	r2, #0
 8005f02:	4619      	mov	r1, r3
 8005f04:	4807      	ldr	r0, [pc, #28]	@ (8005f24 <MX_TIM12_Init+0xc0>)
 8005f06:	f004 fa25 	bl	800a354 <HAL_TIM_PWM_ConfigChannel>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8005f10:	f7fe ff27 	bl	8004d62 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8005f14:	4803      	ldr	r0, [pc, #12]	@ (8005f24 <MX_TIM12_Init+0xc0>)
 8005f16:	f000 f987 	bl	8006228 <HAL_TIM_MspPostInit>

}
 8005f1a:	bf00      	nop
 8005f1c:	3730      	adds	r7, #48	@ 0x30
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	20000b30 	.word	0x20000b30
 8005f28:	40001800 	.word	0x40001800

08005f2c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b08a      	sub	sp, #40	@ 0x28
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f34:	f107 0314 	add.w	r3, r7, #20
 8005f38:	2200      	movs	r2, #0
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	605a      	str	r2, [r3, #4]
 8005f3e:	609a      	str	r2, [r3, #8]
 8005f40:	60da      	str	r2, [r3, #12]
 8005f42:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f4c:	d14a      	bne.n	8005fe4 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005f4e:	2300      	movs	r3, #0
 8005f50:	613b      	str	r3, [r7, #16]
 8005f52:	4b26      	ldr	r3, [pc, #152]	@ (8005fec <HAL_TIM_Encoder_MspInit+0xc0>)
 8005f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f56:	4a25      	ldr	r2, [pc, #148]	@ (8005fec <HAL_TIM_Encoder_MspInit+0xc0>)
 8005f58:	f043 0301 	orr.w	r3, r3, #1
 8005f5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f5e:	4b23      	ldr	r3, [pc, #140]	@ (8005fec <HAL_TIM_Encoder_MspInit+0xc0>)
 8005f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	613b      	str	r3, [r7, #16]
 8005f68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	4b1f      	ldr	r3, [pc, #124]	@ (8005fec <HAL_TIM_Encoder_MspInit+0xc0>)
 8005f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f72:	4a1e      	ldr	r2, [pc, #120]	@ (8005fec <HAL_TIM_Encoder_MspInit+0xc0>)
 8005f74:	f043 0301 	orr.w	r3, r3, #1
 8005f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f7a:	4b1c      	ldr	r3, [pc, #112]	@ (8005fec <HAL_TIM_Encoder_MspInit+0xc0>)
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f86:	2300      	movs	r3, #0
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	4b18      	ldr	r3, [pc, #96]	@ (8005fec <HAL_TIM_Encoder_MspInit+0xc0>)
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f8e:	4a17      	ldr	r2, [pc, #92]	@ (8005fec <HAL_TIM_Encoder_MspInit+0xc0>)
 8005f90:	f043 0302 	orr.w	r3, r3, #2
 8005f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f96:	4b15      	ldr	r3, [pc, #84]	@ (8005fec <HAL_TIM_Encoder_MspInit+0xc0>)
 8005f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	60bb      	str	r3, [r7, #8]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005fa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fa8:	2302      	movs	r3, #2
 8005faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fac:	2300      	movs	r3, #0
 8005fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fb8:	f107 0314 	add.w	r3, r7, #20
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	480c      	ldr	r0, [pc, #48]	@ (8005ff0 <HAL_TIM_Encoder_MspInit+0xc4>)
 8005fc0:	f001 fc80 	bl	80078c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005fc4:	2308      	movs	r3, #8
 8005fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fc8:	2302      	movs	r3, #2
 8005fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fd8:	f107 0314 	add.w	r3, r7, #20
 8005fdc:	4619      	mov	r1, r3
 8005fde:	4805      	ldr	r0, [pc, #20]	@ (8005ff4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8005fe0:	f001 fc70 	bl	80078c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005fe4:	bf00      	nop
 8005fe6:	3728      	adds	r7, #40	@ 0x28
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	40023800 	.word	0x40023800
 8005ff0:	40020000 	.word	0x40020000
 8005ff4:	40020400 	.word	0x40020400

08005ff8 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b08a      	sub	sp, #40	@ 0x28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006000:	f107 0314 	add.w	r3, r7, #20
 8006004:	2200      	movs	r2, #0
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	605a      	str	r2, [r3, #4]
 800600a:	609a      	str	r2, [r3, #8]
 800600c:	60da      	str	r2, [r3, #12]
 800600e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a2c      	ldr	r2, [pc, #176]	@ (80060c8 <HAL_TIM_IC_MspInit+0xd0>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d152      	bne.n	80060c0 <HAL_TIM_IC_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800601a:	2300      	movs	r3, #0
 800601c:	613b      	str	r3, [r7, #16]
 800601e:	4b2b      	ldr	r3, [pc, #172]	@ (80060cc <HAL_TIM_IC_MspInit+0xd4>)
 8006020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006022:	4a2a      	ldr	r2, [pc, #168]	@ (80060cc <HAL_TIM_IC_MspInit+0xd4>)
 8006024:	f043 0302 	orr.w	r3, r3, #2
 8006028:	6413      	str	r3, [r2, #64]	@ 0x40
 800602a:	4b28      	ldr	r3, [pc, #160]	@ (80060cc <HAL_TIM_IC_MspInit+0xd4>)
 800602c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	613b      	str	r3, [r7, #16]
 8006034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006036:	2300      	movs	r3, #0
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	4b24      	ldr	r3, [pc, #144]	@ (80060cc <HAL_TIM_IC_MspInit+0xd4>)
 800603c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800603e:	4a23      	ldr	r2, [pc, #140]	@ (80060cc <HAL_TIM_IC_MspInit+0xd4>)
 8006040:	f043 0304 	orr.w	r3, r3, #4
 8006044:	6313      	str	r3, [r2, #48]	@ 0x30
 8006046:	4b21      	ldr	r3, [pc, #132]	@ (80060cc <HAL_TIM_IC_MspInit+0xd4>)
 8006048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800604a:	f003 0304 	and.w	r3, r3, #4
 800604e:	60fb      	str	r3, [r7, #12]
 8006050:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006052:	2300      	movs	r3, #0
 8006054:	60bb      	str	r3, [r7, #8]
 8006056:	4b1d      	ldr	r3, [pc, #116]	@ (80060cc <HAL_TIM_IC_MspInit+0xd4>)
 8006058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605a:	4a1c      	ldr	r2, [pc, #112]	@ (80060cc <HAL_TIM_IC_MspInit+0xd4>)
 800605c:	f043 0302 	orr.w	r3, r3, #2
 8006060:	6313      	str	r3, [r2, #48]	@ 0x30
 8006062:	4b1a      	ldr	r3, [pc, #104]	@ (80060cc <HAL_TIM_IC_MspInit+0xd4>)
 8006064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006066:	f003 0302 	and.w	r3, r3, #2
 800606a:	60bb      	str	r3, [r7, #8]
 800606c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = asy_US_ECHO_Pin;
 800606e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006074:	2302      	movs	r3, #2
 8006076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006078:	2300      	movs	r3, #0
 800607a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800607c:	2300      	movs	r3, #0
 800607e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006080:	2302      	movs	r3, #2
 8006082:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(asy_US_ECHO_GPIO_Port, &GPIO_InitStruct);
 8006084:	f107 0314 	add.w	r3, r7, #20
 8006088:	4619      	mov	r1, r3
 800608a:	4811      	ldr	r0, [pc, #68]	@ (80060d0 <HAL_TIM_IC_MspInit+0xd8>)
 800608c:	f001 fc1a 	bl	80078c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006090:	2330      	movs	r3, #48	@ 0x30
 8006092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006094:	2302      	movs	r3, #2
 8006096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006098:	2300      	movs	r3, #0
 800609a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800609c:	2300      	movs	r3, #0
 800609e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80060a0:	2302      	movs	r3, #2
 80060a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060a4:	f107 0314 	add.w	r3, r7, #20
 80060a8:	4619      	mov	r1, r3
 80060aa:	480a      	ldr	r0, [pc, #40]	@ (80060d4 <HAL_TIM_IC_MspInit+0xdc>)
 80060ac:	f001 fc0a 	bl	80078c4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80060b0:	2200      	movs	r2, #0
 80060b2:	2105      	movs	r1, #5
 80060b4:	201d      	movs	r0, #29
 80060b6:	f000 ffcc 	bl	8007052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80060ba:	201d      	movs	r0, #29
 80060bc:	f000 ffe5 	bl	800708a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80060c0:	bf00      	nop
 80060c2:	3728      	adds	r7, #40	@ 0x28
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	40000400 	.word	0x40000400
 80060cc:	40023800 	.word	0x40023800
 80060d0:	40020800 	.word	0x40020800
 80060d4:	40020400 	.word	0x40020400

080060d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08e      	sub	sp, #56	@ 0x38
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060e4:	2200      	movs	r2, #0
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	605a      	str	r2, [r3, #4]
 80060ea:	609a      	str	r2, [r3, #8]
 80060ec:	60da      	str	r2, [r3, #12]
 80060ee:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM4)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a45      	ldr	r2, [pc, #276]	@ (800620c <HAL_TIM_Base_MspInit+0x134>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d10e      	bne.n	8006118 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80060fa:	2300      	movs	r3, #0
 80060fc:	623b      	str	r3, [r7, #32]
 80060fe:	4b44      	ldr	r3, [pc, #272]	@ (8006210 <HAL_TIM_Base_MspInit+0x138>)
 8006100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006102:	4a43      	ldr	r2, [pc, #268]	@ (8006210 <HAL_TIM_Base_MspInit+0x138>)
 8006104:	f043 0304 	orr.w	r3, r3, #4
 8006108:	6413      	str	r3, [r2, #64]	@ 0x40
 800610a:	4b41      	ldr	r3, [pc, #260]	@ (8006210 <HAL_TIM_Base_MspInit+0x138>)
 800610c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610e:	f003 0304 	and.w	r3, r3, #4
 8006112:	623b      	str	r3, [r7, #32]
 8006114:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8006116:	e074      	b.n	8006202 <HAL_TIM_Base_MspInit+0x12a>
  else if(tim_baseHandle->Instance==TIM6)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a3d      	ldr	r2, [pc, #244]	@ (8006214 <HAL_TIM_Base_MspInit+0x13c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d10e      	bne.n	8006140 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006122:	2300      	movs	r3, #0
 8006124:	61fb      	str	r3, [r7, #28]
 8006126:	4b3a      	ldr	r3, [pc, #232]	@ (8006210 <HAL_TIM_Base_MspInit+0x138>)
 8006128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800612a:	4a39      	ldr	r2, [pc, #228]	@ (8006210 <HAL_TIM_Base_MspInit+0x138>)
 800612c:	f043 0310 	orr.w	r3, r3, #16
 8006130:	6413      	str	r3, [r2, #64]	@ 0x40
 8006132:	4b37      	ldr	r3, [pc, #220]	@ (8006210 <HAL_TIM_Base_MspInit+0x138>)
 8006134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006136:	f003 0310 	and.w	r3, r3, #16
 800613a:	61fb      	str	r3, [r7, #28]
 800613c:	69fb      	ldr	r3, [r7, #28]
}
 800613e:	e060      	b.n	8006202 <HAL_TIM_Base_MspInit+0x12a>
  else if(tim_baseHandle->Instance==TIM8)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a34      	ldr	r2, [pc, #208]	@ (8006218 <HAL_TIM_Base_MspInit+0x140>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d134      	bne.n	80061b4 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800614a:	2300      	movs	r3, #0
 800614c:	61bb      	str	r3, [r7, #24]
 800614e:	4b30      	ldr	r3, [pc, #192]	@ (8006210 <HAL_TIM_Base_MspInit+0x138>)
 8006150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006152:	4a2f      	ldr	r2, [pc, #188]	@ (8006210 <HAL_TIM_Base_MspInit+0x138>)
 8006154:	f043 0302 	orr.w	r3, r3, #2
 8006158:	6453      	str	r3, [r2, #68]	@ 0x44
 800615a:	4b2d      	ldr	r3, [pc, #180]	@ (8006210 <HAL_TIM_Base_MspInit+0x138>)
 800615c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800615e:	f003 0302 	and.w	r3, r3, #2
 8006162:	61bb      	str	r3, [r7, #24]
 8006164:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006166:	2300      	movs	r3, #0
 8006168:	617b      	str	r3, [r7, #20]
 800616a:	4b29      	ldr	r3, [pc, #164]	@ (8006210 <HAL_TIM_Base_MspInit+0x138>)
 800616c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800616e:	4a28      	ldr	r2, [pc, #160]	@ (8006210 <HAL_TIM_Base_MspInit+0x138>)
 8006170:	f043 0304 	orr.w	r3, r3, #4
 8006174:	6313      	str	r3, [r2, #48]	@ 0x30
 8006176:	4b26      	ldr	r3, [pc, #152]	@ (8006210 <HAL_TIM_Base_MspInit+0x138>)
 8006178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800617a:	f003 0304 	and.w	r3, r3, #4
 800617e:	617b      	str	r3, [r7, #20]
 8006180:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SN_US_ECHO_Pin;
 8006182:	2380      	movs	r3, #128	@ 0x80
 8006184:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006186:	2302      	movs	r3, #2
 8006188:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800618a:	2300      	movs	r3, #0
 800618c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800618e:	2300      	movs	r3, #0
 8006190:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006192:	2303      	movs	r3, #3
 8006194:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SN_US_ECHO_GPIO_Port, &GPIO_InitStruct);
 8006196:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800619a:	4619      	mov	r1, r3
 800619c:	481f      	ldr	r0, [pc, #124]	@ (800621c <HAL_TIM_Base_MspInit+0x144>)
 800619e:	f001 fb91 	bl	80078c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 80061a2:	2200      	movs	r2, #0
 80061a4:	2105      	movs	r1, #5
 80061a6:	202e      	movs	r0, #46	@ 0x2e
 80061a8:	f000 ff53 	bl	8007052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80061ac:	202e      	movs	r0, #46	@ 0x2e
 80061ae:	f000 ff6c 	bl	800708a <HAL_NVIC_EnableIRQ>
}
 80061b2:	e026      	b.n	8006202 <HAL_TIM_Base_MspInit+0x12a>
  else if(tim_baseHandle->Instance==TIM9)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a19      	ldr	r2, [pc, #100]	@ (8006220 <HAL_TIM_Base_MspInit+0x148>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d10e      	bne.n	80061dc <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80061be:	2300      	movs	r3, #0
 80061c0:	613b      	str	r3, [r7, #16]
 80061c2:	4b13      	ldr	r3, [pc, #76]	@ (8006210 <HAL_TIM_Base_MspInit+0x138>)
 80061c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061c6:	4a12      	ldr	r2, [pc, #72]	@ (8006210 <HAL_TIM_Base_MspInit+0x138>)
 80061c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80061ce:	4b10      	ldr	r3, [pc, #64]	@ (8006210 <HAL_TIM_Base_MspInit+0x138>)
 80061d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061d6:	613b      	str	r3, [r7, #16]
 80061d8:	693b      	ldr	r3, [r7, #16]
}
 80061da:	e012      	b.n	8006202 <HAL_TIM_Base_MspInit+0x12a>
  else if(tim_baseHandle->Instance==TIM12)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a10      	ldr	r2, [pc, #64]	@ (8006224 <HAL_TIM_Base_MspInit+0x14c>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d10d      	bne.n	8006202 <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80061e6:	2300      	movs	r3, #0
 80061e8:	60fb      	str	r3, [r7, #12]
 80061ea:	4b09      	ldr	r3, [pc, #36]	@ (8006210 <HAL_TIM_Base_MspInit+0x138>)
 80061ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ee:	4a08      	ldr	r2, [pc, #32]	@ (8006210 <HAL_TIM_Base_MspInit+0x138>)
 80061f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80061f6:	4b06      	ldr	r3, [pc, #24]	@ (8006210 <HAL_TIM_Base_MspInit+0x138>)
 80061f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	68fb      	ldr	r3, [r7, #12]
}
 8006202:	bf00      	nop
 8006204:	3738      	adds	r7, #56	@ 0x38
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	40000800 	.word	0x40000800
 8006210:	40023800 	.word	0x40023800
 8006214:	40001000 	.word	0x40001000
 8006218:	40010400 	.word	0x40010400
 800621c:	40020800 	.word	0x40020800
 8006220:	40014000 	.word	0x40014000
 8006224:	40001800 	.word	0x40001800

08006228 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b08a      	sub	sp, #40	@ 0x28
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006230:	f107 0314 	add.w	r3, r7, #20
 8006234:	2200      	movs	r2, #0
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	605a      	str	r2, [r3, #4]
 800623a:	609a      	str	r2, [r3, #8]
 800623c:	60da      	str	r2, [r3, #12]
 800623e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a37      	ldr	r2, [pc, #220]	@ (8006324 <HAL_TIM_MspPostInit+0xfc>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d11f      	bne.n	800628a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800624a:	2300      	movs	r3, #0
 800624c:	613b      	str	r3, [r7, #16]
 800624e:	4b36      	ldr	r3, [pc, #216]	@ (8006328 <HAL_TIM_MspPostInit+0x100>)
 8006250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006252:	4a35      	ldr	r2, [pc, #212]	@ (8006328 <HAL_TIM_MspPostInit+0x100>)
 8006254:	f043 0302 	orr.w	r3, r3, #2
 8006258:	6313      	str	r3, [r2, #48]	@ 0x30
 800625a:	4b33      	ldr	r3, [pc, #204]	@ (8006328 <HAL_TIM_MspPostInit+0x100>)
 800625c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800625e:	f003 0302 	and.w	r3, r3, #2
 8006262:	613b      	str	r3, [r7, #16]
 8006264:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_A_IN2_Pin|PWM_A_IN1_Pin;
 8006266:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800626a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800626c:	2302      	movs	r3, #2
 800626e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006270:	2300      	movs	r3, #0
 8006272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006274:	2300      	movs	r3, #0
 8006276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006278:	2302      	movs	r3, #2
 800627a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800627c:	f107 0314 	add.w	r3, r7, #20
 8006280:	4619      	mov	r1, r3
 8006282:	482a      	ldr	r0, [pc, #168]	@ (800632c <HAL_TIM_MspPostInit+0x104>)
 8006284:	f001 fb1e 	bl	80078c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8006288:	e047      	b.n	800631a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM9)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a28      	ldr	r2, [pc, #160]	@ (8006330 <HAL_TIM_MspPostInit+0x108>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d11e      	bne.n	80062d2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006294:	2300      	movs	r3, #0
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	4b23      	ldr	r3, [pc, #140]	@ (8006328 <HAL_TIM_MspPostInit+0x100>)
 800629a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800629c:	4a22      	ldr	r2, [pc, #136]	@ (8006328 <HAL_TIM_MspPostInit+0x100>)
 800629e:	f043 0310 	orr.w	r3, r3, #16
 80062a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80062a4:	4b20      	ldr	r3, [pc, #128]	@ (8006328 <HAL_TIM_MspPostInit+0x100>)
 80062a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062a8:	f003 0310 	and.w	r3, r3, #16
 80062ac:	60fb      	str	r3, [r7, #12]
 80062ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_B_IN1_Pin|PWM_B_IN2_Pin;
 80062b0:	2360      	movs	r3, #96	@ 0x60
 80062b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062b4:	2302      	movs	r3, #2
 80062b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062b8:	2300      	movs	r3, #0
 80062ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062bc:	2300      	movs	r3, #0
 80062be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80062c0:	2303      	movs	r3, #3
 80062c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80062c4:	f107 0314 	add.w	r3, r7, #20
 80062c8:	4619      	mov	r1, r3
 80062ca:	481a      	ldr	r0, [pc, #104]	@ (8006334 <HAL_TIM_MspPostInit+0x10c>)
 80062cc:	f001 fafa 	bl	80078c4 <HAL_GPIO_Init>
}
 80062d0:	e023      	b.n	800631a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM12)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a18      	ldr	r2, [pc, #96]	@ (8006338 <HAL_TIM_MspPostInit+0x110>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d11e      	bne.n	800631a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80062dc:	2300      	movs	r3, #0
 80062de:	60bb      	str	r3, [r7, #8]
 80062e0:	4b11      	ldr	r3, [pc, #68]	@ (8006328 <HAL_TIM_MspPostInit+0x100>)
 80062e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e4:	4a10      	ldr	r2, [pc, #64]	@ (8006328 <HAL_TIM_MspPostInit+0x100>)
 80062e6:	f043 0302 	orr.w	r3, r3, #2
 80062ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80062ec:	4b0e      	ldr	r3, [pc, #56]	@ (8006328 <HAL_TIM_MspPostInit+0x100>)
 80062ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	60bb      	str	r3, [r7, #8]
 80062f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 80062f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80062fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062fe:	2302      	movs	r3, #2
 8006300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006302:	2300      	movs	r3, #0
 8006304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006306:	2300      	movs	r3, #0
 8006308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800630a:	2309      	movs	r3, #9
 800630c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 800630e:	f107 0314 	add.w	r3, r7, #20
 8006312:	4619      	mov	r1, r3
 8006314:	4805      	ldr	r0, [pc, #20]	@ (800632c <HAL_TIM_MspPostInit+0x104>)
 8006316:	f001 fad5 	bl	80078c4 <HAL_GPIO_Init>
}
 800631a:	bf00      	nop
 800631c:	3728      	adds	r7, #40	@ 0x28
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	40000800 	.word	0x40000800
 8006328:	40023800 	.word	0x40023800
 800632c:	40020400 	.word	0x40020400
 8006330:	40014000 	.word	0x40014000
 8006334:	40021000 	.word	0x40021000
 8006338:	40001800 	.word	0x40001800

0800633c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006340:	4b11      	ldr	r3, [pc, #68]	@ (8006388 <MX_USART3_UART_Init+0x4c>)
 8006342:	4a12      	ldr	r2, [pc, #72]	@ (800638c <MX_USART3_UART_Init+0x50>)
 8006344:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8006346:	4b10      	ldr	r3, [pc, #64]	@ (8006388 <MX_USART3_UART_Init+0x4c>)
 8006348:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800634c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800634e:	4b0e      	ldr	r3, [pc, #56]	@ (8006388 <MX_USART3_UART_Init+0x4c>)
 8006350:	2200      	movs	r2, #0
 8006352:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006354:	4b0c      	ldr	r3, [pc, #48]	@ (8006388 <MX_USART3_UART_Init+0x4c>)
 8006356:	2200      	movs	r2, #0
 8006358:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800635a:	4b0b      	ldr	r3, [pc, #44]	@ (8006388 <MX_USART3_UART_Init+0x4c>)
 800635c:	2200      	movs	r2, #0
 800635e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006360:	4b09      	ldr	r3, [pc, #36]	@ (8006388 <MX_USART3_UART_Init+0x4c>)
 8006362:	220c      	movs	r2, #12
 8006364:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006366:	4b08      	ldr	r3, [pc, #32]	@ (8006388 <MX_USART3_UART_Init+0x4c>)
 8006368:	2200      	movs	r2, #0
 800636a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800636c:	4b06      	ldr	r3, [pc, #24]	@ (8006388 <MX_USART3_UART_Init+0x4c>)
 800636e:	2200      	movs	r2, #0
 8006370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006372:	4805      	ldr	r0, [pc, #20]	@ (8006388 <MX_USART3_UART_Init+0x4c>)
 8006374:	f004 feb4 	bl	800b0e0 <HAL_UART_Init>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800637e:	f7fe fcf0 	bl	8004d62 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006382:	bf00      	nop
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	20000b78 	.word	0x20000b78
 800638c:	40004800 	.word	0x40004800

08006390 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b08a      	sub	sp, #40	@ 0x28
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006398:	f107 0314 	add.w	r3, r7, #20
 800639c:	2200      	movs	r2, #0
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	605a      	str	r2, [r3, #4]
 80063a2:	609a      	str	r2, [r3, #8]
 80063a4:	60da      	str	r2, [r3, #12]
 80063a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a54      	ldr	r2, [pc, #336]	@ (8006500 <HAL_UART_MspInit+0x170>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	f040 80a2 	bne.w	80064f8 <HAL_UART_MspInit+0x168>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80063b4:	2300      	movs	r3, #0
 80063b6:	613b      	str	r3, [r7, #16]
 80063b8:	4b52      	ldr	r3, [pc, #328]	@ (8006504 <HAL_UART_MspInit+0x174>)
 80063ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063bc:	4a51      	ldr	r2, [pc, #324]	@ (8006504 <HAL_UART_MspInit+0x174>)
 80063be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80063c4:	4b4f      	ldr	r3, [pc, #316]	@ (8006504 <HAL_UART_MspInit+0x174>)
 80063c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80063cc:	613b      	str	r3, [r7, #16]
 80063ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80063d0:	2300      	movs	r3, #0
 80063d2:	60fb      	str	r3, [r7, #12]
 80063d4:	4b4b      	ldr	r3, [pc, #300]	@ (8006504 <HAL_UART_MspInit+0x174>)
 80063d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063d8:	4a4a      	ldr	r2, [pc, #296]	@ (8006504 <HAL_UART_MspInit+0x174>)
 80063da:	f043 0308 	orr.w	r3, r3, #8
 80063de:	6313      	str	r3, [r2, #48]	@ 0x30
 80063e0:	4b48      	ldr	r3, [pc, #288]	@ (8006504 <HAL_UART_MspInit+0x174>)
 80063e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063e4:	f003 0308 	and.w	r3, r3, #8
 80063e8:	60fb      	str	r3, [r7, #12]
 80063ea:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80063ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80063f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063f2:	2302      	movs	r3, #2
 80063f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063f6:	2300      	movs	r3, #0
 80063f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063fa:	2303      	movs	r3, #3
 80063fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80063fe:	2307      	movs	r3, #7
 8006400:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006402:	f107 0314 	add.w	r3, r7, #20
 8006406:	4619      	mov	r1, r3
 8006408:	483f      	ldr	r0, [pc, #252]	@ (8006508 <HAL_UART_MspInit+0x178>)
 800640a:	f001 fa5b 	bl	80078c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800640e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006414:	2302      	movs	r3, #2
 8006416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006418:	2302      	movs	r3, #2
 800641a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800641c:	2303      	movs	r3, #3
 800641e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006420:	2307      	movs	r3, #7
 8006422:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006424:	f107 0314 	add.w	r3, r7, #20
 8006428:	4619      	mov	r1, r3
 800642a:	4837      	ldr	r0, [pc, #220]	@ (8006508 <HAL_UART_MspInit+0x178>)
 800642c:	f001 fa4a 	bl	80078c4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8006430:	4b36      	ldr	r3, [pc, #216]	@ (800650c <HAL_UART_MspInit+0x17c>)
 8006432:	4a37      	ldr	r2, [pc, #220]	@ (8006510 <HAL_UART_MspInit+0x180>)
 8006434:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8006436:	4b35      	ldr	r3, [pc, #212]	@ (800650c <HAL_UART_MspInit+0x17c>)
 8006438:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800643c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800643e:	4b33      	ldr	r3, [pc, #204]	@ (800650c <HAL_UART_MspInit+0x17c>)
 8006440:	2200      	movs	r2, #0
 8006442:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006444:	4b31      	ldr	r3, [pc, #196]	@ (800650c <HAL_UART_MspInit+0x17c>)
 8006446:	2200      	movs	r2, #0
 8006448:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800644a:	4b30      	ldr	r3, [pc, #192]	@ (800650c <HAL_UART_MspInit+0x17c>)
 800644c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006450:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006452:	4b2e      	ldr	r3, [pc, #184]	@ (800650c <HAL_UART_MspInit+0x17c>)
 8006454:	2200      	movs	r2, #0
 8006456:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006458:	4b2c      	ldr	r3, [pc, #176]	@ (800650c <HAL_UART_MspInit+0x17c>)
 800645a:	2200      	movs	r2, #0
 800645c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800645e:	4b2b      	ldr	r3, [pc, #172]	@ (800650c <HAL_UART_MspInit+0x17c>)
 8006460:	2200      	movs	r2, #0
 8006462:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006464:	4b29      	ldr	r3, [pc, #164]	@ (800650c <HAL_UART_MspInit+0x17c>)
 8006466:	2200      	movs	r2, #0
 8006468:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800646a:	4b28      	ldr	r3, [pc, #160]	@ (800650c <HAL_UART_MspInit+0x17c>)
 800646c:	2200      	movs	r2, #0
 800646e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006470:	4826      	ldr	r0, [pc, #152]	@ (800650c <HAL_UART_MspInit+0x17c>)
 8006472:	f000 fe25 	bl	80070c0 <HAL_DMA_Init>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d001      	beq.n	8006480 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 800647c:	f7fe fc71 	bl	8004d62 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a22      	ldr	r2, [pc, #136]	@ (800650c <HAL_UART_MspInit+0x17c>)
 8006484:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006486:	4a21      	ldr	r2, [pc, #132]	@ (800650c <HAL_UART_MspInit+0x17c>)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800648c:	4b21      	ldr	r3, [pc, #132]	@ (8006514 <HAL_UART_MspInit+0x184>)
 800648e:	4a22      	ldr	r2, [pc, #136]	@ (8006518 <HAL_UART_MspInit+0x188>)
 8006490:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8006492:	4b20      	ldr	r3, [pc, #128]	@ (8006514 <HAL_UART_MspInit+0x184>)
 8006494:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006498:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800649a:	4b1e      	ldr	r3, [pc, #120]	@ (8006514 <HAL_UART_MspInit+0x184>)
 800649c:	2240      	movs	r2, #64	@ 0x40
 800649e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80064a0:	4b1c      	ldr	r3, [pc, #112]	@ (8006514 <HAL_UART_MspInit+0x184>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80064a6:	4b1b      	ldr	r3, [pc, #108]	@ (8006514 <HAL_UART_MspInit+0x184>)
 80064a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80064ac:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80064ae:	4b19      	ldr	r3, [pc, #100]	@ (8006514 <HAL_UART_MspInit+0x184>)
 80064b0:	2200      	movs	r2, #0
 80064b2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80064b4:	4b17      	ldr	r3, [pc, #92]	@ (8006514 <HAL_UART_MspInit+0x184>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80064ba:	4b16      	ldr	r3, [pc, #88]	@ (8006514 <HAL_UART_MspInit+0x184>)
 80064bc:	2200      	movs	r2, #0
 80064be:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80064c0:	4b14      	ldr	r3, [pc, #80]	@ (8006514 <HAL_UART_MspInit+0x184>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80064c6:	4b13      	ldr	r3, [pc, #76]	@ (8006514 <HAL_UART_MspInit+0x184>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80064cc:	4811      	ldr	r0, [pc, #68]	@ (8006514 <HAL_UART_MspInit+0x184>)
 80064ce:	f000 fdf7 	bl	80070c0 <HAL_DMA_Init>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d001      	beq.n	80064dc <HAL_UART_MspInit+0x14c>
    {
      Error_Handler();
 80064d8:	f7fe fc43 	bl	8004d62 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a0d      	ldr	r2, [pc, #52]	@ (8006514 <HAL_UART_MspInit+0x184>)
 80064e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80064e2:	4a0c      	ldr	r2, [pc, #48]	@ (8006514 <HAL_UART_MspInit+0x184>)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80064e8:	2200      	movs	r2, #0
 80064ea:	2105      	movs	r1, #5
 80064ec:	2027      	movs	r0, #39	@ 0x27
 80064ee:	f000 fdb0 	bl	8007052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80064f2:	2027      	movs	r0, #39	@ 0x27
 80064f4:	f000 fdc9 	bl	800708a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80064f8:	bf00      	nop
 80064fa:	3728      	adds	r7, #40	@ 0x28
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	40004800 	.word	0x40004800
 8006504:	40023800 	.word	0x40023800
 8006508:	40020c00 	.word	0x40020c00
 800650c:	20000bc0 	.word	0x20000bc0
 8006510:	40026028 	.word	0x40026028
 8006514:	20000c20 	.word	0x20000c20
 8006518:	40026058 	.word	0x40026058

0800651c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800651c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006554 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006520:	480d      	ldr	r0, [pc, #52]	@ (8006558 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006522:	490e      	ldr	r1, [pc, #56]	@ (800655c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006524:	4a0e      	ldr	r2, [pc, #56]	@ (8006560 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006528:	e002      	b.n	8006530 <LoopCopyDataInit>

0800652a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800652a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800652c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800652e:	3304      	adds	r3, #4

08006530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006534:	d3f9      	bcc.n	800652a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006536:	4a0b      	ldr	r2, [pc, #44]	@ (8006564 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006538:	4c0b      	ldr	r4, [pc, #44]	@ (8006568 <LoopFillZerobss+0x26>)
  movs r3, #0
 800653a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800653c:	e001      	b.n	8006542 <LoopFillZerobss>

0800653e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800653e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006540:	3204      	adds	r2, #4

08006542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006544:	d3fb      	bcc.n	800653e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006546:	f7ff fa15 	bl	8005974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800654a:	f00b f99d 	bl	8011888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800654e:	f7fe fb77 	bl	8004c40 <main>
  bx  lr    
 8006552:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006554:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800655c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8006560:	08014730 	.word	0x08014730
  ldr r2, =_sbss
 8006564:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8006568:	20005724 	.word	0x20005724

0800656c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800656c:	e7fe      	b.n	800656c <ADC_IRQHandler>
	...

08006570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006574:	4b0e      	ldr	r3, [pc, #56]	@ (80065b0 <HAL_Init+0x40>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a0d      	ldr	r2, [pc, #52]	@ (80065b0 <HAL_Init+0x40>)
 800657a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800657e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006580:	4b0b      	ldr	r3, [pc, #44]	@ (80065b0 <HAL_Init+0x40>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a0a      	ldr	r2, [pc, #40]	@ (80065b0 <HAL_Init+0x40>)
 8006586:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800658a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800658c:	4b08      	ldr	r3, [pc, #32]	@ (80065b0 <HAL_Init+0x40>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a07      	ldr	r2, [pc, #28]	@ (80065b0 <HAL_Init+0x40>)
 8006592:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006598:	2003      	movs	r0, #3
 800659a:	f000 fd4f 	bl	800703c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800659e:	200f      	movs	r0, #15
 80065a0:	f000 f808 	bl	80065b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80065a4:	f7ff f892 	bl	80056cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	40023c00 	.word	0x40023c00

080065b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80065bc:	4b12      	ldr	r3, [pc, #72]	@ (8006608 <HAL_InitTick+0x54>)
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	4b12      	ldr	r3, [pc, #72]	@ (800660c <HAL_InitTick+0x58>)
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	4619      	mov	r1, r3
 80065c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80065ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80065ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 fd67 	bl	80070a6 <HAL_SYSTICK_Config>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e00e      	b.n	8006600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b0f      	cmp	r3, #15
 80065e6:	d80a      	bhi.n	80065fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80065e8:	2200      	movs	r2, #0
 80065ea:	6879      	ldr	r1, [r7, #4]
 80065ec:	f04f 30ff 	mov.w	r0, #4294967295
 80065f0:	f000 fd2f 	bl	8007052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80065f4:	4a06      	ldr	r2, [pc, #24]	@ (8006610 <HAL_InitTick+0x5c>)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
 80065fc:	e000      	b.n	8006600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
}
 8006600:	4618      	mov	r0, r3
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	20000004 	.word	0x20000004
 800660c:	2000000c 	.word	0x2000000c
 8006610:	20000008 	.word	0x20000008

08006614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006614:	b480      	push	{r7}
 8006616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006618:	4b06      	ldr	r3, [pc, #24]	@ (8006634 <HAL_IncTick+0x20>)
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	461a      	mov	r2, r3
 800661e:	4b06      	ldr	r3, [pc, #24]	@ (8006638 <HAL_IncTick+0x24>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4413      	add	r3, r2
 8006624:	4a04      	ldr	r2, [pc, #16]	@ (8006638 <HAL_IncTick+0x24>)
 8006626:	6013      	str	r3, [r2, #0]
}
 8006628:	bf00      	nop
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	2000000c 	.word	0x2000000c
 8006638:	20000c80 	.word	0x20000c80

0800663c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800663c:	b480      	push	{r7}
 800663e:	af00      	add	r7, sp, #0
  return uwTick;
 8006640:	4b03      	ldr	r3, [pc, #12]	@ (8006650 <HAL_GetTick+0x14>)
 8006642:	681b      	ldr	r3, [r3, #0]
}
 8006644:	4618      	mov	r0, r3
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	20000c80 	.word	0x20000c80

08006654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800665c:	f7ff ffee 	bl	800663c <HAL_GetTick>
 8006660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666c:	d005      	beq.n	800667a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800666e:	4b0a      	ldr	r3, [pc, #40]	@ (8006698 <HAL_Delay+0x44>)
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	461a      	mov	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4413      	add	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800667a:	bf00      	nop
 800667c:	f7ff ffde 	bl	800663c <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	429a      	cmp	r2, r3
 800668a:	d8f7      	bhi.n	800667c <HAL_Delay+0x28>
  {
  }
}
 800668c:	bf00      	nop
 800668e:	bf00      	nop
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	2000000c 	.word	0x2000000c

0800669c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80066a4:	2300      	movs	r3, #0
 80066a6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e033      	b.n	800671a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d109      	bne.n	80066ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7fb f852 	bl	8001764 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d2:	f003 0310 	and.w	r3, r3, #16
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d118      	bne.n	800670c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066de:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80066e2:	f023 0302 	bic.w	r3, r3, #2
 80066e6:	f043 0202 	orr.w	r2, r3, #2
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fad8 	bl	8006ca4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066fe:	f023 0303 	bic.w	r3, r3, #3
 8006702:	f043 0201 	orr.w	r2, r3, #1
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	641a      	str	r2, [r3, #64]	@ 0x40
 800670a:	e001      	b.n	8006710 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006718:	7bfb      	ldrb	r3, [r7, #15]
}
 800671a:	4618      	mov	r0, r3
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
	...

08006724 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800672c:	2300      	movs	r3, #0
 800672e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006736:	2b01      	cmp	r3, #1
 8006738:	d101      	bne.n	800673e <HAL_ADC_Start+0x1a>
 800673a:	2302      	movs	r3, #2
 800673c:	e0b2      	b.n	80068a4 <HAL_ADC_Start+0x180>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b01      	cmp	r3, #1
 8006752:	d018      	beq.n	8006786 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689a      	ldr	r2, [r3, #8]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f042 0201 	orr.w	r2, r2, #1
 8006762:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006764:	4b52      	ldr	r3, [pc, #328]	@ (80068b0 <HAL_ADC_Start+0x18c>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a52      	ldr	r2, [pc, #328]	@ (80068b4 <HAL_ADC_Start+0x190>)
 800676a:	fba2 2303 	umull	r2, r3, r2, r3
 800676e:	0c9a      	lsrs	r2, r3, #18
 8006770:	4613      	mov	r3, r2
 8006772:	005b      	lsls	r3, r3, #1
 8006774:	4413      	add	r3, r2
 8006776:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8006778:	e002      	b.n	8006780 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	3b01      	subs	r3, #1
 800677e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1f9      	bne.n	800677a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	2b01      	cmp	r3, #1
 8006792:	d17a      	bne.n	800688a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006798:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800679c:	f023 0301 	bic.w	r3, r3, #1
 80067a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d007      	beq.n	80067c6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80067be:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80067ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067d2:	d106      	bne.n	80067e2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067d8:	f023 0206 	bic.w	r2, r3, #6
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	645a      	str	r2, [r3, #68]	@ 0x44
 80067e0:	e002      	b.n	80067e8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80067f0:	4b31      	ldr	r3, [pc, #196]	@ (80068b8 <HAL_ADC_Start+0x194>)
 80067f2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80067fc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	f003 031f 	and.w	r3, r3, #31
 8006806:	2b00      	cmp	r3, #0
 8006808:	d12a      	bne.n	8006860 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a2b      	ldr	r2, [pc, #172]	@ (80068bc <HAL_ADC_Start+0x198>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d015      	beq.n	8006840 <HAL_ADC_Start+0x11c>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a29      	ldr	r2, [pc, #164]	@ (80068c0 <HAL_ADC_Start+0x19c>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d105      	bne.n	800682a <HAL_ADC_Start+0x106>
 800681e:	4b26      	ldr	r3, [pc, #152]	@ (80068b8 <HAL_ADC_Start+0x194>)
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f003 031f 	and.w	r3, r3, #31
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00a      	beq.n	8006840 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a25      	ldr	r2, [pc, #148]	@ (80068c4 <HAL_ADC_Start+0x1a0>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d136      	bne.n	80068a2 <HAL_ADC_Start+0x17e>
 8006834:	4b20      	ldr	r3, [pc, #128]	@ (80068b8 <HAL_ADC_Start+0x194>)
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f003 0310 	and.w	r3, r3, #16
 800683c:	2b00      	cmp	r3, #0
 800683e:	d130      	bne.n	80068a2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d129      	bne.n	80068a2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	689a      	ldr	r2, [r3, #8]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800685c:	609a      	str	r2, [r3, #8]
 800685e:	e020      	b.n	80068a2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a15      	ldr	r2, [pc, #84]	@ (80068bc <HAL_ADC_Start+0x198>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d11b      	bne.n	80068a2 <HAL_ADC_Start+0x17e>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d114      	bne.n	80068a2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	689a      	ldr	r2, [r3, #8]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006886:	609a      	str	r2, [r3, #8]
 8006888:	e00b      	b.n	80068a2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800688e:	f043 0210 	orr.w	r2, r3, #16
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800689a:	f043 0201 	orr.w	r2, r3, #1
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	20000004 	.word	0x20000004
 80068b4:	431bde83 	.word	0x431bde83
 80068b8:	40012300 	.word	0x40012300
 80068bc:	40012000 	.word	0x40012000
 80068c0:	40012100 	.word	0x40012100
 80068c4:	40012200 	.word	0x40012200

080068c8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d101      	bne.n	80068de <HAL_ADC_Stop+0x16>
 80068da:	2302      	movs	r3, #2
 80068dc:	e021      	b.n	8006922 <HAL_ADC_Stop+0x5a>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689a      	ldr	r2, [r3, #8]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 0201 	bic.w	r2, r2, #1
 80068f4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	2b00      	cmp	r3, #0
 8006902:	d109      	bne.n	8006918 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006908:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800690c:	f023 0301 	bic.w	r3, r3, #1
 8006910:	f043 0201 	orr.w	r2, r3, #1
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	370c      	adds	r7, #12
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b084      	sub	sp, #16
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006938:	2300      	movs	r3, #0
 800693a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006946:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800694a:	d113      	bne.n	8006974 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006956:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800695a:	d10b      	bne.n	8006974 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006960:	f043 0220 	orr.w	r2, r3, #32
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e063      	b.n	8006a3c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8006974:	f7ff fe62 	bl	800663c <HAL_GetTick>
 8006978:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800697a:	e021      	b.n	80069c0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006982:	d01d      	beq.n	80069c0 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d007      	beq.n	800699a <HAL_ADC_PollForConversion+0x6c>
 800698a:	f7ff fe57 	bl	800663c <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	429a      	cmp	r2, r3
 8006998:	d212      	bcs.n	80069c0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d00b      	beq.n	80069c0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ac:	f043 0204 	orr.w	r2, r3, #4
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e03d      	b.n	8006a3c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0302 	and.w	r3, r3, #2
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d1d6      	bne.n	800697c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f06f 0212 	mvn.w	r2, #18
 80069d6:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069dc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d123      	bne.n	8006a3a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d11f      	bne.n	8006a3a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a00:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d006      	beq.n	8006a16 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d111      	bne.n	8006a3a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a1a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d105      	bne.n	8006a3a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a32:	f043 0201 	orr.w	r2, r3, #1
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	370c      	adds	r7, #12
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
	...

08006a60 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d101      	bne.n	8006a7c <HAL_ADC_ConfigChannel+0x1c>
 8006a78:	2302      	movs	r3, #2
 8006a7a:	e105      	b.n	8006c88 <HAL_ADC_ConfigChannel+0x228>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b09      	cmp	r3, #9
 8006a8a:	d925      	bls.n	8006ad8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68d9      	ldr	r1, [r3, #12]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	461a      	mov	r2, r3
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	005b      	lsls	r3, r3, #1
 8006a9e:	4413      	add	r3, r2
 8006aa0:	3b1e      	subs	r3, #30
 8006aa2:	2207      	movs	r2, #7
 8006aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa8:	43da      	mvns	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	400a      	ands	r2, r1
 8006ab0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68d9      	ldr	r1, [r3, #12]
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	689a      	ldr	r2, [r3, #8]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	005b      	lsls	r3, r3, #1
 8006ac8:	4403      	add	r3, r0
 8006aca:	3b1e      	subs	r3, #30
 8006acc:	409a      	lsls	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	60da      	str	r2, [r3, #12]
 8006ad6:	e022      	b.n	8006b1e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6919      	ldr	r1, [r3, #16]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	005b      	lsls	r3, r3, #1
 8006aea:	4413      	add	r3, r2
 8006aec:	2207      	movs	r2, #7
 8006aee:	fa02 f303 	lsl.w	r3, r2, r3
 8006af2:	43da      	mvns	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	400a      	ands	r2, r1
 8006afa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6919      	ldr	r1, [r3, #16]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	689a      	ldr	r2, [r3, #8]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	4603      	mov	r3, r0
 8006b10:	005b      	lsls	r3, r3, #1
 8006b12:	4403      	add	r3, r0
 8006b14:	409a      	lsls	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	2b06      	cmp	r3, #6
 8006b24:	d824      	bhi.n	8006b70 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	4613      	mov	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4413      	add	r3, r2
 8006b36:	3b05      	subs	r3, #5
 8006b38:	221f      	movs	r2, #31
 8006b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3e:	43da      	mvns	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	400a      	ands	r2, r1
 8006b46:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	4618      	mov	r0, r3
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	685a      	ldr	r2, [r3, #4]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4413      	add	r3, r2
 8006b60:	3b05      	subs	r3, #5
 8006b62:	fa00 f203 	lsl.w	r2, r0, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8006b6e:	e04c      	b.n	8006c0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	2b0c      	cmp	r3, #12
 8006b76:	d824      	bhi.n	8006bc2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	4613      	mov	r3, r2
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	4413      	add	r3, r2
 8006b88:	3b23      	subs	r3, #35	@ 0x23
 8006b8a:	221f      	movs	r2, #31
 8006b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b90:	43da      	mvns	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	400a      	ands	r2, r1
 8006b98:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	685a      	ldr	r2, [r3, #4]
 8006bac:	4613      	mov	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4413      	add	r3, r2
 8006bb2:	3b23      	subs	r3, #35	@ 0x23
 8006bb4:	fa00 f203 	lsl.w	r2, r0, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	631a      	str	r2, [r3, #48]	@ 0x30
 8006bc0:	e023      	b.n	8006c0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	3b41      	subs	r3, #65	@ 0x41
 8006bd4:	221f      	movs	r2, #31
 8006bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bda:	43da      	mvns	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	400a      	ands	r2, r1
 8006be2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	3b41      	subs	r3, #65	@ 0x41
 8006bfe:	fa00 f203 	lsl.w	r2, r0, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006c0a:	4b22      	ldr	r3, [pc, #136]	@ (8006c94 <HAL_ADC_ConfigChannel+0x234>)
 8006c0c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a21      	ldr	r2, [pc, #132]	@ (8006c98 <HAL_ADC_ConfigChannel+0x238>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d109      	bne.n	8006c2c <HAL_ADC_ConfigChannel+0x1cc>
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b12      	cmp	r3, #18
 8006c1e:	d105      	bne.n	8006c2c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a19      	ldr	r2, [pc, #100]	@ (8006c98 <HAL_ADC_ConfigChannel+0x238>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d123      	bne.n	8006c7e <HAL_ADC_ConfigChannel+0x21e>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2b10      	cmp	r3, #16
 8006c3c:	d003      	beq.n	8006c46 <HAL_ADC_ConfigChannel+0x1e6>
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b11      	cmp	r3, #17
 8006c44:	d11b      	bne.n	8006c7e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2b10      	cmp	r3, #16
 8006c58:	d111      	bne.n	8006c7e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006c5a:	4b10      	ldr	r3, [pc, #64]	@ (8006c9c <HAL_ADC_ConfigChannel+0x23c>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a10      	ldr	r2, [pc, #64]	@ (8006ca0 <HAL_ADC_ConfigChannel+0x240>)
 8006c60:	fba2 2303 	umull	r2, r3, r2, r3
 8006c64:	0c9a      	lsrs	r2, r3, #18
 8006c66:	4613      	mov	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	005b      	lsls	r3, r3, #1
 8006c6e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006c70:	e002      	b.n	8006c78 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	3b01      	subs	r3, #1
 8006c76:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1f9      	bne.n	8006c72 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	40012300 	.word	0x40012300
 8006c98:	40012000 	.word	0x40012000
 8006c9c:	20000004 	.word	0x20000004
 8006ca0:	431bde83 	.word	0x431bde83

08006ca4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006cac:	4b79      	ldr	r3, [pc, #484]	@ (8006e94 <ADC_Init+0x1f0>)
 8006cae:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	431a      	orrs	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006cd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6859      	ldr	r1, [r3, #4]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	021a      	lsls	r2, r3, #8
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	430a      	orrs	r2, r1
 8006cec:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	685a      	ldr	r2, [r3, #4]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006cfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	6859      	ldr	r1, [r3, #4]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	689a      	ldr	r2, [r3, #8]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	689a      	ldr	r2, [r3, #8]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6899      	ldr	r1, [r3, #8]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68da      	ldr	r2, [r3, #12]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d36:	4a58      	ldr	r2, [pc, #352]	@ (8006e98 <ADC_Init+0x1f4>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d022      	beq.n	8006d82 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689a      	ldr	r2, [r3, #8]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006d4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6899      	ldr	r1, [r3, #8]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	689a      	ldr	r2, [r3, #8]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006d6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	6899      	ldr	r1, [r3, #8]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	430a      	orrs	r2, r1
 8006d7e:	609a      	str	r2, [r3, #8]
 8006d80:	e00f      	b.n	8006da2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	689a      	ldr	r2, [r3, #8]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006d90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	689a      	ldr	r2, [r3, #8]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006da0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f022 0202 	bic.w	r2, r2, #2
 8006db0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6899      	ldr	r1, [r3, #8]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	7e1b      	ldrb	r3, [r3, #24]
 8006dbc:	005a      	lsls	r2, r3, #1
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d01b      	beq.n	8006e08 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	685a      	ldr	r2, [r3, #4]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006dde:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	685a      	ldr	r2, [r3, #4]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006dee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6859      	ldr	r1, [r3, #4]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	035a      	lsls	r2, r3, #13
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	605a      	str	r2, [r3, #4]
 8006e06:	e007      	b.n	8006e18 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685a      	ldr	r2, [r3, #4]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e16:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006e26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	3b01      	subs	r3, #1
 8006e34:	051a      	lsls	r2, r3, #20
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	689a      	ldr	r2, [r3, #8]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006e4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6899      	ldr	r1, [r3, #8]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006e5a:	025a      	lsls	r2, r3, #9
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	430a      	orrs	r2, r1
 8006e62:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689a      	ldr	r2, [r3, #8]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	6899      	ldr	r1, [r3, #8]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	029a      	lsls	r2, r3, #10
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	430a      	orrs	r2, r1
 8006e86:	609a      	str	r2, [r3, #8]
}
 8006e88:	bf00      	nop
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr
 8006e94:	40012300 	.word	0x40012300
 8006e98:	0f000001 	.word	0x0f000001

08006e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f003 0307 	and.w	r3, r3, #7
 8006eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006eac:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006eb8:	4013      	ands	r3, r2
 8006eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006ec4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006ec8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006ece:	4a04      	ldr	r2, [pc, #16]	@ (8006ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	60d3      	str	r3, [r2, #12]
}
 8006ed4:	bf00      	nop
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	e000ed00 	.word	0xe000ed00

08006ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ee8:	4b04      	ldr	r3, [pc, #16]	@ (8006efc <__NVIC_GetPriorityGrouping+0x18>)
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	0a1b      	lsrs	r3, r3, #8
 8006eee:	f003 0307 	and.w	r3, r3, #7
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr
 8006efc:	e000ed00 	.word	0xe000ed00

08006f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	4603      	mov	r3, r0
 8006f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	db0b      	blt.n	8006f2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f12:	79fb      	ldrb	r3, [r7, #7]
 8006f14:	f003 021f 	and.w	r2, r3, #31
 8006f18:	4907      	ldr	r1, [pc, #28]	@ (8006f38 <__NVIC_EnableIRQ+0x38>)
 8006f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f1e:	095b      	lsrs	r3, r3, #5
 8006f20:	2001      	movs	r0, #1
 8006f22:	fa00 f202 	lsl.w	r2, r0, r2
 8006f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006f2a:	bf00      	nop
 8006f2c:	370c      	adds	r7, #12
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	e000e100 	.word	0xe000e100

08006f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	4603      	mov	r3, r0
 8006f44:	6039      	str	r1, [r7, #0]
 8006f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	db0a      	blt.n	8006f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	b2da      	uxtb	r2, r3
 8006f54:	490c      	ldr	r1, [pc, #48]	@ (8006f88 <__NVIC_SetPriority+0x4c>)
 8006f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f5a:	0112      	lsls	r2, r2, #4
 8006f5c:	b2d2      	uxtb	r2, r2
 8006f5e:	440b      	add	r3, r1
 8006f60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006f64:	e00a      	b.n	8006f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	b2da      	uxtb	r2, r3
 8006f6a:	4908      	ldr	r1, [pc, #32]	@ (8006f8c <__NVIC_SetPriority+0x50>)
 8006f6c:	79fb      	ldrb	r3, [r7, #7]
 8006f6e:	f003 030f 	and.w	r3, r3, #15
 8006f72:	3b04      	subs	r3, #4
 8006f74:	0112      	lsls	r2, r2, #4
 8006f76:	b2d2      	uxtb	r2, r2
 8006f78:	440b      	add	r3, r1
 8006f7a:	761a      	strb	r2, [r3, #24]
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	e000e100 	.word	0xe000e100
 8006f8c:	e000ed00 	.word	0xe000ed00

08006f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b089      	sub	sp, #36	@ 0x24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f003 0307 	and.w	r3, r3, #7
 8006fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	f1c3 0307 	rsb	r3, r3, #7
 8006faa:	2b04      	cmp	r3, #4
 8006fac:	bf28      	it	cs
 8006fae:	2304      	movcs	r3, #4
 8006fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	3304      	adds	r3, #4
 8006fb6:	2b06      	cmp	r3, #6
 8006fb8:	d902      	bls.n	8006fc0 <NVIC_EncodePriority+0x30>
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	3b03      	subs	r3, #3
 8006fbe:	e000      	b.n	8006fc2 <NVIC_EncodePriority+0x32>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	fa02 f303 	lsl.w	r3, r2, r3
 8006fce:	43da      	mvns	r2, r3
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	401a      	ands	r2, r3
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	fa01 f303 	lsl.w	r3, r1, r3
 8006fe2:	43d9      	mvns	r1, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fe8:	4313      	orrs	r3, r2
         );
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3724      	adds	r7, #36	@ 0x24
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
	...

08006ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	3b01      	subs	r3, #1
 8007004:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007008:	d301      	bcc.n	800700e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800700a:	2301      	movs	r3, #1
 800700c:	e00f      	b.n	800702e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800700e:	4a0a      	ldr	r2, [pc, #40]	@ (8007038 <SysTick_Config+0x40>)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	3b01      	subs	r3, #1
 8007014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007016:	210f      	movs	r1, #15
 8007018:	f04f 30ff 	mov.w	r0, #4294967295
 800701c:	f7ff ff8e 	bl	8006f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007020:	4b05      	ldr	r3, [pc, #20]	@ (8007038 <SysTick_Config+0x40>)
 8007022:	2200      	movs	r2, #0
 8007024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007026:	4b04      	ldr	r3, [pc, #16]	@ (8007038 <SysTick_Config+0x40>)
 8007028:	2207      	movs	r2, #7
 800702a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3708      	adds	r7, #8
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	e000e010 	.word	0xe000e010

0800703c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f7ff ff29 	bl	8006e9c <__NVIC_SetPriorityGrouping>
}
 800704a:	bf00      	nop
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007052:	b580      	push	{r7, lr}
 8007054:	b086      	sub	sp, #24
 8007056:	af00      	add	r7, sp, #0
 8007058:	4603      	mov	r3, r0
 800705a:	60b9      	str	r1, [r7, #8]
 800705c:	607a      	str	r2, [r7, #4]
 800705e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007060:	2300      	movs	r3, #0
 8007062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007064:	f7ff ff3e 	bl	8006ee4 <__NVIC_GetPriorityGrouping>
 8007068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	68b9      	ldr	r1, [r7, #8]
 800706e:	6978      	ldr	r0, [r7, #20]
 8007070:	f7ff ff8e 	bl	8006f90 <NVIC_EncodePriority>
 8007074:	4602      	mov	r2, r0
 8007076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800707a:	4611      	mov	r1, r2
 800707c:	4618      	mov	r0, r3
 800707e:	f7ff ff5d 	bl	8006f3c <__NVIC_SetPriority>
}
 8007082:	bf00      	nop
 8007084:	3718      	adds	r7, #24
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b082      	sub	sp, #8
 800708e:	af00      	add	r7, sp, #0
 8007090:	4603      	mov	r3, r0
 8007092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007098:	4618      	mov	r0, r3
 800709a:	f7ff ff31 	bl	8006f00 <__NVIC_EnableIRQ>
}
 800709e:	bf00      	nop
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b082      	sub	sp, #8
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7ff ffa2 	bl	8006ff8 <SysTick_Config>
 80070b4:	4603      	mov	r3, r0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3708      	adds	r7, #8
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
	...

080070c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80070c8:	2300      	movs	r3, #0
 80070ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80070cc:	f7ff fab6 	bl	800663c <HAL_GetTick>
 80070d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d101      	bne.n	80070dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e099      	b.n	8007210 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f022 0201 	bic.w	r2, r2, #1
 80070fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80070fc:	e00f      	b.n	800711e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80070fe:	f7ff fa9d 	bl	800663c <HAL_GetTick>
 8007102:	4602      	mov	r2, r0
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	2b05      	cmp	r3, #5
 800710a:	d908      	bls.n	800711e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2220      	movs	r2, #32
 8007110:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2203      	movs	r2, #3
 8007116:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e078      	b.n	8007210 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1e8      	bne.n	80070fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	4b38      	ldr	r3, [pc, #224]	@ (8007218 <HAL_DMA_Init+0x158>)
 8007138:	4013      	ands	r3, r2
 800713a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800714a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007156:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007162:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a1b      	ldr	r3, [r3, #32]
 8007168:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	4313      	orrs	r3, r2
 800716e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007174:	2b04      	cmp	r3, #4
 8007176:	d107      	bne.n	8007188 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007180:	4313      	orrs	r3, r2
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	4313      	orrs	r3, r2
 8007186:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	697a      	ldr	r2, [r7, #20]
 800718e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f023 0307 	bic.w	r3, r3, #7
 800719e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ae:	2b04      	cmp	r3, #4
 80071b0:	d117      	bne.n	80071e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00e      	beq.n	80071e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fb01 	bl	80077cc <DMA_CheckFifoParam>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d008      	beq.n	80071e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2240      	movs	r2, #64	@ 0x40
 80071d4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80071de:	2301      	movs	r3, #1
 80071e0:	e016      	b.n	8007210 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 fab8 	bl	8007760 <DMA_CalcBaseAndBitshift>
 80071f0:	4603      	mov	r3, r0
 80071f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071f8:	223f      	movs	r2, #63	@ 0x3f
 80071fa:	409a      	lsls	r2, r3
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3718      	adds	r7, #24
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	f010803f 	.word	0xf010803f

0800721c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
 8007228:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800722a:	2300      	movs	r3, #0
 800722c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007232:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800723a:	2b01      	cmp	r3, #1
 800723c:	d101      	bne.n	8007242 <HAL_DMA_Start_IT+0x26>
 800723e:	2302      	movs	r3, #2
 8007240:	e040      	b.n	80072c4 <HAL_DMA_Start_IT+0xa8>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b01      	cmp	r3, #1
 8007254:	d12f      	bne.n	80072b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2202      	movs	r2, #2
 800725a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	68b9      	ldr	r1, [r7, #8]
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f000 fa4a 	bl	8007704 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007274:	223f      	movs	r2, #63	@ 0x3f
 8007276:	409a      	lsls	r2, r3
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f042 0216 	orr.w	r2, r2, #22
 800728a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007290:	2b00      	cmp	r3, #0
 8007292:	d007      	beq.n	80072a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f042 0208 	orr.w	r2, r2, #8
 80072a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f042 0201 	orr.w	r2, r2, #1
 80072b2:	601a      	str	r2, [r3, #0]
 80072b4:	e005      	b.n	80072c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80072be:	2302      	movs	r3, #2
 80072c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80072c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3718      	adds	r7, #24
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80072da:	f7ff f9af 	bl	800663c <HAL_GetTick>
 80072de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d008      	beq.n	80072fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2280      	movs	r2, #128	@ 0x80
 80072f0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e052      	b.n	80073a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f022 0216 	bic.w	r2, r2, #22
 800730c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	695a      	ldr	r2, [r3, #20]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800731c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007322:	2b00      	cmp	r3, #0
 8007324:	d103      	bne.n	800732e <HAL_DMA_Abort+0x62>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800732a:	2b00      	cmp	r3, #0
 800732c:	d007      	beq.n	800733e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f022 0208 	bic.w	r2, r2, #8
 800733c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f022 0201 	bic.w	r2, r2, #1
 800734c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800734e:	e013      	b.n	8007378 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007350:	f7ff f974 	bl	800663c <HAL_GetTick>
 8007354:	4602      	mov	r2, r0
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	2b05      	cmp	r3, #5
 800735c:	d90c      	bls.n	8007378 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2220      	movs	r2, #32
 8007362:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2203      	movs	r2, #3
 8007368:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e015      	b.n	80073a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0301 	and.w	r3, r3, #1
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1e4      	bne.n	8007350 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800738a:	223f      	movs	r2, #63	@ 0x3f
 800738c:	409a      	lsls	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3710      	adds	r7, #16
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d004      	beq.n	80073ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2280      	movs	r2, #128	@ 0x80
 80073c4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e00c      	b.n	80073e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2205      	movs	r2, #5
 80073ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f022 0201 	bic.w	r2, r2, #1
 80073e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80073f8:	2300      	movs	r3, #0
 80073fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80073fc:	4b8e      	ldr	r3, [pc, #568]	@ (8007638 <HAL_DMA_IRQHandler+0x248>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a8e      	ldr	r2, [pc, #568]	@ (800763c <HAL_DMA_IRQHandler+0x24c>)
 8007402:	fba2 2303 	umull	r2, r3, r2, r3
 8007406:	0a9b      	lsrs	r3, r3, #10
 8007408:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800740e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800741a:	2208      	movs	r2, #8
 800741c:	409a      	lsls	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	4013      	ands	r3, r2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d01a      	beq.n	800745c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0304 	and.w	r3, r3, #4
 8007430:	2b00      	cmp	r3, #0
 8007432:	d013      	beq.n	800745c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f022 0204 	bic.w	r2, r2, #4
 8007442:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007448:	2208      	movs	r2, #8
 800744a:	409a      	lsls	r2, r3
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007454:	f043 0201 	orr.w	r2, r3, #1
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007460:	2201      	movs	r2, #1
 8007462:	409a      	lsls	r2, r3
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	4013      	ands	r3, r2
 8007468:	2b00      	cmp	r3, #0
 800746a:	d012      	beq.n	8007492 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00b      	beq.n	8007492 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800747e:	2201      	movs	r2, #1
 8007480:	409a      	lsls	r2, r3
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800748a:	f043 0202 	orr.w	r2, r3, #2
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007496:	2204      	movs	r2, #4
 8007498:	409a      	lsls	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	4013      	ands	r3, r2
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d012      	beq.n	80074c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0302 	and.w	r3, r3, #2
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00b      	beq.n	80074c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074b4:	2204      	movs	r2, #4
 80074b6:	409a      	lsls	r2, r3
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074c0:	f043 0204 	orr.w	r2, r3, #4
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074cc:	2210      	movs	r2, #16
 80074ce:	409a      	lsls	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4013      	ands	r3, r2
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d043      	beq.n	8007560 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 0308 	and.w	r3, r3, #8
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d03c      	beq.n	8007560 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ea:	2210      	movs	r2, #16
 80074ec:	409a      	lsls	r2, r3
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d018      	beq.n	8007532 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d108      	bne.n	8007520 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007512:	2b00      	cmp	r3, #0
 8007514:	d024      	beq.n	8007560 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	4798      	blx	r3
 800751e:	e01f      	b.n	8007560 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007524:	2b00      	cmp	r3, #0
 8007526:	d01b      	beq.n	8007560 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	4798      	blx	r3
 8007530:	e016      	b.n	8007560 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800753c:	2b00      	cmp	r3, #0
 800753e:	d107      	bne.n	8007550 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f022 0208 	bic.w	r2, r2, #8
 800754e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007554:	2b00      	cmp	r3, #0
 8007556:	d003      	beq.n	8007560 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007564:	2220      	movs	r2, #32
 8007566:	409a      	lsls	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	4013      	ands	r3, r2
 800756c:	2b00      	cmp	r3, #0
 800756e:	f000 808f 	beq.w	8007690 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0310 	and.w	r3, r3, #16
 800757c:	2b00      	cmp	r3, #0
 800757e:	f000 8087 	beq.w	8007690 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007586:	2220      	movs	r2, #32
 8007588:	409a      	lsls	r2, r3
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007594:	b2db      	uxtb	r3, r3
 8007596:	2b05      	cmp	r3, #5
 8007598:	d136      	bne.n	8007608 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f022 0216 	bic.w	r2, r2, #22
 80075a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	695a      	ldr	r2, [r3, #20]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80075b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d103      	bne.n	80075ca <HAL_DMA_IRQHandler+0x1da>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d007      	beq.n	80075da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f022 0208 	bic.w	r2, r2, #8
 80075d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075de:	223f      	movs	r2, #63	@ 0x3f
 80075e0:	409a      	lsls	r2, r3
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d07e      	beq.n	80076fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	4798      	blx	r3
        }
        return;
 8007606:	e079      	b.n	80076fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d01d      	beq.n	8007652 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d10d      	bne.n	8007640 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007628:	2b00      	cmp	r3, #0
 800762a:	d031      	beq.n	8007690 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	4798      	blx	r3
 8007634:	e02c      	b.n	8007690 <HAL_DMA_IRQHandler+0x2a0>
 8007636:	bf00      	nop
 8007638:	20000004 	.word	0x20000004
 800763c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007644:	2b00      	cmp	r3, #0
 8007646:	d023      	beq.n	8007690 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	4798      	blx	r3
 8007650:	e01e      	b.n	8007690 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10f      	bne.n	8007680 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f022 0210 	bic.w	r2, r2, #16
 800766e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007684:	2b00      	cmp	r3, #0
 8007686:	d003      	beq.n	8007690 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007694:	2b00      	cmp	r3, #0
 8007696:	d032      	beq.n	80076fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800769c:	f003 0301 	and.w	r3, r3, #1
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d022      	beq.n	80076ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2205      	movs	r2, #5
 80076a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f022 0201 	bic.w	r2, r2, #1
 80076ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	3301      	adds	r3, #1
 80076c0:	60bb      	str	r3, [r7, #8]
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d307      	bcc.n	80076d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0301 	and.w	r3, r3, #1
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1f2      	bne.n	80076bc <HAL_DMA_IRQHandler+0x2cc>
 80076d6:	e000      	b.n	80076da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80076d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d005      	beq.n	80076fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	4798      	blx	r3
 80076fa:	e000      	b.n	80076fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80076fc:	bf00      	nop
    }
  }
}
 80076fe:	3718      	adds	r7, #24
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	607a      	str	r2, [r7, #4]
 8007710:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007720:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	2b40      	cmp	r3, #64	@ 0x40
 8007730:	d108      	bne.n	8007744 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007742:	e007      	b.n	8007754 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	60da      	str	r2, [r3, #12]
}
 8007754:	bf00      	nop
 8007756:	3714      	adds	r7, #20
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007760:	b480      	push	{r7}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	b2db      	uxtb	r3, r3
 800776e:	3b10      	subs	r3, #16
 8007770:	4a14      	ldr	r2, [pc, #80]	@ (80077c4 <DMA_CalcBaseAndBitshift+0x64>)
 8007772:	fba2 2303 	umull	r2, r3, r2, r3
 8007776:	091b      	lsrs	r3, r3, #4
 8007778:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800777a:	4a13      	ldr	r2, [pc, #76]	@ (80077c8 <DMA_CalcBaseAndBitshift+0x68>)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	4413      	add	r3, r2
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	461a      	mov	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2b03      	cmp	r3, #3
 800778c:	d909      	bls.n	80077a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007796:	f023 0303 	bic.w	r3, r3, #3
 800779a:	1d1a      	adds	r2, r3, #4
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	659a      	str	r2, [r3, #88]	@ 0x58
 80077a0:	e007      	b.n	80077b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80077aa:	f023 0303 	bic.w	r3, r3, #3
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	aaaaaaab 	.word	0xaaaaaaab
 80077c8:	08014310 	.word	0x08014310

080077cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d11f      	bne.n	8007826 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	2b03      	cmp	r3, #3
 80077ea:	d856      	bhi.n	800789a <DMA_CheckFifoParam+0xce>
 80077ec:	a201      	add	r2, pc, #4	@ (adr r2, 80077f4 <DMA_CheckFifoParam+0x28>)
 80077ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f2:	bf00      	nop
 80077f4:	08007805 	.word	0x08007805
 80077f8:	08007817 	.word	0x08007817
 80077fc:	08007805 	.word	0x08007805
 8007800:	0800789b 	.word	0x0800789b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007808:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800780c:	2b00      	cmp	r3, #0
 800780e:	d046      	beq.n	800789e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007814:	e043      	b.n	800789e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800781a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800781e:	d140      	bne.n	80078a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007824:	e03d      	b.n	80078a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800782e:	d121      	bne.n	8007874 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	2b03      	cmp	r3, #3
 8007834:	d837      	bhi.n	80078a6 <DMA_CheckFifoParam+0xda>
 8007836:	a201      	add	r2, pc, #4	@ (adr r2, 800783c <DMA_CheckFifoParam+0x70>)
 8007838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783c:	0800784d 	.word	0x0800784d
 8007840:	08007853 	.word	0x08007853
 8007844:	0800784d 	.word	0x0800784d
 8007848:	08007865 	.word	0x08007865
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	73fb      	strb	r3, [r7, #15]
      break;
 8007850:	e030      	b.n	80078b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007856:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800785a:	2b00      	cmp	r3, #0
 800785c:	d025      	beq.n	80078aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007862:	e022      	b.n	80078aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007868:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800786c:	d11f      	bne.n	80078ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007872:	e01c      	b.n	80078ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	2b02      	cmp	r3, #2
 8007878:	d903      	bls.n	8007882 <DMA_CheckFifoParam+0xb6>
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	2b03      	cmp	r3, #3
 800787e:	d003      	beq.n	8007888 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007880:	e018      	b.n	80078b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	73fb      	strb	r3, [r7, #15]
      break;
 8007886:	e015      	b.n	80078b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800788c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00e      	beq.n	80078b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	73fb      	strb	r3, [r7, #15]
      break;
 8007898:	e00b      	b.n	80078b2 <DMA_CheckFifoParam+0xe6>
      break;
 800789a:	bf00      	nop
 800789c:	e00a      	b.n	80078b4 <DMA_CheckFifoParam+0xe8>
      break;
 800789e:	bf00      	nop
 80078a0:	e008      	b.n	80078b4 <DMA_CheckFifoParam+0xe8>
      break;
 80078a2:	bf00      	nop
 80078a4:	e006      	b.n	80078b4 <DMA_CheckFifoParam+0xe8>
      break;
 80078a6:	bf00      	nop
 80078a8:	e004      	b.n	80078b4 <DMA_CheckFifoParam+0xe8>
      break;
 80078aa:	bf00      	nop
 80078ac:	e002      	b.n	80078b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80078ae:	bf00      	nop
 80078b0:	e000      	b.n	80078b4 <DMA_CheckFifoParam+0xe8>
      break;
 80078b2:	bf00      	nop
    }
  } 
  
  return status; 
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3714      	adds	r7, #20
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop

080078c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b089      	sub	sp, #36	@ 0x24
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80078ce:	2300      	movs	r3, #0
 80078d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80078d2:	2300      	movs	r3, #0
 80078d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80078d6:	2300      	movs	r3, #0
 80078d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80078da:	2300      	movs	r3, #0
 80078dc:	61fb      	str	r3, [r7, #28]
 80078de:	e16b      	b.n	8007bb8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80078e0:	2201      	movs	r2, #1
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	fa02 f303 	lsl.w	r3, r2, r3
 80078e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	4013      	ands	r3, r2
 80078f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	f040 815a 	bne.w	8007bb2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f003 0303 	and.w	r3, r3, #3
 8007906:	2b01      	cmp	r3, #1
 8007908:	d005      	beq.n	8007916 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007912:	2b02      	cmp	r3, #2
 8007914:	d130      	bne.n	8007978 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	005b      	lsls	r3, r3, #1
 8007920:	2203      	movs	r2, #3
 8007922:	fa02 f303 	lsl.w	r3, r2, r3
 8007926:	43db      	mvns	r3, r3
 8007928:	69ba      	ldr	r2, [r7, #24]
 800792a:	4013      	ands	r3, r2
 800792c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	68da      	ldr	r2, [r3, #12]
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	005b      	lsls	r3, r3, #1
 8007936:	fa02 f303 	lsl.w	r3, r2, r3
 800793a:	69ba      	ldr	r2, [r7, #24]
 800793c:	4313      	orrs	r3, r2
 800793e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	69ba      	ldr	r2, [r7, #24]
 8007944:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800794c:	2201      	movs	r2, #1
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	fa02 f303 	lsl.w	r3, r2, r3
 8007954:	43db      	mvns	r3, r3
 8007956:	69ba      	ldr	r2, [r7, #24]
 8007958:	4013      	ands	r3, r2
 800795a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	091b      	lsrs	r3, r3, #4
 8007962:	f003 0201 	and.w	r2, r3, #1
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	fa02 f303 	lsl.w	r3, r2, r3
 800796c:	69ba      	ldr	r2, [r7, #24]
 800796e:	4313      	orrs	r3, r2
 8007970:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	69ba      	ldr	r2, [r7, #24]
 8007976:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	f003 0303 	and.w	r3, r3, #3
 8007980:	2b03      	cmp	r3, #3
 8007982:	d017      	beq.n	80079b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	005b      	lsls	r3, r3, #1
 800798e:	2203      	movs	r2, #3
 8007990:	fa02 f303 	lsl.w	r3, r2, r3
 8007994:	43db      	mvns	r3, r3
 8007996:	69ba      	ldr	r2, [r7, #24]
 8007998:	4013      	ands	r3, r2
 800799a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	689a      	ldr	r2, [r3, #8]
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	005b      	lsls	r3, r3, #1
 80079a4:	fa02 f303 	lsl.w	r3, r2, r3
 80079a8:	69ba      	ldr	r2, [r7, #24]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	69ba      	ldr	r2, [r7, #24]
 80079b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f003 0303 	and.w	r3, r3, #3
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d123      	bne.n	8007a08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	08da      	lsrs	r2, r3, #3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	3208      	adds	r2, #8
 80079c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	f003 0307 	and.w	r3, r3, #7
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	220f      	movs	r2, #15
 80079d8:	fa02 f303 	lsl.w	r3, r2, r3
 80079dc:	43db      	mvns	r3, r3
 80079de:	69ba      	ldr	r2, [r7, #24]
 80079e0:	4013      	ands	r3, r2
 80079e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	691a      	ldr	r2, [r3, #16]
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	f003 0307 	and.w	r3, r3, #7
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	fa02 f303 	lsl.w	r3, r2, r3
 80079f4:	69ba      	ldr	r2, [r7, #24]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	08da      	lsrs	r2, r3, #3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	3208      	adds	r2, #8
 8007a02:	69b9      	ldr	r1, [r7, #24]
 8007a04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	005b      	lsls	r3, r3, #1
 8007a12:	2203      	movs	r2, #3
 8007a14:	fa02 f303 	lsl.w	r3, r2, r3
 8007a18:	43db      	mvns	r3, r3
 8007a1a:	69ba      	ldr	r2, [r7, #24]
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	f003 0203 	and.w	r2, r3, #3
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	005b      	lsls	r3, r3, #1
 8007a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a30:	69ba      	ldr	r2, [r7, #24]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	69ba      	ldr	r2, [r7, #24]
 8007a3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f000 80b4 	beq.w	8007bb2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	60fb      	str	r3, [r7, #12]
 8007a4e:	4b60      	ldr	r3, [pc, #384]	@ (8007bd0 <HAL_GPIO_Init+0x30c>)
 8007a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a52:	4a5f      	ldr	r2, [pc, #380]	@ (8007bd0 <HAL_GPIO_Init+0x30c>)
 8007a54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007a58:	6453      	str	r3, [r2, #68]	@ 0x44
 8007a5a:	4b5d      	ldr	r3, [pc, #372]	@ (8007bd0 <HAL_GPIO_Init+0x30c>)
 8007a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a62:	60fb      	str	r3, [r7, #12]
 8007a64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007a66:	4a5b      	ldr	r2, [pc, #364]	@ (8007bd4 <HAL_GPIO_Init+0x310>)
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	089b      	lsrs	r3, r3, #2
 8007a6c:	3302      	adds	r3, #2
 8007a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	f003 0303 	and.w	r3, r3, #3
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	220f      	movs	r2, #15
 8007a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a82:	43db      	mvns	r3, r3
 8007a84:	69ba      	ldr	r2, [r7, #24]
 8007a86:	4013      	ands	r3, r2
 8007a88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a52      	ldr	r2, [pc, #328]	@ (8007bd8 <HAL_GPIO_Init+0x314>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d02b      	beq.n	8007aea <HAL_GPIO_Init+0x226>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a51      	ldr	r2, [pc, #324]	@ (8007bdc <HAL_GPIO_Init+0x318>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d025      	beq.n	8007ae6 <HAL_GPIO_Init+0x222>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a50      	ldr	r2, [pc, #320]	@ (8007be0 <HAL_GPIO_Init+0x31c>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d01f      	beq.n	8007ae2 <HAL_GPIO_Init+0x21e>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a4f      	ldr	r2, [pc, #316]	@ (8007be4 <HAL_GPIO_Init+0x320>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d019      	beq.n	8007ade <HAL_GPIO_Init+0x21a>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a4e      	ldr	r2, [pc, #312]	@ (8007be8 <HAL_GPIO_Init+0x324>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d013      	beq.n	8007ada <HAL_GPIO_Init+0x216>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a4d      	ldr	r2, [pc, #308]	@ (8007bec <HAL_GPIO_Init+0x328>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d00d      	beq.n	8007ad6 <HAL_GPIO_Init+0x212>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a4c      	ldr	r2, [pc, #304]	@ (8007bf0 <HAL_GPIO_Init+0x32c>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d007      	beq.n	8007ad2 <HAL_GPIO_Init+0x20e>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a4b      	ldr	r2, [pc, #300]	@ (8007bf4 <HAL_GPIO_Init+0x330>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d101      	bne.n	8007ace <HAL_GPIO_Init+0x20a>
 8007aca:	2307      	movs	r3, #7
 8007acc:	e00e      	b.n	8007aec <HAL_GPIO_Init+0x228>
 8007ace:	2308      	movs	r3, #8
 8007ad0:	e00c      	b.n	8007aec <HAL_GPIO_Init+0x228>
 8007ad2:	2306      	movs	r3, #6
 8007ad4:	e00a      	b.n	8007aec <HAL_GPIO_Init+0x228>
 8007ad6:	2305      	movs	r3, #5
 8007ad8:	e008      	b.n	8007aec <HAL_GPIO_Init+0x228>
 8007ada:	2304      	movs	r3, #4
 8007adc:	e006      	b.n	8007aec <HAL_GPIO_Init+0x228>
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e004      	b.n	8007aec <HAL_GPIO_Init+0x228>
 8007ae2:	2302      	movs	r3, #2
 8007ae4:	e002      	b.n	8007aec <HAL_GPIO_Init+0x228>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e000      	b.n	8007aec <HAL_GPIO_Init+0x228>
 8007aea:	2300      	movs	r3, #0
 8007aec:	69fa      	ldr	r2, [r7, #28]
 8007aee:	f002 0203 	and.w	r2, r2, #3
 8007af2:	0092      	lsls	r2, r2, #2
 8007af4:	4093      	lsls	r3, r2
 8007af6:	69ba      	ldr	r2, [r7, #24]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007afc:	4935      	ldr	r1, [pc, #212]	@ (8007bd4 <HAL_GPIO_Init+0x310>)
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	089b      	lsrs	r3, r3, #2
 8007b02:	3302      	adds	r3, #2
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007b0a:	4b3b      	ldr	r3, [pc, #236]	@ (8007bf8 <HAL_GPIO_Init+0x334>)
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	43db      	mvns	r3, r3
 8007b14:	69ba      	ldr	r2, [r7, #24]
 8007b16:	4013      	ands	r3, r2
 8007b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d003      	beq.n	8007b2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007b26:	69ba      	ldr	r2, [r7, #24]
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007b2e:	4a32      	ldr	r2, [pc, #200]	@ (8007bf8 <HAL_GPIO_Init+0x334>)
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007b34:	4b30      	ldr	r3, [pc, #192]	@ (8007bf8 <HAL_GPIO_Init+0x334>)
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	43db      	mvns	r3, r3
 8007b3e:	69ba      	ldr	r2, [r7, #24]
 8007b40:	4013      	ands	r3, r2
 8007b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d003      	beq.n	8007b58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007b50:	69ba      	ldr	r2, [r7, #24]
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007b58:	4a27      	ldr	r2, [pc, #156]	@ (8007bf8 <HAL_GPIO_Init+0x334>)
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007b5e:	4b26      	ldr	r3, [pc, #152]	@ (8007bf8 <HAL_GPIO_Init+0x334>)
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	43db      	mvns	r3, r3
 8007b68:	69ba      	ldr	r2, [r7, #24]
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d003      	beq.n	8007b82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007b7a:	69ba      	ldr	r2, [r7, #24]
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007b82:	4a1d      	ldr	r2, [pc, #116]	@ (8007bf8 <HAL_GPIO_Init+0x334>)
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007b88:	4b1b      	ldr	r3, [pc, #108]	@ (8007bf8 <HAL_GPIO_Init+0x334>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	43db      	mvns	r3, r3
 8007b92:	69ba      	ldr	r2, [r7, #24]
 8007b94:	4013      	ands	r3, r2
 8007b96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d003      	beq.n	8007bac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007ba4:	69ba      	ldr	r2, [r7, #24]
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007bac:	4a12      	ldr	r2, [pc, #72]	@ (8007bf8 <HAL_GPIO_Init+0x334>)
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	61fb      	str	r3, [r7, #28]
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	2b0f      	cmp	r3, #15
 8007bbc:	f67f ae90 	bls.w	80078e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007bc0:	bf00      	nop
 8007bc2:	bf00      	nop
 8007bc4:	3724      	adds	r7, #36	@ 0x24
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	40023800 	.word	0x40023800
 8007bd4:	40013800 	.word	0x40013800
 8007bd8:	40020000 	.word	0x40020000
 8007bdc:	40020400 	.word	0x40020400
 8007be0:	40020800 	.word	0x40020800
 8007be4:	40020c00 	.word	0x40020c00
 8007be8:	40021000 	.word	0x40021000
 8007bec:	40021400 	.word	0x40021400
 8007bf0:	40021800 	.word	0x40021800
 8007bf4:	40021c00 	.word	0x40021c00
 8007bf8:	40013c00 	.word	0x40013c00

08007bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	460b      	mov	r3, r1
 8007c06:	807b      	strh	r3, [r7, #2]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007c0c:	787b      	ldrb	r3, [r7, #1]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d003      	beq.n	8007c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c12:	887a      	ldrh	r2, [r7, #2]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007c18:	e003      	b.n	8007c22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007c1a:	887b      	ldrh	r3, [r7, #2]
 8007c1c:	041a      	lsls	r2, r3, #16
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	619a      	str	r2, [r3, #24]
}
 8007c22:	bf00      	nop
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
	...

08007c30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	4603      	mov	r3, r0
 8007c38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007c3a:	4b08      	ldr	r3, [pc, #32]	@ (8007c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c3c:	695a      	ldr	r2, [r3, #20]
 8007c3e:	88fb      	ldrh	r3, [r7, #6]
 8007c40:	4013      	ands	r3, r2
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d006      	beq.n	8007c54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007c46:	4a05      	ldr	r2, [pc, #20]	@ (8007c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c48:	88fb      	ldrh	r3, [r7, #6]
 8007c4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007c4c:	88fb      	ldrh	r3, [r7, #6]
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7fd f87c 	bl	8004d4c <HAL_GPIO_EXTI_Callback>
  }
}
 8007c54:	bf00      	nop
 8007c56:	3708      	adds	r7, #8
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	40013c00 	.word	0x40013c00

08007c60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d101      	bne.n	8007c72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e12b      	b.n	8007eca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d106      	bne.n	8007c8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f7fc ff92 	bl	8004bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2224      	movs	r2, #36	@ 0x24
 8007c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 0201 	bic.w	r2, r2, #1
 8007ca2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007cb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007cc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007cc4:	f001 fd76 	bl	80097b4 <HAL_RCC_GetPCLK1Freq>
 8007cc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	4a81      	ldr	r2, [pc, #516]	@ (8007ed4 <HAL_I2C_Init+0x274>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d807      	bhi.n	8007ce4 <HAL_I2C_Init+0x84>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	4a80      	ldr	r2, [pc, #512]	@ (8007ed8 <HAL_I2C_Init+0x278>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	bf94      	ite	ls
 8007cdc:	2301      	movls	r3, #1
 8007cde:	2300      	movhi	r3, #0
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	e006      	b.n	8007cf2 <HAL_I2C_Init+0x92>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4a7d      	ldr	r2, [pc, #500]	@ (8007edc <HAL_I2C_Init+0x27c>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	bf94      	ite	ls
 8007cec:	2301      	movls	r3, #1
 8007cee:	2300      	movhi	r3, #0
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e0e7      	b.n	8007eca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	4a78      	ldr	r2, [pc, #480]	@ (8007ee0 <HAL_I2C_Init+0x280>)
 8007cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8007d02:	0c9b      	lsrs	r3, r3, #18
 8007d04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	430a      	orrs	r2, r1
 8007d18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	6a1b      	ldr	r3, [r3, #32]
 8007d20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	4a6a      	ldr	r2, [pc, #424]	@ (8007ed4 <HAL_I2C_Init+0x274>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d802      	bhi.n	8007d34 <HAL_I2C_Init+0xd4>
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	3301      	adds	r3, #1
 8007d32:	e009      	b.n	8007d48 <HAL_I2C_Init+0xe8>
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007d3a:	fb02 f303 	mul.w	r3, r2, r3
 8007d3e:	4a69      	ldr	r2, [pc, #420]	@ (8007ee4 <HAL_I2C_Init+0x284>)
 8007d40:	fba2 2303 	umull	r2, r3, r2, r3
 8007d44:	099b      	lsrs	r3, r3, #6
 8007d46:	3301      	adds	r3, #1
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	6812      	ldr	r2, [r2, #0]
 8007d4c:	430b      	orrs	r3, r1
 8007d4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	69db      	ldr	r3, [r3, #28]
 8007d56:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007d5a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	495c      	ldr	r1, [pc, #368]	@ (8007ed4 <HAL_I2C_Init+0x274>)
 8007d64:	428b      	cmp	r3, r1
 8007d66:	d819      	bhi.n	8007d9c <HAL_I2C_Init+0x13c>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	1e59      	subs	r1, r3, #1
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	005b      	lsls	r3, r3, #1
 8007d72:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d76:	1c59      	adds	r1, r3, #1
 8007d78:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007d7c:	400b      	ands	r3, r1
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00a      	beq.n	8007d98 <HAL_I2C_Init+0x138>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	1e59      	subs	r1, r3, #1
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	005b      	lsls	r3, r3, #1
 8007d8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d90:	3301      	adds	r3, #1
 8007d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d96:	e051      	b.n	8007e3c <HAL_I2C_Init+0x1dc>
 8007d98:	2304      	movs	r3, #4
 8007d9a:	e04f      	b.n	8007e3c <HAL_I2C_Init+0x1dc>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d111      	bne.n	8007dc8 <HAL_I2C_Init+0x168>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	1e58      	subs	r0, r3, #1
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6859      	ldr	r1, [r3, #4]
 8007dac:	460b      	mov	r3, r1
 8007dae:	005b      	lsls	r3, r3, #1
 8007db0:	440b      	add	r3, r1
 8007db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8007db6:	3301      	adds	r3, #1
 8007db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	bf0c      	ite	eq
 8007dc0:	2301      	moveq	r3, #1
 8007dc2:	2300      	movne	r3, #0
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	e012      	b.n	8007dee <HAL_I2C_Init+0x18e>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	1e58      	subs	r0, r3, #1
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6859      	ldr	r1, [r3, #4]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	440b      	add	r3, r1
 8007dd6:	0099      	lsls	r1, r3, #2
 8007dd8:	440b      	add	r3, r1
 8007dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8007dde:	3301      	adds	r3, #1
 8007de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	bf0c      	ite	eq
 8007de8:	2301      	moveq	r3, #1
 8007dea:	2300      	movne	r3, #0
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d001      	beq.n	8007df6 <HAL_I2C_Init+0x196>
 8007df2:	2301      	movs	r3, #1
 8007df4:	e022      	b.n	8007e3c <HAL_I2C_Init+0x1dc>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10e      	bne.n	8007e1c <HAL_I2C_Init+0x1bc>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	1e58      	subs	r0, r3, #1
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6859      	ldr	r1, [r3, #4]
 8007e06:	460b      	mov	r3, r1
 8007e08:	005b      	lsls	r3, r3, #1
 8007e0a:	440b      	add	r3, r1
 8007e0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e10:	3301      	adds	r3, #1
 8007e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e1a:	e00f      	b.n	8007e3c <HAL_I2C_Init+0x1dc>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	1e58      	subs	r0, r3, #1
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6859      	ldr	r1, [r3, #4]
 8007e24:	460b      	mov	r3, r1
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	440b      	add	r3, r1
 8007e2a:	0099      	lsls	r1, r3, #2
 8007e2c:	440b      	add	r3, r1
 8007e2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e32:	3301      	adds	r3, #1
 8007e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007e3c:	6879      	ldr	r1, [r7, #4]
 8007e3e:	6809      	ldr	r1, [r1, #0]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	69da      	ldr	r2, [r3, #28]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	431a      	orrs	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	430a      	orrs	r2, r1
 8007e5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007e6a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	6911      	ldr	r1, [r2, #16]
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	68d2      	ldr	r2, [r2, #12]
 8007e76:	4311      	orrs	r1, r2
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	6812      	ldr	r2, [r2, #0]
 8007e7c:	430b      	orrs	r3, r1
 8007e7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	695a      	ldr	r2, [r3, #20]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	431a      	orrs	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f042 0201 	orr.w	r2, r2, #1
 8007eaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2220      	movs	r2, #32
 8007eb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	000186a0 	.word	0x000186a0
 8007ed8:	001e847f 	.word	0x001e847f
 8007edc:	003d08ff 	.word	0x003d08ff
 8007ee0:	431bde83 	.word	0x431bde83
 8007ee4:	10624dd3 	.word	0x10624dd3

08007ee8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b088      	sub	sp, #32
 8007eec:	af02      	add	r7, sp, #8
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	4608      	mov	r0, r1
 8007ef2:	4611      	mov	r1, r2
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	817b      	strh	r3, [r7, #10]
 8007efa:	460b      	mov	r3, r1
 8007efc:	813b      	strh	r3, [r7, #8]
 8007efe:	4613      	mov	r3, r2
 8007f00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007f02:	f7fe fb9b 	bl	800663c <HAL_GetTick>
 8007f06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	2b20      	cmp	r3, #32
 8007f12:	f040 80d9 	bne.w	80080c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	2319      	movs	r3, #25
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	496d      	ldr	r1, [pc, #436]	@ (80080d4 <HAL_I2C_Mem_Write+0x1ec>)
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f000 fdb9 	bl	8008a98 <I2C_WaitOnFlagUntilTimeout>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007f2c:	2302      	movs	r3, #2
 8007f2e:	e0cc      	b.n	80080ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d101      	bne.n	8007f3e <HAL_I2C_Mem_Write+0x56>
 8007f3a:	2302      	movs	r3, #2
 8007f3c:	e0c5      	b.n	80080ca <HAL_I2C_Mem_Write+0x1e2>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 0301 	and.w	r3, r3, #1
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d007      	beq.n	8007f64 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f042 0201 	orr.w	r2, r2, #1
 8007f62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007f72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2221      	movs	r2, #33	@ 0x21
 8007f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2240      	movs	r2, #64	@ 0x40
 8007f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6a3a      	ldr	r2, [r7, #32]
 8007f8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007f94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	4a4d      	ldr	r2, [pc, #308]	@ (80080d8 <HAL_I2C_Mem_Write+0x1f0>)
 8007fa4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007fa6:	88f8      	ldrh	r0, [r7, #6]
 8007fa8:	893a      	ldrh	r2, [r7, #8]
 8007faa:	8979      	ldrh	r1, [r7, #10]
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	9301      	str	r3, [sp, #4]
 8007fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb2:	9300      	str	r3, [sp, #0]
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f000 fbf0 	bl	800879c <I2C_RequestMemoryWrite>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d052      	beq.n	8008068 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e081      	b.n	80080ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fc6:	697a      	ldr	r2, [r7, #20]
 8007fc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f000 fe7e 	bl	8008ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00d      	beq.n	8007ff2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fda:	2b04      	cmp	r3, #4
 8007fdc:	d107      	bne.n	8007fee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007fec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e06b      	b.n	80080ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ff6:	781a      	ldrb	r2, [r3, #0]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008002:	1c5a      	adds	r2, r3, #1
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800800c:	3b01      	subs	r3, #1
 800800e:	b29a      	uxth	r2, r3
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008018:	b29b      	uxth	r3, r3
 800801a:	3b01      	subs	r3, #1
 800801c:	b29a      	uxth	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	695b      	ldr	r3, [r3, #20]
 8008028:	f003 0304 	and.w	r3, r3, #4
 800802c:	2b04      	cmp	r3, #4
 800802e:	d11b      	bne.n	8008068 <HAL_I2C_Mem_Write+0x180>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008034:	2b00      	cmp	r3, #0
 8008036:	d017      	beq.n	8008068 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800803c:	781a      	ldrb	r2, [r3, #0]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008048:	1c5a      	adds	r2, r3, #1
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008052:	3b01      	subs	r3, #1
 8008054:	b29a      	uxth	r2, r3
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800805e:	b29b      	uxth	r3, r3
 8008060:	3b01      	subs	r3, #1
 8008062:	b29a      	uxth	r2, r3
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800806c:	2b00      	cmp	r3, #0
 800806e:	d1aa      	bne.n	8007fc6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008070:	697a      	ldr	r2, [r7, #20]
 8008072:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f000 fe71 	bl	8008d5c <I2C_WaitOnBTFFlagUntilTimeout>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00d      	beq.n	800809c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008084:	2b04      	cmp	r3, #4
 8008086:	d107      	bne.n	8008098 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008096:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e016      	b.n	80080ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80080aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2220      	movs	r2, #32
 80080b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	e000      	b.n	80080ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80080c8:	2302      	movs	r3, #2
  }
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3718      	adds	r7, #24
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	00100002 	.word	0x00100002
 80080d8:	ffff0000 	.word	0xffff0000

080080dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b08c      	sub	sp, #48	@ 0x30
 80080e0:	af02      	add	r7, sp, #8
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	4608      	mov	r0, r1
 80080e6:	4611      	mov	r1, r2
 80080e8:	461a      	mov	r2, r3
 80080ea:	4603      	mov	r3, r0
 80080ec:	817b      	strh	r3, [r7, #10]
 80080ee:	460b      	mov	r3, r1
 80080f0:	813b      	strh	r3, [r7, #8]
 80080f2:	4613      	mov	r3, r2
 80080f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80080f6:	f7fe faa1 	bl	800663c <HAL_GetTick>
 80080fa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b20      	cmp	r3, #32
 8008106:	f040 8214 	bne.w	8008532 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800810a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810c:	9300      	str	r3, [sp, #0]
 800810e:	2319      	movs	r3, #25
 8008110:	2201      	movs	r2, #1
 8008112:	497b      	ldr	r1, [pc, #492]	@ (8008300 <HAL_I2C_Mem_Read+0x224>)
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f000 fcbf 	bl	8008a98 <I2C_WaitOnFlagUntilTimeout>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d001      	beq.n	8008124 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008120:	2302      	movs	r3, #2
 8008122:	e207      	b.n	8008534 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800812a:	2b01      	cmp	r3, #1
 800812c:	d101      	bne.n	8008132 <HAL_I2C_Mem_Read+0x56>
 800812e:	2302      	movs	r3, #2
 8008130:	e200      	b.n	8008534 <HAL_I2C_Mem_Read+0x458>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 0301 	and.w	r3, r3, #1
 8008144:	2b01      	cmp	r3, #1
 8008146:	d007      	beq.n	8008158 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f042 0201 	orr.w	r2, r2, #1
 8008156:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008166:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2222      	movs	r2, #34	@ 0x22
 800816c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2240      	movs	r2, #64	@ 0x40
 8008174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2200      	movs	r2, #0
 800817c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008182:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008188:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800818e:	b29a      	uxth	r2, r3
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	4a5b      	ldr	r2, [pc, #364]	@ (8008304 <HAL_I2C_Mem_Read+0x228>)
 8008198:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800819a:	88f8      	ldrh	r0, [r7, #6]
 800819c:	893a      	ldrh	r2, [r7, #8]
 800819e:	8979      	ldrh	r1, [r7, #10]
 80081a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a2:	9301      	str	r3, [sp, #4]
 80081a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a6:	9300      	str	r3, [sp, #0]
 80081a8:	4603      	mov	r3, r0
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f000 fb8c 	bl	80088c8 <I2C_RequestMemoryRead>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d001      	beq.n	80081ba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e1bc      	b.n	8008534 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d113      	bne.n	80081ea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081c2:	2300      	movs	r3, #0
 80081c4:	623b      	str	r3, [r7, #32]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	695b      	ldr	r3, [r3, #20]
 80081cc:	623b      	str	r3, [r7, #32]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	623b      	str	r3, [r7, #32]
 80081d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	e190      	b.n	800850c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d11b      	bne.n	800822a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008200:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008202:	2300      	movs	r3, #0
 8008204:	61fb      	str	r3, [r7, #28]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	695b      	ldr	r3, [r3, #20]
 800820c:	61fb      	str	r3, [r7, #28]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	61fb      	str	r3, [r7, #28]
 8008216:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008226:	601a      	str	r2, [r3, #0]
 8008228:	e170      	b.n	800850c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800822e:	2b02      	cmp	r3, #2
 8008230:	d11b      	bne.n	800826a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008240:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008250:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008252:	2300      	movs	r3, #0
 8008254:	61bb      	str	r3, [r7, #24]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	695b      	ldr	r3, [r3, #20]
 800825c:	61bb      	str	r3, [r7, #24]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	61bb      	str	r3, [r7, #24]
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	e150      	b.n	800850c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800826a:	2300      	movs	r3, #0
 800826c:	617b      	str	r3, [r7, #20]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	695b      	ldr	r3, [r3, #20]
 8008274:	617b      	str	r3, [r7, #20]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	699b      	ldr	r3, [r3, #24]
 800827c:	617b      	str	r3, [r7, #20]
 800827e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008280:	e144      	b.n	800850c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008286:	2b03      	cmp	r3, #3
 8008288:	f200 80f1 	bhi.w	800846e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008290:	2b01      	cmp	r3, #1
 8008292:	d123      	bne.n	80082dc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008294:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008296:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f000 fda7 	bl	8008dec <I2C_WaitOnRXNEFlagUntilTimeout>
 800829e:	4603      	mov	r3, r0
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d001      	beq.n	80082a8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	e145      	b.n	8008534 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	691a      	ldr	r2, [r3, #16]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b2:	b2d2      	uxtb	r2, r2
 80082b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ba:	1c5a      	adds	r2, r3, #1
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082c4:	3b01      	subs	r3, #1
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	3b01      	subs	r3, #1
 80082d4:	b29a      	uxth	r2, r3
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80082da:	e117      	b.n	800850c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d14e      	bne.n	8008382 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80082e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e6:	9300      	str	r3, [sp, #0]
 80082e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ea:	2200      	movs	r2, #0
 80082ec:	4906      	ldr	r1, [pc, #24]	@ (8008308 <HAL_I2C_Mem_Read+0x22c>)
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	f000 fbd2 	bl	8008a98 <I2C_WaitOnFlagUntilTimeout>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d008      	beq.n	800830c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e11a      	b.n	8008534 <HAL_I2C_Mem_Read+0x458>
 80082fe:	bf00      	nop
 8008300:	00100002 	.word	0x00100002
 8008304:	ffff0000 	.word	0xffff0000
 8008308:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800831a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	691a      	ldr	r2, [r3, #16]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008326:	b2d2      	uxtb	r2, r2
 8008328:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800832e:	1c5a      	adds	r2, r3, #1
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008338:	3b01      	subs	r3, #1
 800833a:	b29a      	uxth	r2, r3
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008344:	b29b      	uxth	r3, r3
 8008346:	3b01      	subs	r3, #1
 8008348:	b29a      	uxth	r2, r3
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	691a      	ldr	r2, [r3, #16]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008358:	b2d2      	uxtb	r2, r2
 800835a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008360:	1c5a      	adds	r2, r3, #1
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800836a:	3b01      	subs	r3, #1
 800836c:	b29a      	uxth	r2, r3
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008376:	b29b      	uxth	r3, r3
 8008378:	3b01      	subs	r3, #1
 800837a:	b29a      	uxth	r2, r3
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008380:	e0c4      	b.n	800850c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008384:	9300      	str	r3, [sp, #0]
 8008386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008388:	2200      	movs	r2, #0
 800838a:	496c      	ldr	r1, [pc, #432]	@ (800853c <HAL_I2C_Mem_Read+0x460>)
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f000 fb83 	bl	8008a98 <I2C_WaitOnFlagUntilTimeout>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d001      	beq.n	800839c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	e0cb      	b.n	8008534 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	691a      	ldr	r2, [r3, #16]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083b6:	b2d2      	uxtb	r2, r2
 80083b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083be:	1c5a      	adds	r2, r3, #1
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083c8:	3b01      	subs	r3, #1
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	3b01      	subs	r3, #1
 80083d8:	b29a      	uxth	r2, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80083de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083e4:	2200      	movs	r2, #0
 80083e6:	4955      	ldr	r1, [pc, #340]	@ (800853c <HAL_I2C_Mem_Read+0x460>)
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f000 fb55 	bl	8008a98 <I2C_WaitOnFlagUntilTimeout>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d001      	beq.n	80083f8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	e09d      	b.n	8008534 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008406:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	691a      	ldr	r2, [r3, #16]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008412:	b2d2      	uxtb	r2, r2
 8008414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800841a:	1c5a      	adds	r2, r3, #1
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008424:	3b01      	subs	r3, #1
 8008426:	b29a      	uxth	r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008430:	b29b      	uxth	r3, r3
 8008432:	3b01      	subs	r3, #1
 8008434:	b29a      	uxth	r2, r3
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	691a      	ldr	r2, [r3, #16]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008444:	b2d2      	uxtb	r2, r2
 8008446:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800844c:	1c5a      	adds	r2, r3, #1
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008456:	3b01      	subs	r3, #1
 8008458:	b29a      	uxth	r2, r3
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008462:	b29b      	uxth	r3, r3
 8008464:	3b01      	subs	r3, #1
 8008466:	b29a      	uxth	r2, r3
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800846c:	e04e      	b.n	800850c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800846e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008470:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	f000 fcba 	bl	8008dec <I2C_WaitOnRXNEFlagUntilTimeout>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d001      	beq.n	8008482 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e058      	b.n	8008534 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	691a      	ldr	r2, [r3, #16]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800848c:	b2d2      	uxtb	r2, r2
 800848e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008494:	1c5a      	adds	r2, r3, #1
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800849e:	3b01      	subs	r3, #1
 80084a0:	b29a      	uxth	r2, r3
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	3b01      	subs	r3, #1
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	695b      	ldr	r3, [r3, #20]
 80084ba:	f003 0304 	and.w	r3, r3, #4
 80084be:	2b04      	cmp	r3, #4
 80084c0:	d124      	bne.n	800850c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084c6:	2b03      	cmp	r3, #3
 80084c8:	d107      	bne.n	80084da <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084d8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	691a      	ldr	r2, [r3, #16]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084e4:	b2d2      	uxtb	r2, r2
 80084e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ec:	1c5a      	adds	r2, r3, #1
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084f6:	3b01      	subs	r3, #1
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008502:	b29b      	uxth	r3, r3
 8008504:	3b01      	subs	r3, #1
 8008506:	b29a      	uxth	r2, r3
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008510:	2b00      	cmp	r3, #0
 8008512:	f47f aeb6 	bne.w	8008282 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2220      	movs	r2, #32
 800851a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800852e:	2300      	movs	r3, #0
 8008530:	e000      	b.n	8008534 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8008532:	2302      	movs	r3, #2
  }
}
 8008534:	4618      	mov	r0, r3
 8008536:	3728      	adds	r7, #40	@ 0x28
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	00010004 	.word	0x00010004

08008540 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b08a      	sub	sp, #40	@ 0x28
 8008544:	af02      	add	r7, sp, #8
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	607a      	str	r2, [r7, #4]
 800854a:	603b      	str	r3, [r7, #0]
 800854c:	460b      	mov	r3, r1
 800854e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8008550:	f7fe f874 	bl	800663c <HAL_GetTick>
 8008554:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8008556:	2300      	movs	r3, #0
 8008558:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b20      	cmp	r3, #32
 8008564:	f040 8111 	bne.w	800878a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	2319      	movs	r3, #25
 800856e:	2201      	movs	r2, #1
 8008570:	4988      	ldr	r1, [pc, #544]	@ (8008794 <HAL_I2C_IsDeviceReady+0x254>)
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 fa90 	bl	8008a98 <I2C_WaitOnFlagUntilTimeout>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d001      	beq.n	8008582 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800857e:	2302      	movs	r3, #2
 8008580:	e104      	b.n	800878c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008588:	2b01      	cmp	r3, #1
 800858a:	d101      	bne.n	8008590 <HAL_I2C_IsDeviceReady+0x50>
 800858c:	2302      	movs	r3, #2
 800858e:	e0fd      	b.n	800878c <HAL_I2C_IsDeviceReady+0x24c>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 0301 	and.w	r3, r3, #1
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d007      	beq.n	80085b6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f042 0201 	orr.w	r2, r2, #1
 80085b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80085c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2224      	movs	r2, #36	@ 0x24
 80085ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	4a70      	ldr	r2, [pc, #448]	@ (8008798 <HAL_I2C_IsDeviceReady+0x258>)
 80085d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80085e8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	9300      	str	r3, [sp, #0]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f000 fa4e 	bl	8008a98 <I2C_WaitOnFlagUntilTimeout>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00d      	beq.n	800861e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800860c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008610:	d103      	bne.n	800861a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008618:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800861a:	2303      	movs	r3, #3
 800861c:	e0b6      	b.n	800878c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800861e:	897b      	ldrh	r3, [r7, #10]
 8008620:	b2db      	uxtb	r3, r3
 8008622:	461a      	mov	r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800862c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800862e:	f7fe f805 	bl	800663c <HAL_GetTick>
 8008632:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	f003 0302 	and.w	r3, r3, #2
 800863e:	2b02      	cmp	r3, #2
 8008640:	bf0c      	ite	eq
 8008642:	2301      	moveq	r3, #1
 8008644:	2300      	movne	r3, #0
 8008646:	b2db      	uxtb	r3, r3
 8008648:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	695b      	ldr	r3, [r3, #20]
 8008650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008654:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008658:	bf0c      	ite	eq
 800865a:	2301      	moveq	r3, #1
 800865c:	2300      	movne	r3, #0
 800865e:	b2db      	uxtb	r3, r3
 8008660:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008662:	e025      	b.n	80086b0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008664:	f7fd ffea 	bl	800663c <HAL_GetTick>
 8008668:	4602      	mov	r2, r0
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	1ad3      	subs	r3, r2, r3
 800866e:	683a      	ldr	r2, [r7, #0]
 8008670:	429a      	cmp	r2, r3
 8008672:	d302      	bcc.n	800867a <HAL_I2C_IsDeviceReady+0x13a>
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d103      	bne.n	8008682 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	22a0      	movs	r2, #160	@ 0xa0
 800867e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	695b      	ldr	r3, [r3, #20]
 8008688:	f003 0302 	and.w	r3, r3, #2
 800868c:	2b02      	cmp	r3, #2
 800868e:	bf0c      	ite	eq
 8008690:	2301      	moveq	r3, #1
 8008692:	2300      	movne	r3, #0
 8008694:	b2db      	uxtb	r3, r3
 8008696:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	695b      	ldr	r3, [r3, #20]
 800869e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086a6:	bf0c      	ite	eq
 80086a8:	2301      	moveq	r3, #1
 80086aa:	2300      	movne	r3, #0
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	2ba0      	cmp	r3, #160	@ 0xa0
 80086ba:	d005      	beq.n	80086c8 <HAL_I2C_IsDeviceReady+0x188>
 80086bc:	7dfb      	ldrb	r3, [r7, #23]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d102      	bne.n	80086c8 <HAL_I2C_IsDeviceReady+0x188>
 80086c2:	7dbb      	ldrb	r3, [r7, #22]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d0cd      	beq.n	8008664 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2220      	movs	r2, #32
 80086cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	695b      	ldr	r3, [r3, #20]
 80086d6:	f003 0302 	and.w	r3, r3, #2
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d129      	bne.n	8008732 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086ec:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086ee:	2300      	movs	r3, #0
 80086f0:	613b      	str	r3, [r7, #16]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	695b      	ldr	r3, [r3, #20]
 80086f8:	613b      	str	r3, [r7, #16]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	613b      	str	r3, [r7, #16]
 8008702:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	9300      	str	r3, [sp, #0]
 8008708:	2319      	movs	r3, #25
 800870a:	2201      	movs	r2, #1
 800870c:	4921      	ldr	r1, [pc, #132]	@ (8008794 <HAL_I2C_IsDeviceReady+0x254>)
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	f000 f9c2 	bl	8008a98 <I2C_WaitOnFlagUntilTimeout>
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	d001      	beq.n	800871e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	e036      	b.n	800878c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2220      	movs	r2, #32
 8008722:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800872e:	2300      	movs	r3, #0
 8008730:	e02c      	b.n	800878c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008740:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800874a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	9300      	str	r3, [sp, #0]
 8008750:	2319      	movs	r3, #25
 8008752:	2201      	movs	r2, #1
 8008754:	490f      	ldr	r1, [pc, #60]	@ (8008794 <HAL_I2C_IsDeviceReady+0x254>)
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f000 f99e 	bl	8008a98 <I2C_WaitOnFlagUntilTimeout>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d001      	beq.n	8008766 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	e012      	b.n	800878c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	3301      	adds	r3, #1
 800876a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800876c:	69ba      	ldr	r2, [r7, #24]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	429a      	cmp	r2, r3
 8008772:	f4ff af32 	bcc.w	80085da <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2220      	movs	r2, #32
 800877a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	e000      	b.n	800878c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800878a:	2302      	movs	r3, #2
  }
}
 800878c:	4618      	mov	r0, r3
 800878e:	3720      	adds	r7, #32
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	00100002 	.word	0x00100002
 8008798:	ffff0000 	.word	0xffff0000

0800879c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b088      	sub	sp, #32
 80087a0:	af02      	add	r7, sp, #8
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	4608      	mov	r0, r1
 80087a6:	4611      	mov	r1, r2
 80087a8:	461a      	mov	r2, r3
 80087aa:	4603      	mov	r3, r0
 80087ac:	817b      	strh	r3, [r7, #10]
 80087ae:	460b      	mov	r3, r1
 80087b0:	813b      	strh	r3, [r7, #8]
 80087b2:	4613      	mov	r3, r2
 80087b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80087c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80087c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c8:	9300      	str	r3, [sp, #0]
 80087ca:	6a3b      	ldr	r3, [r7, #32]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f000 f960 	bl	8008a98 <I2C_WaitOnFlagUntilTimeout>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00d      	beq.n	80087fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087ec:	d103      	bne.n	80087f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80087f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80087f6:	2303      	movs	r3, #3
 80087f8:	e05f      	b.n	80088ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80087fa:	897b      	ldrh	r3, [r7, #10]
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	461a      	mov	r2, r3
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008808:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800880a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880c:	6a3a      	ldr	r2, [r7, #32]
 800880e:	492d      	ldr	r1, [pc, #180]	@ (80088c4 <I2C_RequestMemoryWrite+0x128>)
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f000 f9bb 	bl	8008b8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d001      	beq.n	8008820 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	e04c      	b.n	80088ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008820:	2300      	movs	r3, #0
 8008822:	617b      	str	r3, [r7, #20]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	695b      	ldr	r3, [r3, #20]
 800882a:	617b      	str	r3, [r7, #20]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	699b      	ldr	r3, [r3, #24]
 8008832:	617b      	str	r3, [r7, #20]
 8008834:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008838:	6a39      	ldr	r1, [r7, #32]
 800883a:	68f8      	ldr	r0, [r7, #12]
 800883c:	f000 fa46 	bl	8008ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8008840:	4603      	mov	r3, r0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d00d      	beq.n	8008862 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800884a:	2b04      	cmp	r3, #4
 800884c:	d107      	bne.n	800885e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800885c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e02b      	b.n	80088ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008862:	88fb      	ldrh	r3, [r7, #6]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d105      	bne.n	8008874 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008868:	893b      	ldrh	r3, [r7, #8]
 800886a:	b2da      	uxtb	r2, r3
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	611a      	str	r2, [r3, #16]
 8008872:	e021      	b.n	80088b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008874:	893b      	ldrh	r3, [r7, #8]
 8008876:	0a1b      	lsrs	r3, r3, #8
 8008878:	b29b      	uxth	r3, r3
 800887a:	b2da      	uxtb	r2, r3
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008884:	6a39      	ldr	r1, [r7, #32]
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f000 fa20 	bl	8008ccc <I2C_WaitOnTXEFlagUntilTimeout>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00d      	beq.n	80088ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008896:	2b04      	cmp	r3, #4
 8008898:	d107      	bne.n	80088aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e005      	b.n	80088ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80088ae:	893b      	ldrh	r3, [r7, #8]
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3718      	adds	r7, #24
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	00010002 	.word	0x00010002

080088c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b088      	sub	sp, #32
 80088cc:	af02      	add	r7, sp, #8
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	4608      	mov	r0, r1
 80088d2:	4611      	mov	r1, r2
 80088d4:	461a      	mov	r2, r3
 80088d6:	4603      	mov	r3, r0
 80088d8:	817b      	strh	r3, [r7, #10]
 80088da:	460b      	mov	r3, r1
 80088dc:	813b      	strh	r3, [r7, #8]
 80088de:	4613      	mov	r3, r2
 80088e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80088f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008900:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008904:	9300      	str	r3, [sp, #0]
 8008906:	6a3b      	ldr	r3, [r7, #32]
 8008908:	2200      	movs	r2, #0
 800890a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f000 f8c2 	bl	8008a98 <I2C_WaitOnFlagUntilTimeout>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00d      	beq.n	8008936 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008924:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008928:	d103      	bne.n	8008932 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008930:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008932:	2303      	movs	r3, #3
 8008934:	e0aa      	b.n	8008a8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008936:	897b      	ldrh	r3, [r7, #10]
 8008938:	b2db      	uxtb	r3, r3
 800893a:	461a      	mov	r2, r3
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008944:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008948:	6a3a      	ldr	r2, [r7, #32]
 800894a:	4952      	ldr	r1, [pc, #328]	@ (8008a94 <I2C_RequestMemoryRead+0x1cc>)
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 f91d 	bl	8008b8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d001      	beq.n	800895c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	e097      	b.n	8008a8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800895c:	2300      	movs	r3, #0
 800895e:	617b      	str	r3, [r7, #20]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	695b      	ldr	r3, [r3, #20]
 8008966:	617b      	str	r3, [r7, #20]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	699b      	ldr	r3, [r3, #24]
 800896e:	617b      	str	r3, [r7, #20]
 8008970:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008974:	6a39      	ldr	r1, [r7, #32]
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f000 f9a8 	bl	8008ccc <I2C_WaitOnTXEFlagUntilTimeout>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00d      	beq.n	800899e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008986:	2b04      	cmp	r3, #4
 8008988:	d107      	bne.n	800899a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008998:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800899a:	2301      	movs	r3, #1
 800899c:	e076      	b.n	8008a8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800899e:	88fb      	ldrh	r3, [r7, #6]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d105      	bne.n	80089b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80089a4:	893b      	ldrh	r3, [r7, #8]
 80089a6:	b2da      	uxtb	r2, r3
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	611a      	str	r2, [r3, #16]
 80089ae:	e021      	b.n	80089f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80089b0:	893b      	ldrh	r3, [r7, #8]
 80089b2:	0a1b      	lsrs	r3, r3, #8
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	b2da      	uxtb	r2, r3
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80089be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089c0:	6a39      	ldr	r1, [r7, #32]
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f000 f982 	bl	8008ccc <I2C_WaitOnTXEFlagUntilTimeout>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00d      	beq.n	80089ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089d2:	2b04      	cmp	r3, #4
 80089d4:	d107      	bne.n	80089e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80089e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e050      	b.n	8008a8c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80089ea:	893b      	ldrh	r3, [r7, #8]
 80089ec:	b2da      	uxtb	r2, r3
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80089f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089f6:	6a39      	ldr	r1, [r7, #32]
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f000 f967 	bl	8008ccc <I2C_WaitOnTXEFlagUntilTimeout>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00d      	beq.n	8008a20 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a08:	2b04      	cmp	r3, #4
 8008a0a:	d107      	bne.n	8008a1c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a1a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e035      	b.n	8008a8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008a2e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	6a3b      	ldr	r3, [r7, #32]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	f000 f82b 	bl	8008a98 <I2C_WaitOnFlagUntilTimeout>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00d      	beq.n	8008a64 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a56:	d103      	bne.n	8008a60 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a5e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e013      	b.n	8008a8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008a64:	897b      	ldrh	r3, [r7, #10]
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	f043 0301 	orr.w	r3, r3, #1
 8008a6c:	b2da      	uxtb	r2, r3
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a76:	6a3a      	ldr	r2, [r7, #32]
 8008a78:	4906      	ldr	r1, [pc, #24]	@ (8008a94 <I2C_RequestMemoryRead+0x1cc>)
 8008a7a:	68f8      	ldr	r0, [r7, #12]
 8008a7c:	f000 f886 	bl	8008b8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d001      	beq.n	8008a8a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e000      	b.n	8008a8c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3718      	adds	r7, #24
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	00010002 	.word	0x00010002

08008a98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	603b      	str	r3, [r7, #0]
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008aa8:	e048      	b.n	8008b3c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab0:	d044      	beq.n	8008b3c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ab2:	f7fd fdc3 	bl	800663c <HAL_GetTick>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	683a      	ldr	r2, [r7, #0]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d302      	bcc.n	8008ac8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d139      	bne.n	8008b3c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	0c1b      	lsrs	r3, r3, #16
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d10d      	bne.n	8008aee <I2C_WaitOnFlagUntilTimeout+0x56>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	695b      	ldr	r3, [r3, #20]
 8008ad8:	43da      	mvns	r2, r3
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	4013      	ands	r3, r2
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	bf0c      	ite	eq
 8008ae4:	2301      	moveq	r3, #1
 8008ae6:	2300      	movne	r3, #0
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	461a      	mov	r2, r3
 8008aec:	e00c      	b.n	8008b08 <I2C_WaitOnFlagUntilTimeout+0x70>
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	699b      	ldr	r3, [r3, #24]
 8008af4:	43da      	mvns	r2, r3
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	4013      	ands	r3, r2
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	bf0c      	ite	eq
 8008b00:	2301      	moveq	r3, #1
 8008b02:	2300      	movne	r3, #0
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	461a      	mov	r2, r3
 8008b08:	79fb      	ldrb	r3, [r7, #7]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d116      	bne.n	8008b3c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2220      	movs	r2, #32
 8008b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b28:	f043 0220 	orr.w	r2, r3, #32
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e023      	b.n	8008b84 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	0c1b      	lsrs	r3, r3, #16
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d10d      	bne.n	8008b62 <I2C_WaitOnFlagUntilTimeout+0xca>
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	695b      	ldr	r3, [r3, #20]
 8008b4c:	43da      	mvns	r2, r3
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	4013      	ands	r3, r2
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	bf0c      	ite	eq
 8008b58:	2301      	moveq	r3, #1
 8008b5a:	2300      	movne	r3, #0
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	461a      	mov	r2, r3
 8008b60:	e00c      	b.n	8008b7c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	699b      	ldr	r3, [r3, #24]
 8008b68:	43da      	mvns	r2, r3
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	4013      	ands	r3, r2
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	bf0c      	ite	eq
 8008b74:	2301      	moveq	r3, #1
 8008b76:	2300      	movne	r3, #0
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	79fb      	ldrb	r3, [r7, #7]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d093      	beq.n	8008aaa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
 8008b98:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008b9a:	e071      	b.n	8008c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ba6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008baa:	d123      	bne.n	8008bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008bba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008bc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2220      	movs	r2, #32
 8008bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008be0:	f043 0204 	orr.w	r2, r3, #4
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e067      	b.n	8008cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bfa:	d041      	beq.n	8008c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bfc:	f7fd fd1e 	bl	800663c <HAL_GetTick>
 8008c00:	4602      	mov	r2, r0
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d302      	bcc.n	8008c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d136      	bne.n	8008c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	0c1b      	lsrs	r3, r3, #16
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d10c      	bne.n	8008c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	695b      	ldr	r3, [r3, #20]
 8008c22:	43da      	mvns	r2, r3
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	4013      	ands	r3, r2
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	bf14      	ite	ne
 8008c2e:	2301      	movne	r3, #1
 8008c30:	2300      	moveq	r3, #0
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	e00b      	b.n	8008c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	43da      	mvns	r2, r3
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	4013      	ands	r3, r2
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	bf14      	ite	ne
 8008c48:	2301      	movne	r3, #1
 8008c4a:	2300      	moveq	r3, #0
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d016      	beq.n	8008c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2200      	movs	r2, #0
 8008c56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2220      	movs	r2, #32
 8008c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c6c:	f043 0220 	orr.w	r2, r3, #32
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e021      	b.n	8008cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	0c1b      	lsrs	r3, r3, #16
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d10c      	bne.n	8008ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	695b      	ldr	r3, [r3, #20]
 8008c90:	43da      	mvns	r2, r3
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	4013      	ands	r3, r2
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	bf14      	ite	ne
 8008c9c:	2301      	movne	r3, #1
 8008c9e:	2300      	moveq	r3, #0
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	e00b      	b.n	8008cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	699b      	ldr	r3, [r3, #24]
 8008caa:	43da      	mvns	r2, r3
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	4013      	ands	r3, r2
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	bf14      	ite	ne
 8008cb6:	2301      	movne	r3, #1
 8008cb8:	2300      	moveq	r3, #0
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f47f af6d 	bne.w	8008b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008cd8:	e034      	b.n	8008d44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f000 f8e3 	bl	8008ea6 <I2C_IsAcknowledgeFailed>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d001      	beq.n	8008cea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e034      	b.n	8008d54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf0:	d028      	beq.n	8008d44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cf2:	f7fd fca3 	bl	800663c <HAL_GetTick>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	68ba      	ldr	r2, [r7, #8]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d302      	bcc.n	8008d08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d11d      	bne.n	8008d44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	695b      	ldr	r3, [r3, #20]
 8008d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d12:	2b80      	cmp	r3, #128	@ 0x80
 8008d14:	d016      	beq.n	8008d44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2220      	movs	r2, #32
 8008d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d30:	f043 0220 	orr.w	r2, r3, #32
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	e007      	b.n	8008d54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	695b      	ldr	r3, [r3, #20]
 8008d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d4e:	2b80      	cmp	r3, #128	@ 0x80
 8008d50:	d1c3      	bne.n	8008cda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008d68:	e034      	b.n	8008dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	f000 f89b 	bl	8008ea6 <I2C_IsAcknowledgeFailed>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d001      	beq.n	8008d7a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	e034      	b.n	8008de4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d80:	d028      	beq.n	8008dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d82:	f7fd fc5b 	bl	800663c <HAL_GetTick>
 8008d86:	4602      	mov	r2, r0
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	1ad3      	subs	r3, r2, r3
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d302      	bcc.n	8008d98 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d11d      	bne.n	8008dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	695b      	ldr	r3, [r3, #20]
 8008d9e:	f003 0304 	and.w	r3, r3, #4
 8008da2:	2b04      	cmp	r3, #4
 8008da4:	d016      	beq.n	8008dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2200      	movs	r2, #0
 8008daa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2220      	movs	r2, #32
 8008db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dc0:	f043 0220 	orr.w	r2, r3, #32
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e007      	b.n	8008de4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	f003 0304 	and.w	r3, r3, #4
 8008dde:	2b04      	cmp	r3, #4
 8008de0:	d1c3      	bne.n	8008d6a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008df8:	e049      	b.n	8008e8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	695b      	ldr	r3, [r3, #20]
 8008e00:	f003 0310 	and.w	r3, r3, #16
 8008e04:	2b10      	cmp	r3, #16
 8008e06:	d119      	bne.n	8008e3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f06f 0210 	mvn.w	r2, #16
 8008e10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2200      	movs	r2, #0
 8008e16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2220      	movs	r2, #32
 8008e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2200      	movs	r2, #0
 8008e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e030      	b.n	8008e9e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e3c:	f7fd fbfe 	bl	800663c <HAL_GetTick>
 8008e40:	4602      	mov	r2, r0
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	1ad3      	subs	r3, r2, r3
 8008e46:	68ba      	ldr	r2, [r7, #8]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d302      	bcc.n	8008e52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d11d      	bne.n	8008e8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	695b      	ldr	r3, [r3, #20]
 8008e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e5c:	2b40      	cmp	r3, #64	@ 0x40
 8008e5e:	d016      	beq.n	8008e8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2200      	movs	r2, #0
 8008e64:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2220      	movs	r2, #32
 8008e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e7a:	f043 0220 	orr.w	r2, r3, #32
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e007      	b.n	8008e9e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	695b      	ldr	r3, [r3, #20]
 8008e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e98:	2b40      	cmp	r3, #64	@ 0x40
 8008e9a:	d1ae      	bne.n	8008dfa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008ea6:	b480      	push	{r7}
 8008ea8:	b083      	sub	sp, #12
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	695b      	ldr	r3, [r3, #20]
 8008eb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008eb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ebc:	d11b      	bne.n	8008ef6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008ec6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2220      	movs	r2, #32
 8008ed2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ee2:	f043 0204 	orr.w	r2, r3, #4
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e000      	b.n	8008ef8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008f0a:	4b06      	ldr	r3, [pc, #24]	@ (8008f24 <HAL_PWR_EnableBkUpAccess+0x20>)
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008f10:	4b05      	ldr	r3, [pc, #20]	@ (8008f28 <HAL_PWR_EnableBkUpAccess+0x24>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8008f16:	687b      	ldr	r3, [r7, #4]
}
 8008f18:	bf00      	nop
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr
 8008f24:	420e0020 	.word	0x420e0020
 8008f28:	40007000 	.word	0x40007000

08008f2c <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8008f32:	4b06      	ldr	r3, [pc, #24]	@ (8008f4c <HAL_PWR_DisableBkUpAccess+0x20>)
 8008f34:	2200      	movs	r2, #0
 8008f36:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008f38:	4b05      	ldr	r3, [pc, #20]	@ (8008f50 <HAL_PWR_DisableBkUpAccess+0x24>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8008f3e:	687b      	ldr	r3, [r7, #4]
}
 8008f40:	bf00      	nop
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr
 8008f4c:	420e0020 	.word	0x420e0020
 8008f50:	40007000 	.word	0x40007000

08008f54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d101      	bne.n	8008f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	e267      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f003 0301 	and.w	r3, r3, #1
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d075      	beq.n	800905e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008f72:	4b88      	ldr	r3, [pc, #544]	@ (8009194 <HAL_RCC_OscConfig+0x240>)
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	f003 030c 	and.w	r3, r3, #12
 8008f7a:	2b04      	cmp	r3, #4
 8008f7c:	d00c      	beq.n	8008f98 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f7e:	4b85      	ldr	r3, [pc, #532]	@ (8009194 <HAL_RCC_OscConfig+0x240>)
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008f86:	2b08      	cmp	r3, #8
 8008f88:	d112      	bne.n	8008fb0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f8a:	4b82      	ldr	r3, [pc, #520]	@ (8009194 <HAL_RCC_OscConfig+0x240>)
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008f92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f96:	d10b      	bne.n	8008fb0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f98:	4b7e      	ldr	r3, [pc, #504]	@ (8009194 <HAL_RCC_OscConfig+0x240>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d05b      	beq.n	800905c <HAL_RCC_OscConfig+0x108>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d157      	bne.n	800905c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	e242      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fb8:	d106      	bne.n	8008fc8 <HAL_RCC_OscConfig+0x74>
 8008fba:	4b76      	ldr	r3, [pc, #472]	@ (8009194 <HAL_RCC_OscConfig+0x240>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a75      	ldr	r2, [pc, #468]	@ (8009194 <HAL_RCC_OscConfig+0x240>)
 8008fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008fc4:	6013      	str	r3, [r2, #0]
 8008fc6:	e01d      	b.n	8009004 <HAL_RCC_OscConfig+0xb0>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008fd0:	d10c      	bne.n	8008fec <HAL_RCC_OscConfig+0x98>
 8008fd2:	4b70      	ldr	r3, [pc, #448]	@ (8009194 <HAL_RCC_OscConfig+0x240>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a6f      	ldr	r2, [pc, #444]	@ (8009194 <HAL_RCC_OscConfig+0x240>)
 8008fd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008fdc:	6013      	str	r3, [r2, #0]
 8008fde:	4b6d      	ldr	r3, [pc, #436]	@ (8009194 <HAL_RCC_OscConfig+0x240>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a6c      	ldr	r2, [pc, #432]	@ (8009194 <HAL_RCC_OscConfig+0x240>)
 8008fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008fe8:	6013      	str	r3, [r2, #0]
 8008fea:	e00b      	b.n	8009004 <HAL_RCC_OscConfig+0xb0>
 8008fec:	4b69      	ldr	r3, [pc, #420]	@ (8009194 <HAL_RCC_OscConfig+0x240>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a68      	ldr	r2, [pc, #416]	@ (8009194 <HAL_RCC_OscConfig+0x240>)
 8008ff2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ff6:	6013      	str	r3, [r2, #0]
 8008ff8:	4b66      	ldr	r3, [pc, #408]	@ (8009194 <HAL_RCC_OscConfig+0x240>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a65      	ldr	r2, [pc, #404]	@ (8009194 <HAL_RCC_OscConfig+0x240>)
 8008ffe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d013      	beq.n	8009034 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800900c:	f7fd fb16 	bl	800663c <HAL_GetTick>
 8009010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009012:	e008      	b.n	8009026 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009014:	f7fd fb12 	bl	800663c <HAL_GetTick>
 8009018:	4602      	mov	r2, r0
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	1ad3      	subs	r3, r2, r3
 800901e:	2b64      	cmp	r3, #100	@ 0x64
 8009020:	d901      	bls.n	8009026 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009022:	2303      	movs	r3, #3
 8009024:	e207      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009026:	4b5b      	ldr	r3, [pc, #364]	@ (8009194 <HAL_RCC_OscConfig+0x240>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800902e:	2b00      	cmp	r3, #0
 8009030:	d0f0      	beq.n	8009014 <HAL_RCC_OscConfig+0xc0>
 8009032:	e014      	b.n	800905e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009034:	f7fd fb02 	bl	800663c <HAL_GetTick>
 8009038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800903a:	e008      	b.n	800904e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800903c:	f7fd fafe 	bl	800663c <HAL_GetTick>
 8009040:	4602      	mov	r2, r0
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	2b64      	cmp	r3, #100	@ 0x64
 8009048:	d901      	bls.n	800904e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800904a:	2303      	movs	r3, #3
 800904c:	e1f3      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800904e:	4b51      	ldr	r3, [pc, #324]	@ (8009194 <HAL_RCC_OscConfig+0x240>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1f0      	bne.n	800903c <HAL_RCC_OscConfig+0xe8>
 800905a:	e000      	b.n	800905e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800905c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f003 0302 	and.w	r3, r3, #2
 8009066:	2b00      	cmp	r3, #0
 8009068:	d063      	beq.n	8009132 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800906a:	4b4a      	ldr	r3, [pc, #296]	@ (8009194 <HAL_RCC_OscConfig+0x240>)
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	f003 030c 	and.w	r3, r3, #12
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00b      	beq.n	800908e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009076:	4b47      	ldr	r3, [pc, #284]	@ (8009194 <HAL_RCC_OscConfig+0x240>)
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800907e:	2b08      	cmp	r3, #8
 8009080:	d11c      	bne.n	80090bc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009082:	4b44      	ldr	r3, [pc, #272]	@ (8009194 <HAL_RCC_OscConfig+0x240>)
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800908a:	2b00      	cmp	r3, #0
 800908c:	d116      	bne.n	80090bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800908e:	4b41      	ldr	r3, [pc, #260]	@ (8009194 <HAL_RCC_OscConfig+0x240>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 0302 	and.w	r3, r3, #2
 8009096:	2b00      	cmp	r3, #0
 8009098:	d005      	beq.n	80090a6 <HAL_RCC_OscConfig+0x152>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d001      	beq.n	80090a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	e1c7      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090a6:	4b3b      	ldr	r3, [pc, #236]	@ (8009194 <HAL_RCC_OscConfig+0x240>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	00db      	lsls	r3, r3, #3
 80090b4:	4937      	ldr	r1, [pc, #220]	@ (8009194 <HAL_RCC_OscConfig+0x240>)
 80090b6:	4313      	orrs	r3, r2
 80090b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090ba:	e03a      	b.n	8009132 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d020      	beq.n	8009106 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80090c4:	4b34      	ldr	r3, [pc, #208]	@ (8009198 <HAL_RCC_OscConfig+0x244>)
 80090c6:	2201      	movs	r2, #1
 80090c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090ca:	f7fd fab7 	bl	800663c <HAL_GetTick>
 80090ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090d0:	e008      	b.n	80090e4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80090d2:	f7fd fab3 	bl	800663c <HAL_GetTick>
 80090d6:	4602      	mov	r2, r0
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	1ad3      	subs	r3, r2, r3
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d901      	bls.n	80090e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80090e0:	2303      	movs	r3, #3
 80090e2:	e1a8      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090e4:	4b2b      	ldr	r3, [pc, #172]	@ (8009194 <HAL_RCC_OscConfig+0x240>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f003 0302 	and.w	r3, r3, #2
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d0f0      	beq.n	80090d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090f0:	4b28      	ldr	r3, [pc, #160]	@ (8009194 <HAL_RCC_OscConfig+0x240>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	691b      	ldr	r3, [r3, #16]
 80090fc:	00db      	lsls	r3, r3, #3
 80090fe:	4925      	ldr	r1, [pc, #148]	@ (8009194 <HAL_RCC_OscConfig+0x240>)
 8009100:	4313      	orrs	r3, r2
 8009102:	600b      	str	r3, [r1, #0]
 8009104:	e015      	b.n	8009132 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009106:	4b24      	ldr	r3, [pc, #144]	@ (8009198 <HAL_RCC_OscConfig+0x244>)
 8009108:	2200      	movs	r2, #0
 800910a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800910c:	f7fd fa96 	bl	800663c <HAL_GetTick>
 8009110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009112:	e008      	b.n	8009126 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009114:	f7fd fa92 	bl	800663c <HAL_GetTick>
 8009118:	4602      	mov	r2, r0
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	1ad3      	subs	r3, r2, r3
 800911e:	2b02      	cmp	r3, #2
 8009120:	d901      	bls.n	8009126 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009122:	2303      	movs	r3, #3
 8009124:	e187      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009126:	4b1b      	ldr	r3, [pc, #108]	@ (8009194 <HAL_RCC_OscConfig+0x240>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 0302 	and.w	r3, r3, #2
 800912e:	2b00      	cmp	r3, #0
 8009130:	d1f0      	bne.n	8009114 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 0308 	and.w	r3, r3, #8
 800913a:	2b00      	cmp	r3, #0
 800913c:	d036      	beq.n	80091ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	695b      	ldr	r3, [r3, #20]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d016      	beq.n	8009174 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009146:	4b15      	ldr	r3, [pc, #84]	@ (800919c <HAL_RCC_OscConfig+0x248>)
 8009148:	2201      	movs	r2, #1
 800914a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800914c:	f7fd fa76 	bl	800663c <HAL_GetTick>
 8009150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009152:	e008      	b.n	8009166 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009154:	f7fd fa72 	bl	800663c <HAL_GetTick>
 8009158:	4602      	mov	r2, r0
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	1ad3      	subs	r3, r2, r3
 800915e:	2b02      	cmp	r3, #2
 8009160:	d901      	bls.n	8009166 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009162:	2303      	movs	r3, #3
 8009164:	e167      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009166:	4b0b      	ldr	r3, [pc, #44]	@ (8009194 <HAL_RCC_OscConfig+0x240>)
 8009168:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800916a:	f003 0302 	and.w	r3, r3, #2
 800916e:	2b00      	cmp	r3, #0
 8009170:	d0f0      	beq.n	8009154 <HAL_RCC_OscConfig+0x200>
 8009172:	e01b      	b.n	80091ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009174:	4b09      	ldr	r3, [pc, #36]	@ (800919c <HAL_RCC_OscConfig+0x248>)
 8009176:	2200      	movs	r2, #0
 8009178:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800917a:	f7fd fa5f 	bl	800663c <HAL_GetTick>
 800917e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009180:	e00e      	b.n	80091a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009182:	f7fd fa5b 	bl	800663c <HAL_GetTick>
 8009186:	4602      	mov	r2, r0
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	1ad3      	subs	r3, r2, r3
 800918c:	2b02      	cmp	r3, #2
 800918e:	d907      	bls.n	80091a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009190:	2303      	movs	r3, #3
 8009192:	e150      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
 8009194:	40023800 	.word	0x40023800
 8009198:	42470000 	.word	0x42470000
 800919c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091a0:	4b88      	ldr	r3, [pc, #544]	@ (80093c4 <HAL_RCC_OscConfig+0x470>)
 80091a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091a4:	f003 0302 	and.w	r3, r3, #2
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d1ea      	bne.n	8009182 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f003 0304 	and.w	r3, r3, #4
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f000 8097 	beq.w	80092e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80091ba:	2300      	movs	r3, #0
 80091bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80091be:	4b81      	ldr	r3, [pc, #516]	@ (80093c4 <HAL_RCC_OscConfig+0x470>)
 80091c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d10f      	bne.n	80091ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80091ca:	2300      	movs	r3, #0
 80091cc:	60bb      	str	r3, [r7, #8]
 80091ce:	4b7d      	ldr	r3, [pc, #500]	@ (80093c4 <HAL_RCC_OscConfig+0x470>)
 80091d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091d2:	4a7c      	ldr	r2, [pc, #496]	@ (80093c4 <HAL_RCC_OscConfig+0x470>)
 80091d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80091da:	4b7a      	ldr	r3, [pc, #488]	@ (80093c4 <HAL_RCC_OscConfig+0x470>)
 80091dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091e2:	60bb      	str	r3, [r7, #8]
 80091e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80091e6:	2301      	movs	r3, #1
 80091e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091ea:	4b77      	ldr	r3, [pc, #476]	@ (80093c8 <HAL_RCC_OscConfig+0x474>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d118      	bne.n	8009228 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80091f6:	4b74      	ldr	r3, [pc, #464]	@ (80093c8 <HAL_RCC_OscConfig+0x474>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a73      	ldr	r2, [pc, #460]	@ (80093c8 <HAL_RCC_OscConfig+0x474>)
 80091fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009202:	f7fd fa1b 	bl	800663c <HAL_GetTick>
 8009206:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009208:	e008      	b.n	800921c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800920a:	f7fd fa17 	bl	800663c <HAL_GetTick>
 800920e:	4602      	mov	r2, r0
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	2b02      	cmp	r3, #2
 8009216:	d901      	bls.n	800921c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009218:	2303      	movs	r3, #3
 800921a:	e10c      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800921c:	4b6a      	ldr	r3, [pc, #424]	@ (80093c8 <HAL_RCC_OscConfig+0x474>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009224:	2b00      	cmp	r3, #0
 8009226:	d0f0      	beq.n	800920a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d106      	bne.n	800923e <HAL_RCC_OscConfig+0x2ea>
 8009230:	4b64      	ldr	r3, [pc, #400]	@ (80093c4 <HAL_RCC_OscConfig+0x470>)
 8009232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009234:	4a63      	ldr	r2, [pc, #396]	@ (80093c4 <HAL_RCC_OscConfig+0x470>)
 8009236:	f043 0301 	orr.w	r3, r3, #1
 800923a:	6713      	str	r3, [r2, #112]	@ 0x70
 800923c:	e01c      	b.n	8009278 <HAL_RCC_OscConfig+0x324>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	2b05      	cmp	r3, #5
 8009244:	d10c      	bne.n	8009260 <HAL_RCC_OscConfig+0x30c>
 8009246:	4b5f      	ldr	r3, [pc, #380]	@ (80093c4 <HAL_RCC_OscConfig+0x470>)
 8009248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800924a:	4a5e      	ldr	r2, [pc, #376]	@ (80093c4 <HAL_RCC_OscConfig+0x470>)
 800924c:	f043 0304 	orr.w	r3, r3, #4
 8009250:	6713      	str	r3, [r2, #112]	@ 0x70
 8009252:	4b5c      	ldr	r3, [pc, #368]	@ (80093c4 <HAL_RCC_OscConfig+0x470>)
 8009254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009256:	4a5b      	ldr	r2, [pc, #364]	@ (80093c4 <HAL_RCC_OscConfig+0x470>)
 8009258:	f043 0301 	orr.w	r3, r3, #1
 800925c:	6713      	str	r3, [r2, #112]	@ 0x70
 800925e:	e00b      	b.n	8009278 <HAL_RCC_OscConfig+0x324>
 8009260:	4b58      	ldr	r3, [pc, #352]	@ (80093c4 <HAL_RCC_OscConfig+0x470>)
 8009262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009264:	4a57      	ldr	r2, [pc, #348]	@ (80093c4 <HAL_RCC_OscConfig+0x470>)
 8009266:	f023 0301 	bic.w	r3, r3, #1
 800926a:	6713      	str	r3, [r2, #112]	@ 0x70
 800926c:	4b55      	ldr	r3, [pc, #340]	@ (80093c4 <HAL_RCC_OscConfig+0x470>)
 800926e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009270:	4a54      	ldr	r2, [pc, #336]	@ (80093c4 <HAL_RCC_OscConfig+0x470>)
 8009272:	f023 0304 	bic.w	r3, r3, #4
 8009276:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d015      	beq.n	80092ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009280:	f7fd f9dc 	bl	800663c <HAL_GetTick>
 8009284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009286:	e00a      	b.n	800929e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009288:	f7fd f9d8 	bl	800663c <HAL_GetTick>
 800928c:	4602      	mov	r2, r0
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	1ad3      	subs	r3, r2, r3
 8009292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009296:	4293      	cmp	r3, r2
 8009298:	d901      	bls.n	800929e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800929a:	2303      	movs	r3, #3
 800929c:	e0cb      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800929e:	4b49      	ldr	r3, [pc, #292]	@ (80093c4 <HAL_RCC_OscConfig+0x470>)
 80092a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092a2:	f003 0302 	and.w	r3, r3, #2
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d0ee      	beq.n	8009288 <HAL_RCC_OscConfig+0x334>
 80092aa:	e014      	b.n	80092d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80092ac:	f7fd f9c6 	bl	800663c <HAL_GetTick>
 80092b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092b2:	e00a      	b.n	80092ca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092b4:	f7fd f9c2 	bl	800663c <HAL_GetTick>
 80092b8:	4602      	mov	r2, r0
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	1ad3      	subs	r3, r2, r3
 80092be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d901      	bls.n	80092ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80092c6:	2303      	movs	r3, #3
 80092c8:	e0b5      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092ca:	4b3e      	ldr	r3, [pc, #248]	@ (80093c4 <HAL_RCC_OscConfig+0x470>)
 80092cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092ce:	f003 0302 	and.w	r3, r3, #2
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1ee      	bne.n	80092b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80092d6:	7dfb      	ldrb	r3, [r7, #23]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d105      	bne.n	80092e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80092dc:	4b39      	ldr	r3, [pc, #228]	@ (80093c4 <HAL_RCC_OscConfig+0x470>)
 80092de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092e0:	4a38      	ldr	r2, [pc, #224]	@ (80093c4 <HAL_RCC_OscConfig+0x470>)
 80092e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	699b      	ldr	r3, [r3, #24]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f000 80a1 	beq.w	8009434 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80092f2:	4b34      	ldr	r3, [pc, #208]	@ (80093c4 <HAL_RCC_OscConfig+0x470>)
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	f003 030c 	and.w	r3, r3, #12
 80092fa:	2b08      	cmp	r3, #8
 80092fc:	d05c      	beq.n	80093b8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	699b      	ldr	r3, [r3, #24]
 8009302:	2b02      	cmp	r3, #2
 8009304:	d141      	bne.n	800938a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009306:	4b31      	ldr	r3, [pc, #196]	@ (80093cc <HAL_RCC_OscConfig+0x478>)
 8009308:	2200      	movs	r2, #0
 800930a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800930c:	f7fd f996 	bl	800663c <HAL_GetTick>
 8009310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009312:	e008      	b.n	8009326 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009314:	f7fd f992 	bl	800663c <HAL_GetTick>
 8009318:	4602      	mov	r2, r0
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	1ad3      	subs	r3, r2, r3
 800931e:	2b02      	cmp	r3, #2
 8009320:	d901      	bls.n	8009326 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009322:	2303      	movs	r3, #3
 8009324:	e087      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009326:	4b27      	ldr	r3, [pc, #156]	@ (80093c4 <HAL_RCC_OscConfig+0x470>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800932e:	2b00      	cmp	r3, #0
 8009330:	d1f0      	bne.n	8009314 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	69da      	ldr	r2, [r3, #28]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a1b      	ldr	r3, [r3, #32]
 800933a:	431a      	orrs	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009340:	019b      	lsls	r3, r3, #6
 8009342:	431a      	orrs	r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009348:	085b      	lsrs	r3, r3, #1
 800934a:	3b01      	subs	r3, #1
 800934c:	041b      	lsls	r3, r3, #16
 800934e:	431a      	orrs	r2, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009354:	061b      	lsls	r3, r3, #24
 8009356:	491b      	ldr	r1, [pc, #108]	@ (80093c4 <HAL_RCC_OscConfig+0x470>)
 8009358:	4313      	orrs	r3, r2
 800935a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800935c:	4b1b      	ldr	r3, [pc, #108]	@ (80093cc <HAL_RCC_OscConfig+0x478>)
 800935e:	2201      	movs	r2, #1
 8009360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009362:	f7fd f96b 	bl	800663c <HAL_GetTick>
 8009366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009368:	e008      	b.n	800937c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800936a:	f7fd f967 	bl	800663c <HAL_GetTick>
 800936e:	4602      	mov	r2, r0
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	1ad3      	subs	r3, r2, r3
 8009374:	2b02      	cmp	r3, #2
 8009376:	d901      	bls.n	800937c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009378:	2303      	movs	r3, #3
 800937a:	e05c      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800937c:	4b11      	ldr	r3, [pc, #68]	@ (80093c4 <HAL_RCC_OscConfig+0x470>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009384:	2b00      	cmp	r3, #0
 8009386:	d0f0      	beq.n	800936a <HAL_RCC_OscConfig+0x416>
 8009388:	e054      	b.n	8009434 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800938a:	4b10      	ldr	r3, [pc, #64]	@ (80093cc <HAL_RCC_OscConfig+0x478>)
 800938c:	2200      	movs	r2, #0
 800938e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009390:	f7fd f954 	bl	800663c <HAL_GetTick>
 8009394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009396:	e008      	b.n	80093aa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009398:	f7fd f950 	bl	800663c <HAL_GetTick>
 800939c:	4602      	mov	r2, r0
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	1ad3      	subs	r3, r2, r3
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	d901      	bls.n	80093aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80093a6:	2303      	movs	r3, #3
 80093a8:	e045      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093aa:	4b06      	ldr	r3, [pc, #24]	@ (80093c4 <HAL_RCC_OscConfig+0x470>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d1f0      	bne.n	8009398 <HAL_RCC_OscConfig+0x444>
 80093b6:	e03d      	b.n	8009434 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	699b      	ldr	r3, [r3, #24]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d107      	bne.n	80093d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	e038      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
 80093c4:	40023800 	.word	0x40023800
 80093c8:	40007000 	.word	0x40007000
 80093cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80093d0:	4b1b      	ldr	r3, [pc, #108]	@ (8009440 <HAL_RCC_OscConfig+0x4ec>)
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	699b      	ldr	r3, [r3, #24]
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d028      	beq.n	8009430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d121      	bne.n	8009430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d11a      	bne.n	8009430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009400:	4013      	ands	r3, r2
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009406:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009408:	4293      	cmp	r3, r2
 800940a:	d111      	bne.n	8009430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009416:	085b      	lsrs	r3, r3, #1
 8009418:	3b01      	subs	r3, #1
 800941a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800941c:	429a      	cmp	r2, r3
 800941e:	d107      	bne.n	8009430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800942a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800942c:	429a      	cmp	r2, r3
 800942e:	d001      	beq.n	8009434 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009430:	2301      	movs	r3, #1
 8009432:	e000      	b.n	8009436 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3718      	adds	r7, #24
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	40023800 	.word	0x40023800

08009444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d101      	bne.n	8009458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009454:	2301      	movs	r3, #1
 8009456:	e0cc      	b.n	80095f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009458:	4b68      	ldr	r3, [pc, #416]	@ (80095fc <HAL_RCC_ClockConfig+0x1b8>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 0307 	and.w	r3, r3, #7
 8009460:	683a      	ldr	r2, [r7, #0]
 8009462:	429a      	cmp	r2, r3
 8009464:	d90c      	bls.n	8009480 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009466:	4b65      	ldr	r3, [pc, #404]	@ (80095fc <HAL_RCC_ClockConfig+0x1b8>)
 8009468:	683a      	ldr	r2, [r7, #0]
 800946a:	b2d2      	uxtb	r2, r2
 800946c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800946e:	4b63      	ldr	r3, [pc, #396]	@ (80095fc <HAL_RCC_ClockConfig+0x1b8>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f003 0307 	and.w	r3, r3, #7
 8009476:	683a      	ldr	r2, [r7, #0]
 8009478:	429a      	cmp	r2, r3
 800947a:	d001      	beq.n	8009480 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	e0b8      	b.n	80095f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f003 0302 	and.w	r3, r3, #2
 8009488:	2b00      	cmp	r3, #0
 800948a:	d020      	beq.n	80094ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f003 0304 	and.w	r3, r3, #4
 8009494:	2b00      	cmp	r3, #0
 8009496:	d005      	beq.n	80094a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009498:	4b59      	ldr	r3, [pc, #356]	@ (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	4a58      	ldr	r2, [pc, #352]	@ (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 800949e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80094a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f003 0308 	and.w	r3, r3, #8
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d005      	beq.n	80094bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80094b0:	4b53      	ldr	r3, [pc, #332]	@ (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	4a52      	ldr	r2, [pc, #328]	@ (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 80094b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80094ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80094bc:	4b50      	ldr	r3, [pc, #320]	@ (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	494d      	ldr	r1, [pc, #308]	@ (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 80094ca:	4313      	orrs	r3, r2
 80094cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 0301 	and.w	r3, r3, #1
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d044      	beq.n	8009564 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d107      	bne.n	80094f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094e2:	4b47      	ldr	r3, [pc, #284]	@ (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d119      	bne.n	8009522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80094ee:	2301      	movs	r3, #1
 80094f0:	e07f      	b.n	80095f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d003      	beq.n	8009502 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80094fe:	2b03      	cmp	r3, #3
 8009500:	d107      	bne.n	8009512 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009502:	4b3f      	ldr	r3, [pc, #252]	@ (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800950a:	2b00      	cmp	r3, #0
 800950c:	d109      	bne.n	8009522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	e06f      	b.n	80095f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009512:	4b3b      	ldr	r3, [pc, #236]	@ (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f003 0302 	and.w	r3, r3, #2
 800951a:	2b00      	cmp	r3, #0
 800951c:	d101      	bne.n	8009522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	e067      	b.n	80095f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009522:	4b37      	ldr	r3, [pc, #220]	@ (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	f023 0203 	bic.w	r2, r3, #3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	4934      	ldr	r1, [pc, #208]	@ (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 8009530:	4313      	orrs	r3, r2
 8009532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009534:	f7fd f882 	bl	800663c <HAL_GetTick>
 8009538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800953a:	e00a      	b.n	8009552 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800953c:	f7fd f87e 	bl	800663c <HAL_GetTick>
 8009540:	4602      	mov	r2, r0
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	1ad3      	subs	r3, r2, r3
 8009546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800954a:	4293      	cmp	r3, r2
 800954c:	d901      	bls.n	8009552 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800954e:	2303      	movs	r3, #3
 8009550:	e04f      	b.n	80095f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009552:	4b2b      	ldr	r3, [pc, #172]	@ (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	f003 020c 	and.w	r2, r3, #12
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	429a      	cmp	r2, r3
 8009562:	d1eb      	bne.n	800953c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009564:	4b25      	ldr	r3, [pc, #148]	@ (80095fc <HAL_RCC_ClockConfig+0x1b8>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f003 0307 	and.w	r3, r3, #7
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	429a      	cmp	r2, r3
 8009570:	d20c      	bcs.n	800958c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009572:	4b22      	ldr	r3, [pc, #136]	@ (80095fc <HAL_RCC_ClockConfig+0x1b8>)
 8009574:	683a      	ldr	r2, [r7, #0]
 8009576:	b2d2      	uxtb	r2, r2
 8009578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800957a:	4b20      	ldr	r3, [pc, #128]	@ (80095fc <HAL_RCC_ClockConfig+0x1b8>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f003 0307 	and.w	r3, r3, #7
 8009582:	683a      	ldr	r2, [r7, #0]
 8009584:	429a      	cmp	r2, r3
 8009586:	d001      	beq.n	800958c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	e032      	b.n	80095f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 0304 	and.w	r3, r3, #4
 8009594:	2b00      	cmp	r3, #0
 8009596:	d008      	beq.n	80095aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009598:	4b19      	ldr	r3, [pc, #100]	@ (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	4916      	ldr	r1, [pc, #88]	@ (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 80095a6:	4313      	orrs	r3, r2
 80095a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f003 0308 	and.w	r3, r3, #8
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d009      	beq.n	80095ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80095b6:	4b12      	ldr	r3, [pc, #72]	@ (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	691b      	ldr	r3, [r3, #16]
 80095c2:	00db      	lsls	r3, r3, #3
 80095c4:	490e      	ldr	r1, [pc, #56]	@ (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 80095c6:	4313      	orrs	r3, r2
 80095c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80095ca:	f000 f821 	bl	8009610 <HAL_RCC_GetSysClockFreq>
 80095ce:	4602      	mov	r2, r0
 80095d0:	4b0b      	ldr	r3, [pc, #44]	@ (8009600 <HAL_RCC_ClockConfig+0x1bc>)
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	091b      	lsrs	r3, r3, #4
 80095d6:	f003 030f 	and.w	r3, r3, #15
 80095da:	490a      	ldr	r1, [pc, #40]	@ (8009604 <HAL_RCC_ClockConfig+0x1c0>)
 80095dc:	5ccb      	ldrb	r3, [r1, r3]
 80095de:	fa22 f303 	lsr.w	r3, r2, r3
 80095e2:	4a09      	ldr	r2, [pc, #36]	@ (8009608 <HAL_RCC_ClockConfig+0x1c4>)
 80095e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80095e6:	4b09      	ldr	r3, [pc, #36]	@ (800960c <HAL_RCC_ClockConfig+0x1c8>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7fc ffe2 	bl	80065b4 <HAL_InitTick>

  return HAL_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	40023c00 	.word	0x40023c00
 8009600:	40023800 	.word	0x40023800
 8009604:	080142f8 	.word	0x080142f8
 8009608:	20000004 	.word	0x20000004
 800960c:	20000008 	.word	0x20000008

08009610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009614:	b090      	sub	sp, #64	@ 0x40
 8009616:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009618:	2300      	movs	r3, #0
 800961a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800961c:	2300      	movs	r3, #0
 800961e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8009620:	2300      	movs	r3, #0
 8009622:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8009624:	2300      	movs	r3, #0
 8009626:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009628:	4b59      	ldr	r3, [pc, #356]	@ (8009790 <HAL_RCC_GetSysClockFreq+0x180>)
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	f003 030c 	and.w	r3, r3, #12
 8009630:	2b08      	cmp	r3, #8
 8009632:	d00d      	beq.n	8009650 <HAL_RCC_GetSysClockFreq+0x40>
 8009634:	2b08      	cmp	r3, #8
 8009636:	f200 80a1 	bhi.w	800977c <HAL_RCC_GetSysClockFreq+0x16c>
 800963a:	2b00      	cmp	r3, #0
 800963c:	d002      	beq.n	8009644 <HAL_RCC_GetSysClockFreq+0x34>
 800963e:	2b04      	cmp	r3, #4
 8009640:	d003      	beq.n	800964a <HAL_RCC_GetSysClockFreq+0x3a>
 8009642:	e09b      	b.n	800977c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009644:	4b53      	ldr	r3, [pc, #332]	@ (8009794 <HAL_RCC_GetSysClockFreq+0x184>)
 8009646:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009648:	e09b      	b.n	8009782 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800964a:	4b53      	ldr	r3, [pc, #332]	@ (8009798 <HAL_RCC_GetSysClockFreq+0x188>)
 800964c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800964e:	e098      	b.n	8009782 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009650:	4b4f      	ldr	r3, [pc, #316]	@ (8009790 <HAL_RCC_GetSysClockFreq+0x180>)
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009658:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800965a:	4b4d      	ldr	r3, [pc, #308]	@ (8009790 <HAL_RCC_GetSysClockFreq+0x180>)
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d028      	beq.n	80096b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009666:	4b4a      	ldr	r3, [pc, #296]	@ (8009790 <HAL_RCC_GetSysClockFreq+0x180>)
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	099b      	lsrs	r3, r3, #6
 800966c:	2200      	movs	r2, #0
 800966e:	623b      	str	r3, [r7, #32]
 8009670:	627a      	str	r2, [r7, #36]	@ 0x24
 8009672:	6a3b      	ldr	r3, [r7, #32]
 8009674:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009678:	2100      	movs	r1, #0
 800967a:	4b47      	ldr	r3, [pc, #284]	@ (8009798 <HAL_RCC_GetSysClockFreq+0x188>)
 800967c:	fb03 f201 	mul.w	r2, r3, r1
 8009680:	2300      	movs	r3, #0
 8009682:	fb00 f303 	mul.w	r3, r0, r3
 8009686:	4413      	add	r3, r2
 8009688:	4a43      	ldr	r2, [pc, #268]	@ (8009798 <HAL_RCC_GetSysClockFreq+0x188>)
 800968a:	fba0 1202 	umull	r1, r2, r0, r2
 800968e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009690:	460a      	mov	r2, r1
 8009692:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009694:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009696:	4413      	add	r3, r2
 8009698:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800969a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800969c:	2200      	movs	r2, #0
 800969e:	61bb      	str	r3, [r7, #24]
 80096a0:	61fa      	str	r2, [r7, #28]
 80096a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80096a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80096aa:	f7f7 faed 	bl	8000c88 <__aeabi_uldivmod>
 80096ae:	4602      	mov	r2, r0
 80096b0:	460b      	mov	r3, r1
 80096b2:	4613      	mov	r3, r2
 80096b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096b6:	e053      	b.n	8009760 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80096b8:	4b35      	ldr	r3, [pc, #212]	@ (8009790 <HAL_RCC_GetSysClockFreq+0x180>)
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	099b      	lsrs	r3, r3, #6
 80096be:	2200      	movs	r2, #0
 80096c0:	613b      	str	r3, [r7, #16]
 80096c2:	617a      	str	r2, [r7, #20]
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80096ca:	f04f 0b00 	mov.w	fp, #0
 80096ce:	4652      	mov	r2, sl
 80096d0:	465b      	mov	r3, fp
 80096d2:	f04f 0000 	mov.w	r0, #0
 80096d6:	f04f 0100 	mov.w	r1, #0
 80096da:	0159      	lsls	r1, r3, #5
 80096dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80096e0:	0150      	lsls	r0, r2, #5
 80096e2:	4602      	mov	r2, r0
 80096e4:	460b      	mov	r3, r1
 80096e6:	ebb2 080a 	subs.w	r8, r2, sl
 80096ea:	eb63 090b 	sbc.w	r9, r3, fp
 80096ee:	f04f 0200 	mov.w	r2, #0
 80096f2:	f04f 0300 	mov.w	r3, #0
 80096f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80096fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80096fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009702:	ebb2 0408 	subs.w	r4, r2, r8
 8009706:	eb63 0509 	sbc.w	r5, r3, r9
 800970a:	f04f 0200 	mov.w	r2, #0
 800970e:	f04f 0300 	mov.w	r3, #0
 8009712:	00eb      	lsls	r3, r5, #3
 8009714:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009718:	00e2      	lsls	r2, r4, #3
 800971a:	4614      	mov	r4, r2
 800971c:	461d      	mov	r5, r3
 800971e:	eb14 030a 	adds.w	r3, r4, sl
 8009722:	603b      	str	r3, [r7, #0]
 8009724:	eb45 030b 	adc.w	r3, r5, fp
 8009728:	607b      	str	r3, [r7, #4]
 800972a:	f04f 0200 	mov.w	r2, #0
 800972e:	f04f 0300 	mov.w	r3, #0
 8009732:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009736:	4629      	mov	r1, r5
 8009738:	028b      	lsls	r3, r1, #10
 800973a:	4621      	mov	r1, r4
 800973c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009740:	4621      	mov	r1, r4
 8009742:	028a      	lsls	r2, r1, #10
 8009744:	4610      	mov	r0, r2
 8009746:	4619      	mov	r1, r3
 8009748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800974a:	2200      	movs	r2, #0
 800974c:	60bb      	str	r3, [r7, #8]
 800974e:	60fa      	str	r2, [r7, #12]
 8009750:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009754:	f7f7 fa98 	bl	8000c88 <__aeabi_uldivmod>
 8009758:	4602      	mov	r2, r0
 800975a:	460b      	mov	r3, r1
 800975c:	4613      	mov	r3, r2
 800975e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009760:	4b0b      	ldr	r3, [pc, #44]	@ (8009790 <HAL_RCC_GetSysClockFreq+0x180>)
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	0c1b      	lsrs	r3, r3, #16
 8009766:	f003 0303 	and.w	r3, r3, #3
 800976a:	3301      	adds	r3, #1
 800976c:	005b      	lsls	r3, r3, #1
 800976e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8009770:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009774:	fbb2 f3f3 	udiv	r3, r2, r3
 8009778:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800977a:	e002      	b.n	8009782 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800977c:	4b05      	ldr	r3, [pc, #20]	@ (8009794 <HAL_RCC_GetSysClockFreq+0x184>)
 800977e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009780:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009784:	4618      	mov	r0, r3
 8009786:	3740      	adds	r7, #64	@ 0x40
 8009788:	46bd      	mov	sp, r7
 800978a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800978e:	bf00      	nop
 8009790:	40023800 	.word	0x40023800
 8009794:	00f42400 	.word	0x00f42400
 8009798:	017d7840 	.word	0x017d7840

0800979c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800979c:	b480      	push	{r7}
 800979e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80097a0:	4b03      	ldr	r3, [pc, #12]	@ (80097b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80097a2:	681b      	ldr	r3, [r3, #0]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr
 80097ae:	bf00      	nop
 80097b0:	20000004 	.word	0x20000004

080097b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80097b8:	f7ff fff0 	bl	800979c <HAL_RCC_GetHCLKFreq>
 80097bc:	4602      	mov	r2, r0
 80097be:	4b05      	ldr	r3, [pc, #20]	@ (80097d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	0a9b      	lsrs	r3, r3, #10
 80097c4:	f003 0307 	and.w	r3, r3, #7
 80097c8:	4903      	ldr	r1, [pc, #12]	@ (80097d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80097ca:	5ccb      	ldrb	r3, [r1, r3]
 80097cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	40023800 	.word	0x40023800
 80097d8:	08014308 	.word	0x08014308

080097dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80097e0:	f7ff ffdc 	bl	800979c <HAL_RCC_GetHCLKFreq>
 80097e4:	4602      	mov	r2, r0
 80097e6:	4b05      	ldr	r3, [pc, #20]	@ (80097fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	0b5b      	lsrs	r3, r3, #13
 80097ec:	f003 0307 	and.w	r3, r3, #7
 80097f0:	4903      	ldr	r1, [pc, #12]	@ (8009800 <HAL_RCC_GetPCLK2Freq+0x24>)
 80097f2:	5ccb      	ldrb	r3, [r1, r3]
 80097f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	40023800 	.word	0x40023800
 8009800:	08014308 	.word	0x08014308

08009804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d101      	bne.n	8009816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	e041      	b.n	800989a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800981c:	b2db      	uxtb	r3, r3
 800981e:	2b00      	cmp	r3, #0
 8009820:	d106      	bne.n	8009830 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f7fc fc54 	bl	80060d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2202      	movs	r2, #2
 8009834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	3304      	adds	r3, #4
 8009840:	4619      	mov	r1, r3
 8009842:	4610      	mov	r0, r2
 8009844:	f000 ff7c 	bl	800a740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2201      	movs	r2, #1
 8009854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2201      	movs	r2, #1
 8009864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2201      	movs	r2, #1
 8009884:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2201      	movs	r2, #1
 800988c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2201      	movs	r2, #1
 8009894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b082      	sub	sp, #8
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d101      	bne.n	80098b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	e041      	b.n	8009938 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d106      	bne.n	80098ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 f839 	bl	8009940 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2202      	movs	r2, #2
 80098d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	3304      	adds	r3, #4
 80098de:	4619      	mov	r1, r3
 80098e0:	4610      	mov	r0, r2
 80098e2:	f000 ff2d 	bl	800a740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2201      	movs	r2, #1
 80098f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2201      	movs	r2, #1
 80098fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2201      	movs	r2, #1
 8009902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2201      	movs	r2, #1
 800990a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2201      	movs	r2, #1
 8009912:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2201      	movs	r2, #1
 800991a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2201      	movs	r2, #1
 8009922:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2201      	movs	r2, #1
 800992a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2201      	movs	r2, #1
 8009932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009948:	bf00      	nop
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d109      	bne.n	8009978 <HAL_TIM_PWM_Start+0x24>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800996a:	b2db      	uxtb	r3, r3
 800996c:	2b01      	cmp	r3, #1
 800996e:	bf14      	ite	ne
 8009970:	2301      	movne	r3, #1
 8009972:	2300      	moveq	r3, #0
 8009974:	b2db      	uxtb	r3, r3
 8009976:	e022      	b.n	80099be <HAL_TIM_PWM_Start+0x6a>
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	2b04      	cmp	r3, #4
 800997c:	d109      	bne.n	8009992 <HAL_TIM_PWM_Start+0x3e>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009984:	b2db      	uxtb	r3, r3
 8009986:	2b01      	cmp	r3, #1
 8009988:	bf14      	ite	ne
 800998a:	2301      	movne	r3, #1
 800998c:	2300      	moveq	r3, #0
 800998e:	b2db      	uxtb	r3, r3
 8009990:	e015      	b.n	80099be <HAL_TIM_PWM_Start+0x6a>
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	2b08      	cmp	r3, #8
 8009996:	d109      	bne.n	80099ac <HAL_TIM_PWM_Start+0x58>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	bf14      	ite	ne
 80099a4:	2301      	movne	r3, #1
 80099a6:	2300      	moveq	r3, #0
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	e008      	b.n	80099be <HAL_TIM_PWM_Start+0x6a>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	bf14      	ite	ne
 80099b8:	2301      	movne	r3, #1
 80099ba:	2300      	moveq	r3, #0
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d001      	beq.n	80099c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80099c2:	2301      	movs	r3, #1
 80099c4:	e07c      	b.n	8009ac0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d104      	bne.n	80099d6 <HAL_TIM_PWM_Start+0x82>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2202      	movs	r2, #2
 80099d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80099d4:	e013      	b.n	80099fe <HAL_TIM_PWM_Start+0xaa>
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	2b04      	cmp	r3, #4
 80099da:	d104      	bne.n	80099e6 <HAL_TIM_PWM_Start+0x92>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2202      	movs	r2, #2
 80099e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80099e4:	e00b      	b.n	80099fe <HAL_TIM_PWM_Start+0xaa>
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	2b08      	cmp	r3, #8
 80099ea:	d104      	bne.n	80099f6 <HAL_TIM_PWM_Start+0xa2>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2202      	movs	r2, #2
 80099f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099f4:	e003      	b.n	80099fe <HAL_TIM_PWM_Start+0xaa>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2202      	movs	r2, #2
 80099fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2201      	movs	r2, #1
 8009a04:	6839      	ldr	r1, [r7, #0]
 8009a06:	4618      	mov	r0, r3
 8009a08:	f001 fab4 	bl	800af74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a2d      	ldr	r2, [pc, #180]	@ (8009ac8 <HAL_TIM_PWM_Start+0x174>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d004      	beq.n	8009a20 <HAL_TIM_PWM_Start+0xcc>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a2c      	ldr	r2, [pc, #176]	@ (8009acc <HAL_TIM_PWM_Start+0x178>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d101      	bne.n	8009a24 <HAL_TIM_PWM_Start+0xd0>
 8009a20:	2301      	movs	r3, #1
 8009a22:	e000      	b.n	8009a26 <HAL_TIM_PWM_Start+0xd2>
 8009a24:	2300      	movs	r3, #0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d007      	beq.n	8009a3a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009a38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a22      	ldr	r2, [pc, #136]	@ (8009ac8 <HAL_TIM_PWM_Start+0x174>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d022      	beq.n	8009a8a <HAL_TIM_PWM_Start+0x136>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a4c:	d01d      	beq.n	8009a8a <HAL_TIM_PWM_Start+0x136>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a1f      	ldr	r2, [pc, #124]	@ (8009ad0 <HAL_TIM_PWM_Start+0x17c>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d018      	beq.n	8009a8a <HAL_TIM_PWM_Start+0x136>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8009ad4 <HAL_TIM_PWM_Start+0x180>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d013      	beq.n	8009a8a <HAL_TIM_PWM_Start+0x136>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a1c      	ldr	r2, [pc, #112]	@ (8009ad8 <HAL_TIM_PWM_Start+0x184>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d00e      	beq.n	8009a8a <HAL_TIM_PWM_Start+0x136>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a16      	ldr	r2, [pc, #88]	@ (8009acc <HAL_TIM_PWM_Start+0x178>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d009      	beq.n	8009a8a <HAL_TIM_PWM_Start+0x136>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a18      	ldr	r2, [pc, #96]	@ (8009adc <HAL_TIM_PWM_Start+0x188>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d004      	beq.n	8009a8a <HAL_TIM_PWM_Start+0x136>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a16      	ldr	r2, [pc, #88]	@ (8009ae0 <HAL_TIM_PWM_Start+0x18c>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d111      	bne.n	8009aae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	f003 0307 	and.w	r3, r3, #7
 8009a94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2b06      	cmp	r3, #6
 8009a9a:	d010      	beq.n	8009abe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f042 0201 	orr.w	r2, r2, #1
 8009aaa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aac:	e007      	b.n	8009abe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f042 0201 	orr.w	r2, r2, #1
 8009abc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3710      	adds	r7, #16
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	40010000 	.word	0x40010000
 8009acc:	40010400 	.word	0x40010400
 8009ad0:	40000400 	.word	0x40000400
 8009ad4:	40000800 	.word	0x40000800
 8009ad8:	40000c00 	.word	0x40000c00
 8009adc:	40014000 	.word	0x40014000
 8009ae0:	40001800 	.word	0x40001800

08009ae4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d101      	bne.n	8009af6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009af2:	2301      	movs	r3, #1
 8009af4:	e041      	b.n	8009b7a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d106      	bne.n	8009b10 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f7fc fa74 	bl	8005ff8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2202      	movs	r2, #2
 8009b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	3304      	adds	r3, #4
 8009b20:	4619      	mov	r1, r3
 8009b22:	4610      	mov	r0, r2
 8009b24:	f000 fe0c 	bl	800a740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009b78:	2300      	movs	r3, #0
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3708      	adds	r7, #8
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
	...

08009b84 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d104      	bne.n	8009ba2 <HAL_TIM_IC_Start_IT+0x1e>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	e013      	b.n	8009bca <HAL_TIM_IC_Start_IT+0x46>
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	2b04      	cmp	r3, #4
 8009ba6:	d104      	bne.n	8009bb2 <HAL_TIM_IC_Start_IT+0x2e>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	e00b      	b.n	8009bca <HAL_TIM_IC_Start_IT+0x46>
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	2b08      	cmp	r3, #8
 8009bb6:	d104      	bne.n	8009bc2 <HAL_TIM_IC_Start_IT+0x3e>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	e003      	b.n	8009bca <HAL_TIM_IC_Start_IT+0x46>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d104      	bne.n	8009bdc <HAL_TIM_IC_Start_IT+0x58>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	e013      	b.n	8009c04 <HAL_TIM_IC_Start_IT+0x80>
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	2b04      	cmp	r3, #4
 8009be0:	d104      	bne.n	8009bec <HAL_TIM_IC_Start_IT+0x68>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	e00b      	b.n	8009c04 <HAL_TIM_IC_Start_IT+0x80>
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	2b08      	cmp	r3, #8
 8009bf0:	d104      	bne.n	8009bfc <HAL_TIM_IC_Start_IT+0x78>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	e003      	b.n	8009c04 <HAL_TIM_IC_Start_IT+0x80>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c06:	7bbb      	ldrb	r3, [r7, #14]
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d102      	bne.n	8009c12 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009c0c:	7b7b      	ldrb	r3, [r7, #13]
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d001      	beq.n	8009c16 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	e0cc      	b.n	8009db0 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d104      	bne.n	8009c26 <HAL_TIM_IC_Start_IT+0xa2>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2202      	movs	r2, #2
 8009c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c24:	e013      	b.n	8009c4e <HAL_TIM_IC_Start_IT+0xca>
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	2b04      	cmp	r3, #4
 8009c2a:	d104      	bne.n	8009c36 <HAL_TIM_IC_Start_IT+0xb2>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2202      	movs	r2, #2
 8009c30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c34:	e00b      	b.n	8009c4e <HAL_TIM_IC_Start_IT+0xca>
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	2b08      	cmp	r3, #8
 8009c3a:	d104      	bne.n	8009c46 <HAL_TIM_IC_Start_IT+0xc2>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2202      	movs	r2, #2
 8009c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c44:	e003      	b.n	8009c4e <HAL_TIM_IC_Start_IT+0xca>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2202      	movs	r2, #2
 8009c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d104      	bne.n	8009c5e <HAL_TIM_IC_Start_IT+0xda>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2202      	movs	r2, #2
 8009c58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009c5c:	e013      	b.n	8009c86 <HAL_TIM_IC_Start_IT+0x102>
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	2b04      	cmp	r3, #4
 8009c62:	d104      	bne.n	8009c6e <HAL_TIM_IC_Start_IT+0xea>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2202      	movs	r2, #2
 8009c68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009c6c:	e00b      	b.n	8009c86 <HAL_TIM_IC_Start_IT+0x102>
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	2b08      	cmp	r3, #8
 8009c72:	d104      	bne.n	8009c7e <HAL_TIM_IC_Start_IT+0xfa>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2202      	movs	r2, #2
 8009c78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c7c:	e003      	b.n	8009c86 <HAL_TIM_IC_Start_IT+0x102>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2202      	movs	r2, #2
 8009c82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	2b0c      	cmp	r3, #12
 8009c8a:	d841      	bhi.n	8009d10 <HAL_TIM_IC_Start_IT+0x18c>
 8009c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c94 <HAL_TIM_IC_Start_IT+0x110>)
 8009c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c92:	bf00      	nop
 8009c94:	08009cc9 	.word	0x08009cc9
 8009c98:	08009d11 	.word	0x08009d11
 8009c9c:	08009d11 	.word	0x08009d11
 8009ca0:	08009d11 	.word	0x08009d11
 8009ca4:	08009cdb 	.word	0x08009cdb
 8009ca8:	08009d11 	.word	0x08009d11
 8009cac:	08009d11 	.word	0x08009d11
 8009cb0:	08009d11 	.word	0x08009d11
 8009cb4:	08009ced 	.word	0x08009ced
 8009cb8:	08009d11 	.word	0x08009d11
 8009cbc:	08009d11 	.word	0x08009d11
 8009cc0:	08009d11 	.word	0x08009d11
 8009cc4:	08009cff 	.word	0x08009cff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	68da      	ldr	r2, [r3, #12]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f042 0202 	orr.w	r2, r2, #2
 8009cd6:	60da      	str	r2, [r3, #12]
      break;
 8009cd8:	e01d      	b.n	8009d16 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	68da      	ldr	r2, [r3, #12]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f042 0204 	orr.w	r2, r2, #4
 8009ce8:	60da      	str	r2, [r3, #12]
      break;
 8009cea:	e014      	b.n	8009d16 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	68da      	ldr	r2, [r3, #12]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f042 0208 	orr.w	r2, r2, #8
 8009cfa:	60da      	str	r2, [r3, #12]
      break;
 8009cfc:	e00b      	b.n	8009d16 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	68da      	ldr	r2, [r3, #12]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f042 0210 	orr.w	r2, r2, #16
 8009d0c:	60da      	str	r2, [r3, #12]
      break;
 8009d0e:	e002      	b.n	8009d16 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8009d10:	2301      	movs	r3, #1
 8009d12:	73fb      	strb	r3, [r7, #15]
      break;
 8009d14:	bf00      	nop
  }

  if (status == HAL_OK)
 8009d16:	7bfb      	ldrb	r3, [r7, #15]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d148      	bne.n	8009dae <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	2201      	movs	r2, #1
 8009d22:	6839      	ldr	r1, [r7, #0]
 8009d24:	4618      	mov	r0, r3
 8009d26:	f001 f925 	bl	800af74 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a22      	ldr	r2, [pc, #136]	@ (8009db8 <HAL_TIM_IC_Start_IT+0x234>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d022      	beq.n	8009d7a <HAL_TIM_IC_Start_IT+0x1f6>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d3c:	d01d      	beq.n	8009d7a <HAL_TIM_IC_Start_IT+0x1f6>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4a1e      	ldr	r2, [pc, #120]	@ (8009dbc <HAL_TIM_IC_Start_IT+0x238>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d018      	beq.n	8009d7a <HAL_TIM_IC_Start_IT+0x1f6>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8009dc0 <HAL_TIM_IC_Start_IT+0x23c>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d013      	beq.n	8009d7a <HAL_TIM_IC_Start_IT+0x1f6>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a1b      	ldr	r2, [pc, #108]	@ (8009dc4 <HAL_TIM_IC_Start_IT+0x240>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d00e      	beq.n	8009d7a <HAL_TIM_IC_Start_IT+0x1f6>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a19      	ldr	r2, [pc, #100]	@ (8009dc8 <HAL_TIM_IC_Start_IT+0x244>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d009      	beq.n	8009d7a <HAL_TIM_IC_Start_IT+0x1f6>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a18      	ldr	r2, [pc, #96]	@ (8009dcc <HAL_TIM_IC_Start_IT+0x248>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d004      	beq.n	8009d7a <HAL_TIM_IC_Start_IT+0x1f6>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a16      	ldr	r2, [pc, #88]	@ (8009dd0 <HAL_TIM_IC_Start_IT+0x24c>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d111      	bne.n	8009d9e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	689b      	ldr	r3, [r3, #8]
 8009d80:	f003 0307 	and.w	r3, r3, #7
 8009d84:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	2b06      	cmp	r3, #6
 8009d8a:	d010      	beq.n	8009dae <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f042 0201 	orr.w	r2, r2, #1
 8009d9a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d9c:	e007      	b.n	8009dae <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f042 0201 	orr.w	r2, r2, #1
 8009dac:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3710      	adds	r7, #16
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	40010000 	.word	0x40010000
 8009dbc:	40000400 	.word	0x40000400
 8009dc0:	40000800 	.word	0x40000800
 8009dc4:	40000c00 	.word	0x40000c00
 8009dc8:	40010400 	.word	0x40010400
 8009dcc:	40014000 	.word	0x40014000
 8009dd0:	40001800 	.word	0x40001800

08009dd4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b086      	sub	sp, #24
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d101      	bne.n	8009de8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009de4:	2301      	movs	r3, #1
 8009de6:	e097      	b.n	8009f18 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d106      	bne.n	8009e02 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f7fc f895 	bl	8005f2c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2202      	movs	r2, #2
 8009e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	6812      	ldr	r2, [r2, #0]
 8009e14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009e18:	f023 0307 	bic.w	r3, r3, #7
 8009e1c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	3304      	adds	r3, #4
 8009e26:	4619      	mov	r1, r3
 8009e28:	4610      	mov	r0, r2
 8009e2a:	f000 fc89 	bl	800a740 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	699b      	ldr	r3, [r3, #24]
 8009e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	6a1b      	ldr	r3, [r3, #32]
 8009e44:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	697a      	ldr	r2, [r7, #20]
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e56:	f023 0303 	bic.w	r3, r3, #3
 8009e5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	689a      	ldr	r2, [r3, #8]
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	699b      	ldr	r3, [r3, #24]
 8009e64:	021b      	lsls	r3, r3, #8
 8009e66:	4313      	orrs	r3, r2
 8009e68:	693a      	ldr	r2, [r7, #16]
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8009e74:	f023 030c 	bic.w	r3, r3, #12
 8009e78:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009e80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009e84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	68da      	ldr	r2, [r3, #12]
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	69db      	ldr	r3, [r3, #28]
 8009e8e:	021b      	lsls	r3, r3, #8
 8009e90:	4313      	orrs	r3, r2
 8009e92:	693a      	ldr	r2, [r7, #16]
 8009e94:	4313      	orrs	r3, r2
 8009e96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	691b      	ldr	r3, [r3, #16]
 8009e9c:	011a      	lsls	r2, r3, #4
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	6a1b      	ldr	r3, [r3, #32]
 8009ea2:	031b      	lsls	r3, r3, #12
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	693a      	ldr	r2, [r7, #16]
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8009eb2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8009eba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	685a      	ldr	r2, [r3, #4]
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	695b      	ldr	r3, [r3, #20]
 8009ec4:	011b      	lsls	r3, r3, #4
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	68fa      	ldr	r2, [r7, #12]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	697a      	ldr	r2, [r7, #20]
 8009ed4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	693a      	ldr	r2, [r7, #16]
 8009edc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	68fa      	ldr	r2, [r7, #12]
 8009ee4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2201      	movs	r2, #1
 8009efa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2201      	movs	r2, #1
 8009f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2201      	movs	r2, #1
 8009f12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3718      	adds	r7, #24
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009f30:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009f38:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009f40:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009f48:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d110      	bne.n	8009f72 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009f50:	7bfb      	ldrb	r3, [r7, #15]
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d102      	bne.n	8009f5c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009f56:	7b7b      	ldrb	r3, [r7, #13]
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d001      	beq.n	8009f60 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e069      	b.n	800a034 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2202      	movs	r2, #2
 8009f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2202      	movs	r2, #2
 8009f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009f70:	e031      	b.n	8009fd6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	2b04      	cmp	r3, #4
 8009f76:	d110      	bne.n	8009f9a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009f78:	7bbb      	ldrb	r3, [r7, #14]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d102      	bne.n	8009f84 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009f7e:	7b3b      	ldrb	r3, [r7, #12]
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d001      	beq.n	8009f88 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	e055      	b.n	800a034 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2202      	movs	r2, #2
 8009f8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2202      	movs	r2, #2
 8009f94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009f98:	e01d      	b.n	8009fd6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009f9a:	7bfb      	ldrb	r3, [r7, #15]
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d108      	bne.n	8009fb2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009fa0:	7bbb      	ldrb	r3, [r7, #14]
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d105      	bne.n	8009fb2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009fa6:	7b7b      	ldrb	r3, [r7, #13]
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d102      	bne.n	8009fb2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009fac:	7b3b      	ldrb	r3, [r7, #12]
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d001      	beq.n	8009fb6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e03e      	b.n	800a034 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2202      	movs	r2, #2
 8009fba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2202      	movs	r2, #2
 8009fc2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2202      	movs	r2, #2
 8009fca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2202      	movs	r2, #2
 8009fd2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d003      	beq.n	8009fe4 <HAL_TIM_Encoder_Start+0xc4>
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	2b04      	cmp	r3, #4
 8009fe0:	d008      	beq.n	8009ff4 <HAL_TIM_Encoder_Start+0xd4>
 8009fe2:	e00f      	b.n	800a004 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2201      	movs	r2, #1
 8009fea:	2100      	movs	r1, #0
 8009fec:	4618      	mov	r0, r3
 8009fee:	f000 ffc1 	bl	800af74 <TIM_CCxChannelCmd>
      break;
 8009ff2:	e016      	b.n	800a022 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	2104      	movs	r1, #4
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f000 ffb9 	bl	800af74 <TIM_CCxChannelCmd>
      break;
 800a002:	e00e      	b.n	800a022 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	2201      	movs	r2, #1
 800a00a:	2100      	movs	r1, #0
 800a00c:	4618      	mov	r0, r3
 800a00e:	f000 ffb1 	bl	800af74 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	2201      	movs	r2, #1
 800a018:	2104      	movs	r1, #4
 800a01a:	4618      	mov	r0, r3
 800a01c:	f000 ffaa 	bl	800af74 <TIM_CCxChannelCmd>
      break;
 800a020:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f042 0201 	orr.w	r2, r2, #1
 800a030:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3710      	adds	r7, #16
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	68db      	ldr	r3, [r3, #12]
 800a04a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	f003 0302 	and.w	r3, r3, #2
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d020      	beq.n	800a0a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f003 0302 	and.w	r3, r3, #2
 800a064:	2b00      	cmp	r3, #0
 800a066:	d01b      	beq.n	800a0a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f06f 0202 	mvn.w	r2, #2
 800a070:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2201      	movs	r2, #1
 800a076:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	699b      	ldr	r3, [r3, #24]
 800a07e:	f003 0303 	and.w	r3, r3, #3
 800a082:	2b00      	cmp	r3, #0
 800a084:	d003      	beq.n	800a08e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f7f8 fc6c 	bl	8002964 <HAL_TIM_IC_CaptureCallback>
 800a08c:	e005      	b.n	800a09a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 fb38 	bl	800a704 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 fb3f 	bl	800a718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2200      	movs	r2, #0
 800a09e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	f003 0304 	and.w	r3, r3, #4
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d020      	beq.n	800a0ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f003 0304 	and.w	r3, r3, #4
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d01b      	beq.n	800a0ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f06f 0204 	mvn.w	r2, #4
 800a0bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2202      	movs	r2, #2
 800a0c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	699b      	ldr	r3, [r3, #24]
 800a0ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d003      	beq.n	800a0da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f7f8 fc46 	bl	8002964 <HAL_TIM_IC_CaptureCallback>
 800a0d8:	e005      	b.n	800a0e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 fb12 	bl	800a704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 fb19 	bl	800a718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	f003 0308 	and.w	r3, r3, #8
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d020      	beq.n	800a138 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f003 0308 	and.w	r3, r3, #8
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d01b      	beq.n	800a138 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f06f 0208 	mvn.w	r2, #8
 800a108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2204      	movs	r2, #4
 800a10e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	69db      	ldr	r3, [r3, #28]
 800a116:	f003 0303 	and.w	r3, r3, #3
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d003      	beq.n	800a126 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f7f8 fc20 	bl	8002964 <HAL_TIM_IC_CaptureCallback>
 800a124:	e005      	b.n	800a132 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 faec 	bl	800a704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 faf3 	bl	800a718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	f003 0310 	and.w	r3, r3, #16
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d020      	beq.n	800a184 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f003 0310 	and.w	r3, r3, #16
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d01b      	beq.n	800a184 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f06f 0210 	mvn.w	r2, #16
 800a154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2208      	movs	r2, #8
 800a15a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	69db      	ldr	r3, [r3, #28]
 800a162:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a166:	2b00      	cmp	r3, #0
 800a168:	d003      	beq.n	800a172 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f7f8 fbfa 	bl	8002964 <HAL_TIM_IC_CaptureCallback>
 800a170:	e005      	b.n	800a17e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 fac6 	bl	800a704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 facd 	bl	800a718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	f003 0301 	and.w	r3, r3, #1
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00c      	beq.n	800a1a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f003 0301 	and.w	r3, r3, #1
 800a194:	2b00      	cmp	r3, #0
 800a196:	d007      	beq.n	800a1a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f06f 0201 	mvn.w	r2, #1
 800a1a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 faa4 	bl	800a6f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d00c      	beq.n	800a1cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d007      	beq.n	800a1cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a1c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 ff80 	bl	800b0cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d00c      	beq.n	800a1f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d007      	beq.n	800a1f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a1e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 fa9e 	bl	800a72c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	f003 0320 	and.w	r3, r3, #32
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d00c      	beq.n	800a214 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f003 0320 	and.w	r3, r3, #32
 800a200:	2b00      	cmp	r3, #0
 800a202:	d007      	beq.n	800a214 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f06f 0220 	mvn.w	r2, #32
 800a20c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 ff52 	bl	800b0b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a214:	bf00      	nop
 800a216:	3710      	adds	r7, #16
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b086      	sub	sp, #24
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a228:	2300      	movs	r3, #0
 800a22a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a232:	2b01      	cmp	r3, #1
 800a234:	d101      	bne.n	800a23a <HAL_TIM_IC_ConfigChannel+0x1e>
 800a236:	2302      	movs	r3, #2
 800a238:	e088      	b.n	800a34c <HAL_TIM_IC_ConfigChannel+0x130>
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2201      	movs	r2, #1
 800a23e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d11b      	bne.n	800a280 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800a258:	f000 fcc8 	bl	800abec <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	699a      	ldr	r2, [r3, #24]
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f022 020c 	bic.w	r2, r2, #12
 800a26a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	6999      	ldr	r1, [r3, #24]
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	689a      	ldr	r2, [r3, #8]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	430a      	orrs	r2, r1
 800a27c:	619a      	str	r2, [r3, #24]
 800a27e:	e060      	b.n	800a342 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2b04      	cmp	r3, #4
 800a284:	d11c      	bne.n	800a2c0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800a296:	f000 fd4c 	bl	800ad32 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	699a      	ldr	r2, [r3, #24]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800a2a8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	6999      	ldr	r1, [r3, #24]
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	021a      	lsls	r2, r3, #8
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	430a      	orrs	r2, r1
 800a2bc:	619a      	str	r2, [r3, #24]
 800a2be:	e040      	b.n	800a342 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2b08      	cmp	r3, #8
 800a2c4:	d11b      	bne.n	800a2fe <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800a2d6:	f000 fd99 	bl	800ae0c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	69da      	ldr	r2, [r3, #28]
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f022 020c 	bic.w	r2, r2, #12
 800a2e8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	69d9      	ldr	r1, [r3, #28]
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	689a      	ldr	r2, [r3, #8]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	430a      	orrs	r2, r1
 800a2fa:	61da      	str	r2, [r3, #28]
 800a2fc:	e021      	b.n	800a342 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2b0c      	cmp	r3, #12
 800a302:	d11c      	bne.n	800a33e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800a314:	f000 fdb6 	bl	800ae84 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	69da      	ldr	r2, [r3, #28]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800a326:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	69d9      	ldr	r1, [r3, #28]
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	689b      	ldr	r3, [r3, #8]
 800a332:	021a      	lsls	r2, r3, #8
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	430a      	orrs	r2, r1
 800a33a:	61da      	str	r2, [r3, #28]
 800a33c:	e001      	b.n	800a342 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800a33e:	2301      	movs	r3, #1
 800a340:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2200      	movs	r2, #0
 800a346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a34a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3718      	adds	r7, #24
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b086      	sub	sp, #24
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	60b9      	str	r1, [r7, #8]
 800a35e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a360:	2300      	movs	r3, #0
 800a362:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d101      	bne.n	800a372 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a36e:	2302      	movs	r3, #2
 800a370:	e0ae      	b.n	800a4d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2201      	movs	r2, #1
 800a376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2b0c      	cmp	r3, #12
 800a37e:	f200 809f 	bhi.w	800a4c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a382:	a201      	add	r2, pc, #4	@ (adr r2, 800a388 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a388:	0800a3bd 	.word	0x0800a3bd
 800a38c:	0800a4c1 	.word	0x0800a4c1
 800a390:	0800a4c1 	.word	0x0800a4c1
 800a394:	0800a4c1 	.word	0x0800a4c1
 800a398:	0800a3fd 	.word	0x0800a3fd
 800a39c:	0800a4c1 	.word	0x0800a4c1
 800a3a0:	0800a4c1 	.word	0x0800a4c1
 800a3a4:	0800a4c1 	.word	0x0800a4c1
 800a3a8:	0800a43f 	.word	0x0800a43f
 800a3ac:	0800a4c1 	.word	0x0800a4c1
 800a3b0:	0800a4c1 	.word	0x0800a4c1
 800a3b4:	0800a4c1 	.word	0x0800a4c1
 800a3b8:	0800a47f 	.word	0x0800a47f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	68b9      	ldr	r1, [r7, #8]
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f000 fa62 	bl	800a88c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	699a      	ldr	r2, [r3, #24]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f042 0208 	orr.w	r2, r2, #8
 800a3d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	699a      	ldr	r2, [r3, #24]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f022 0204 	bic.w	r2, r2, #4
 800a3e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	6999      	ldr	r1, [r3, #24]
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	691a      	ldr	r2, [r3, #16]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	430a      	orrs	r2, r1
 800a3f8:	619a      	str	r2, [r3, #24]
      break;
 800a3fa:	e064      	b.n	800a4c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	68b9      	ldr	r1, [r7, #8]
 800a402:	4618      	mov	r0, r3
 800a404:	f000 fab2 	bl	800a96c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	699a      	ldr	r2, [r3, #24]
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	699a      	ldr	r2, [r3, #24]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	6999      	ldr	r1, [r3, #24]
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	691b      	ldr	r3, [r3, #16]
 800a432:	021a      	lsls	r2, r3, #8
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	430a      	orrs	r2, r1
 800a43a:	619a      	str	r2, [r3, #24]
      break;
 800a43c:	e043      	b.n	800a4c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	68b9      	ldr	r1, [r7, #8]
 800a444:	4618      	mov	r0, r3
 800a446:	f000 fb07 	bl	800aa58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	69da      	ldr	r2, [r3, #28]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f042 0208 	orr.w	r2, r2, #8
 800a458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	69da      	ldr	r2, [r3, #28]
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f022 0204 	bic.w	r2, r2, #4
 800a468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	69d9      	ldr	r1, [r3, #28]
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	691a      	ldr	r2, [r3, #16]
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	430a      	orrs	r2, r1
 800a47a:	61da      	str	r2, [r3, #28]
      break;
 800a47c:	e023      	b.n	800a4c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	68b9      	ldr	r1, [r7, #8]
 800a484:	4618      	mov	r0, r3
 800a486:	f000 fb5b 	bl	800ab40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	69da      	ldr	r2, [r3, #28]
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	69da      	ldr	r2, [r3, #28]
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a4a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	69d9      	ldr	r1, [r3, #28]
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	691b      	ldr	r3, [r3, #16]
 800a4b4:	021a      	lsls	r2, r3, #8
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	430a      	orrs	r2, r1
 800a4bc:	61da      	str	r2, [r3, #28]
      break;
 800a4be:	e002      	b.n	800a4c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	75fb      	strb	r3, [r7, #23]
      break;
 800a4c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a4ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3718      	adds	r7, #24
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d101      	bne.n	800a4f4 <HAL_TIM_ConfigClockSource+0x1c>
 800a4f0:	2302      	movs	r3, #2
 800a4f2:	e0b4      	b.n	800a65e <HAL_TIM_ConfigClockSource+0x186>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2202      	movs	r2, #2
 800a500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a512:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a51a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	68ba      	ldr	r2, [r7, #8]
 800a522:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a52c:	d03e      	beq.n	800a5ac <HAL_TIM_ConfigClockSource+0xd4>
 800a52e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a532:	f200 8087 	bhi.w	800a644 <HAL_TIM_ConfigClockSource+0x16c>
 800a536:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a53a:	f000 8086 	beq.w	800a64a <HAL_TIM_ConfigClockSource+0x172>
 800a53e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a542:	d87f      	bhi.n	800a644 <HAL_TIM_ConfigClockSource+0x16c>
 800a544:	2b70      	cmp	r3, #112	@ 0x70
 800a546:	d01a      	beq.n	800a57e <HAL_TIM_ConfigClockSource+0xa6>
 800a548:	2b70      	cmp	r3, #112	@ 0x70
 800a54a:	d87b      	bhi.n	800a644 <HAL_TIM_ConfigClockSource+0x16c>
 800a54c:	2b60      	cmp	r3, #96	@ 0x60
 800a54e:	d050      	beq.n	800a5f2 <HAL_TIM_ConfigClockSource+0x11a>
 800a550:	2b60      	cmp	r3, #96	@ 0x60
 800a552:	d877      	bhi.n	800a644 <HAL_TIM_ConfigClockSource+0x16c>
 800a554:	2b50      	cmp	r3, #80	@ 0x50
 800a556:	d03c      	beq.n	800a5d2 <HAL_TIM_ConfigClockSource+0xfa>
 800a558:	2b50      	cmp	r3, #80	@ 0x50
 800a55a:	d873      	bhi.n	800a644 <HAL_TIM_ConfigClockSource+0x16c>
 800a55c:	2b40      	cmp	r3, #64	@ 0x40
 800a55e:	d058      	beq.n	800a612 <HAL_TIM_ConfigClockSource+0x13a>
 800a560:	2b40      	cmp	r3, #64	@ 0x40
 800a562:	d86f      	bhi.n	800a644 <HAL_TIM_ConfigClockSource+0x16c>
 800a564:	2b30      	cmp	r3, #48	@ 0x30
 800a566:	d064      	beq.n	800a632 <HAL_TIM_ConfigClockSource+0x15a>
 800a568:	2b30      	cmp	r3, #48	@ 0x30
 800a56a:	d86b      	bhi.n	800a644 <HAL_TIM_ConfigClockSource+0x16c>
 800a56c:	2b20      	cmp	r3, #32
 800a56e:	d060      	beq.n	800a632 <HAL_TIM_ConfigClockSource+0x15a>
 800a570:	2b20      	cmp	r3, #32
 800a572:	d867      	bhi.n	800a644 <HAL_TIM_ConfigClockSource+0x16c>
 800a574:	2b00      	cmp	r3, #0
 800a576:	d05c      	beq.n	800a632 <HAL_TIM_ConfigClockSource+0x15a>
 800a578:	2b10      	cmp	r3, #16
 800a57a:	d05a      	beq.n	800a632 <HAL_TIM_ConfigClockSource+0x15a>
 800a57c:	e062      	b.n	800a644 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a58e:	f000 fcd1 	bl	800af34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a5a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	68ba      	ldr	r2, [r7, #8]
 800a5a8:	609a      	str	r2, [r3, #8]
      break;
 800a5aa:	e04f      	b.n	800a64c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a5bc:	f000 fcba 	bl	800af34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	689a      	ldr	r2, [r3, #8]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a5ce:	609a      	str	r2, [r3, #8]
      break;
 800a5d0:	e03c      	b.n	800a64c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5de:	461a      	mov	r2, r3
 800a5e0:	f000 fb78 	bl	800acd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	2150      	movs	r1, #80	@ 0x50
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f000 fc87 	bl	800aefe <TIM_ITRx_SetConfig>
      break;
 800a5f0:	e02c      	b.n	800a64c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a5fe:	461a      	mov	r2, r3
 800a600:	f000 fbd4 	bl	800adac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2160      	movs	r1, #96	@ 0x60
 800a60a:	4618      	mov	r0, r3
 800a60c:	f000 fc77 	bl	800aefe <TIM_ITRx_SetConfig>
      break;
 800a610:	e01c      	b.n	800a64c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a61e:	461a      	mov	r2, r3
 800a620:	f000 fb58 	bl	800acd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2140      	movs	r1, #64	@ 0x40
 800a62a:	4618      	mov	r0, r3
 800a62c:	f000 fc67 	bl	800aefe <TIM_ITRx_SetConfig>
      break;
 800a630:	e00c      	b.n	800a64c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4619      	mov	r1, r3
 800a63c:	4610      	mov	r0, r2
 800a63e:	f000 fc5e 	bl	800aefe <TIM_ITRx_SetConfig>
      break;
 800a642:	e003      	b.n	800a64c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a644:	2301      	movs	r3, #1
 800a646:	73fb      	strb	r3, [r7, #15]
      break;
 800a648:	e000      	b.n	800a64c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a64a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2201      	movs	r2, #1
 800a650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2200      	movs	r2, #0
 800a658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a65c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3710      	adds	r7, #16
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
	...

0800a668 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a672:	2300      	movs	r3, #0
 800a674:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	2b0c      	cmp	r3, #12
 800a67a:	d831      	bhi.n	800a6e0 <HAL_TIM_ReadCapturedValue+0x78>
 800a67c:	a201      	add	r2, pc, #4	@ (adr r2, 800a684 <HAL_TIM_ReadCapturedValue+0x1c>)
 800a67e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a682:	bf00      	nop
 800a684:	0800a6b9 	.word	0x0800a6b9
 800a688:	0800a6e1 	.word	0x0800a6e1
 800a68c:	0800a6e1 	.word	0x0800a6e1
 800a690:	0800a6e1 	.word	0x0800a6e1
 800a694:	0800a6c3 	.word	0x0800a6c3
 800a698:	0800a6e1 	.word	0x0800a6e1
 800a69c:	0800a6e1 	.word	0x0800a6e1
 800a6a0:	0800a6e1 	.word	0x0800a6e1
 800a6a4:	0800a6cd 	.word	0x0800a6cd
 800a6a8:	0800a6e1 	.word	0x0800a6e1
 800a6ac:	0800a6e1 	.word	0x0800a6e1
 800a6b0:	0800a6e1 	.word	0x0800a6e1
 800a6b4:	0800a6d7 	.word	0x0800a6d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6be:	60fb      	str	r3, [r7, #12]

      break;
 800a6c0:	e00f      	b.n	800a6e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6c8:	60fb      	str	r3, [r7, #12]

      break;
 800a6ca:	e00a      	b.n	800a6e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6d2:	60fb      	str	r3, [r7, #12]

      break;
 800a6d4:	e005      	b.n	800a6e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6dc:	60fb      	str	r3, [r7, #12]

      break;
 800a6de:	e000      	b.n	800a6e2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800a6e0:	bf00      	nop
  }

  return tmpreg;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3714      	adds	r7, #20
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a6f8:	bf00      	nop
 800a6fa:	370c      	adds	r7, #12
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a704:	b480      	push	{r7}
 800a706:	b083      	sub	sp, #12
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a70c:	bf00      	nop
 800a70e:	370c      	adds	r7, #12
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a720:	bf00      	nop
 800a722:	370c      	adds	r7, #12
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr

0800a72c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b083      	sub	sp, #12
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a734:	bf00      	nop
 800a736:	370c      	adds	r7, #12
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr

0800a740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a740:	b480      	push	{r7}
 800a742:	b085      	sub	sp, #20
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4a43      	ldr	r2, [pc, #268]	@ (800a860 <TIM_Base_SetConfig+0x120>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d013      	beq.n	800a780 <TIM_Base_SetConfig+0x40>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a75e:	d00f      	beq.n	800a780 <TIM_Base_SetConfig+0x40>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a40      	ldr	r2, [pc, #256]	@ (800a864 <TIM_Base_SetConfig+0x124>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d00b      	beq.n	800a780 <TIM_Base_SetConfig+0x40>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a3f      	ldr	r2, [pc, #252]	@ (800a868 <TIM_Base_SetConfig+0x128>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d007      	beq.n	800a780 <TIM_Base_SetConfig+0x40>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a3e      	ldr	r2, [pc, #248]	@ (800a86c <TIM_Base_SetConfig+0x12c>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d003      	beq.n	800a780 <TIM_Base_SetConfig+0x40>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4a3d      	ldr	r2, [pc, #244]	@ (800a870 <TIM_Base_SetConfig+0x130>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d108      	bne.n	800a792 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	68fa      	ldr	r2, [r7, #12]
 800a78e:	4313      	orrs	r3, r2
 800a790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4a32      	ldr	r2, [pc, #200]	@ (800a860 <TIM_Base_SetConfig+0x120>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d02b      	beq.n	800a7f2 <TIM_Base_SetConfig+0xb2>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7a0:	d027      	beq.n	800a7f2 <TIM_Base_SetConfig+0xb2>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	4a2f      	ldr	r2, [pc, #188]	@ (800a864 <TIM_Base_SetConfig+0x124>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d023      	beq.n	800a7f2 <TIM_Base_SetConfig+0xb2>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	4a2e      	ldr	r2, [pc, #184]	@ (800a868 <TIM_Base_SetConfig+0x128>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d01f      	beq.n	800a7f2 <TIM_Base_SetConfig+0xb2>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	4a2d      	ldr	r2, [pc, #180]	@ (800a86c <TIM_Base_SetConfig+0x12c>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d01b      	beq.n	800a7f2 <TIM_Base_SetConfig+0xb2>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	4a2c      	ldr	r2, [pc, #176]	@ (800a870 <TIM_Base_SetConfig+0x130>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d017      	beq.n	800a7f2 <TIM_Base_SetConfig+0xb2>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4a2b      	ldr	r2, [pc, #172]	@ (800a874 <TIM_Base_SetConfig+0x134>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d013      	beq.n	800a7f2 <TIM_Base_SetConfig+0xb2>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4a2a      	ldr	r2, [pc, #168]	@ (800a878 <TIM_Base_SetConfig+0x138>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d00f      	beq.n	800a7f2 <TIM_Base_SetConfig+0xb2>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4a29      	ldr	r2, [pc, #164]	@ (800a87c <TIM_Base_SetConfig+0x13c>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d00b      	beq.n	800a7f2 <TIM_Base_SetConfig+0xb2>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4a28      	ldr	r2, [pc, #160]	@ (800a880 <TIM_Base_SetConfig+0x140>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d007      	beq.n	800a7f2 <TIM_Base_SetConfig+0xb2>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4a27      	ldr	r2, [pc, #156]	@ (800a884 <TIM_Base_SetConfig+0x144>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d003      	beq.n	800a7f2 <TIM_Base_SetConfig+0xb2>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4a26      	ldr	r2, [pc, #152]	@ (800a888 <TIM_Base_SetConfig+0x148>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d108      	bne.n	800a804 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a7f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	68db      	ldr	r3, [r3, #12]
 800a7fe:	68fa      	ldr	r2, [r7, #12]
 800a800:	4313      	orrs	r3, r2
 800a802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	695b      	ldr	r3, [r3, #20]
 800a80e:	4313      	orrs	r3, r2
 800a810:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	689a      	ldr	r2, [r3, #8]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	681a      	ldr	r2, [r3, #0]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4a0e      	ldr	r2, [pc, #56]	@ (800a860 <TIM_Base_SetConfig+0x120>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d003      	beq.n	800a832 <TIM_Base_SetConfig+0xf2>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4a10      	ldr	r2, [pc, #64]	@ (800a870 <TIM_Base_SetConfig+0x130>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d103      	bne.n	800a83a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	691a      	ldr	r2, [r3, #16]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f043 0204 	orr.w	r2, r3, #4
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2201      	movs	r2, #1
 800a84a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	68fa      	ldr	r2, [r7, #12]
 800a850:	601a      	str	r2, [r3, #0]
}
 800a852:	bf00      	nop
 800a854:	3714      	adds	r7, #20
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop
 800a860:	40010000 	.word	0x40010000
 800a864:	40000400 	.word	0x40000400
 800a868:	40000800 	.word	0x40000800
 800a86c:	40000c00 	.word	0x40000c00
 800a870:	40010400 	.word	0x40010400
 800a874:	40014000 	.word	0x40014000
 800a878:	40014400 	.word	0x40014400
 800a87c:	40014800 	.word	0x40014800
 800a880:	40001800 	.word	0x40001800
 800a884:	40001c00 	.word	0x40001c00
 800a888:	40002000 	.word	0x40002000

0800a88c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b087      	sub	sp, #28
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6a1b      	ldr	r3, [r3, #32]
 800a89a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6a1b      	ldr	r3, [r3, #32]
 800a8a0:	f023 0201 	bic.w	r2, r3, #1
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	699b      	ldr	r3, [r3, #24]
 800a8b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f023 0303 	bic.w	r3, r3, #3
 800a8c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	68fa      	ldr	r2, [r7, #12]
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	f023 0302 	bic.w	r3, r3, #2
 800a8d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	689b      	ldr	r3, [r3, #8]
 800a8da:	697a      	ldr	r2, [r7, #20]
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	4a20      	ldr	r2, [pc, #128]	@ (800a964 <TIM_OC1_SetConfig+0xd8>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d003      	beq.n	800a8f0 <TIM_OC1_SetConfig+0x64>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	4a1f      	ldr	r2, [pc, #124]	@ (800a968 <TIM_OC1_SetConfig+0xdc>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d10c      	bne.n	800a90a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	f023 0308 	bic.w	r3, r3, #8
 800a8f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	68db      	ldr	r3, [r3, #12]
 800a8fc:	697a      	ldr	r2, [r7, #20]
 800a8fe:	4313      	orrs	r3, r2
 800a900:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	f023 0304 	bic.w	r3, r3, #4
 800a908:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	4a15      	ldr	r2, [pc, #84]	@ (800a964 <TIM_OC1_SetConfig+0xd8>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d003      	beq.n	800a91a <TIM_OC1_SetConfig+0x8e>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	4a14      	ldr	r2, [pc, #80]	@ (800a968 <TIM_OC1_SetConfig+0xdc>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d111      	bne.n	800a93e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	695b      	ldr	r3, [r3, #20]
 800a92e:	693a      	ldr	r2, [r7, #16]
 800a930:	4313      	orrs	r3, r2
 800a932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	699b      	ldr	r3, [r3, #24]
 800a938:	693a      	ldr	r2, [r7, #16]
 800a93a:	4313      	orrs	r3, r2
 800a93c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	693a      	ldr	r2, [r7, #16]
 800a942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	68fa      	ldr	r2, [r7, #12]
 800a948:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	685a      	ldr	r2, [r3, #4]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	697a      	ldr	r2, [r7, #20]
 800a956:	621a      	str	r2, [r3, #32]
}
 800a958:	bf00      	nop
 800a95a:	371c      	adds	r7, #28
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr
 800a964:	40010000 	.word	0x40010000
 800a968:	40010400 	.word	0x40010400

0800a96c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b087      	sub	sp, #28
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6a1b      	ldr	r3, [r3, #32]
 800a97a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6a1b      	ldr	r3, [r3, #32]
 800a980:	f023 0210 	bic.w	r2, r3, #16
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	699b      	ldr	r3, [r3, #24]
 800a992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a99a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a9a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	021b      	lsls	r3, r3, #8
 800a9aa:	68fa      	ldr	r2, [r7, #12]
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	f023 0320 	bic.w	r3, r3, #32
 800a9b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	011b      	lsls	r3, r3, #4
 800a9be:	697a      	ldr	r2, [r7, #20]
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	4a22      	ldr	r2, [pc, #136]	@ (800aa50 <TIM_OC2_SetConfig+0xe4>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d003      	beq.n	800a9d4 <TIM_OC2_SetConfig+0x68>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	4a21      	ldr	r2, [pc, #132]	@ (800aa54 <TIM_OC2_SetConfig+0xe8>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d10d      	bne.n	800a9f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a9da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	011b      	lsls	r3, r3, #4
 800a9e2:	697a      	ldr	r2, [r7, #20]
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4a17      	ldr	r2, [pc, #92]	@ (800aa50 <TIM_OC2_SetConfig+0xe4>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d003      	beq.n	800aa00 <TIM_OC2_SetConfig+0x94>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	4a16      	ldr	r2, [pc, #88]	@ (800aa54 <TIM_OC2_SetConfig+0xe8>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d113      	bne.n	800aa28 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aa06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aa0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	695b      	ldr	r3, [r3, #20]
 800aa14:	009b      	lsls	r3, r3, #2
 800aa16:	693a      	ldr	r2, [r7, #16]
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	699b      	ldr	r3, [r3, #24]
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	693a      	ldr	r2, [r7, #16]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	693a      	ldr	r2, [r7, #16]
 800aa2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	685a      	ldr	r2, [r3, #4]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	697a      	ldr	r2, [r7, #20]
 800aa40:	621a      	str	r2, [r3, #32]
}
 800aa42:	bf00      	nop
 800aa44:	371c      	adds	r7, #28
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr
 800aa4e:	bf00      	nop
 800aa50:	40010000 	.word	0x40010000
 800aa54:	40010400 	.word	0x40010400

0800aa58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b087      	sub	sp, #28
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6a1b      	ldr	r3, [r3, #32]
 800aa66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6a1b      	ldr	r3, [r3, #32]
 800aa6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	69db      	ldr	r3, [r3, #28]
 800aa7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f023 0303 	bic.w	r3, r3, #3
 800aa8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	68fa      	ldr	r2, [r7, #12]
 800aa96:	4313      	orrs	r3, r2
 800aa98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800aaa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	689b      	ldr	r3, [r3, #8]
 800aaa6:	021b      	lsls	r3, r3, #8
 800aaa8:	697a      	ldr	r2, [r7, #20]
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4a21      	ldr	r2, [pc, #132]	@ (800ab38 <TIM_OC3_SetConfig+0xe0>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d003      	beq.n	800aabe <TIM_OC3_SetConfig+0x66>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4a20      	ldr	r2, [pc, #128]	@ (800ab3c <TIM_OC3_SetConfig+0xe4>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d10d      	bne.n	800aada <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aac4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	021b      	lsls	r3, r3, #8
 800aacc:	697a      	ldr	r2, [r7, #20]
 800aace:	4313      	orrs	r3, r2
 800aad0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aad8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	4a16      	ldr	r2, [pc, #88]	@ (800ab38 <TIM_OC3_SetConfig+0xe0>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d003      	beq.n	800aaea <TIM_OC3_SetConfig+0x92>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	4a15      	ldr	r2, [pc, #84]	@ (800ab3c <TIM_OC3_SetConfig+0xe4>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d113      	bne.n	800ab12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aaf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aaf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	695b      	ldr	r3, [r3, #20]
 800aafe:	011b      	lsls	r3, r3, #4
 800ab00:	693a      	ldr	r2, [r7, #16]
 800ab02:	4313      	orrs	r3, r2
 800ab04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	699b      	ldr	r3, [r3, #24]
 800ab0a:	011b      	lsls	r3, r3, #4
 800ab0c:	693a      	ldr	r2, [r7, #16]
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	693a      	ldr	r2, [r7, #16]
 800ab16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	68fa      	ldr	r2, [r7, #12]
 800ab1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	685a      	ldr	r2, [r3, #4]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	697a      	ldr	r2, [r7, #20]
 800ab2a:	621a      	str	r2, [r3, #32]
}
 800ab2c:	bf00      	nop
 800ab2e:	371c      	adds	r7, #28
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr
 800ab38:	40010000 	.word	0x40010000
 800ab3c:	40010400 	.word	0x40010400

0800ab40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b087      	sub	sp, #28
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6a1b      	ldr	r3, [r3, #32]
 800ab4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6a1b      	ldr	r3, [r3, #32]
 800ab54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	69db      	ldr	r3, [r3, #28]
 800ab66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	021b      	lsls	r3, r3, #8
 800ab7e:	68fa      	ldr	r2, [r7, #12]
 800ab80:	4313      	orrs	r3, r2
 800ab82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ab8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	689b      	ldr	r3, [r3, #8]
 800ab90:	031b      	lsls	r3, r3, #12
 800ab92:	693a      	ldr	r2, [r7, #16]
 800ab94:	4313      	orrs	r3, r2
 800ab96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	4a12      	ldr	r2, [pc, #72]	@ (800abe4 <TIM_OC4_SetConfig+0xa4>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d003      	beq.n	800aba8 <TIM_OC4_SetConfig+0x68>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	4a11      	ldr	r2, [pc, #68]	@ (800abe8 <TIM_OC4_SetConfig+0xa8>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d109      	bne.n	800abbc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800abae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	695b      	ldr	r3, [r3, #20]
 800abb4:	019b      	lsls	r3, r3, #6
 800abb6:	697a      	ldr	r2, [r7, #20]
 800abb8:	4313      	orrs	r3, r2
 800abba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	685a      	ldr	r2, [r3, #4]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	693a      	ldr	r2, [r7, #16]
 800abd4:	621a      	str	r2, [r3, #32]
}
 800abd6:	bf00      	nop
 800abd8:	371c      	adds	r7, #28
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop
 800abe4:	40010000 	.word	0x40010000
 800abe8:	40010400 	.word	0x40010400

0800abec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800abec:	b480      	push	{r7}
 800abee:	b087      	sub	sp, #28
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	60f8      	str	r0, [r7, #12]
 800abf4:	60b9      	str	r1, [r7, #8]
 800abf6:	607a      	str	r2, [r7, #4]
 800abf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	6a1b      	ldr	r3, [r3, #32]
 800abfe:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	6a1b      	ldr	r3, [r3, #32]
 800ac04:	f023 0201 	bic.w	r2, r3, #1
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	699b      	ldr	r3, [r3, #24]
 800ac10:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	4a28      	ldr	r2, [pc, #160]	@ (800acb8 <TIM_TI1_SetConfig+0xcc>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d01b      	beq.n	800ac52 <TIM_TI1_SetConfig+0x66>
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac20:	d017      	beq.n	800ac52 <TIM_TI1_SetConfig+0x66>
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	4a25      	ldr	r2, [pc, #148]	@ (800acbc <TIM_TI1_SetConfig+0xd0>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d013      	beq.n	800ac52 <TIM_TI1_SetConfig+0x66>
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	4a24      	ldr	r2, [pc, #144]	@ (800acc0 <TIM_TI1_SetConfig+0xd4>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d00f      	beq.n	800ac52 <TIM_TI1_SetConfig+0x66>
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	4a23      	ldr	r2, [pc, #140]	@ (800acc4 <TIM_TI1_SetConfig+0xd8>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d00b      	beq.n	800ac52 <TIM_TI1_SetConfig+0x66>
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	4a22      	ldr	r2, [pc, #136]	@ (800acc8 <TIM_TI1_SetConfig+0xdc>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d007      	beq.n	800ac52 <TIM_TI1_SetConfig+0x66>
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	4a21      	ldr	r2, [pc, #132]	@ (800accc <TIM_TI1_SetConfig+0xe0>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d003      	beq.n	800ac52 <TIM_TI1_SetConfig+0x66>
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	4a20      	ldr	r2, [pc, #128]	@ (800acd0 <TIM_TI1_SetConfig+0xe4>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d101      	bne.n	800ac56 <TIM_TI1_SetConfig+0x6a>
 800ac52:	2301      	movs	r3, #1
 800ac54:	e000      	b.n	800ac58 <TIM_TI1_SetConfig+0x6c>
 800ac56:	2300      	movs	r3, #0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d008      	beq.n	800ac6e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	f023 0303 	bic.w	r3, r3, #3
 800ac62:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800ac64:	697a      	ldr	r2, [r7, #20]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	617b      	str	r3, [r7, #20]
 800ac6c:	e003      	b.n	800ac76 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	f043 0301 	orr.w	r3, r3, #1
 800ac74:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ac7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	011b      	lsls	r3, r3, #4
 800ac82:	b2db      	uxtb	r3, r3
 800ac84:	697a      	ldr	r2, [r7, #20]
 800ac86:	4313      	orrs	r3, r2
 800ac88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	f023 030a 	bic.w	r3, r3, #10
 800ac90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	f003 030a 	and.w	r3, r3, #10
 800ac98:	693a      	ldr	r2, [r7, #16]
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	697a      	ldr	r2, [r7, #20]
 800aca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	693a      	ldr	r2, [r7, #16]
 800aca8:	621a      	str	r2, [r3, #32]
}
 800acaa:	bf00      	nop
 800acac:	371c      	adds	r7, #28
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr
 800acb6:	bf00      	nop
 800acb8:	40010000 	.word	0x40010000
 800acbc:	40000400 	.word	0x40000400
 800acc0:	40000800 	.word	0x40000800
 800acc4:	40000c00 	.word	0x40000c00
 800acc8:	40010400 	.word	0x40010400
 800accc:	40014000 	.word	0x40014000
 800acd0:	40001800 	.word	0x40001800

0800acd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b087      	sub	sp, #28
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	6a1b      	ldr	r3, [r3, #32]
 800ace4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	6a1b      	ldr	r3, [r3, #32]
 800acea:	f023 0201 	bic.w	r2, r3, #1
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	699b      	ldr	r3, [r3, #24]
 800acf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800acfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	011b      	lsls	r3, r3, #4
 800ad04:	693a      	ldr	r2, [r7, #16]
 800ad06:	4313      	orrs	r3, r2
 800ad08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	f023 030a 	bic.w	r3, r3, #10
 800ad10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad12:	697a      	ldr	r2, [r7, #20]
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	4313      	orrs	r3, r2
 800ad18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	693a      	ldr	r2, [r7, #16]
 800ad1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	697a      	ldr	r2, [r7, #20]
 800ad24:	621a      	str	r2, [r3, #32]
}
 800ad26:	bf00      	nop
 800ad28:	371c      	adds	r7, #28
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr

0800ad32 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ad32:	b480      	push	{r7}
 800ad34:	b087      	sub	sp, #28
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	60f8      	str	r0, [r7, #12]
 800ad3a:	60b9      	str	r1, [r7, #8]
 800ad3c:	607a      	str	r2, [r7, #4]
 800ad3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	6a1b      	ldr	r3, [r3, #32]
 800ad44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	6a1b      	ldr	r3, [r3, #32]
 800ad4a:	f023 0210 	bic.w	r2, r3, #16
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	699b      	ldr	r3, [r3, #24]
 800ad56:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	021b      	lsls	r3, r3, #8
 800ad64:	693a      	ldr	r2, [r7, #16]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ad70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	031b      	lsls	r3, r3, #12
 800ad76:	b29b      	uxth	r3, r3
 800ad78:	693a      	ldr	r2, [r7, #16]
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ad84:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	011b      	lsls	r3, r3, #4
 800ad8a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800ad8e:	697a      	ldr	r2, [r7, #20]
 800ad90:	4313      	orrs	r3, r2
 800ad92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	693a      	ldr	r2, [r7, #16]
 800ad98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	697a      	ldr	r2, [r7, #20]
 800ad9e:	621a      	str	r2, [r3, #32]
}
 800ada0:	bf00      	nop
 800ada2:	371c      	adds	r7, #28
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adac:	b480      	push	{r7}
 800adae:	b087      	sub	sp, #28
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	6a1b      	ldr	r3, [r3, #32]
 800adbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	6a1b      	ldr	r3, [r3, #32]
 800adc2:	f023 0210 	bic.w	r2, r3, #16
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	699b      	ldr	r3, [r3, #24]
 800adce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800add6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	031b      	lsls	r3, r3, #12
 800addc:	693a      	ldr	r2, [r7, #16]
 800adde:	4313      	orrs	r3, r2
 800ade0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ade8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	011b      	lsls	r3, r3, #4
 800adee:	697a      	ldr	r2, [r7, #20]
 800adf0:	4313      	orrs	r3, r2
 800adf2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	693a      	ldr	r2, [r7, #16]
 800adf8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	697a      	ldr	r2, [r7, #20]
 800adfe:	621a      	str	r2, [r3, #32]
}
 800ae00:	bf00      	nop
 800ae02:	371c      	adds	r7, #28
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b087      	sub	sp, #28
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	60b9      	str	r1, [r7, #8]
 800ae16:	607a      	str	r2, [r7, #4]
 800ae18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	6a1b      	ldr	r3, [r3, #32]
 800ae1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	6a1b      	ldr	r3, [r3, #32]
 800ae24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	69db      	ldr	r3, [r3, #28]
 800ae30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	f023 0303 	bic.w	r3, r3, #3
 800ae38:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800ae3a:	693a      	ldr	r2, [r7, #16]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ae48:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	011b      	lsls	r3, r3, #4
 800ae4e:	b2db      	uxtb	r3, r3
 800ae50:	693a      	ldr	r2, [r7, #16]
 800ae52:	4313      	orrs	r3, r2
 800ae54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800ae5c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	021b      	lsls	r3, r3, #8
 800ae62:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800ae66:	697a      	ldr	r2, [r7, #20]
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	693a      	ldr	r2, [r7, #16]
 800ae70:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	697a      	ldr	r2, [r7, #20]
 800ae76:	621a      	str	r2, [r3, #32]
}
 800ae78:	bf00      	nop
 800ae7a:	371c      	adds	r7, #28
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b087      	sub	sp, #28
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	607a      	str	r2, [r7, #4]
 800ae90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	6a1b      	ldr	r3, [r3, #32]
 800ae96:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	6a1b      	ldr	r3, [r3, #32]
 800ae9c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	69db      	ldr	r3, [r3, #28]
 800aea8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aeb0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	021b      	lsls	r3, r3, #8
 800aeb6:	693a      	ldr	r2, [r7, #16]
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800aec2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	031b      	lsls	r3, r3, #12
 800aec8:	b29b      	uxth	r3, r3
 800aeca:	693a      	ldr	r2, [r7, #16]
 800aecc:	4313      	orrs	r3, r2
 800aece:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800aed6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	031b      	lsls	r3, r3, #12
 800aedc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800aee0:	697a      	ldr	r2, [r7, #20]
 800aee2:	4313      	orrs	r3, r2
 800aee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	693a      	ldr	r2, [r7, #16]
 800aeea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	697a      	ldr	r2, [r7, #20]
 800aef0:	621a      	str	r2, [r3, #32]
}
 800aef2:	bf00      	nop
 800aef4:	371c      	adds	r7, #28
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr

0800aefe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aefe:	b480      	push	{r7}
 800af00:	b085      	sub	sp, #20
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
 800af06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	689b      	ldr	r3, [r3, #8]
 800af0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af16:	683a      	ldr	r2, [r7, #0]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	4313      	orrs	r3, r2
 800af1c:	f043 0307 	orr.w	r3, r3, #7
 800af20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	609a      	str	r2, [r3, #8]
}
 800af28:	bf00      	nop
 800af2a:	3714      	adds	r7, #20
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr

0800af34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af34:	b480      	push	{r7}
 800af36:	b087      	sub	sp, #28
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
 800af40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	689b      	ldr	r3, [r3, #8]
 800af46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800af4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	021a      	lsls	r2, r3, #8
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	431a      	orrs	r2, r3
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	4313      	orrs	r3, r2
 800af5c:	697a      	ldr	r2, [r7, #20]
 800af5e:	4313      	orrs	r3, r2
 800af60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	697a      	ldr	r2, [r7, #20]
 800af66:	609a      	str	r2, [r3, #8]
}
 800af68:	bf00      	nop
 800af6a:	371c      	adds	r7, #28
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800af74:	b480      	push	{r7}
 800af76:	b087      	sub	sp, #28
 800af78:	af00      	add	r7, sp, #0
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	f003 031f 	and.w	r3, r3, #31
 800af86:	2201      	movs	r2, #1
 800af88:	fa02 f303 	lsl.w	r3, r2, r3
 800af8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	6a1a      	ldr	r2, [r3, #32]
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	43db      	mvns	r3, r3
 800af96:	401a      	ands	r2, r3
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	6a1a      	ldr	r2, [r3, #32]
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	f003 031f 	and.w	r3, r3, #31
 800afa6:	6879      	ldr	r1, [r7, #4]
 800afa8:	fa01 f303 	lsl.w	r3, r1, r3
 800afac:	431a      	orrs	r2, r3
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	621a      	str	r2, [r3, #32]
}
 800afb2:	bf00      	nop
 800afb4:	371c      	adds	r7, #28
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr
	...

0800afc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b085      	sub	sp, #20
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d101      	bne.n	800afd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800afd4:	2302      	movs	r3, #2
 800afd6:	e05a      	b.n	800b08e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2201      	movs	r2, #1
 800afdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2202      	movs	r2, #2
 800afe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800affe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	68fa      	ldr	r2, [r7, #12]
 800b006:	4313      	orrs	r3, r2
 800b008:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	68fa      	ldr	r2, [r7, #12]
 800b010:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a21      	ldr	r2, [pc, #132]	@ (800b09c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d022      	beq.n	800b062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b024:	d01d      	beq.n	800b062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a1d      	ldr	r2, [pc, #116]	@ (800b0a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d018      	beq.n	800b062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a1b      	ldr	r2, [pc, #108]	@ (800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d013      	beq.n	800b062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a1a      	ldr	r2, [pc, #104]	@ (800b0a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d00e      	beq.n	800b062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a18      	ldr	r2, [pc, #96]	@ (800b0ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d009      	beq.n	800b062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a17      	ldr	r2, [pc, #92]	@ (800b0b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d004      	beq.n	800b062 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a15      	ldr	r2, [pc, #84]	@ (800b0b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d10c      	bne.n	800b07c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b068:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	68ba      	ldr	r2, [r7, #8]
 800b070:	4313      	orrs	r3, r2
 800b072:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	68ba      	ldr	r2, [r7, #8]
 800b07a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2201      	movs	r2, #1
 800b080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b08c:	2300      	movs	r3, #0
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3714      	adds	r7, #20
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr
 800b09a:	bf00      	nop
 800b09c:	40010000 	.word	0x40010000
 800b0a0:	40000400 	.word	0x40000400
 800b0a4:	40000800 	.word	0x40000800
 800b0a8:	40000c00 	.word	0x40000c00
 800b0ac:	40010400 	.word	0x40010400
 800b0b0:	40014000 	.word	0x40014000
 800b0b4:	40001800 	.word	0x40001800

0800b0b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b083      	sub	sp, #12
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b0c0:	bf00      	nop
 800b0c2:	370c      	adds	r7, #12
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr

0800b0cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b0d4:	bf00      	nop
 800b0d6:	370c      	adds	r7, #12
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr

0800b0e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d101      	bne.n	800b0f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	e042      	b.n	800b178 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d106      	bne.n	800b10c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2200      	movs	r2, #0
 800b102:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f7fb f942 	bl	8006390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2224      	movs	r2, #36	@ 0x24
 800b110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	68da      	ldr	r2, [r3, #12]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b122:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 ffef 	bl	800c108 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	691a      	ldr	r2, [r3, #16]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b138:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	695a      	ldr	r2, [r3, #20]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b148:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	68da      	ldr	r2, [r3, #12]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b158:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2200      	movs	r2, #0
 800b15e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2220      	movs	r2, #32
 800b164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2220      	movs	r2, #32
 800b16c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b176:	2300      	movs	r3, #0
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3708      	adds	r7, #8
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b08a      	sub	sp, #40	@ 0x28
 800b184:	af02      	add	r7, sp, #8
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	603b      	str	r3, [r7, #0]
 800b18c:	4613      	mov	r3, r2
 800b18e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b190:	2300      	movs	r3, #0
 800b192:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b19a:	b2db      	uxtb	r3, r3
 800b19c:	2b20      	cmp	r3, #32
 800b19e:	d175      	bne.n	800b28c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d002      	beq.n	800b1ac <HAL_UART_Transmit+0x2c>
 800b1a6:	88fb      	ldrh	r3, [r7, #6]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d101      	bne.n	800b1b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	e06e      	b.n	800b28e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2221      	movs	r2, #33	@ 0x21
 800b1ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b1be:	f7fb fa3d 	bl	800663c <HAL_GetTick>
 800b1c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	88fa      	ldrh	r2, [r7, #6]
 800b1c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	88fa      	ldrh	r2, [r7, #6]
 800b1ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	689b      	ldr	r3, [r3, #8]
 800b1d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b1d8:	d108      	bne.n	800b1ec <HAL_UART_Transmit+0x6c>
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	691b      	ldr	r3, [r3, #16]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d104      	bne.n	800b1ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	61bb      	str	r3, [r7, #24]
 800b1ea:	e003      	b.n	800b1f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b1f4:	e02e      	b.n	800b254 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	9300      	str	r3, [sp, #0]
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	2180      	movs	r1, #128	@ 0x80
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	f000 fcbf 	bl	800bb84 <UART_WaitOnFlagUntilTimeout>
 800b206:	4603      	mov	r3, r0
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d005      	beq.n	800b218 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	2220      	movs	r2, #32
 800b210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800b214:	2303      	movs	r3, #3
 800b216:	e03a      	b.n	800b28e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800b218:	69fb      	ldr	r3, [r7, #28]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d10b      	bne.n	800b236 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b21e:	69bb      	ldr	r3, [r7, #24]
 800b220:	881b      	ldrh	r3, [r3, #0]
 800b222:	461a      	mov	r2, r3
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b22c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b22e:	69bb      	ldr	r3, [r7, #24]
 800b230:	3302      	adds	r3, #2
 800b232:	61bb      	str	r3, [r7, #24]
 800b234:	e007      	b.n	800b246 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b236:	69fb      	ldr	r3, [r7, #28]
 800b238:	781a      	ldrb	r2, [r3, #0]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b240:	69fb      	ldr	r3, [r7, #28]
 800b242:	3301      	adds	r3, #1
 800b244:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	3b01      	subs	r3, #1
 800b24e:	b29a      	uxth	r2, r3
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b258:	b29b      	uxth	r3, r3
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d1cb      	bne.n	800b1f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	9300      	str	r3, [sp, #0]
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	2200      	movs	r2, #0
 800b266:	2140      	movs	r1, #64	@ 0x40
 800b268:	68f8      	ldr	r0, [r7, #12]
 800b26a:	f000 fc8b 	bl	800bb84 <UART_WaitOnFlagUntilTimeout>
 800b26e:	4603      	mov	r3, r0
 800b270:	2b00      	cmp	r3, #0
 800b272:	d005      	beq.n	800b280 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2220      	movs	r2, #32
 800b278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800b27c:	2303      	movs	r3, #3
 800b27e:	e006      	b.n	800b28e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2220      	movs	r2, #32
 800b284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800b288:	2300      	movs	r3, #0
 800b28a:	e000      	b.n	800b28e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800b28c:	2302      	movs	r3, #2
  }
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3720      	adds	r7, #32
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}

0800b296 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b296:	b580      	push	{r7, lr}
 800b298:	b084      	sub	sp, #16
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	60f8      	str	r0, [r7, #12]
 800b29e:	60b9      	str	r1, [r7, #8]
 800b2a0:	4613      	mov	r3, r2
 800b2a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	2b20      	cmp	r3, #32
 800b2ae:	d112      	bne.n	800b2d6 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d002      	beq.n	800b2bc <HAL_UART_Receive_DMA+0x26>
 800b2b6:	88fb      	ldrh	r3, [r7, #6]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d101      	bne.n	800b2c0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	e00b      	b.n	800b2d8 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b2c6:	88fb      	ldrh	r3, [r7, #6]
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	68b9      	ldr	r1, [r7, #8]
 800b2cc:	68f8      	ldr	r0, [r7, #12]
 800b2ce:	f000 fcb3 	bl	800bc38 <UART_Start_Receive_DMA>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	e000      	b.n	800b2d8 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800b2d6:	2302      	movs	r3, #2
  }
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3710      	adds	r7, #16
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b090      	sub	sp, #64	@ 0x40
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	695b      	ldr	r3, [r3, #20]
 800b2f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2f6:	2b80      	cmp	r3, #128	@ 0x80
 800b2f8:	bf0c      	ite	eq
 800b2fa:	2301      	moveq	r3, #1
 800b2fc:	2300      	movne	r3, #0
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	2b21      	cmp	r3, #33	@ 0x21
 800b30c:	d128      	bne.n	800b360 <HAL_UART_DMAStop+0x80>
 800b30e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b310:	2b00      	cmp	r3, #0
 800b312:	d025      	beq.n	800b360 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	3314      	adds	r3, #20
 800b31a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b31e:	e853 3f00 	ldrex	r3, [r3]
 800b322:	623b      	str	r3, [r7, #32]
   return(result);
 800b324:	6a3b      	ldr	r3, [r7, #32]
 800b326:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b32a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	3314      	adds	r3, #20
 800b332:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b334:	633a      	str	r2, [r7, #48]	@ 0x30
 800b336:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b338:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b33a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b33c:	e841 2300 	strex	r3, r2, [r1]
 800b340:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b344:	2b00      	cmp	r3, #0
 800b346:	d1e5      	bne.n	800b314 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d004      	beq.n	800b35a <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b354:	4618      	mov	r0, r3
 800b356:	f7fb ffb9 	bl	80072cc <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f000 fd12 	bl	800bd84 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	695b      	ldr	r3, [r3, #20]
 800b366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b36a:	2b40      	cmp	r3, #64	@ 0x40
 800b36c:	bf0c      	ite	eq
 800b36e:	2301      	moveq	r3, #1
 800b370:	2300      	movne	r3, #0
 800b372:	b2db      	uxtb	r3, r3
 800b374:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	2b22      	cmp	r3, #34	@ 0x22
 800b380:	d128      	bne.n	800b3d4 <HAL_UART_DMAStop+0xf4>
 800b382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b384:	2b00      	cmp	r3, #0
 800b386:	d025      	beq.n	800b3d4 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	3314      	adds	r3, #20
 800b38e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	e853 3f00 	ldrex	r3, [r3]
 800b396:	60fb      	str	r3, [r7, #12]
   return(result);
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b39e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	3314      	adds	r3, #20
 800b3a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b3a8:	61fa      	str	r2, [r7, #28]
 800b3aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ac:	69b9      	ldr	r1, [r7, #24]
 800b3ae:	69fa      	ldr	r2, [r7, #28]
 800b3b0:	e841 2300 	strex	r3, r2, [r1]
 800b3b4:	617b      	str	r3, [r7, #20]
   return(result);
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d1e5      	bne.n	800b388 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d004      	beq.n	800b3ce <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f7fb ff7f 	bl	80072cc <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 fd00 	bl	800bdd4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800b3d4:	2300      	movs	r3, #0
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3740      	adds	r7, #64	@ 0x40
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
	...

0800b3e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b0ba      	sub	sp, #232	@ 0xe8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	695b      	ldr	r3, [r3, #20]
 800b402:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800b406:	2300      	movs	r3, #0
 800b408:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800b40c:	2300      	movs	r3, #0
 800b40e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b416:	f003 030f 	and.w	r3, r3, #15
 800b41a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800b41e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b422:	2b00      	cmp	r3, #0
 800b424:	d10f      	bne.n	800b446 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b42a:	f003 0320 	and.w	r3, r3, #32
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d009      	beq.n	800b446 <HAL_UART_IRQHandler+0x66>
 800b432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b436:	f003 0320 	and.w	r3, r3, #32
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d003      	beq.n	800b446 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 fda4 	bl	800bf8c <UART_Receive_IT>
      return;
 800b444:	e273      	b.n	800b92e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b446:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	f000 80de 	beq.w	800b60c <HAL_UART_IRQHandler+0x22c>
 800b450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b454:	f003 0301 	and.w	r3, r3, #1
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d106      	bne.n	800b46a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b45c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b460:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b464:	2b00      	cmp	r3, #0
 800b466:	f000 80d1 	beq.w	800b60c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b46a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b46e:	f003 0301 	and.w	r3, r3, #1
 800b472:	2b00      	cmp	r3, #0
 800b474:	d00b      	beq.n	800b48e <HAL_UART_IRQHandler+0xae>
 800b476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b47a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d005      	beq.n	800b48e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b486:	f043 0201 	orr.w	r2, r3, #1
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b48e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b492:	f003 0304 	and.w	r3, r3, #4
 800b496:	2b00      	cmp	r3, #0
 800b498:	d00b      	beq.n	800b4b2 <HAL_UART_IRQHandler+0xd2>
 800b49a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b49e:	f003 0301 	and.w	r3, r3, #1
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d005      	beq.n	800b4b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4aa:	f043 0202 	orr.w	r2, r3, #2
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b4b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4b6:	f003 0302 	and.w	r3, r3, #2
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d00b      	beq.n	800b4d6 <HAL_UART_IRQHandler+0xf6>
 800b4be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b4c2:	f003 0301 	and.w	r3, r3, #1
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d005      	beq.n	800b4d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4ce:	f043 0204 	orr.w	r2, r3, #4
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b4d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4da:	f003 0308 	and.w	r3, r3, #8
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d011      	beq.n	800b506 <HAL_UART_IRQHandler+0x126>
 800b4e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4e6:	f003 0320 	and.w	r3, r3, #32
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d105      	bne.n	800b4fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b4ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b4f2:	f003 0301 	and.w	r3, r3, #1
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d005      	beq.n	800b506 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4fe:	f043 0208 	orr.w	r2, r3, #8
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	f000 820a 	beq.w	800b924 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b514:	f003 0320 	and.w	r3, r3, #32
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d008      	beq.n	800b52e <HAL_UART_IRQHandler+0x14e>
 800b51c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b520:	f003 0320 	and.w	r3, r3, #32
 800b524:	2b00      	cmp	r3, #0
 800b526:	d002      	beq.n	800b52e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f000 fd2f 	bl	800bf8c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	695b      	ldr	r3, [r3, #20]
 800b534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b538:	2b40      	cmp	r3, #64	@ 0x40
 800b53a:	bf0c      	ite	eq
 800b53c:	2301      	moveq	r3, #1
 800b53e:	2300      	movne	r3, #0
 800b540:	b2db      	uxtb	r3, r3
 800b542:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b54a:	f003 0308 	and.w	r3, r3, #8
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d103      	bne.n	800b55a <HAL_UART_IRQHandler+0x17a>
 800b552:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b556:	2b00      	cmp	r3, #0
 800b558:	d04f      	beq.n	800b5fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f000 fc3a 	bl	800bdd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	695b      	ldr	r3, [r3, #20]
 800b566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b56a:	2b40      	cmp	r3, #64	@ 0x40
 800b56c:	d141      	bne.n	800b5f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	3314      	adds	r3, #20
 800b574:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b578:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b57c:	e853 3f00 	ldrex	r3, [r3]
 800b580:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b584:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b588:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b58c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	3314      	adds	r3, #20
 800b596:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b59a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b59e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b5a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b5aa:	e841 2300 	strex	r3, r2, [r1]
 800b5ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b5b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d1d9      	bne.n	800b56e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d013      	beq.n	800b5ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5c6:	4a8a      	ldr	r2, [pc, #552]	@ (800b7f0 <HAL_UART_IRQHandler+0x410>)
 800b5c8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f7fb feec 	bl	80073ac <HAL_DMA_Abort_IT>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d016      	beq.n	800b608 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5e0:	687a      	ldr	r2, [r7, #4]
 800b5e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b5e4:	4610      	mov	r0, r2
 800b5e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5e8:	e00e      	b.n	800b608 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 f9b6 	bl	800b95c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5f0:	e00a      	b.n	800b608 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 f9b2 	bl	800b95c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5f8:	e006      	b.n	800b608 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 f9ae 	bl	800b95c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2200      	movs	r2, #0
 800b604:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b606:	e18d      	b.n	800b924 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b608:	bf00      	nop
    return;
 800b60a:	e18b      	b.n	800b924 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b610:	2b01      	cmp	r3, #1
 800b612:	f040 8167 	bne.w	800b8e4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b61a:	f003 0310 	and.w	r3, r3, #16
 800b61e:	2b00      	cmp	r3, #0
 800b620:	f000 8160 	beq.w	800b8e4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800b624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b628:	f003 0310 	and.w	r3, r3, #16
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	f000 8159 	beq.w	800b8e4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b632:	2300      	movs	r3, #0
 800b634:	60bb      	str	r3, [r7, #8]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	60bb      	str	r3, [r7, #8]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	60bb      	str	r3, [r7, #8]
 800b646:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	695b      	ldr	r3, [r3, #20]
 800b64e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b652:	2b40      	cmp	r3, #64	@ 0x40
 800b654:	f040 80ce 	bne.w	800b7f4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b664:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b668:	2b00      	cmp	r3, #0
 800b66a:	f000 80a9 	beq.w	800b7c0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b672:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b676:	429a      	cmp	r2, r3
 800b678:	f080 80a2 	bcs.w	800b7c0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b682:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b688:	69db      	ldr	r3, [r3, #28]
 800b68a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b68e:	f000 8088 	beq.w	800b7a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	330c      	adds	r3, #12
 800b698:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b69c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b6a0:	e853 3f00 	ldrex	r3, [r3]
 800b6a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b6a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b6ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b6b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	330c      	adds	r3, #12
 800b6ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b6be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b6c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b6ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b6ce:	e841 2300 	strex	r3, r2, [r1]
 800b6d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b6d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d1d9      	bne.n	800b692 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	3314      	adds	r3, #20
 800b6e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b6e8:	e853 3f00 	ldrex	r3, [r3]
 800b6ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b6ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b6f0:	f023 0301 	bic.w	r3, r3, #1
 800b6f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	3314      	adds	r3, #20
 800b6fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b702:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b706:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b708:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b70a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b70e:	e841 2300 	strex	r3, r2, [r1]
 800b712:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b714:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b716:	2b00      	cmp	r3, #0
 800b718:	d1e1      	bne.n	800b6de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	3314      	adds	r3, #20
 800b720:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b722:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b724:	e853 3f00 	ldrex	r3, [r3]
 800b728:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b72a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b72c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b730:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	3314      	adds	r3, #20
 800b73a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b73e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b740:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b742:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b744:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b746:	e841 2300 	strex	r3, r2, [r1]
 800b74a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b74c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d1e3      	bne.n	800b71a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2220      	movs	r2, #32
 800b756:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2200      	movs	r2, #0
 800b75e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	330c      	adds	r3, #12
 800b766:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b768:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b76a:	e853 3f00 	ldrex	r3, [r3]
 800b76e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b770:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b772:	f023 0310 	bic.w	r3, r3, #16
 800b776:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	330c      	adds	r3, #12
 800b780:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b784:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b786:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b788:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b78a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b78c:	e841 2300 	strex	r3, r2, [r1]
 800b790:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b792:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b794:	2b00      	cmp	r3, #0
 800b796:	d1e3      	bne.n	800b760 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b79c:	4618      	mov	r0, r3
 800b79e:	f7fb fd95 	bl	80072cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2202      	movs	r2, #2
 800b7a6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	1ad3      	subs	r3, r2, r3
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f000 f8d9 	bl	800b970 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b7be:	e0b3      	b.n	800b928 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b7c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	f040 80ad 	bne.w	800b928 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7d2:	69db      	ldr	r3, [r3, #28]
 800b7d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7d8:	f040 80a6 	bne.w	800b928 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2202      	movs	r2, #2
 800b7e0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 f8c1 	bl	800b970 <HAL_UARTEx_RxEventCallback>
      return;
 800b7ee:	e09b      	b.n	800b928 <HAL_UART_IRQHandler+0x548>
 800b7f0:	0800be9b 	.word	0x0800be9b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	1ad3      	subs	r3, r2, r3
 800b800:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b808:	b29b      	uxth	r3, r3
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	f000 808e 	beq.w	800b92c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800b810:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b814:	2b00      	cmp	r3, #0
 800b816:	f000 8089 	beq.w	800b92c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	330c      	adds	r3, #12
 800b820:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b824:	e853 3f00 	ldrex	r3, [r3]
 800b828:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b82a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b82c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b830:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	330c      	adds	r3, #12
 800b83a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b83e:	647a      	str	r2, [r7, #68]	@ 0x44
 800b840:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b842:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b844:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b846:	e841 2300 	strex	r3, r2, [r1]
 800b84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b84c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d1e3      	bne.n	800b81a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	3314      	adds	r3, #20
 800b858:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b85c:	e853 3f00 	ldrex	r3, [r3]
 800b860:	623b      	str	r3, [r7, #32]
   return(result);
 800b862:	6a3b      	ldr	r3, [r7, #32]
 800b864:	f023 0301 	bic.w	r3, r3, #1
 800b868:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	3314      	adds	r3, #20
 800b872:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b876:	633a      	str	r2, [r7, #48]	@ 0x30
 800b878:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b87c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b87e:	e841 2300 	strex	r3, r2, [r1]
 800b882:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b886:	2b00      	cmp	r3, #0
 800b888:	d1e3      	bne.n	800b852 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2220      	movs	r2, #32
 800b88e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2200      	movs	r2, #0
 800b896:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	330c      	adds	r3, #12
 800b89e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	e853 3f00 	ldrex	r3, [r3]
 800b8a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f023 0310 	bic.w	r3, r3, #16
 800b8ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	330c      	adds	r3, #12
 800b8b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b8bc:	61fa      	str	r2, [r7, #28]
 800b8be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8c0:	69b9      	ldr	r1, [r7, #24]
 800b8c2:	69fa      	ldr	r2, [r7, #28]
 800b8c4:	e841 2300 	strex	r3, r2, [r1]
 800b8c8:	617b      	str	r3, [r7, #20]
   return(result);
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d1e3      	bne.n	800b898 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2202      	movs	r2, #2
 800b8d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b8d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b8da:	4619      	mov	r1, r3
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 f847 	bl	800b970 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b8e2:	e023      	b.n	800b92c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b8e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d009      	beq.n	800b904 <HAL_UART_IRQHandler+0x524>
 800b8f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d003      	beq.n	800b904 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 fadd 	bl	800bebc <UART_Transmit_IT>
    return;
 800b902:	e014      	b.n	800b92e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d00e      	beq.n	800b92e <HAL_UART_IRQHandler+0x54e>
 800b910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d008      	beq.n	800b92e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 fb1d 	bl	800bf5c <UART_EndTransmit_IT>
    return;
 800b922:	e004      	b.n	800b92e <HAL_UART_IRQHandler+0x54e>
    return;
 800b924:	bf00      	nop
 800b926:	e002      	b.n	800b92e <HAL_UART_IRQHandler+0x54e>
      return;
 800b928:	bf00      	nop
 800b92a:	e000      	b.n	800b92e <HAL_UART_IRQHandler+0x54e>
      return;
 800b92c:	bf00      	nop
  }
}
 800b92e:	37e8      	adds	r7, #232	@ 0xe8
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b93c:	bf00      	nop
 800b93e:	370c      	adds	r7, #12
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr

0800b948 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b948:	b480      	push	{r7}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b950:	bf00      	nop
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b964:	bf00      	nop
 800b966:	370c      	adds	r7, #12
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr

0800b970 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b970:	b480      	push	{r7}
 800b972:	b083      	sub	sp, #12
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	460b      	mov	r3, r1
 800b97a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b97c:	bf00      	nop
 800b97e:	370c      	adds	r7, #12
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr

0800b988 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b09c      	sub	sp, #112	@ 0x70
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b994:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d172      	bne.n	800ba8a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b9a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	330c      	adds	r3, #12
 800b9b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9b4:	e853 3f00 	ldrex	r3, [r3]
 800b9b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b9ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b9c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b9c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	330c      	adds	r3, #12
 800b9c8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b9ca:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b9cc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b9d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b9d2:	e841 2300 	strex	r3, r2, [r1]
 800b9d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b9d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d1e5      	bne.n	800b9aa <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	3314      	adds	r3, #20
 800b9e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9e8:	e853 3f00 	ldrex	r3, [r3]
 800b9ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b9ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9f0:	f023 0301 	bic.w	r3, r3, #1
 800b9f4:	667b      	str	r3, [r7, #100]	@ 0x64
 800b9f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	3314      	adds	r3, #20
 800b9fc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b9fe:	647a      	str	r2, [r7, #68]	@ 0x44
 800ba00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ba04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba06:	e841 2300 	strex	r3, r2, [r1]
 800ba0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ba0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d1e5      	bne.n	800b9de <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	3314      	adds	r3, #20
 800ba18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba1c:	e853 3f00 	ldrex	r3, [r3]
 800ba20:	623b      	str	r3, [r7, #32]
   return(result);
 800ba22:	6a3b      	ldr	r3, [r7, #32]
 800ba24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba28:	663b      	str	r3, [r7, #96]	@ 0x60
 800ba2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	3314      	adds	r3, #20
 800ba30:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ba32:	633a      	str	r2, [r7, #48]	@ 0x30
 800ba34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba3a:	e841 2300 	strex	r3, r2, [r1]
 800ba3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ba40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d1e5      	bne.n	800ba12 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ba46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba48:	2220      	movs	r2, #32
 800ba4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	d119      	bne.n	800ba8a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	330c      	adds	r3, #12
 800ba5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	e853 3f00 	ldrex	r3, [r3]
 800ba64:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f023 0310 	bic.w	r3, r3, #16
 800ba6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ba6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	330c      	adds	r3, #12
 800ba74:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ba76:	61fa      	str	r2, [r7, #28]
 800ba78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba7a:	69b9      	ldr	r1, [r7, #24]
 800ba7c:	69fa      	ldr	r2, [r7, #28]
 800ba7e:	e841 2300 	strex	r3, r2, [r1]
 800ba82:	617b      	str	r3, [r7, #20]
   return(result);
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d1e5      	bne.n	800ba56 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d106      	bne.n	800baa6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ba98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba9a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800baa0:	f7ff ff66 	bl	800b970 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800baa4:	e002      	b.n	800baac <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800baa6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800baa8:	f7f6 ff48 	bl	800293c <HAL_UART_RxCpltCallback>
}
 800baac:	bf00      	nop
 800baae:	3770      	adds	r7, #112	@ 0x70
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}

0800bab4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b084      	sub	sp, #16
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bac0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2201      	movs	r2, #1
 800bac6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d108      	bne.n	800bae2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bad4:	085b      	lsrs	r3, r3, #1
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	4619      	mov	r1, r3
 800bada:	68f8      	ldr	r0, [r7, #12]
 800badc:	f7ff ff48 	bl	800b970 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bae0:	e002      	b.n	800bae8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800bae2:	68f8      	ldr	r0, [r7, #12]
 800bae4:	f7ff ff30 	bl	800b948 <HAL_UART_RxHalfCpltCallback>
}
 800bae8:	bf00      	nop
 800baea:	3710      	adds	r7, #16
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800baf8:	2300      	movs	r3, #0
 800bafa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb00:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	695b      	ldr	r3, [r3, #20]
 800bb08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb0c:	2b80      	cmp	r3, #128	@ 0x80
 800bb0e:	bf0c      	ite	eq
 800bb10:	2301      	moveq	r3, #1
 800bb12:	2300      	movne	r3, #0
 800bb14:	b2db      	uxtb	r3, r3
 800bb16:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bb1e:	b2db      	uxtb	r3, r3
 800bb20:	2b21      	cmp	r3, #33	@ 0x21
 800bb22:	d108      	bne.n	800bb36 <UART_DMAError+0x46>
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d005      	beq.n	800bb36 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800bb30:	68b8      	ldr	r0, [r7, #8]
 800bb32:	f000 f927 	bl	800bd84 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	695b      	ldr	r3, [r3, #20]
 800bb3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb40:	2b40      	cmp	r3, #64	@ 0x40
 800bb42:	bf0c      	ite	eq
 800bb44:	2301      	moveq	r3, #1
 800bb46:	2300      	movne	r3, #0
 800bb48:	b2db      	uxtb	r3, r3
 800bb4a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	2b22      	cmp	r3, #34	@ 0x22
 800bb56:	d108      	bne.n	800bb6a <UART_DMAError+0x7a>
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d005      	beq.n	800bb6a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	2200      	movs	r2, #0
 800bb62:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800bb64:	68b8      	ldr	r0, [r7, #8]
 800bb66:	f000 f935 	bl	800bdd4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb6e:	f043 0210 	orr.w	r2, r3, #16
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb76:	68b8      	ldr	r0, [r7, #8]
 800bb78:	f7ff fef0 	bl	800b95c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb7c:	bf00      	nop
 800bb7e:	3710      	adds	r7, #16
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b086      	sub	sp, #24
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	60f8      	str	r0, [r7, #12]
 800bb8c:	60b9      	str	r1, [r7, #8]
 800bb8e:	603b      	str	r3, [r7, #0]
 800bb90:	4613      	mov	r3, r2
 800bb92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb94:	e03b      	b.n	800bc0e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb96:	6a3b      	ldr	r3, [r7, #32]
 800bb98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb9c:	d037      	beq.n	800bc0e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb9e:	f7fa fd4d 	bl	800663c <HAL_GetTick>
 800bba2:	4602      	mov	r2, r0
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	1ad3      	subs	r3, r2, r3
 800bba8:	6a3a      	ldr	r2, [r7, #32]
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d302      	bcc.n	800bbb4 <UART_WaitOnFlagUntilTimeout+0x30>
 800bbae:	6a3b      	ldr	r3, [r7, #32]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d101      	bne.n	800bbb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bbb4:	2303      	movs	r3, #3
 800bbb6:	e03a      	b.n	800bc2e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	68db      	ldr	r3, [r3, #12]
 800bbbe:	f003 0304 	and.w	r3, r3, #4
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d023      	beq.n	800bc0e <UART_WaitOnFlagUntilTimeout+0x8a>
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	2b80      	cmp	r3, #128	@ 0x80
 800bbca:	d020      	beq.n	800bc0e <UART_WaitOnFlagUntilTimeout+0x8a>
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	2b40      	cmp	r3, #64	@ 0x40
 800bbd0:	d01d      	beq.n	800bc0e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f003 0308 	and.w	r3, r3, #8
 800bbdc:	2b08      	cmp	r3, #8
 800bbde:	d116      	bne.n	800bc0e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	617b      	str	r3, [r7, #20]
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	617b      	str	r3, [r7, #20]
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	685b      	ldr	r3, [r3, #4]
 800bbf2:	617b      	str	r3, [r7, #20]
 800bbf4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bbf6:	68f8      	ldr	r0, [r7, #12]
 800bbf8:	f000 f8ec 	bl	800bdd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2208      	movs	r2, #8
 800bc00:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2200      	movs	r2, #0
 800bc06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	e00f      	b.n	800bc2e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	4013      	ands	r3, r2
 800bc18:	68ba      	ldr	r2, [r7, #8]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	bf0c      	ite	eq
 800bc1e:	2301      	moveq	r3, #1
 800bc20:	2300      	movne	r3, #0
 800bc22:	b2db      	uxtb	r3, r3
 800bc24:	461a      	mov	r2, r3
 800bc26:	79fb      	ldrb	r3, [r7, #7]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d0b4      	beq.n	800bb96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc2c:	2300      	movs	r3, #0
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3718      	adds	r7, #24
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
	...

0800bc38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b098      	sub	sp, #96	@ 0x60
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	4613      	mov	r3, r2
 800bc44:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800bc46:	68ba      	ldr	r2, [r7, #8]
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	88fa      	ldrh	r2, [r7, #6]
 800bc50:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2200      	movs	r2, #0
 800bc56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2222      	movs	r2, #34	@ 0x22
 800bc5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc64:	4a44      	ldr	r2, [pc, #272]	@ (800bd78 <UART_Start_Receive_DMA+0x140>)
 800bc66:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc6c:	4a43      	ldr	r2, [pc, #268]	@ (800bd7c <UART_Start_Receive_DMA+0x144>)
 800bc6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc74:	4a42      	ldr	r2, [pc, #264]	@ (800bd80 <UART_Start_Receive_DMA+0x148>)
 800bc76:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800bc80:	f107 0308 	add.w	r3, r7, #8
 800bc84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	3304      	adds	r3, #4
 800bc90:	4619      	mov	r1, r3
 800bc92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc94:	681a      	ldr	r2, [r3, #0]
 800bc96:	88fb      	ldrh	r3, [r7, #6]
 800bc98:	f7fb fac0 	bl	800721c <HAL_DMA_Start_IT>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d008      	beq.n	800bcb4 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2210      	movs	r2, #16
 800bca6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2220      	movs	r2, #32
 800bcac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	e05d      	b.n	800bd70 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	613b      	str	r3, [r7, #16]
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	613b      	str	r3, [r7, #16]
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	613b      	str	r3, [r7, #16]
 800bcc8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	691b      	ldr	r3, [r3, #16]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d019      	beq.n	800bd06 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	330c      	adds	r3, #12
 800bcd8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcdc:	e853 3f00 	ldrex	r3, [r3]
 800bce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bce4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bce8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	330c      	adds	r3, #12
 800bcf0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bcf2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800bcf4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcf6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800bcf8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bcfa:	e841 2300 	strex	r3, r2, [r1]
 800bcfe:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800bd00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d1e5      	bne.n	800bcd2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	3314      	adds	r3, #20
 800bd0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd10:	e853 3f00 	ldrex	r3, [r3]
 800bd14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bd16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd18:	f043 0301 	orr.w	r3, r3, #1
 800bd1c:	657b      	str	r3, [r7, #84]	@ 0x54
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	3314      	adds	r3, #20
 800bd24:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bd26:	63ba      	str	r2, [r7, #56]	@ 0x38
 800bd28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd2a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bd2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bd2e:	e841 2300 	strex	r3, r2, [r1]
 800bd32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bd34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d1e5      	bne.n	800bd06 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	3314      	adds	r3, #20
 800bd40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd42:	69bb      	ldr	r3, [r7, #24]
 800bd44:	e853 3f00 	ldrex	r3, [r3]
 800bd48:	617b      	str	r3, [r7, #20]
   return(result);
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd50:	653b      	str	r3, [r7, #80]	@ 0x50
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	3314      	adds	r3, #20
 800bd58:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bd5a:	627a      	str	r2, [r7, #36]	@ 0x24
 800bd5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd5e:	6a39      	ldr	r1, [r7, #32]
 800bd60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd62:	e841 2300 	strex	r3, r2, [r1]
 800bd66:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd68:	69fb      	ldr	r3, [r7, #28]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d1e5      	bne.n	800bd3a <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800bd6e:	2300      	movs	r3, #0
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3760      	adds	r7, #96	@ 0x60
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}
 800bd78:	0800b989 	.word	0x0800b989
 800bd7c:	0800bab5 	.word	0x0800bab5
 800bd80:	0800baf1 	.word	0x0800baf1

0800bd84 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b089      	sub	sp, #36	@ 0x24
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	330c      	adds	r3, #12
 800bd92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	e853 3f00 	ldrex	r3, [r3]
 800bd9a:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bda2:	61fb      	str	r3, [r7, #28]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	330c      	adds	r3, #12
 800bdaa:	69fa      	ldr	r2, [r7, #28]
 800bdac:	61ba      	str	r2, [r7, #24]
 800bdae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb0:	6979      	ldr	r1, [r7, #20]
 800bdb2:	69ba      	ldr	r2, [r7, #24]
 800bdb4:	e841 2300 	strex	r3, r2, [r1]
 800bdb8:	613b      	str	r3, [r7, #16]
   return(result);
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d1e5      	bne.n	800bd8c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2220      	movs	r2, #32
 800bdc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800bdc8:	bf00      	nop
 800bdca:	3724      	adds	r7, #36	@ 0x24
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr

0800bdd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b095      	sub	sp, #84	@ 0x54
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	330c      	adds	r3, #12
 800bde2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bde4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bde6:	e853 3f00 	ldrex	r3, [r3]
 800bdea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bdec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bdf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	330c      	adds	r3, #12
 800bdfa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bdfc:	643a      	str	r2, [r7, #64]	@ 0x40
 800bdfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800be02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800be04:	e841 2300 	strex	r3, r2, [r1]
 800be08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800be0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d1e5      	bne.n	800bddc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	3314      	adds	r3, #20
 800be16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be18:	6a3b      	ldr	r3, [r7, #32]
 800be1a:	e853 3f00 	ldrex	r3, [r3]
 800be1e:	61fb      	str	r3, [r7, #28]
   return(result);
 800be20:	69fb      	ldr	r3, [r7, #28]
 800be22:	f023 0301 	bic.w	r3, r3, #1
 800be26:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	3314      	adds	r3, #20
 800be2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800be32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800be36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be38:	e841 2300 	strex	r3, r2, [r1]
 800be3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800be3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be40:	2b00      	cmp	r3, #0
 800be42:	d1e5      	bne.n	800be10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d119      	bne.n	800be80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	330c      	adds	r3, #12
 800be52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	e853 3f00 	ldrex	r3, [r3]
 800be5a:	60bb      	str	r3, [r7, #8]
   return(result);
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	f023 0310 	bic.w	r3, r3, #16
 800be62:	647b      	str	r3, [r7, #68]	@ 0x44
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	330c      	adds	r3, #12
 800be6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be6c:	61ba      	str	r2, [r7, #24]
 800be6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be70:	6979      	ldr	r1, [r7, #20]
 800be72:	69ba      	ldr	r2, [r7, #24]
 800be74:	e841 2300 	strex	r3, r2, [r1]
 800be78:	613b      	str	r3, [r7, #16]
   return(result);
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d1e5      	bne.n	800be4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2220      	movs	r2, #32
 800be84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2200      	movs	r2, #0
 800be8c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800be8e:	bf00      	nop
 800be90:	3754      	adds	r7, #84	@ 0x54
 800be92:	46bd      	mov	sp, r7
 800be94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be98:	4770      	bx	lr

0800be9a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be9a:	b580      	push	{r7, lr}
 800be9c:	b084      	sub	sp, #16
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bea6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	2200      	movs	r2, #0
 800beac:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800beae:	68f8      	ldr	r0, [r7, #12]
 800beb0:	f7ff fd54 	bl	800b95c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800beb4:	bf00      	nop
 800beb6:	3710      	adds	r7, #16
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}

0800bebc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b085      	sub	sp, #20
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800beca:	b2db      	uxtb	r3, r3
 800becc:	2b21      	cmp	r3, #33	@ 0x21
 800bece:	d13e      	bne.n	800bf4e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	689b      	ldr	r3, [r3, #8]
 800bed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bed8:	d114      	bne.n	800bf04 <UART_Transmit_IT+0x48>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	691b      	ldr	r3, [r3, #16]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d110      	bne.n	800bf04 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6a1b      	ldr	r3, [r3, #32]
 800bee6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	881b      	ldrh	r3, [r3, #0]
 800beec:	461a      	mov	r2, r3
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bef6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6a1b      	ldr	r3, [r3, #32]
 800befc:	1c9a      	adds	r2, r3, #2
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	621a      	str	r2, [r3, #32]
 800bf02:	e008      	b.n	800bf16 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6a1b      	ldr	r3, [r3, #32]
 800bf08:	1c59      	adds	r1, r3, #1
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	6211      	str	r1, [r2, #32]
 800bf0e:	781a      	ldrb	r2, [r3, #0]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	3b01      	subs	r3, #1
 800bf1e:	b29b      	uxth	r3, r3
 800bf20:	687a      	ldr	r2, [r7, #4]
 800bf22:	4619      	mov	r1, r3
 800bf24:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d10f      	bne.n	800bf4a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	68da      	ldr	r2, [r3, #12]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bf38:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	68da      	ldr	r2, [r3, #12]
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bf48:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	e000      	b.n	800bf50 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bf4e:	2302      	movs	r3, #2
  }
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3714      	adds	r7, #20
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr

0800bf5c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	68da      	ldr	r2, [r3, #12]
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bf72:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2220      	movs	r2, #32
 800bf78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f7ff fcd9 	bl	800b934 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bf82:	2300      	movs	r3, #0
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3708      	adds	r7, #8
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}

0800bf8c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b08c      	sub	sp, #48	@ 0x30
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800bf94:	2300      	movs	r3, #0
 800bf96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bfa2:	b2db      	uxtb	r3, r3
 800bfa4:	2b22      	cmp	r3, #34	@ 0x22
 800bfa6:	f040 80aa 	bne.w	800c0fe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	689b      	ldr	r3, [r3, #8]
 800bfae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bfb2:	d115      	bne.n	800bfe0 <UART_Receive_IT+0x54>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	691b      	ldr	r3, [r3, #16]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d111      	bne.n	800bfe0 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfc0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	b29b      	uxth	r3, r3
 800bfca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfce:	b29a      	uxth	r2, r3
 800bfd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfd2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfd8:	1c9a      	adds	r2, r3, #2
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	629a      	str	r2, [r3, #40]	@ 0x28
 800bfde:	e024      	b.n	800c02a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	689b      	ldr	r3, [r3, #8]
 800bfea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bfee:	d007      	beq.n	800c000 <UART_Receive_IT+0x74>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	689b      	ldr	r3, [r3, #8]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d10a      	bne.n	800c00e <UART_Receive_IT+0x82>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	691b      	ldr	r3, [r3, #16]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d106      	bne.n	800c00e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	685b      	ldr	r3, [r3, #4]
 800c006:	b2da      	uxtb	r2, r3
 800c008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c00a:	701a      	strb	r2, [r3, #0]
 800c00c:	e008      	b.n	800c020 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	b2db      	uxtb	r3, r3
 800c016:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c01a:	b2da      	uxtb	r2, r3
 800c01c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c01e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c024:	1c5a      	adds	r2, r3, #1
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c02e:	b29b      	uxth	r3, r3
 800c030:	3b01      	subs	r3, #1
 800c032:	b29b      	uxth	r3, r3
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	4619      	mov	r1, r3
 800c038:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d15d      	bne.n	800c0fa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	68da      	ldr	r2, [r3, #12]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f022 0220 	bic.w	r2, r2, #32
 800c04c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	68da      	ldr	r2, [r3, #12]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c05c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	695a      	ldr	r2, [r3, #20]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f022 0201 	bic.w	r2, r2, #1
 800c06c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2220      	movs	r2, #32
 800c072:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2200      	movs	r2, #0
 800c07a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c080:	2b01      	cmp	r3, #1
 800c082:	d135      	bne.n	800c0f0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2200      	movs	r2, #0
 800c088:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	330c      	adds	r3, #12
 800c090:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	e853 3f00 	ldrex	r3, [r3]
 800c098:	613b      	str	r3, [r7, #16]
   return(result);
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	f023 0310 	bic.w	r3, r3, #16
 800c0a0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	330c      	adds	r3, #12
 800c0a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0aa:	623a      	str	r2, [r7, #32]
 800c0ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ae:	69f9      	ldr	r1, [r7, #28]
 800c0b0:	6a3a      	ldr	r2, [r7, #32]
 800c0b2:	e841 2300 	strex	r3, r2, [r1]
 800c0b6:	61bb      	str	r3, [r7, #24]
   return(result);
 800c0b8:	69bb      	ldr	r3, [r7, #24]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d1e5      	bne.n	800c08a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f003 0310 	and.w	r3, r3, #16
 800c0c8:	2b10      	cmp	r3, #16
 800c0ca:	d10a      	bne.n	800c0e2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	60fb      	str	r3, [r7, #12]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	60fb      	str	r3, [r7, #12]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	60fb      	str	r3, [r7, #12]
 800c0e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f7ff fc41 	bl	800b970 <HAL_UARTEx_RxEventCallback>
 800c0ee:	e002      	b.n	800c0f6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f7f6 fc23 	bl	800293c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	e002      	b.n	800c100 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	e000      	b.n	800c100 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c0fe:	2302      	movs	r3, #2
  }
}
 800c100:	4618      	mov	r0, r3
 800c102:	3730      	adds	r7, #48	@ 0x30
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}

0800c108 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c10c:	b0c0      	sub	sp, #256	@ 0x100
 800c10e:	af00      	add	r7, sp, #0
 800c110:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	691b      	ldr	r3, [r3, #16]
 800c11c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c124:	68d9      	ldr	r1, [r3, #12]
 800c126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c12a:	681a      	ldr	r2, [r3, #0]
 800c12c:	ea40 0301 	orr.w	r3, r0, r1
 800c130:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c136:	689a      	ldr	r2, [r3, #8]
 800c138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c13c:	691b      	ldr	r3, [r3, #16]
 800c13e:	431a      	orrs	r2, r3
 800c140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c144:	695b      	ldr	r3, [r3, #20]
 800c146:	431a      	orrs	r2, r3
 800c148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c14c:	69db      	ldr	r3, [r3, #28]
 800c14e:	4313      	orrs	r3, r2
 800c150:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	68db      	ldr	r3, [r3, #12]
 800c15c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800c160:	f021 010c 	bic.w	r1, r1, #12
 800c164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c16e:	430b      	orrs	r3, r1
 800c170:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	695b      	ldr	r3, [r3, #20]
 800c17a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800c17e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c182:	6999      	ldr	r1, [r3, #24]
 800c184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c188:	681a      	ldr	r2, [r3, #0]
 800c18a:	ea40 0301 	orr.w	r3, r0, r1
 800c18e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c194:	681a      	ldr	r2, [r3, #0]
 800c196:	4b8f      	ldr	r3, [pc, #572]	@ (800c3d4 <UART_SetConfig+0x2cc>)
 800c198:	429a      	cmp	r2, r3
 800c19a:	d005      	beq.n	800c1a8 <UART_SetConfig+0xa0>
 800c19c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1a0:	681a      	ldr	r2, [r3, #0]
 800c1a2:	4b8d      	ldr	r3, [pc, #564]	@ (800c3d8 <UART_SetConfig+0x2d0>)
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d104      	bne.n	800c1b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c1a8:	f7fd fb18 	bl	80097dc <HAL_RCC_GetPCLK2Freq>
 800c1ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c1b0:	e003      	b.n	800c1ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c1b2:	f7fd faff 	bl	80097b4 <HAL_RCC_GetPCLK1Freq>
 800c1b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1be:	69db      	ldr	r3, [r3, #28]
 800c1c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c1c4:	f040 810c 	bne.w	800c3e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c1c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c1d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c1d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c1da:	4622      	mov	r2, r4
 800c1dc:	462b      	mov	r3, r5
 800c1de:	1891      	adds	r1, r2, r2
 800c1e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c1e2:	415b      	adcs	r3, r3
 800c1e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c1e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c1ea:	4621      	mov	r1, r4
 800c1ec:	eb12 0801 	adds.w	r8, r2, r1
 800c1f0:	4629      	mov	r1, r5
 800c1f2:	eb43 0901 	adc.w	r9, r3, r1
 800c1f6:	f04f 0200 	mov.w	r2, #0
 800c1fa:	f04f 0300 	mov.w	r3, #0
 800c1fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c202:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c206:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c20a:	4690      	mov	r8, r2
 800c20c:	4699      	mov	r9, r3
 800c20e:	4623      	mov	r3, r4
 800c210:	eb18 0303 	adds.w	r3, r8, r3
 800c214:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c218:	462b      	mov	r3, r5
 800c21a:	eb49 0303 	adc.w	r3, r9, r3
 800c21e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	2200      	movs	r2, #0
 800c22a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c22e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c232:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c236:	460b      	mov	r3, r1
 800c238:	18db      	adds	r3, r3, r3
 800c23a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c23c:	4613      	mov	r3, r2
 800c23e:	eb42 0303 	adc.w	r3, r2, r3
 800c242:	657b      	str	r3, [r7, #84]	@ 0x54
 800c244:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c248:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c24c:	f7f4 fd1c 	bl	8000c88 <__aeabi_uldivmod>
 800c250:	4602      	mov	r2, r0
 800c252:	460b      	mov	r3, r1
 800c254:	4b61      	ldr	r3, [pc, #388]	@ (800c3dc <UART_SetConfig+0x2d4>)
 800c256:	fba3 2302 	umull	r2, r3, r3, r2
 800c25a:	095b      	lsrs	r3, r3, #5
 800c25c:	011c      	lsls	r4, r3, #4
 800c25e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c262:	2200      	movs	r2, #0
 800c264:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c268:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c26c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c270:	4642      	mov	r2, r8
 800c272:	464b      	mov	r3, r9
 800c274:	1891      	adds	r1, r2, r2
 800c276:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c278:	415b      	adcs	r3, r3
 800c27a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c27c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c280:	4641      	mov	r1, r8
 800c282:	eb12 0a01 	adds.w	sl, r2, r1
 800c286:	4649      	mov	r1, r9
 800c288:	eb43 0b01 	adc.w	fp, r3, r1
 800c28c:	f04f 0200 	mov.w	r2, #0
 800c290:	f04f 0300 	mov.w	r3, #0
 800c294:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c298:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c29c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c2a0:	4692      	mov	sl, r2
 800c2a2:	469b      	mov	fp, r3
 800c2a4:	4643      	mov	r3, r8
 800c2a6:	eb1a 0303 	adds.w	r3, sl, r3
 800c2aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c2ae:	464b      	mov	r3, r9
 800c2b0:	eb4b 0303 	adc.w	r3, fp, r3
 800c2b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c2b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c2c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c2c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c2cc:	460b      	mov	r3, r1
 800c2ce:	18db      	adds	r3, r3, r3
 800c2d0:	643b      	str	r3, [r7, #64]	@ 0x40
 800c2d2:	4613      	mov	r3, r2
 800c2d4:	eb42 0303 	adc.w	r3, r2, r3
 800c2d8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c2de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c2e2:	f7f4 fcd1 	bl	8000c88 <__aeabi_uldivmod>
 800c2e6:	4602      	mov	r2, r0
 800c2e8:	460b      	mov	r3, r1
 800c2ea:	4611      	mov	r1, r2
 800c2ec:	4b3b      	ldr	r3, [pc, #236]	@ (800c3dc <UART_SetConfig+0x2d4>)
 800c2ee:	fba3 2301 	umull	r2, r3, r3, r1
 800c2f2:	095b      	lsrs	r3, r3, #5
 800c2f4:	2264      	movs	r2, #100	@ 0x64
 800c2f6:	fb02 f303 	mul.w	r3, r2, r3
 800c2fa:	1acb      	subs	r3, r1, r3
 800c2fc:	00db      	lsls	r3, r3, #3
 800c2fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c302:	4b36      	ldr	r3, [pc, #216]	@ (800c3dc <UART_SetConfig+0x2d4>)
 800c304:	fba3 2302 	umull	r2, r3, r3, r2
 800c308:	095b      	lsrs	r3, r3, #5
 800c30a:	005b      	lsls	r3, r3, #1
 800c30c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c310:	441c      	add	r4, r3
 800c312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c316:	2200      	movs	r2, #0
 800c318:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c31c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c320:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c324:	4642      	mov	r2, r8
 800c326:	464b      	mov	r3, r9
 800c328:	1891      	adds	r1, r2, r2
 800c32a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c32c:	415b      	adcs	r3, r3
 800c32e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c330:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c334:	4641      	mov	r1, r8
 800c336:	1851      	adds	r1, r2, r1
 800c338:	6339      	str	r1, [r7, #48]	@ 0x30
 800c33a:	4649      	mov	r1, r9
 800c33c:	414b      	adcs	r3, r1
 800c33e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c340:	f04f 0200 	mov.w	r2, #0
 800c344:	f04f 0300 	mov.w	r3, #0
 800c348:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c34c:	4659      	mov	r1, fp
 800c34e:	00cb      	lsls	r3, r1, #3
 800c350:	4651      	mov	r1, sl
 800c352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c356:	4651      	mov	r1, sl
 800c358:	00ca      	lsls	r2, r1, #3
 800c35a:	4610      	mov	r0, r2
 800c35c:	4619      	mov	r1, r3
 800c35e:	4603      	mov	r3, r0
 800c360:	4642      	mov	r2, r8
 800c362:	189b      	adds	r3, r3, r2
 800c364:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c368:	464b      	mov	r3, r9
 800c36a:	460a      	mov	r2, r1
 800c36c:	eb42 0303 	adc.w	r3, r2, r3
 800c370:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	2200      	movs	r2, #0
 800c37c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c380:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c384:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c388:	460b      	mov	r3, r1
 800c38a:	18db      	adds	r3, r3, r3
 800c38c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c38e:	4613      	mov	r3, r2
 800c390:	eb42 0303 	adc.w	r3, r2, r3
 800c394:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c396:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c39a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c39e:	f7f4 fc73 	bl	8000c88 <__aeabi_uldivmod>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	4b0d      	ldr	r3, [pc, #52]	@ (800c3dc <UART_SetConfig+0x2d4>)
 800c3a8:	fba3 1302 	umull	r1, r3, r3, r2
 800c3ac:	095b      	lsrs	r3, r3, #5
 800c3ae:	2164      	movs	r1, #100	@ 0x64
 800c3b0:	fb01 f303 	mul.w	r3, r1, r3
 800c3b4:	1ad3      	subs	r3, r2, r3
 800c3b6:	00db      	lsls	r3, r3, #3
 800c3b8:	3332      	adds	r3, #50	@ 0x32
 800c3ba:	4a08      	ldr	r2, [pc, #32]	@ (800c3dc <UART_SetConfig+0x2d4>)
 800c3bc:	fba2 2303 	umull	r2, r3, r2, r3
 800c3c0:	095b      	lsrs	r3, r3, #5
 800c3c2:	f003 0207 	and.w	r2, r3, #7
 800c3c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	4422      	add	r2, r4
 800c3ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c3d0:	e106      	b.n	800c5e0 <UART_SetConfig+0x4d8>
 800c3d2:	bf00      	nop
 800c3d4:	40011000 	.word	0x40011000
 800c3d8:	40011400 	.word	0x40011400
 800c3dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c3e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c3ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c3ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c3f2:	4642      	mov	r2, r8
 800c3f4:	464b      	mov	r3, r9
 800c3f6:	1891      	adds	r1, r2, r2
 800c3f8:	6239      	str	r1, [r7, #32]
 800c3fa:	415b      	adcs	r3, r3
 800c3fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800c3fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c402:	4641      	mov	r1, r8
 800c404:	1854      	adds	r4, r2, r1
 800c406:	4649      	mov	r1, r9
 800c408:	eb43 0501 	adc.w	r5, r3, r1
 800c40c:	f04f 0200 	mov.w	r2, #0
 800c410:	f04f 0300 	mov.w	r3, #0
 800c414:	00eb      	lsls	r3, r5, #3
 800c416:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c41a:	00e2      	lsls	r2, r4, #3
 800c41c:	4614      	mov	r4, r2
 800c41e:	461d      	mov	r5, r3
 800c420:	4643      	mov	r3, r8
 800c422:	18e3      	adds	r3, r4, r3
 800c424:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c428:	464b      	mov	r3, r9
 800c42a:	eb45 0303 	adc.w	r3, r5, r3
 800c42e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	2200      	movs	r2, #0
 800c43a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c43e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c442:	f04f 0200 	mov.w	r2, #0
 800c446:	f04f 0300 	mov.w	r3, #0
 800c44a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c44e:	4629      	mov	r1, r5
 800c450:	008b      	lsls	r3, r1, #2
 800c452:	4621      	mov	r1, r4
 800c454:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c458:	4621      	mov	r1, r4
 800c45a:	008a      	lsls	r2, r1, #2
 800c45c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c460:	f7f4 fc12 	bl	8000c88 <__aeabi_uldivmod>
 800c464:	4602      	mov	r2, r0
 800c466:	460b      	mov	r3, r1
 800c468:	4b60      	ldr	r3, [pc, #384]	@ (800c5ec <UART_SetConfig+0x4e4>)
 800c46a:	fba3 2302 	umull	r2, r3, r3, r2
 800c46e:	095b      	lsrs	r3, r3, #5
 800c470:	011c      	lsls	r4, r3, #4
 800c472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c476:	2200      	movs	r2, #0
 800c478:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c47c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c480:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c484:	4642      	mov	r2, r8
 800c486:	464b      	mov	r3, r9
 800c488:	1891      	adds	r1, r2, r2
 800c48a:	61b9      	str	r1, [r7, #24]
 800c48c:	415b      	adcs	r3, r3
 800c48e:	61fb      	str	r3, [r7, #28]
 800c490:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c494:	4641      	mov	r1, r8
 800c496:	1851      	adds	r1, r2, r1
 800c498:	6139      	str	r1, [r7, #16]
 800c49a:	4649      	mov	r1, r9
 800c49c:	414b      	adcs	r3, r1
 800c49e:	617b      	str	r3, [r7, #20]
 800c4a0:	f04f 0200 	mov.w	r2, #0
 800c4a4:	f04f 0300 	mov.w	r3, #0
 800c4a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c4ac:	4659      	mov	r1, fp
 800c4ae:	00cb      	lsls	r3, r1, #3
 800c4b0:	4651      	mov	r1, sl
 800c4b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c4b6:	4651      	mov	r1, sl
 800c4b8:	00ca      	lsls	r2, r1, #3
 800c4ba:	4610      	mov	r0, r2
 800c4bc:	4619      	mov	r1, r3
 800c4be:	4603      	mov	r3, r0
 800c4c0:	4642      	mov	r2, r8
 800c4c2:	189b      	adds	r3, r3, r2
 800c4c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c4c8:	464b      	mov	r3, r9
 800c4ca:	460a      	mov	r2, r1
 800c4cc:	eb42 0303 	adc.w	r3, r2, r3
 800c4d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c4d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c4d8:	685b      	ldr	r3, [r3, #4]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c4de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c4e0:	f04f 0200 	mov.w	r2, #0
 800c4e4:	f04f 0300 	mov.w	r3, #0
 800c4e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c4ec:	4649      	mov	r1, r9
 800c4ee:	008b      	lsls	r3, r1, #2
 800c4f0:	4641      	mov	r1, r8
 800c4f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c4f6:	4641      	mov	r1, r8
 800c4f8:	008a      	lsls	r2, r1, #2
 800c4fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c4fe:	f7f4 fbc3 	bl	8000c88 <__aeabi_uldivmod>
 800c502:	4602      	mov	r2, r0
 800c504:	460b      	mov	r3, r1
 800c506:	4611      	mov	r1, r2
 800c508:	4b38      	ldr	r3, [pc, #224]	@ (800c5ec <UART_SetConfig+0x4e4>)
 800c50a:	fba3 2301 	umull	r2, r3, r3, r1
 800c50e:	095b      	lsrs	r3, r3, #5
 800c510:	2264      	movs	r2, #100	@ 0x64
 800c512:	fb02 f303 	mul.w	r3, r2, r3
 800c516:	1acb      	subs	r3, r1, r3
 800c518:	011b      	lsls	r3, r3, #4
 800c51a:	3332      	adds	r3, #50	@ 0x32
 800c51c:	4a33      	ldr	r2, [pc, #204]	@ (800c5ec <UART_SetConfig+0x4e4>)
 800c51e:	fba2 2303 	umull	r2, r3, r2, r3
 800c522:	095b      	lsrs	r3, r3, #5
 800c524:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c528:	441c      	add	r4, r3
 800c52a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c52e:	2200      	movs	r2, #0
 800c530:	673b      	str	r3, [r7, #112]	@ 0x70
 800c532:	677a      	str	r2, [r7, #116]	@ 0x74
 800c534:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c538:	4642      	mov	r2, r8
 800c53a:	464b      	mov	r3, r9
 800c53c:	1891      	adds	r1, r2, r2
 800c53e:	60b9      	str	r1, [r7, #8]
 800c540:	415b      	adcs	r3, r3
 800c542:	60fb      	str	r3, [r7, #12]
 800c544:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c548:	4641      	mov	r1, r8
 800c54a:	1851      	adds	r1, r2, r1
 800c54c:	6039      	str	r1, [r7, #0]
 800c54e:	4649      	mov	r1, r9
 800c550:	414b      	adcs	r3, r1
 800c552:	607b      	str	r3, [r7, #4]
 800c554:	f04f 0200 	mov.w	r2, #0
 800c558:	f04f 0300 	mov.w	r3, #0
 800c55c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c560:	4659      	mov	r1, fp
 800c562:	00cb      	lsls	r3, r1, #3
 800c564:	4651      	mov	r1, sl
 800c566:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c56a:	4651      	mov	r1, sl
 800c56c:	00ca      	lsls	r2, r1, #3
 800c56e:	4610      	mov	r0, r2
 800c570:	4619      	mov	r1, r3
 800c572:	4603      	mov	r3, r0
 800c574:	4642      	mov	r2, r8
 800c576:	189b      	adds	r3, r3, r2
 800c578:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c57a:	464b      	mov	r3, r9
 800c57c:	460a      	mov	r2, r1
 800c57e:	eb42 0303 	adc.w	r3, r2, r3
 800c582:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c588:	685b      	ldr	r3, [r3, #4]
 800c58a:	2200      	movs	r2, #0
 800c58c:	663b      	str	r3, [r7, #96]	@ 0x60
 800c58e:	667a      	str	r2, [r7, #100]	@ 0x64
 800c590:	f04f 0200 	mov.w	r2, #0
 800c594:	f04f 0300 	mov.w	r3, #0
 800c598:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c59c:	4649      	mov	r1, r9
 800c59e:	008b      	lsls	r3, r1, #2
 800c5a0:	4641      	mov	r1, r8
 800c5a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c5a6:	4641      	mov	r1, r8
 800c5a8:	008a      	lsls	r2, r1, #2
 800c5aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c5ae:	f7f4 fb6b 	bl	8000c88 <__aeabi_uldivmod>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	4b0d      	ldr	r3, [pc, #52]	@ (800c5ec <UART_SetConfig+0x4e4>)
 800c5b8:	fba3 1302 	umull	r1, r3, r3, r2
 800c5bc:	095b      	lsrs	r3, r3, #5
 800c5be:	2164      	movs	r1, #100	@ 0x64
 800c5c0:	fb01 f303 	mul.w	r3, r1, r3
 800c5c4:	1ad3      	subs	r3, r2, r3
 800c5c6:	011b      	lsls	r3, r3, #4
 800c5c8:	3332      	adds	r3, #50	@ 0x32
 800c5ca:	4a08      	ldr	r2, [pc, #32]	@ (800c5ec <UART_SetConfig+0x4e4>)
 800c5cc:	fba2 2303 	umull	r2, r3, r2, r3
 800c5d0:	095b      	lsrs	r3, r3, #5
 800c5d2:	f003 020f 	and.w	r2, r3, #15
 800c5d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	4422      	add	r2, r4
 800c5de:	609a      	str	r2, [r3, #8]
}
 800c5e0:	bf00      	nop
 800c5e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c5ec:	51eb851f 	.word	0x51eb851f

0800c5f0 <__NVIC_SetPriority>:
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b083      	sub	sp, #12
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	6039      	str	r1, [r7, #0]
 800c5fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c5fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c600:	2b00      	cmp	r3, #0
 800c602:	db0a      	blt.n	800c61a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	b2da      	uxtb	r2, r3
 800c608:	490c      	ldr	r1, [pc, #48]	@ (800c63c <__NVIC_SetPriority+0x4c>)
 800c60a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c60e:	0112      	lsls	r2, r2, #4
 800c610:	b2d2      	uxtb	r2, r2
 800c612:	440b      	add	r3, r1
 800c614:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c618:	e00a      	b.n	800c630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	b2da      	uxtb	r2, r3
 800c61e:	4908      	ldr	r1, [pc, #32]	@ (800c640 <__NVIC_SetPriority+0x50>)
 800c620:	79fb      	ldrb	r3, [r7, #7]
 800c622:	f003 030f 	and.w	r3, r3, #15
 800c626:	3b04      	subs	r3, #4
 800c628:	0112      	lsls	r2, r2, #4
 800c62a:	b2d2      	uxtb	r2, r2
 800c62c:	440b      	add	r3, r1
 800c62e:	761a      	strb	r2, [r3, #24]
}
 800c630:	bf00      	nop
 800c632:	370c      	adds	r7, #12
 800c634:	46bd      	mov	sp, r7
 800c636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63a:	4770      	bx	lr
 800c63c:	e000e100 	.word	0xe000e100
 800c640:	e000ed00 	.word	0xe000ed00

0800c644 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c644:	b580      	push	{r7, lr}
 800c646:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c648:	2100      	movs	r1, #0
 800c64a:	f06f 0004 	mvn.w	r0, #4
 800c64e:	f7ff ffcf 	bl	800c5f0 <__NVIC_SetPriority>
#endif
}
 800c652:	bf00      	nop
 800c654:	bd80      	pop	{r7, pc}
	...

0800c658 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c658:	b480      	push	{r7}
 800c65a:	b083      	sub	sp, #12
 800c65c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c65e:	f3ef 8305 	mrs	r3, IPSR
 800c662:	603b      	str	r3, [r7, #0]
  return(result);
 800c664:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c666:	2b00      	cmp	r3, #0
 800c668:	d003      	beq.n	800c672 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c66a:	f06f 0305 	mvn.w	r3, #5
 800c66e:	607b      	str	r3, [r7, #4]
 800c670:	e00c      	b.n	800c68c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c672:	4b0a      	ldr	r3, [pc, #40]	@ (800c69c <osKernelInitialize+0x44>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d105      	bne.n	800c686 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c67a:	4b08      	ldr	r3, [pc, #32]	@ (800c69c <osKernelInitialize+0x44>)
 800c67c:	2201      	movs	r2, #1
 800c67e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c680:	2300      	movs	r3, #0
 800c682:	607b      	str	r3, [r7, #4]
 800c684:	e002      	b.n	800c68c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c686:	f04f 33ff 	mov.w	r3, #4294967295
 800c68a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c68c:	687b      	ldr	r3, [r7, #4]
}
 800c68e:	4618      	mov	r0, r3
 800c690:	370c      	adds	r7, #12
 800c692:	46bd      	mov	sp, r7
 800c694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c698:	4770      	bx	lr
 800c69a:	bf00      	nop
 800c69c:	20000c84 	.word	0x20000c84

0800c6a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6a6:	f3ef 8305 	mrs	r3, IPSR
 800c6aa:	603b      	str	r3, [r7, #0]
  return(result);
 800c6ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d003      	beq.n	800c6ba <osKernelStart+0x1a>
    stat = osErrorISR;
 800c6b2:	f06f 0305 	mvn.w	r3, #5
 800c6b6:	607b      	str	r3, [r7, #4]
 800c6b8:	e010      	b.n	800c6dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c6ba:	4b0b      	ldr	r3, [pc, #44]	@ (800c6e8 <osKernelStart+0x48>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	2b01      	cmp	r3, #1
 800c6c0:	d109      	bne.n	800c6d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c6c2:	f7ff ffbf 	bl	800c644 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c6c6:	4b08      	ldr	r3, [pc, #32]	@ (800c6e8 <osKernelStart+0x48>)
 800c6c8:	2202      	movs	r2, #2
 800c6ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c6cc:	f001 fde4 	bl	800e298 <vTaskStartScheduler>
      stat = osOK;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	607b      	str	r3, [r7, #4]
 800c6d4:	e002      	b.n	800c6dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c6d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c6da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c6dc:	687b      	ldr	r3, [r7, #4]
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3708      	adds	r7, #8
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	20000c84 	.word	0x20000c84

0800c6ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b08e      	sub	sp, #56	@ 0x38
 800c6f0:	af04      	add	r7, sp, #16
 800c6f2:	60f8      	str	r0, [r7, #12]
 800c6f4:	60b9      	str	r1, [r7, #8]
 800c6f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6fc:	f3ef 8305 	mrs	r3, IPSR
 800c700:	617b      	str	r3, [r7, #20]
  return(result);
 800c702:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c704:	2b00      	cmp	r3, #0
 800c706:	d17e      	bne.n	800c806 <osThreadNew+0x11a>
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d07b      	beq.n	800c806 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c70e:	2380      	movs	r3, #128	@ 0x80
 800c710:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c712:	2318      	movs	r3, #24
 800c714:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c716:	2300      	movs	r3, #0
 800c718:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c71a:	f04f 33ff 	mov.w	r3, #4294967295
 800c71e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d045      	beq.n	800c7b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d002      	beq.n	800c734 <osThreadNew+0x48>
        name = attr->name;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	699b      	ldr	r3, [r3, #24]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d002      	beq.n	800c742 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	699b      	ldr	r3, [r3, #24]
 800c740:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c742:	69fb      	ldr	r3, [r7, #28]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d008      	beq.n	800c75a <osThreadNew+0x6e>
 800c748:	69fb      	ldr	r3, [r7, #28]
 800c74a:	2b38      	cmp	r3, #56	@ 0x38
 800c74c:	d805      	bhi.n	800c75a <osThreadNew+0x6e>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	685b      	ldr	r3, [r3, #4]
 800c752:	f003 0301 	and.w	r3, r3, #1
 800c756:	2b00      	cmp	r3, #0
 800c758:	d001      	beq.n	800c75e <osThreadNew+0x72>
        return (NULL);
 800c75a:	2300      	movs	r3, #0
 800c75c:	e054      	b.n	800c808 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	695b      	ldr	r3, [r3, #20]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d003      	beq.n	800c76e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	695b      	ldr	r3, [r3, #20]
 800c76a:	089b      	lsrs	r3, r3, #2
 800c76c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	689b      	ldr	r3, [r3, #8]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d00e      	beq.n	800c794 <osThreadNew+0xa8>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	68db      	ldr	r3, [r3, #12]
 800c77a:	2b5b      	cmp	r3, #91	@ 0x5b
 800c77c:	d90a      	bls.n	800c794 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c782:	2b00      	cmp	r3, #0
 800c784:	d006      	beq.n	800c794 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	695b      	ldr	r3, [r3, #20]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d002      	beq.n	800c794 <osThreadNew+0xa8>
        mem = 1;
 800c78e:	2301      	movs	r3, #1
 800c790:	61bb      	str	r3, [r7, #24]
 800c792:	e010      	b.n	800c7b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d10c      	bne.n	800c7b6 <osThreadNew+0xca>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	68db      	ldr	r3, [r3, #12]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d108      	bne.n	800c7b6 <osThreadNew+0xca>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	691b      	ldr	r3, [r3, #16]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d104      	bne.n	800c7b6 <osThreadNew+0xca>
          mem = 0;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	61bb      	str	r3, [r7, #24]
 800c7b0:	e001      	b.n	800c7b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c7b6:	69bb      	ldr	r3, [r7, #24]
 800c7b8:	2b01      	cmp	r3, #1
 800c7ba:	d110      	bne.n	800c7de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c7c0:	687a      	ldr	r2, [r7, #4]
 800c7c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c7c4:	9202      	str	r2, [sp, #8]
 800c7c6:	9301      	str	r3, [sp, #4]
 800c7c8:	69fb      	ldr	r3, [r7, #28]
 800c7ca:	9300      	str	r3, [sp, #0]
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	6a3a      	ldr	r2, [r7, #32]
 800c7d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c7d2:	68f8      	ldr	r0, [r7, #12]
 800c7d4:	f001 fb84 	bl	800dee0 <xTaskCreateStatic>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	613b      	str	r3, [r7, #16]
 800c7dc:	e013      	b.n	800c806 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c7de:	69bb      	ldr	r3, [r7, #24]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d110      	bne.n	800c806 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c7e4:	6a3b      	ldr	r3, [r7, #32]
 800c7e6:	b29a      	uxth	r2, r3
 800c7e8:	f107 0310 	add.w	r3, r7, #16
 800c7ec:	9301      	str	r3, [sp, #4]
 800c7ee:	69fb      	ldr	r3, [r7, #28]
 800c7f0:	9300      	str	r3, [sp, #0]
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c7f6:	68f8      	ldr	r0, [r7, #12]
 800c7f8:	f001 fbd2 	bl	800dfa0 <xTaskCreate>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	2b01      	cmp	r3, #1
 800c800:	d001      	beq.n	800c806 <osThreadNew+0x11a>
            hTask = NULL;
 800c802:	2300      	movs	r3, #0
 800c804:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c806:	693b      	ldr	r3, [r7, #16]
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3728      	adds	r7, #40	@ 0x28
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}

0800c810 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800c810:	b480      	push	{r7}
 800c812:	b083      	sub	sp, #12
 800c814:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c816:	f3ef 8305 	mrs	r3, IPSR
 800c81a:	603b      	str	r3, [r7, #0]
  return(result);
 800c81c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d003      	beq.n	800c82a <osThreadYield+0x1a>
    stat = osErrorISR;
 800c822:	f06f 0305 	mvn.w	r3, #5
 800c826:	607b      	str	r3, [r7, #4]
 800c828:	e009      	b.n	800c83e <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800c82a:	2300      	movs	r3, #0
 800c82c:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800c82e:	4b07      	ldr	r3, [pc, #28]	@ (800c84c <osThreadYield+0x3c>)
 800c830:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c834:	601a      	str	r2, [r3, #0]
 800c836:	f3bf 8f4f 	dsb	sy
 800c83a:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800c83e:	687b      	ldr	r3, [r7, #4]
}
 800c840:	4618      	mov	r0, r3
 800c842:	370c      	adds	r7, #12
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr
 800c84c:	e000ed04 	.word	0xe000ed04

0800c850 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c850:	b580      	push	{r7, lr}
 800c852:	b084      	sub	sp, #16
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c858:	f3ef 8305 	mrs	r3, IPSR
 800c85c:	60bb      	str	r3, [r7, #8]
  return(result);
 800c85e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c860:	2b00      	cmp	r3, #0
 800c862:	d003      	beq.n	800c86c <osDelay+0x1c>
    stat = osErrorISR;
 800c864:	f06f 0305 	mvn.w	r3, #5
 800c868:	60fb      	str	r3, [r7, #12]
 800c86a:	e007      	b.n	800c87c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c86c:	2300      	movs	r3, #0
 800c86e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d002      	beq.n	800c87c <osDelay+0x2c>
      vTaskDelay(ticks);
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f001 fcd8 	bl	800e22c <vTaskDelay>
    }
  }

  return (stat);
 800c87c:	68fb      	ldr	r3, [r7, #12]
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3710      	adds	r7, #16
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}

0800c886 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800c886:	b580      	push	{r7, lr}
 800c888:	b086      	sub	sp, #24
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800c88e:	2300      	movs	r3, #0
 800c890:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c892:	f3ef 8305 	mrs	r3, IPSR
 800c896:	60fb      	str	r3, [r7, #12]
  return(result);
 800c898:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d12d      	bne.n	800c8fa <osEventFlagsNew+0x74>
    mem = -1;
 800c89e:	f04f 33ff 	mov.w	r3, #4294967295
 800c8a2:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d015      	beq.n	800c8d6 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	689b      	ldr	r3, [r3, #8]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d006      	beq.n	800c8c0 <osEventFlagsNew+0x3a>
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	68db      	ldr	r3, [r3, #12]
 800c8b6:	2b1f      	cmp	r3, #31
 800c8b8:	d902      	bls.n	800c8c0 <osEventFlagsNew+0x3a>
        mem = 1;
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	613b      	str	r3, [r7, #16]
 800c8be:	e00c      	b.n	800c8da <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	689b      	ldr	r3, [r3, #8]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d108      	bne.n	800c8da <osEventFlagsNew+0x54>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	68db      	ldr	r3, [r3, #12]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d104      	bne.n	800c8da <osEventFlagsNew+0x54>
          mem = 0;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	613b      	str	r3, [r7, #16]
 800c8d4:	e001      	b.n	800c8da <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800c8da:	693b      	ldr	r3, [r7, #16]
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	d106      	bne.n	800c8ee <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	689b      	ldr	r3, [r3, #8]
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f000 fa5b 	bl	800cda0 <xEventGroupCreateStatic>
 800c8ea:	6178      	str	r0, [r7, #20]
 800c8ec:	e005      	b.n	800c8fa <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d102      	bne.n	800c8fa <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800c8f4:	f000 fa8d 	bl	800ce12 <xEventGroupCreate>
 800c8f8:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800c8fa:	697b      	ldr	r3, [r7, #20]
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3718      	adds	r7, #24
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}

0800c904 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800c904:	b580      	push	{r7, lr}
 800c906:	b086      	sub	sp, #24
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d003      	beq.n	800c920 <osEventFlagsSet+0x1c>
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c91e:	d303      	bcc.n	800c928 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 800c920:	f06f 0303 	mvn.w	r3, #3
 800c924:	617b      	str	r3, [r7, #20]
 800c926:	e028      	b.n	800c97a <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c928:	f3ef 8305 	mrs	r3, IPSR
 800c92c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c92e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c930:	2b00      	cmp	r3, #0
 800c932:	d01d      	beq.n	800c970 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800c934:	2300      	movs	r3, #0
 800c936:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800c938:	f107 0308 	add.w	r3, r7, #8
 800c93c:	461a      	mov	r2, r3
 800c93e:	6839      	ldr	r1, [r7, #0]
 800c940:	6938      	ldr	r0, [r7, #16]
 800c942:	f000 fc0f 	bl	800d164 <xEventGroupSetBitsFromISR>
 800c946:	4603      	mov	r3, r0
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d103      	bne.n	800c954 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 800c94c:	f06f 0302 	mvn.w	r3, #2
 800c950:	617b      	str	r3, [r7, #20]
 800c952:	e012      	b.n	800c97a <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d00d      	beq.n	800c97a <osEventFlagsSet+0x76>
 800c95e:	4b09      	ldr	r3, [pc, #36]	@ (800c984 <osEventFlagsSet+0x80>)
 800c960:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c964:	601a      	str	r2, [r3, #0]
 800c966:	f3bf 8f4f 	dsb	sy
 800c96a:	f3bf 8f6f 	isb	sy
 800c96e:	e004      	b.n	800c97a <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800c970:	6839      	ldr	r1, [r7, #0]
 800c972:	6938      	ldr	r0, [r7, #16]
 800c974:	f000 fb3a 	bl	800cfec <xEventGroupSetBits>
 800c978:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800c97a:	697b      	ldr	r3, [r7, #20]
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3718      	adds	r7, #24
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}
 800c984:	e000ed04 	.word	0xe000ed04

0800c988 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800c988:	b580      	push	{r7, lr}
 800c98a:	b08c      	sub	sp, #48	@ 0x30
 800c98c:	af02      	add	r7, sp, #8
 800c98e:	60f8      	str	r0, [r7, #12]
 800c990:	60b9      	str	r1, [r7, #8]
 800c992:	607a      	str	r2, [r7, #4]
 800c994:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800c99a:	69bb      	ldr	r3, [r7, #24]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d003      	beq.n	800c9a8 <osEventFlagsWait+0x20>
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c9a6:	d303      	bcc.n	800c9b0 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 800c9a8:	f06f 0303 	mvn.w	r3, #3
 800c9ac:	61fb      	str	r3, [r7, #28]
 800c9ae:	e04b      	b.n	800ca48 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9b0:	f3ef 8305 	mrs	r3, IPSR
 800c9b4:	617b      	str	r3, [r7, #20]
  return(result);
 800c9b6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d003      	beq.n	800c9c4 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 800c9bc:	f06f 0305 	mvn.w	r3, #5
 800c9c0:	61fb      	str	r3, [r7, #28]
 800c9c2:	e041      	b.n	800ca48 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f003 0301 	and.w	r3, r3, #1
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d002      	beq.n	800c9d4 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c9d2:	e001      	b.n	800c9d8 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f003 0302 	and.w	r3, r3, #2
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d002      	beq.n	800c9e8 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	623b      	str	r3, [r7, #32]
 800c9e6:	e001      	b.n	800c9ec <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	9300      	str	r3, [sp, #0]
 800c9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9f2:	6a3a      	ldr	r2, [r7, #32]
 800c9f4:	68b9      	ldr	r1, [r7, #8]
 800c9f6:	69b8      	ldr	r0, [r7, #24]
 800c9f8:	f000 fa26 	bl	800ce48 <xEventGroupWaitBits>
 800c9fc:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f003 0301 	and.w	r3, r3, #1
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d010      	beq.n	800ca2a <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 800ca08:	68ba      	ldr	r2, [r7, #8]
 800ca0a:	69fb      	ldr	r3, [r7, #28]
 800ca0c:	4013      	ands	r3, r2
 800ca0e:	68ba      	ldr	r2, [r7, #8]
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d019      	beq.n	800ca48 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d003      	beq.n	800ca22 <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 800ca1a:	f06f 0301 	mvn.w	r3, #1
 800ca1e:	61fb      	str	r3, [r7, #28]
 800ca20:	e012      	b.n	800ca48 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 800ca22:	f06f 0302 	mvn.w	r3, #2
 800ca26:	61fb      	str	r3, [r7, #28]
 800ca28:	e00e      	b.n	800ca48 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800ca2a:	68ba      	ldr	r2, [r7, #8]
 800ca2c:	69fb      	ldr	r3, [r7, #28]
 800ca2e:	4013      	ands	r3, r2
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d109      	bne.n	800ca48 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d003      	beq.n	800ca42 <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 800ca3a:	f06f 0301 	mvn.w	r3, #1
 800ca3e:	61fb      	str	r3, [r7, #28]
 800ca40:	e002      	b.n	800ca48 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 800ca42:	f06f 0302 	mvn.w	r3, #2
 800ca46:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800ca48:	69fb      	ldr	r3, [r7, #28]
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3728      	adds	r7, #40	@ 0x28
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}

0800ca52 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ca52:	b580      	push	{r7, lr}
 800ca54:	b08a      	sub	sp, #40	@ 0x28
 800ca56:	af02      	add	r7, sp, #8
 800ca58:	60f8      	str	r0, [r7, #12]
 800ca5a:	60b9      	str	r1, [r7, #8]
 800ca5c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca62:	f3ef 8305 	mrs	r3, IPSR
 800ca66:	613b      	str	r3, [r7, #16]
  return(result);
 800ca68:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d15f      	bne.n	800cb2e <osMessageQueueNew+0xdc>
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d05c      	beq.n	800cb2e <osMessageQueueNew+0xdc>
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d059      	beq.n	800cb2e <osMessageQueueNew+0xdc>
    mem = -1;
 800ca7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ca7e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d029      	beq.n	800cada <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	689b      	ldr	r3, [r3, #8]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d012      	beq.n	800cab4 <osMessageQueueNew+0x62>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	68db      	ldr	r3, [r3, #12]
 800ca92:	2b4f      	cmp	r3, #79	@ 0x4f
 800ca94:	d90e      	bls.n	800cab4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d00a      	beq.n	800cab4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	695a      	ldr	r2, [r3, #20]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	68b9      	ldr	r1, [r7, #8]
 800caa6:	fb01 f303 	mul.w	r3, r1, r3
 800caaa:	429a      	cmp	r2, r3
 800caac:	d302      	bcc.n	800cab4 <osMessageQueueNew+0x62>
        mem = 1;
 800caae:	2301      	movs	r3, #1
 800cab0:	61bb      	str	r3, [r7, #24]
 800cab2:	e014      	b.n	800cade <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	689b      	ldr	r3, [r3, #8]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d110      	bne.n	800cade <osMessageQueueNew+0x8c>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	68db      	ldr	r3, [r3, #12]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d10c      	bne.n	800cade <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d108      	bne.n	800cade <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	695b      	ldr	r3, [r3, #20]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d104      	bne.n	800cade <osMessageQueueNew+0x8c>
          mem = 0;
 800cad4:	2300      	movs	r3, #0
 800cad6:	61bb      	str	r3, [r7, #24]
 800cad8:	e001      	b.n	800cade <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800cada:	2300      	movs	r3, #0
 800cadc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cade:	69bb      	ldr	r3, [r7, #24]
 800cae0:	2b01      	cmp	r3, #1
 800cae2:	d10b      	bne.n	800cafc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	691a      	ldr	r2, [r3, #16]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	689b      	ldr	r3, [r3, #8]
 800caec:	2100      	movs	r1, #0
 800caee:	9100      	str	r1, [sp, #0]
 800caf0:	68b9      	ldr	r1, [r7, #8]
 800caf2:	68f8      	ldr	r0, [r7, #12]
 800caf4:	f000 fc68 	bl	800d3c8 <xQueueGenericCreateStatic>
 800caf8:	61f8      	str	r0, [r7, #28]
 800cafa:	e008      	b.n	800cb0e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800cafc:	69bb      	ldr	r3, [r7, #24]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d105      	bne.n	800cb0e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800cb02:	2200      	movs	r2, #0
 800cb04:	68b9      	ldr	r1, [r7, #8]
 800cb06:	68f8      	ldr	r0, [r7, #12]
 800cb08:	f000 fcdb 	bl	800d4c2 <xQueueGenericCreate>
 800cb0c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800cb0e:	69fb      	ldr	r3, [r7, #28]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d00c      	beq.n	800cb2e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d003      	beq.n	800cb22 <osMessageQueueNew+0xd0>
        name = attr->name;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	617b      	str	r3, [r7, #20]
 800cb20:	e001      	b.n	800cb26 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800cb22:	2300      	movs	r3, #0
 800cb24:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800cb26:	6979      	ldr	r1, [r7, #20]
 800cb28:	69f8      	ldr	r0, [r7, #28]
 800cb2a:	f001 f97b 	bl	800de24 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800cb2e:	69fb      	ldr	r3, [r7, #28]
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3720      	adds	r7, #32
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b088      	sub	sp, #32
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	60b9      	str	r1, [r7, #8]
 800cb42:	603b      	str	r3, [r7, #0]
 800cb44:	4613      	mov	r3, r2
 800cb46:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb50:	f3ef 8305 	mrs	r3, IPSR
 800cb54:	617b      	str	r3, [r7, #20]
  return(result);
 800cb56:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d028      	beq.n	800cbae <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cb5c:	69bb      	ldr	r3, [r7, #24]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d005      	beq.n	800cb6e <osMessageQueuePut+0x36>
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d002      	beq.n	800cb6e <osMessageQueuePut+0x36>
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d003      	beq.n	800cb76 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800cb6e:	f06f 0303 	mvn.w	r3, #3
 800cb72:	61fb      	str	r3, [r7, #28]
 800cb74:	e038      	b.n	800cbe8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800cb76:	2300      	movs	r3, #0
 800cb78:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800cb7a:	f107 0210 	add.w	r2, r7, #16
 800cb7e:	2300      	movs	r3, #0
 800cb80:	68b9      	ldr	r1, [r7, #8]
 800cb82:	69b8      	ldr	r0, [r7, #24]
 800cb84:	f000 fdfe 	bl	800d784 <xQueueGenericSendFromISR>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	2b01      	cmp	r3, #1
 800cb8c:	d003      	beq.n	800cb96 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800cb8e:	f06f 0302 	mvn.w	r3, #2
 800cb92:	61fb      	str	r3, [r7, #28]
 800cb94:	e028      	b.n	800cbe8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d025      	beq.n	800cbe8 <osMessageQueuePut+0xb0>
 800cb9c:	4b15      	ldr	r3, [pc, #84]	@ (800cbf4 <osMessageQueuePut+0xbc>)
 800cb9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cba2:	601a      	str	r2, [r3, #0]
 800cba4:	f3bf 8f4f 	dsb	sy
 800cba8:	f3bf 8f6f 	isb	sy
 800cbac:	e01c      	b.n	800cbe8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cbae:	69bb      	ldr	r3, [r7, #24]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d002      	beq.n	800cbba <osMessageQueuePut+0x82>
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d103      	bne.n	800cbc2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800cbba:	f06f 0303 	mvn.w	r3, #3
 800cbbe:	61fb      	str	r3, [r7, #28]
 800cbc0:	e012      	b.n	800cbe8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	683a      	ldr	r2, [r7, #0]
 800cbc6:	68b9      	ldr	r1, [r7, #8]
 800cbc8:	69b8      	ldr	r0, [r7, #24]
 800cbca:	f000 fcd9 	bl	800d580 <xQueueGenericSend>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	2b01      	cmp	r3, #1
 800cbd2:	d009      	beq.n	800cbe8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d003      	beq.n	800cbe2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800cbda:	f06f 0301 	mvn.w	r3, #1
 800cbde:	61fb      	str	r3, [r7, #28]
 800cbe0:	e002      	b.n	800cbe8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800cbe2:	f06f 0302 	mvn.w	r3, #2
 800cbe6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cbe8:	69fb      	ldr	r3, [r7, #28]
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3720      	adds	r7, #32
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop
 800cbf4:	e000ed04 	.word	0xe000ed04

0800cbf8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b088      	sub	sp, #32
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	60b9      	str	r1, [r7, #8]
 800cc02:	607a      	str	r2, [r7, #4]
 800cc04:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc0e:	f3ef 8305 	mrs	r3, IPSR
 800cc12:	617b      	str	r3, [r7, #20]
  return(result);
 800cc14:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d028      	beq.n	800cc6c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cc1a:	69bb      	ldr	r3, [r7, #24]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d005      	beq.n	800cc2c <osMessageQueueGet+0x34>
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d002      	beq.n	800cc2c <osMessageQueueGet+0x34>
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d003      	beq.n	800cc34 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800cc2c:	f06f 0303 	mvn.w	r3, #3
 800cc30:	61fb      	str	r3, [r7, #28]
 800cc32:	e037      	b.n	800cca4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800cc34:	2300      	movs	r3, #0
 800cc36:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cc38:	f107 0310 	add.w	r3, r7, #16
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	68b9      	ldr	r1, [r7, #8]
 800cc40:	69b8      	ldr	r0, [r7, #24]
 800cc42:	f000 ff1f 	bl	800da84 <xQueueReceiveFromISR>
 800cc46:	4603      	mov	r3, r0
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d003      	beq.n	800cc54 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800cc4c:	f06f 0302 	mvn.w	r3, #2
 800cc50:	61fb      	str	r3, [r7, #28]
 800cc52:	e027      	b.n	800cca4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d024      	beq.n	800cca4 <osMessageQueueGet+0xac>
 800cc5a:	4b15      	ldr	r3, [pc, #84]	@ (800ccb0 <osMessageQueueGet+0xb8>)
 800cc5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc60:	601a      	str	r2, [r3, #0]
 800cc62:	f3bf 8f4f 	dsb	sy
 800cc66:	f3bf 8f6f 	isb	sy
 800cc6a:	e01b      	b.n	800cca4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cc6c:	69bb      	ldr	r3, [r7, #24]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d002      	beq.n	800cc78 <osMessageQueueGet+0x80>
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d103      	bne.n	800cc80 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800cc78:	f06f 0303 	mvn.w	r3, #3
 800cc7c:	61fb      	str	r3, [r7, #28]
 800cc7e:	e011      	b.n	800cca4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cc80:	683a      	ldr	r2, [r7, #0]
 800cc82:	68b9      	ldr	r1, [r7, #8]
 800cc84:	69b8      	ldr	r0, [r7, #24]
 800cc86:	f000 fe1b 	bl	800d8c0 <xQueueReceive>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	d009      	beq.n	800cca4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d003      	beq.n	800cc9e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800cc96:	f06f 0301 	mvn.w	r3, #1
 800cc9a:	61fb      	str	r3, [r7, #28]
 800cc9c:	e002      	b.n	800cca4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800cc9e:	f06f 0302 	mvn.w	r3, #2
 800cca2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cca4:	69fb      	ldr	r3, [r7, #28]
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	3720      	adds	r7, #32
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	bf00      	nop
 800ccb0:	e000ed04 	.word	0xe000ed04

0800ccb4 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b086      	sub	sp, #24
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d102      	bne.n	800cccc <osMessageQueueGetCount+0x18>
    count = 0U;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	617b      	str	r3, [r7, #20]
 800ccca:	e00e      	b.n	800ccea <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cccc:	f3ef 8305 	mrs	r3, IPSR
 800ccd0:	60fb      	str	r3, [r7, #12]
  return(result);
 800ccd2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d004      	beq.n	800cce2 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800ccd8:	6938      	ldr	r0, [r7, #16]
 800ccda:	f000 ff74 	bl	800dbc6 <uxQueueMessagesWaitingFromISR>
 800ccde:	6178      	str	r0, [r7, #20]
 800cce0:	e003      	b.n	800ccea <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800cce2:	6938      	ldr	r0, [r7, #16]
 800cce4:	f000 ff50 	bl	800db88 <uxQueueMessagesWaiting>
 800cce8:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800ccea:	697b      	ldr	r3, [r7, #20]
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3718      	adds	r7, #24
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}

0800ccf4 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b086      	sub	sp, #24
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd00:	f3ef 8305 	mrs	r3, IPSR
 800cd04:	60fb      	str	r3, [r7, #12]
  return(result);
 800cd06:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d003      	beq.n	800cd14 <osMessageQueueReset+0x20>
    stat = osErrorISR;
 800cd0c:	f06f 0305 	mvn.w	r3, #5
 800cd10:	617b      	str	r3, [r7, #20]
 800cd12:	e00c      	b.n	800cd2e <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d103      	bne.n	800cd22 <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 800cd1a:	f06f 0303 	mvn.w	r3, #3
 800cd1e:	617b      	str	r3, [r7, #20]
 800cd20:	e005      	b.n	800cd2e <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 800cd22:	2300      	movs	r3, #0
 800cd24:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 800cd26:	2100      	movs	r1, #0
 800cd28:	6938      	ldr	r0, [r7, #16]
 800cd2a:	f000 fae3 	bl	800d2f4 <xQueueGenericReset>
  }

  return (stat);
 800cd2e:	697b      	ldr	r3, [r7, #20]
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3718      	adds	r7, #24
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}

0800cd38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cd38:	b480      	push	{r7}
 800cd3a:	b085      	sub	sp, #20
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	60f8      	str	r0, [r7, #12]
 800cd40:	60b9      	str	r1, [r7, #8]
 800cd42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	4a07      	ldr	r2, [pc, #28]	@ (800cd64 <vApplicationGetIdleTaskMemory+0x2c>)
 800cd48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	4a06      	ldr	r2, [pc, #24]	@ (800cd68 <vApplicationGetIdleTaskMemory+0x30>)
 800cd4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2280      	movs	r2, #128	@ 0x80
 800cd54:	601a      	str	r2, [r3, #0]
}
 800cd56:	bf00      	nop
 800cd58:	3714      	adds	r7, #20
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd60:	4770      	bx	lr
 800cd62:	bf00      	nop
 800cd64:	20000c88 	.word	0x20000c88
 800cd68:	20000ce4 	.word	0x20000ce4

0800cd6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cd6c:	b480      	push	{r7}
 800cd6e:	b085      	sub	sp, #20
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	60f8      	str	r0, [r7, #12]
 800cd74:	60b9      	str	r1, [r7, #8]
 800cd76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	4a07      	ldr	r2, [pc, #28]	@ (800cd98 <vApplicationGetTimerTaskMemory+0x2c>)
 800cd7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	4a06      	ldr	r2, [pc, #24]	@ (800cd9c <vApplicationGetTimerTaskMemory+0x30>)
 800cd82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cd8a:	601a      	str	r2, [r3, #0]
}
 800cd8c:	bf00      	nop
 800cd8e:	3714      	adds	r7, #20
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr
 800cd98:	20000ee4 	.word	0x20000ee4
 800cd9c:	20000f40 	.word	0x20000f40

0800cda0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b086      	sub	sp, #24
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d10b      	bne.n	800cdc6 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cdae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdb2:	f383 8811 	msr	BASEPRI, r3
 800cdb6:	f3bf 8f6f 	isb	sy
 800cdba:	f3bf 8f4f 	dsb	sy
 800cdbe:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cdc0:	bf00      	nop
 800cdc2:	bf00      	nop
 800cdc4:	e7fd      	b.n	800cdc2 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800cdc6:	2320      	movs	r3, #32
 800cdc8:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	2b20      	cmp	r3, #32
 800cdce:	d00b      	beq.n	800cde8 <xEventGroupCreateStatic+0x48>
	__asm volatile
 800cdd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdd4:	f383 8811 	msr	BASEPRI, r3
 800cdd8:	f3bf 8f6f 	isb	sy
 800cddc:	f3bf 8f4f 	dsb	sy
 800cde0:	60fb      	str	r3, [r7, #12]
}
 800cde2:	bf00      	nop
 800cde4:	bf00      	nop
 800cde6:	e7fd      	b.n	800cde4 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d00a      	beq.n	800ce08 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	3304      	adds	r3, #4
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f000 f9c5 	bl	800d18c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	2201      	movs	r2, #1
 800ce06:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800ce08:	697b      	ldr	r3, [r7, #20]
	}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3718      	adds	r7, #24
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}

0800ce12 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800ce12:	b580      	push	{r7, lr}
 800ce14:	b082      	sub	sp, #8
 800ce16:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800ce18:	2020      	movs	r0, #32
 800ce1a:	f002 fdf7 	bl	800fa0c <pvPortMalloc>
 800ce1e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d00a      	beq.n	800ce3c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	3304      	adds	r3, #4
 800ce30:	4618      	mov	r0, r3
 800ce32:	f000 f9ab 	bl	800d18c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800ce3c:	687b      	ldr	r3, [r7, #4]
	}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3708      	adds	r7, #8
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}
	...

0800ce48 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b090      	sub	sp, #64	@ 0x40
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	60b9      	str	r1, [r7, #8]
 800ce52:	607a      	str	r2, [r7, #4]
 800ce54:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d10b      	bne.n	800ce80 <xEventGroupWaitBits+0x38>
	__asm volatile
 800ce68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce6c:	f383 8811 	msr	BASEPRI, r3
 800ce70:	f3bf 8f6f 	isb	sy
 800ce74:	f3bf 8f4f 	dsb	sy
 800ce78:	623b      	str	r3, [r7, #32]
}
 800ce7a:	bf00      	nop
 800ce7c:	bf00      	nop
 800ce7e:	e7fd      	b.n	800ce7c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ce86:	d30b      	bcc.n	800cea0 <xEventGroupWaitBits+0x58>
	__asm volatile
 800ce88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce8c:	f383 8811 	msr	BASEPRI, r3
 800ce90:	f3bf 8f6f 	isb	sy
 800ce94:	f3bf 8f4f 	dsb	sy
 800ce98:	61fb      	str	r3, [r7, #28]
}
 800ce9a:	bf00      	nop
 800ce9c:	bf00      	nop
 800ce9e:	e7fd      	b.n	800ce9c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d10b      	bne.n	800cebe <xEventGroupWaitBits+0x76>
	__asm volatile
 800cea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceaa:	f383 8811 	msr	BASEPRI, r3
 800ceae:	f3bf 8f6f 	isb	sy
 800ceb2:	f3bf 8f4f 	dsb	sy
 800ceb6:	61bb      	str	r3, [r7, #24]
}
 800ceb8:	bf00      	nop
 800ceba:	bf00      	nop
 800cebc:	e7fd      	b.n	800ceba <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cebe:	f001 fedb 	bl	800ec78 <xTaskGetSchedulerState>
 800cec2:	4603      	mov	r3, r0
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d102      	bne.n	800cece <xEventGroupWaitBits+0x86>
 800cec8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d101      	bne.n	800ced2 <xEventGroupWaitBits+0x8a>
 800cece:	2301      	movs	r3, #1
 800ced0:	e000      	b.n	800ced4 <xEventGroupWaitBits+0x8c>
 800ced2:	2300      	movs	r3, #0
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d10b      	bne.n	800cef0 <xEventGroupWaitBits+0xa8>
	__asm volatile
 800ced8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cedc:	f383 8811 	msr	BASEPRI, r3
 800cee0:	f3bf 8f6f 	isb	sy
 800cee4:	f3bf 8f4f 	dsb	sy
 800cee8:	617b      	str	r3, [r7, #20]
}
 800ceea:	bf00      	nop
 800ceec:	bf00      	nop
 800ceee:	e7fd      	b.n	800ceec <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800cef0:	f001 fa3a 	bl	800e368 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800cef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800cefa:	683a      	ldr	r2, [r7, #0]
 800cefc:	68b9      	ldr	r1, [r7, #8]
 800cefe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cf00:	f000 f90d 	bl	800d11e <prvTestWaitCondition>
 800cf04:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800cf06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d00e      	beq.n	800cf2a <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800cf0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800cf10:	2300      	movs	r3, #0
 800cf12:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d028      	beq.n	800cf6c <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800cf1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf1c:	681a      	ldr	r2, [r3, #0]
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	43db      	mvns	r3, r3
 800cf22:	401a      	ands	r2, r3
 800cf24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf26:	601a      	str	r2, [r3, #0]
 800cf28:	e020      	b.n	800cf6c <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800cf2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d104      	bne.n	800cf3a <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800cf30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf32:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800cf34:	2301      	movs	r3, #1
 800cf36:	633b      	str	r3, [r7, #48]	@ 0x30
 800cf38:	e018      	b.n	800cf6c <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d003      	beq.n	800cf48 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800cf40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cf46:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d003      	beq.n	800cf56 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800cf4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf50:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cf54:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800cf56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf58:	1d18      	adds	r0, r3, #4
 800cf5a:	68ba      	ldr	r2, [r7, #8]
 800cf5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf5e:	4313      	orrs	r3, r2
 800cf60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cf62:	4619      	mov	r1, r3
 800cf64:	f001 fbfa 	bl	800e75c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800cf6c:	f001 fa0a 	bl	800e384 <xTaskResumeAll>
 800cf70:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800cf72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d031      	beq.n	800cfdc <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800cf78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d107      	bne.n	800cf8e <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800cf7e:	4b1a      	ldr	r3, [pc, #104]	@ (800cfe8 <xEventGroupWaitBits+0x1a0>)
 800cf80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf84:	601a      	str	r2, [r3, #0]
 800cf86:	f3bf 8f4f 	dsb	sy
 800cf8a:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800cf8e:	f001 ff01 	bl	800ed94 <uxTaskResetEventItemValue>
 800cf92:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800cf94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d11a      	bne.n	800cfd4 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800cf9e:	f002 fc13 	bl	800f7c8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800cfa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800cfa8:	683a      	ldr	r2, [r7, #0]
 800cfaa:	68b9      	ldr	r1, [r7, #8]
 800cfac:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cfae:	f000 f8b6 	bl	800d11e <prvTestWaitCondition>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d009      	beq.n	800cfcc <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d006      	beq.n	800cfcc <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800cfbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfc0:	681a      	ldr	r2, [r3, #0]
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	43db      	mvns	r3, r3
 800cfc6:	401a      	ands	r2, r3
 800cfc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfca:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800cfd0:	f002 fc2c 	bl	800f82c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800cfd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfd6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800cfda:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800cfdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3740      	adds	r7, #64	@ 0x40
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	e000ed04 	.word	0xe000ed04

0800cfec <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b08e      	sub	sp, #56	@ 0x38
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800cff6:	2300      	movs	r3, #0
 800cff8:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800cffe:	2300      	movs	r3, #0
 800d000:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d10b      	bne.n	800d020 <xEventGroupSetBits+0x34>
	__asm volatile
 800d008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d00c:	f383 8811 	msr	BASEPRI, r3
 800d010:	f3bf 8f6f 	isb	sy
 800d014:	f3bf 8f4f 	dsb	sy
 800d018:	613b      	str	r3, [r7, #16]
}
 800d01a:	bf00      	nop
 800d01c:	bf00      	nop
 800d01e:	e7fd      	b.n	800d01c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d026:	d30b      	bcc.n	800d040 <xEventGroupSetBits+0x54>
	__asm volatile
 800d028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d02c:	f383 8811 	msr	BASEPRI, r3
 800d030:	f3bf 8f6f 	isb	sy
 800d034:	f3bf 8f4f 	dsb	sy
 800d038:	60fb      	str	r3, [r7, #12]
}
 800d03a:	bf00      	nop
 800d03c:	bf00      	nop
 800d03e:	e7fd      	b.n	800d03c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800d040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d042:	3304      	adds	r3, #4
 800d044:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d048:	3308      	adds	r3, #8
 800d04a:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800d04c:	f001 f98c 	bl	800e368 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800d050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d052:	68db      	ldr	r3, [r3, #12]
 800d054:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800d056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d058:	681a      	ldr	r2, [r3, #0]
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	431a      	orrs	r2, r3
 800d05e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d060:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800d062:	e03c      	b.n	800d0de <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800d064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d066:	685b      	ldr	r3, [r3, #4]
 800d068:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800d06a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800d070:	2300      	movs	r3, #0
 800d072:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800d074:	69bb      	ldr	r3, [r7, #24]
 800d076:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800d07a:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800d07c:	69bb      	ldr	r3, [r7, #24]
 800d07e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d082:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d108      	bne.n	800d0a0 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800d08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d090:	681a      	ldr	r2, [r3, #0]
 800d092:	69bb      	ldr	r3, [r7, #24]
 800d094:	4013      	ands	r3, r2
 800d096:	2b00      	cmp	r3, #0
 800d098:	d00b      	beq.n	800d0b2 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800d09a:	2301      	movs	r3, #1
 800d09c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d09e:	e008      	b.n	800d0b2 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800d0a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0a2:	681a      	ldr	r2, [r3, #0]
 800d0a4:	69bb      	ldr	r3, [r7, #24]
 800d0a6:	4013      	ands	r3, r2
 800d0a8:	69ba      	ldr	r2, [r7, #24]
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d101      	bne.n	800d0b2 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800d0b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d010      	beq.n	800d0da <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d003      	beq.n	800d0ca <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800d0c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d0c4:	69bb      	ldr	r3, [r7, #24]
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800d0ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800d0d2:	4619      	mov	r1, r3
 800d0d4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d0d6:	f001 fc0f 	bl	800e8f8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800d0da:	69fb      	ldr	r3, [r7, #28]
 800d0dc:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800d0de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d0e0:	6a3b      	ldr	r3, [r7, #32]
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d1be      	bne.n	800d064 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800d0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0e8:	681a      	ldr	r2, [r3, #0]
 800d0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ec:	43db      	mvns	r3, r3
 800d0ee:	401a      	ands	r2, r3
 800d0f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0f2:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800d0f4:	f001 f946 	bl	800e384 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800d0f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0fa:	681b      	ldr	r3, [r3, #0]
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3738      	adds	r7, #56	@ 0x38
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}

0800d104 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b082      	sub	sp, #8
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
 800d10c:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800d10e:	6839      	ldr	r1, [r7, #0]
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f7ff ff6b 	bl	800cfec <xEventGroupSetBits>
}
 800d116:	bf00      	nop
 800d118:	3708      	adds	r7, #8
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}

0800d11e <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800d11e:	b480      	push	{r7}
 800d120:	b087      	sub	sp, #28
 800d122:	af00      	add	r7, sp, #0
 800d124:	60f8      	str	r0, [r7, #12]
 800d126:	60b9      	str	r1, [r7, #8]
 800d128:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800d12a:	2300      	movs	r3, #0
 800d12c:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d107      	bne.n	800d144 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800d134:	68fa      	ldr	r2, [r7, #12]
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	4013      	ands	r3, r2
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d00a      	beq.n	800d154 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800d13e:	2301      	movs	r3, #1
 800d140:	617b      	str	r3, [r7, #20]
 800d142:	e007      	b.n	800d154 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800d144:	68fa      	ldr	r2, [r7, #12]
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	4013      	ands	r3, r2
 800d14a:	68ba      	ldr	r2, [r7, #8]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d101      	bne.n	800d154 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800d150:	2301      	movs	r3, #1
 800d152:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800d154:	697b      	ldr	r3, [r7, #20]
}
 800d156:	4618      	mov	r0, r3
 800d158:	371c      	adds	r7, #28
 800d15a:	46bd      	mov	sp, r7
 800d15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d160:	4770      	bx	lr
	...

0800d164 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d164:	b580      	push	{r7, lr}
 800d166:	b086      	sub	sp, #24
 800d168:	af00      	add	r7, sp, #0
 800d16a:	60f8      	str	r0, [r7, #12]
 800d16c:	60b9      	str	r1, [r7, #8]
 800d16e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	68ba      	ldr	r2, [r7, #8]
 800d174:	68f9      	ldr	r1, [r7, #12]
 800d176:	4804      	ldr	r0, [pc, #16]	@ (800d188 <xEventGroupSetBitsFromISR+0x24>)
 800d178:	f002 f9d2 	bl	800f520 <xTimerPendFunctionCallFromISR>
 800d17c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800d17e:	697b      	ldr	r3, [r7, #20]
	}
 800d180:	4618      	mov	r0, r3
 800d182:	3718      	adds	r7, #24
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}
 800d188:	0800d105 	.word	0x0800d105

0800d18c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d18c:	b480      	push	{r7}
 800d18e:	b083      	sub	sp, #12
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f103 0208 	add.w	r2, r3, #8
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d1a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f103 0208 	add.w	r2, r3, #8
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f103 0208 	add.w	r2, r3, #8
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d1c0:	bf00      	nop
 800d1c2:	370c      	adds	r7, #12
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ca:	4770      	bx	lr

0800d1cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b083      	sub	sp, #12
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d1da:	bf00      	nop
 800d1dc:	370c      	adds	r7, #12
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e4:	4770      	bx	lr

0800d1e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d1e6:	b480      	push	{r7}
 800d1e8:	b085      	sub	sp, #20
 800d1ea:	af00      	add	r7, sp, #0
 800d1ec:	6078      	str	r0, [r7, #4]
 800d1ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	68fa      	ldr	r2, [r7, #12]
 800d1fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	689a      	ldr	r2, [r3, #8]
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	689b      	ldr	r3, [r3, #8]
 800d208:	683a      	ldr	r2, [r7, #0]
 800d20a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	683a      	ldr	r2, [r7, #0]
 800d210:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	687a      	ldr	r2, [r7, #4]
 800d216:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	1c5a      	adds	r2, r3, #1
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	601a      	str	r2, [r3, #0]
}
 800d222:	bf00      	nop
 800d224:	3714      	adds	r7, #20
 800d226:	46bd      	mov	sp, r7
 800d228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22c:	4770      	bx	lr

0800d22e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d22e:	b480      	push	{r7}
 800d230:	b085      	sub	sp, #20
 800d232:	af00      	add	r7, sp, #0
 800d234:	6078      	str	r0, [r7, #4]
 800d236:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d244:	d103      	bne.n	800d24e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	691b      	ldr	r3, [r3, #16]
 800d24a:	60fb      	str	r3, [r7, #12]
 800d24c:	e00c      	b.n	800d268 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	3308      	adds	r3, #8
 800d252:	60fb      	str	r3, [r7, #12]
 800d254:	e002      	b.n	800d25c <vListInsert+0x2e>
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	685b      	ldr	r3, [r3, #4]
 800d25a:	60fb      	str	r3, [r7, #12]
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	68ba      	ldr	r2, [r7, #8]
 800d264:	429a      	cmp	r2, r3
 800d266:	d2f6      	bcs.n	800d256 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	685a      	ldr	r2, [r3, #4]
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	683a      	ldr	r2, [r7, #0]
 800d276:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	68fa      	ldr	r2, [r7, #12]
 800d27c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	683a      	ldr	r2, [r7, #0]
 800d282:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	687a      	ldr	r2, [r7, #4]
 800d288:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	1c5a      	adds	r2, r3, #1
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	601a      	str	r2, [r3, #0]
}
 800d294:	bf00      	nop
 800d296:	3714      	adds	r7, #20
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr

0800d2a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b085      	sub	sp, #20
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	691b      	ldr	r3, [r3, #16]
 800d2ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	685b      	ldr	r3, [r3, #4]
 800d2b2:	687a      	ldr	r2, [r7, #4]
 800d2b4:	6892      	ldr	r2, [r2, #8]
 800d2b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	689b      	ldr	r3, [r3, #8]
 800d2bc:	687a      	ldr	r2, [r7, #4]
 800d2be:	6852      	ldr	r2, [r2, #4]
 800d2c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	687a      	ldr	r2, [r7, #4]
 800d2c8:	429a      	cmp	r2, r3
 800d2ca:	d103      	bne.n	800d2d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	689a      	ldr	r2, [r3, #8]
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	1e5a      	subs	r2, r3, #1
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3714      	adds	r7, #20
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr

0800d2f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b084      	sub	sp, #16
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d10b      	bne.n	800d320 <xQueueGenericReset+0x2c>
	__asm volatile
 800d308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d30c:	f383 8811 	msr	BASEPRI, r3
 800d310:	f3bf 8f6f 	isb	sy
 800d314:	f3bf 8f4f 	dsb	sy
 800d318:	60bb      	str	r3, [r7, #8]
}
 800d31a:	bf00      	nop
 800d31c:	bf00      	nop
 800d31e:	e7fd      	b.n	800d31c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d320:	f002 fa52 	bl	800f7c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681a      	ldr	r2, [r3, #0]
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d32c:	68f9      	ldr	r1, [r7, #12]
 800d32e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d330:	fb01 f303 	mul.w	r3, r1, r3
 800d334:	441a      	add	r2, r3
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	2200      	movs	r2, #0
 800d33e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	681a      	ldr	r2, [r3, #0]
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	681a      	ldr	r2, [r3, #0]
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d350:	3b01      	subs	r3, #1
 800d352:	68f9      	ldr	r1, [r7, #12]
 800d354:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d356:	fb01 f303 	mul.w	r3, r1, r3
 800d35a:	441a      	add	r2, r3
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	22ff      	movs	r2, #255	@ 0xff
 800d364:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	22ff      	movs	r2, #255	@ 0xff
 800d36c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d114      	bne.n	800d3a0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	691b      	ldr	r3, [r3, #16]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d01a      	beq.n	800d3b4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	3310      	adds	r3, #16
 800d382:	4618      	mov	r0, r3
 800d384:	f001 fa54 	bl	800e830 <xTaskRemoveFromEventList>
 800d388:	4603      	mov	r3, r0
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d012      	beq.n	800d3b4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d38e:	4b0d      	ldr	r3, [pc, #52]	@ (800d3c4 <xQueueGenericReset+0xd0>)
 800d390:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d394:	601a      	str	r2, [r3, #0]
 800d396:	f3bf 8f4f 	dsb	sy
 800d39a:	f3bf 8f6f 	isb	sy
 800d39e:	e009      	b.n	800d3b4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	3310      	adds	r3, #16
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7ff fef1 	bl	800d18c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	3324      	adds	r3, #36	@ 0x24
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f7ff feec 	bl	800d18c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d3b4:	f002 fa3a 	bl	800f82c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d3b8:	2301      	movs	r3, #1
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3710      	adds	r7, #16
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}
 800d3c2:	bf00      	nop
 800d3c4:	e000ed04 	.word	0xe000ed04

0800d3c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b08e      	sub	sp, #56	@ 0x38
 800d3cc:	af02      	add	r7, sp, #8
 800d3ce:	60f8      	str	r0, [r7, #12]
 800d3d0:	60b9      	str	r1, [r7, #8]
 800d3d2:	607a      	str	r2, [r7, #4]
 800d3d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d10b      	bne.n	800d3f4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d3dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3e0:	f383 8811 	msr	BASEPRI, r3
 800d3e4:	f3bf 8f6f 	isb	sy
 800d3e8:	f3bf 8f4f 	dsb	sy
 800d3ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d3ee:	bf00      	nop
 800d3f0:	bf00      	nop
 800d3f2:	e7fd      	b.n	800d3f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d10b      	bne.n	800d412 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d3fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3fe:	f383 8811 	msr	BASEPRI, r3
 800d402:	f3bf 8f6f 	isb	sy
 800d406:	f3bf 8f4f 	dsb	sy
 800d40a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d40c:	bf00      	nop
 800d40e:	bf00      	nop
 800d410:	e7fd      	b.n	800d40e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d002      	beq.n	800d41e <xQueueGenericCreateStatic+0x56>
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d001      	beq.n	800d422 <xQueueGenericCreateStatic+0x5a>
 800d41e:	2301      	movs	r3, #1
 800d420:	e000      	b.n	800d424 <xQueueGenericCreateStatic+0x5c>
 800d422:	2300      	movs	r3, #0
 800d424:	2b00      	cmp	r3, #0
 800d426:	d10b      	bne.n	800d440 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d42c:	f383 8811 	msr	BASEPRI, r3
 800d430:	f3bf 8f6f 	isb	sy
 800d434:	f3bf 8f4f 	dsb	sy
 800d438:	623b      	str	r3, [r7, #32]
}
 800d43a:	bf00      	nop
 800d43c:	bf00      	nop
 800d43e:	e7fd      	b.n	800d43c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d102      	bne.n	800d44c <xQueueGenericCreateStatic+0x84>
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d101      	bne.n	800d450 <xQueueGenericCreateStatic+0x88>
 800d44c:	2301      	movs	r3, #1
 800d44e:	e000      	b.n	800d452 <xQueueGenericCreateStatic+0x8a>
 800d450:	2300      	movs	r3, #0
 800d452:	2b00      	cmp	r3, #0
 800d454:	d10b      	bne.n	800d46e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d45a:	f383 8811 	msr	BASEPRI, r3
 800d45e:	f3bf 8f6f 	isb	sy
 800d462:	f3bf 8f4f 	dsb	sy
 800d466:	61fb      	str	r3, [r7, #28]
}
 800d468:	bf00      	nop
 800d46a:	bf00      	nop
 800d46c:	e7fd      	b.n	800d46a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d46e:	2350      	movs	r3, #80	@ 0x50
 800d470:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	2b50      	cmp	r3, #80	@ 0x50
 800d476:	d00b      	beq.n	800d490 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d47c:	f383 8811 	msr	BASEPRI, r3
 800d480:	f3bf 8f6f 	isb	sy
 800d484:	f3bf 8f4f 	dsb	sy
 800d488:	61bb      	str	r3, [r7, #24]
}
 800d48a:	bf00      	nop
 800d48c:	bf00      	nop
 800d48e:	e7fd      	b.n	800d48c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d490:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d00d      	beq.n	800d4b8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d49e:	2201      	movs	r2, #1
 800d4a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d4a4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d4a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4aa:	9300      	str	r3, [sp, #0]
 800d4ac:	4613      	mov	r3, r2
 800d4ae:	687a      	ldr	r2, [r7, #4]
 800d4b0:	68b9      	ldr	r1, [r7, #8]
 800d4b2:	68f8      	ldr	r0, [r7, #12]
 800d4b4:	f000 f840 	bl	800d538 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d4b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	3730      	adds	r7, #48	@ 0x30
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}

0800d4c2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d4c2:	b580      	push	{r7, lr}
 800d4c4:	b08a      	sub	sp, #40	@ 0x28
 800d4c6:	af02      	add	r7, sp, #8
 800d4c8:	60f8      	str	r0, [r7, #12]
 800d4ca:	60b9      	str	r1, [r7, #8]
 800d4cc:	4613      	mov	r3, r2
 800d4ce:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d10b      	bne.n	800d4ee <xQueueGenericCreate+0x2c>
	__asm volatile
 800d4d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4da:	f383 8811 	msr	BASEPRI, r3
 800d4de:	f3bf 8f6f 	isb	sy
 800d4e2:	f3bf 8f4f 	dsb	sy
 800d4e6:	613b      	str	r3, [r7, #16]
}
 800d4e8:	bf00      	nop
 800d4ea:	bf00      	nop
 800d4ec:	e7fd      	b.n	800d4ea <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	68ba      	ldr	r2, [r7, #8]
 800d4f2:	fb02 f303 	mul.w	r3, r2, r3
 800d4f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d4f8:	69fb      	ldr	r3, [r7, #28]
 800d4fa:	3350      	adds	r3, #80	@ 0x50
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f002 fa85 	bl	800fa0c <pvPortMalloc>
 800d502:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d504:	69bb      	ldr	r3, [r7, #24]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d011      	beq.n	800d52e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d50a:	69bb      	ldr	r3, [r7, #24]
 800d50c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	3350      	adds	r3, #80	@ 0x50
 800d512:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d514:	69bb      	ldr	r3, [r7, #24]
 800d516:	2200      	movs	r2, #0
 800d518:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d51c:	79fa      	ldrb	r2, [r7, #7]
 800d51e:	69bb      	ldr	r3, [r7, #24]
 800d520:	9300      	str	r3, [sp, #0]
 800d522:	4613      	mov	r3, r2
 800d524:	697a      	ldr	r2, [r7, #20]
 800d526:	68b9      	ldr	r1, [r7, #8]
 800d528:	68f8      	ldr	r0, [r7, #12]
 800d52a:	f000 f805 	bl	800d538 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d52e:	69bb      	ldr	r3, [r7, #24]
	}
 800d530:	4618      	mov	r0, r3
 800d532:	3720      	adds	r7, #32
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b084      	sub	sp, #16
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	60f8      	str	r0, [r7, #12]
 800d540:	60b9      	str	r1, [r7, #8]
 800d542:	607a      	str	r2, [r7, #4]
 800d544:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d103      	bne.n	800d554 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d54c:	69bb      	ldr	r3, [r7, #24]
 800d54e:	69ba      	ldr	r2, [r7, #24]
 800d550:	601a      	str	r2, [r3, #0]
 800d552:	e002      	b.n	800d55a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d554:	69bb      	ldr	r3, [r7, #24]
 800d556:	687a      	ldr	r2, [r7, #4]
 800d558:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d55a:	69bb      	ldr	r3, [r7, #24]
 800d55c:	68fa      	ldr	r2, [r7, #12]
 800d55e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d560:	69bb      	ldr	r3, [r7, #24]
 800d562:	68ba      	ldr	r2, [r7, #8]
 800d564:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d566:	2101      	movs	r1, #1
 800d568:	69b8      	ldr	r0, [r7, #24]
 800d56a:	f7ff fec3 	bl	800d2f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	78fa      	ldrb	r2, [r7, #3]
 800d572:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d576:	bf00      	nop
 800d578:	3710      	adds	r7, #16
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}
	...

0800d580 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b08e      	sub	sp, #56	@ 0x38
 800d584:	af00      	add	r7, sp, #0
 800d586:	60f8      	str	r0, [r7, #12]
 800d588:	60b9      	str	r1, [r7, #8]
 800d58a:	607a      	str	r2, [r7, #4]
 800d58c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d58e:	2300      	movs	r3, #0
 800d590:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d10b      	bne.n	800d5b4 <xQueueGenericSend+0x34>
	__asm volatile
 800d59c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5a0:	f383 8811 	msr	BASEPRI, r3
 800d5a4:	f3bf 8f6f 	isb	sy
 800d5a8:	f3bf 8f4f 	dsb	sy
 800d5ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d5ae:	bf00      	nop
 800d5b0:	bf00      	nop
 800d5b2:	e7fd      	b.n	800d5b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d103      	bne.n	800d5c2 <xQueueGenericSend+0x42>
 800d5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d101      	bne.n	800d5c6 <xQueueGenericSend+0x46>
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	e000      	b.n	800d5c8 <xQueueGenericSend+0x48>
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d10b      	bne.n	800d5e4 <xQueueGenericSend+0x64>
	__asm volatile
 800d5cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5d0:	f383 8811 	msr	BASEPRI, r3
 800d5d4:	f3bf 8f6f 	isb	sy
 800d5d8:	f3bf 8f4f 	dsb	sy
 800d5dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d5de:	bf00      	nop
 800d5e0:	bf00      	nop
 800d5e2:	e7fd      	b.n	800d5e0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	2b02      	cmp	r3, #2
 800d5e8:	d103      	bne.n	800d5f2 <xQueueGenericSend+0x72>
 800d5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5ee:	2b01      	cmp	r3, #1
 800d5f0:	d101      	bne.n	800d5f6 <xQueueGenericSend+0x76>
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	e000      	b.n	800d5f8 <xQueueGenericSend+0x78>
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d10b      	bne.n	800d614 <xQueueGenericSend+0x94>
	__asm volatile
 800d5fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d600:	f383 8811 	msr	BASEPRI, r3
 800d604:	f3bf 8f6f 	isb	sy
 800d608:	f3bf 8f4f 	dsb	sy
 800d60c:	623b      	str	r3, [r7, #32]
}
 800d60e:	bf00      	nop
 800d610:	bf00      	nop
 800d612:	e7fd      	b.n	800d610 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d614:	f001 fb30 	bl	800ec78 <xTaskGetSchedulerState>
 800d618:	4603      	mov	r3, r0
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d102      	bne.n	800d624 <xQueueGenericSend+0xa4>
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d101      	bne.n	800d628 <xQueueGenericSend+0xa8>
 800d624:	2301      	movs	r3, #1
 800d626:	e000      	b.n	800d62a <xQueueGenericSend+0xaa>
 800d628:	2300      	movs	r3, #0
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d10b      	bne.n	800d646 <xQueueGenericSend+0xc6>
	__asm volatile
 800d62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d632:	f383 8811 	msr	BASEPRI, r3
 800d636:	f3bf 8f6f 	isb	sy
 800d63a:	f3bf 8f4f 	dsb	sy
 800d63e:	61fb      	str	r3, [r7, #28]
}
 800d640:	bf00      	nop
 800d642:	bf00      	nop
 800d644:	e7fd      	b.n	800d642 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d646:	f002 f8bf 	bl	800f7c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d64c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d652:	429a      	cmp	r2, r3
 800d654:	d302      	bcc.n	800d65c <xQueueGenericSend+0xdc>
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	2b02      	cmp	r3, #2
 800d65a:	d129      	bne.n	800d6b0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d65c:	683a      	ldr	r2, [r7, #0]
 800d65e:	68b9      	ldr	r1, [r7, #8]
 800d660:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d662:	f000 facf 	bl	800dc04 <prvCopyDataToQueue>
 800d666:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d66a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d010      	beq.n	800d692 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d672:	3324      	adds	r3, #36	@ 0x24
 800d674:	4618      	mov	r0, r3
 800d676:	f001 f8db 	bl	800e830 <xTaskRemoveFromEventList>
 800d67a:	4603      	mov	r3, r0
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d013      	beq.n	800d6a8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d680:	4b3f      	ldr	r3, [pc, #252]	@ (800d780 <xQueueGenericSend+0x200>)
 800d682:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d686:	601a      	str	r2, [r3, #0]
 800d688:	f3bf 8f4f 	dsb	sy
 800d68c:	f3bf 8f6f 	isb	sy
 800d690:	e00a      	b.n	800d6a8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d694:	2b00      	cmp	r3, #0
 800d696:	d007      	beq.n	800d6a8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d698:	4b39      	ldr	r3, [pc, #228]	@ (800d780 <xQueueGenericSend+0x200>)
 800d69a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d69e:	601a      	str	r2, [r3, #0]
 800d6a0:	f3bf 8f4f 	dsb	sy
 800d6a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d6a8:	f002 f8c0 	bl	800f82c <vPortExitCritical>
				return pdPASS;
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	e063      	b.n	800d778 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d103      	bne.n	800d6be <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d6b6:	f002 f8b9 	bl	800f82c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	e05c      	b.n	800d778 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d6be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d106      	bne.n	800d6d2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d6c4:	f107 0314 	add.w	r3, r7, #20
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f001 f979 	bl	800e9c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d6d2:	f002 f8ab 	bl	800f82c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d6d6:	f000 fe47 	bl	800e368 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d6da:	f002 f875 	bl	800f7c8 <vPortEnterCritical>
 800d6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d6e4:	b25b      	sxtb	r3, r3
 800d6e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ea:	d103      	bne.n	800d6f4 <xQueueGenericSend+0x174>
 800d6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d6f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d6fa:	b25b      	sxtb	r3, r3
 800d6fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d700:	d103      	bne.n	800d70a <xQueueGenericSend+0x18a>
 800d702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d704:	2200      	movs	r2, #0
 800d706:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d70a:	f002 f88f 	bl	800f82c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d70e:	1d3a      	adds	r2, r7, #4
 800d710:	f107 0314 	add.w	r3, r7, #20
 800d714:	4611      	mov	r1, r2
 800d716:	4618      	mov	r0, r3
 800d718:	f001 f968 	bl	800e9ec <xTaskCheckForTimeOut>
 800d71c:	4603      	mov	r3, r0
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d124      	bne.n	800d76c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d722:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d724:	f000 fb66 	bl	800ddf4 <prvIsQueueFull>
 800d728:	4603      	mov	r3, r0
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d018      	beq.n	800d760 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d72e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d730:	3310      	adds	r3, #16
 800d732:	687a      	ldr	r2, [r7, #4]
 800d734:	4611      	mov	r1, r2
 800d736:	4618      	mov	r0, r3
 800d738:	f000 ffea 	bl	800e710 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d73c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d73e:	f000 faf1 	bl	800dd24 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d742:	f000 fe1f 	bl	800e384 <xTaskResumeAll>
 800d746:	4603      	mov	r3, r0
 800d748:	2b00      	cmp	r3, #0
 800d74a:	f47f af7c 	bne.w	800d646 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d74e:	4b0c      	ldr	r3, [pc, #48]	@ (800d780 <xQueueGenericSend+0x200>)
 800d750:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d754:	601a      	str	r2, [r3, #0]
 800d756:	f3bf 8f4f 	dsb	sy
 800d75a:	f3bf 8f6f 	isb	sy
 800d75e:	e772      	b.n	800d646 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d760:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d762:	f000 fadf 	bl	800dd24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d766:	f000 fe0d 	bl	800e384 <xTaskResumeAll>
 800d76a:	e76c      	b.n	800d646 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d76c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d76e:	f000 fad9 	bl	800dd24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d772:	f000 fe07 	bl	800e384 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d776:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d778:	4618      	mov	r0, r3
 800d77a:	3738      	adds	r7, #56	@ 0x38
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}
 800d780:	e000ed04 	.word	0xe000ed04

0800d784 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b090      	sub	sp, #64	@ 0x40
 800d788:	af00      	add	r7, sp, #0
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	60b9      	str	r1, [r7, #8]
 800d78e:	607a      	str	r2, [r7, #4]
 800d790:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d10b      	bne.n	800d7b4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d79c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7a0:	f383 8811 	msr	BASEPRI, r3
 800d7a4:	f3bf 8f6f 	isb	sy
 800d7a8:	f3bf 8f4f 	dsb	sy
 800d7ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d7ae:	bf00      	nop
 800d7b0:	bf00      	nop
 800d7b2:	e7fd      	b.n	800d7b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d103      	bne.n	800d7c2 <xQueueGenericSendFromISR+0x3e>
 800d7ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d101      	bne.n	800d7c6 <xQueueGenericSendFromISR+0x42>
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	e000      	b.n	800d7c8 <xQueueGenericSendFromISR+0x44>
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d10b      	bne.n	800d7e4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d7cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7d0:	f383 8811 	msr	BASEPRI, r3
 800d7d4:	f3bf 8f6f 	isb	sy
 800d7d8:	f3bf 8f4f 	dsb	sy
 800d7dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d7de:	bf00      	nop
 800d7e0:	bf00      	nop
 800d7e2:	e7fd      	b.n	800d7e0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	2b02      	cmp	r3, #2
 800d7e8:	d103      	bne.n	800d7f2 <xQueueGenericSendFromISR+0x6e>
 800d7ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7ee:	2b01      	cmp	r3, #1
 800d7f0:	d101      	bne.n	800d7f6 <xQueueGenericSendFromISR+0x72>
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	e000      	b.n	800d7f8 <xQueueGenericSendFromISR+0x74>
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d10b      	bne.n	800d814 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d7fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d800:	f383 8811 	msr	BASEPRI, r3
 800d804:	f3bf 8f6f 	isb	sy
 800d808:	f3bf 8f4f 	dsb	sy
 800d80c:	623b      	str	r3, [r7, #32]
}
 800d80e:	bf00      	nop
 800d810:	bf00      	nop
 800d812:	e7fd      	b.n	800d810 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d814:	f002 f8b8 	bl	800f988 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d818:	f3ef 8211 	mrs	r2, BASEPRI
 800d81c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d820:	f383 8811 	msr	BASEPRI, r3
 800d824:	f3bf 8f6f 	isb	sy
 800d828:	f3bf 8f4f 	dsb	sy
 800d82c:	61fa      	str	r2, [r7, #28]
 800d82e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d830:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d832:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d836:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d83a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d83c:	429a      	cmp	r2, r3
 800d83e:	d302      	bcc.n	800d846 <xQueueGenericSendFromISR+0xc2>
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	2b02      	cmp	r3, #2
 800d844:	d12f      	bne.n	800d8a6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d848:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d84c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d854:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d856:	683a      	ldr	r2, [r7, #0]
 800d858:	68b9      	ldr	r1, [r7, #8]
 800d85a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d85c:	f000 f9d2 	bl	800dc04 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d860:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d868:	d112      	bne.n	800d890 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d86a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d86c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d016      	beq.n	800d8a0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d874:	3324      	adds	r3, #36	@ 0x24
 800d876:	4618      	mov	r0, r3
 800d878:	f000 ffda 	bl	800e830 <xTaskRemoveFromEventList>
 800d87c:	4603      	mov	r3, r0
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d00e      	beq.n	800d8a0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d00b      	beq.n	800d8a0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2201      	movs	r2, #1
 800d88c:	601a      	str	r2, [r3, #0]
 800d88e:	e007      	b.n	800d8a0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d890:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d894:	3301      	adds	r3, #1
 800d896:	b2db      	uxtb	r3, r3
 800d898:	b25a      	sxtb	r2, r3
 800d89a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d89c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d8a4:	e001      	b.n	800d8aa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d8aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8ac:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d8b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d8b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	3740      	adds	r7, #64	@ 0x40
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}

0800d8c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b08c      	sub	sp, #48	@ 0x30
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	60f8      	str	r0, [r7, #12]
 800d8c8:	60b9      	str	r1, [r7, #8]
 800d8ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d10b      	bne.n	800d8f2 <xQueueReceive+0x32>
	__asm volatile
 800d8da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8de:	f383 8811 	msr	BASEPRI, r3
 800d8e2:	f3bf 8f6f 	isb	sy
 800d8e6:	f3bf 8f4f 	dsb	sy
 800d8ea:	623b      	str	r3, [r7, #32]
}
 800d8ec:	bf00      	nop
 800d8ee:	bf00      	nop
 800d8f0:	e7fd      	b.n	800d8ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d103      	bne.n	800d900 <xQueueReceive+0x40>
 800d8f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d101      	bne.n	800d904 <xQueueReceive+0x44>
 800d900:	2301      	movs	r3, #1
 800d902:	e000      	b.n	800d906 <xQueueReceive+0x46>
 800d904:	2300      	movs	r3, #0
 800d906:	2b00      	cmp	r3, #0
 800d908:	d10b      	bne.n	800d922 <xQueueReceive+0x62>
	__asm volatile
 800d90a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d90e:	f383 8811 	msr	BASEPRI, r3
 800d912:	f3bf 8f6f 	isb	sy
 800d916:	f3bf 8f4f 	dsb	sy
 800d91a:	61fb      	str	r3, [r7, #28]
}
 800d91c:	bf00      	nop
 800d91e:	bf00      	nop
 800d920:	e7fd      	b.n	800d91e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d922:	f001 f9a9 	bl	800ec78 <xTaskGetSchedulerState>
 800d926:	4603      	mov	r3, r0
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d102      	bne.n	800d932 <xQueueReceive+0x72>
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d101      	bne.n	800d936 <xQueueReceive+0x76>
 800d932:	2301      	movs	r3, #1
 800d934:	e000      	b.n	800d938 <xQueueReceive+0x78>
 800d936:	2300      	movs	r3, #0
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d10b      	bne.n	800d954 <xQueueReceive+0x94>
	__asm volatile
 800d93c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d940:	f383 8811 	msr	BASEPRI, r3
 800d944:	f3bf 8f6f 	isb	sy
 800d948:	f3bf 8f4f 	dsb	sy
 800d94c:	61bb      	str	r3, [r7, #24]
}
 800d94e:	bf00      	nop
 800d950:	bf00      	nop
 800d952:	e7fd      	b.n	800d950 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d954:	f001 ff38 	bl	800f7c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d95a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d95c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d960:	2b00      	cmp	r3, #0
 800d962:	d01f      	beq.n	800d9a4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d964:	68b9      	ldr	r1, [r7, #8]
 800d966:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d968:	f000 f9b6 	bl	800dcd8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d96c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d96e:	1e5a      	subs	r2, r3, #1
 800d970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d972:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d976:	691b      	ldr	r3, [r3, #16]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d00f      	beq.n	800d99c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d97c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d97e:	3310      	adds	r3, #16
 800d980:	4618      	mov	r0, r3
 800d982:	f000 ff55 	bl	800e830 <xTaskRemoveFromEventList>
 800d986:	4603      	mov	r3, r0
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d007      	beq.n	800d99c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d98c:	4b3c      	ldr	r3, [pc, #240]	@ (800da80 <xQueueReceive+0x1c0>)
 800d98e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d992:	601a      	str	r2, [r3, #0]
 800d994:	f3bf 8f4f 	dsb	sy
 800d998:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d99c:	f001 ff46 	bl	800f82c <vPortExitCritical>
				return pdPASS;
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	e069      	b.n	800da78 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d103      	bne.n	800d9b2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d9aa:	f001 ff3f 	bl	800f82c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	e062      	b.n	800da78 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d9b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d106      	bne.n	800d9c6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d9b8:	f107 0310 	add.w	r3, r7, #16
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f000 ffff 	bl	800e9c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d9c6:	f001 ff31 	bl	800f82c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d9ca:	f000 fccd 	bl	800e368 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d9ce:	f001 fefb 	bl	800f7c8 <vPortEnterCritical>
 800d9d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d9d8:	b25b      	sxtb	r3, r3
 800d9da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9de:	d103      	bne.n	800d9e8 <xQueueReceive+0x128>
 800d9e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d9e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d9ee:	b25b      	sxtb	r3, r3
 800d9f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9f4:	d103      	bne.n	800d9fe <xQueueReceive+0x13e>
 800d9f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d9fe:	f001 ff15 	bl	800f82c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da02:	1d3a      	adds	r2, r7, #4
 800da04:	f107 0310 	add.w	r3, r7, #16
 800da08:	4611      	mov	r1, r2
 800da0a:	4618      	mov	r0, r3
 800da0c:	f000 ffee 	bl	800e9ec <xTaskCheckForTimeOut>
 800da10:	4603      	mov	r3, r0
 800da12:	2b00      	cmp	r3, #0
 800da14:	d123      	bne.n	800da5e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da18:	f000 f9d6 	bl	800ddc8 <prvIsQueueEmpty>
 800da1c:	4603      	mov	r3, r0
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d017      	beq.n	800da52 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800da22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da24:	3324      	adds	r3, #36	@ 0x24
 800da26:	687a      	ldr	r2, [r7, #4]
 800da28:	4611      	mov	r1, r2
 800da2a:	4618      	mov	r0, r3
 800da2c:	f000 fe70 	bl	800e710 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800da30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da32:	f000 f977 	bl	800dd24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800da36:	f000 fca5 	bl	800e384 <xTaskResumeAll>
 800da3a:	4603      	mov	r3, r0
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d189      	bne.n	800d954 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800da40:	4b0f      	ldr	r3, [pc, #60]	@ (800da80 <xQueueReceive+0x1c0>)
 800da42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da46:	601a      	str	r2, [r3, #0]
 800da48:	f3bf 8f4f 	dsb	sy
 800da4c:	f3bf 8f6f 	isb	sy
 800da50:	e780      	b.n	800d954 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800da52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da54:	f000 f966 	bl	800dd24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da58:	f000 fc94 	bl	800e384 <xTaskResumeAll>
 800da5c:	e77a      	b.n	800d954 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800da5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da60:	f000 f960 	bl	800dd24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da64:	f000 fc8e 	bl	800e384 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da6a:	f000 f9ad 	bl	800ddc8 <prvIsQueueEmpty>
 800da6e:	4603      	mov	r3, r0
 800da70:	2b00      	cmp	r3, #0
 800da72:	f43f af6f 	beq.w	800d954 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800da76:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3730      	adds	r7, #48	@ 0x30
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}
 800da80:	e000ed04 	.word	0xe000ed04

0800da84 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b08e      	sub	sp, #56	@ 0x38
 800da88:	af00      	add	r7, sp, #0
 800da8a:	60f8      	str	r0, [r7, #12]
 800da8c:	60b9      	str	r1, [r7, #8]
 800da8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800da94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da96:	2b00      	cmp	r3, #0
 800da98:	d10b      	bne.n	800dab2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800da9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da9e:	f383 8811 	msr	BASEPRI, r3
 800daa2:	f3bf 8f6f 	isb	sy
 800daa6:	f3bf 8f4f 	dsb	sy
 800daaa:	623b      	str	r3, [r7, #32]
}
 800daac:	bf00      	nop
 800daae:	bf00      	nop
 800dab0:	e7fd      	b.n	800daae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d103      	bne.n	800dac0 <xQueueReceiveFromISR+0x3c>
 800dab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d101      	bne.n	800dac4 <xQueueReceiveFromISR+0x40>
 800dac0:	2301      	movs	r3, #1
 800dac2:	e000      	b.n	800dac6 <xQueueReceiveFromISR+0x42>
 800dac4:	2300      	movs	r3, #0
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d10b      	bne.n	800dae2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800daca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dace:	f383 8811 	msr	BASEPRI, r3
 800dad2:	f3bf 8f6f 	isb	sy
 800dad6:	f3bf 8f4f 	dsb	sy
 800dada:	61fb      	str	r3, [r7, #28]
}
 800dadc:	bf00      	nop
 800dade:	bf00      	nop
 800dae0:	e7fd      	b.n	800dade <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dae2:	f001 ff51 	bl	800f988 <vPortValidateInterruptPriority>
	__asm volatile
 800dae6:	f3ef 8211 	mrs	r2, BASEPRI
 800daea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daee:	f383 8811 	msr	BASEPRI, r3
 800daf2:	f3bf 8f6f 	isb	sy
 800daf6:	f3bf 8f4f 	dsb	sy
 800dafa:	61ba      	str	r2, [r7, #24]
 800dafc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dafe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db00:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db06:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d02f      	beq.n	800db6e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800db0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800db14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800db18:	68b9      	ldr	r1, [r7, #8]
 800db1a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800db1c:	f000 f8dc 	bl	800dcd8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800db20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db22:	1e5a      	subs	r2, r3, #1
 800db24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db26:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800db28:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800db2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db30:	d112      	bne.n	800db58 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db34:	691b      	ldr	r3, [r3, #16]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d016      	beq.n	800db68 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db3c:	3310      	adds	r3, #16
 800db3e:	4618      	mov	r0, r3
 800db40:	f000 fe76 	bl	800e830 <xTaskRemoveFromEventList>
 800db44:	4603      	mov	r3, r0
 800db46:	2b00      	cmp	r3, #0
 800db48:	d00e      	beq.n	800db68 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d00b      	beq.n	800db68 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2201      	movs	r2, #1
 800db54:	601a      	str	r2, [r3, #0]
 800db56:	e007      	b.n	800db68 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800db58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db5c:	3301      	adds	r3, #1
 800db5e:	b2db      	uxtb	r3, r3
 800db60:	b25a      	sxtb	r2, r3
 800db62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800db68:	2301      	movs	r3, #1
 800db6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800db6c:	e001      	b.n	800db72 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800db6e:	2300      	movs	r3, #0
 800db70:	637b      	str	r3, [r7, #52]	@ 0x34
 800db72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db74:	613b      	str	r3, [r7, #16]
	__asm volatile
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	f383 8811 	msr	BASEPRI, r3
}
 800db7c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800db7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800db80:	4618      	mov	r0, r3
 800db82:	3738      	adds	r7, #56	@ 0x38
 800db84:	46bd      	mov	sp, r7
 800db86:	bd80      	pop	{r7, pc}

0800db88 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b084      	sub	sp, #16
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d10b      	bne.n	800dbae <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800db96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db9a:	f383 8811 	msr	BASEPRI, r3
 800db9e:	f3bf 8f6f 	isb	sy
 800dba2:	f3bf 8f4f 	dsb	sy
 800dba6:	60bb      	str	r3, [r7, #8]
}
 800dba8:	bf00      	nop
 800dbaa:	bf00      	nop
 800dbac:	e7fd      	b.n	800dbaa <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800dbae:	f001 fe0b 	bl	800f7c8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbb6:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800dbb8:	f001 fe38 	bl	800f82c <vPortExitCritical>

	return uxReturn;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3710      	adds	r7, #16
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}

0800dbc6 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800dbc6:	b480      	push	{r7}
 800dbc8:	b087      	sub	sp, #28
 800dbca:	af00      	add	r7, sp, #0
 800dbcc:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d10b      	bne.n	800dbf0 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 800dbd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbdc:	f383 8811 	msr	BASEPRI, r3
 800dbe0:	f3bf 8f6f 	isb	sy
 800dbe4:	f3bf 8f4f 	dsb	sy
 800dbe8:	60fb      	str	r3, [r7, #12]
}
 800dbea:	bf00      	nop
 800dbec:	bf00      	nop
 800dbee:	e7fd      	b.n	800dbec <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800dbf0:	697b      	ldr	r3, [r7, #20]
 800dbf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbf4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800dbf6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	371c      	adds	r7, #28
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc02:	4770      	bx	lr

0800dc04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b086      	sub	sp, #24
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	60f8      	str	r0, [r7, #12]
 800dc0c:	60b9      	str	r1, [r7, #8]
 800dc0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dc10:	2300      	movs	r3, #0
 800dc12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d10d      	bne.n	800dc3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d14d      	bne.n	800dcc6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	689b      	ldr	r3, [r3, #8]
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f001 f840 	bl	800ecb4 <xTaskPriorityDisinherit>
 800dc34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	2200      	movs	r2, #0
 800dc3a:	609a      	str	r2, [r3, #8]
 800dc3c:	e043      	b.n	800dcc6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d119      	bne.n	800dc78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	6858      	ldr	r0, [r3, #4]
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc4c:	461a      	mov	r2, r3
 800dc4e:	68b9      	ldr	r1, [r7, #8]
 800dc50:	f003 fe41 	bl	80118d6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	685a      	ldr	r2, [r3, #4]
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc5c:	441a      	add	r2, r3
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	685a      	ldr	r2, [r3, #4]
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	689b      	ldr	r3, [r3, #8]
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d32b      	bcc.n	800dcc6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	681a      	ldr	r2, [r3, #0]
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	605a      	str	r2, [r3, #4]
 800dc76:	e026      	b.n	800dcc6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	68d8      	ldr	r0, [r3, #12]
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc80:	461a      	mov	r2, r3
 800dc82:	68b9      	ldr	r1, [r7, #8]
 800dc84:	f003 fe27 	bl	80118d6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	68da      	ldr	r2, [r3, #12]
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc90:	425b      	negs	r3, r3
 800dc92:	441a      	add	r2, r3
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	68da      	ldr	r2, [r3, #12]
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	429a      	cmp	r2, r3
 800dca2:	d207      	bcs.n	800dcb4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	689a      	ldr	r2, [r3, #8]
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcac:	425b      	negs	r3, r3
 800dcae:	441a      	add	r2, r3
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2b02      	cmp	r3, #2
 800dcb8:	d105      	bne.n	800dcc6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d002      	beq.n	800dcc6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	3b01      	subs	r3, #1
 800dcc4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	1c5a      	adds	r2, r3, #1
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800dcce:	697b      	ldr	r3, [r7, #20]
}
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	3718      	adds	r7, #24
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}

0800dcd8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b082      	sub	sp, #8
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d018      	beq.n	800dd1c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	68da      	ldr	r2, [r3, #12]
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcf2:	441a      	add	r2, r3
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	68da      	ldr	r2, [r3, #12]
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	689b      	ldr	r3, [r3, #8]
 800dd00:	429a      	cmp	r2, r3
 800dd02:	d303      	bcc.n	800dd0c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681a      	ldr	r2, [r3, #0]
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	68d9      	ldr	r1, [r3, #12]
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd14:	461a      	mov	r2, r3
 800dd16:	6838      	ldr	r0, [r7, #0]
 800dd18:	f003 fddd 	bl	80118d6 <memcpy>
	}
}
 800dd1c:	bf00      	nop
 800dd1e:	3708      	adds	r7, #8
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}

0800dd24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b084      	sub	sp, #16
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dd2c:	f001 fd4c 	bl	800f7c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dd36:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd38:	e011      	b.n	800dd5e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d012      	beq.n	800dd68 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	3324      	adds	r3, #36	@ 0x24
 800dd46:	4618      	mov	r0, r3
 800dd48:	f000 fd72 	bl	800e830 <xTaskRemoveFromEventList>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d001      	beq.n	800dd56 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dd52:	f000 feaf 	bl	800eab4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dd56:	7bfb      	ldrb	r3, [r7, #15]
 800dd58:	3b01      	subs	r3, #1
 800dd5a:	b2db      	uxtb	r3, r3
 800dd5c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	dce9      	bgt.n	800dd3a <prvUnlockQueue+0x16>
 800dd66:	e000      	b.n	800dd6a <prvUnlockQueue+0x46>
					break;
 800dd68:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	22ff      	movs	r2, #255	@ 0xff
 800dd6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800dd72:	f001 fd5b 	bl	800f82c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dd76:	f001 fd27 	bl	800f7c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dd80:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd82:	e011      	b.n	800dda8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	691b      	ldr	r3, [r3, #16]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d012      	beq.n	800ddb2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	3310      	adds	r3, #16
 800dd90:	4618      	mov	r0, r3
 800dd92:	f000 fd4d 	bl	800e830 <xTaskRemoveFromEventList>
 800dd96:	4603      	mov	r3, r0
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d001      	beq.n	800dda0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dd9c:	f000 fe8a 	bl	800eab4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dda0:	7bbb      	ldrb	r3, [r7, #14]
 800dda2:	3b01      	subs	r3, #1
 800dda4:	b2db      	uxtb	r3, r3
 800dda6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dda8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	dce9      	bgt.n	800dd84 <prvUnlockQueue+0x60>
 800ddb0:	e000      	b.n	800ddb4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ddb2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	22ff      	movs	r2, #255	@ 0xff
 800ddb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ddbc:	f001 fd36 	bl	800f82c <vPortExitCritical>
}
 800ddc0:	bf00      	nop
 800ddc2:	3710      	adds	r7, #16
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b084      	sub	sp, #16
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ddd0:	f001 fcfa 	bl	800f7c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d102      	bne.n	800dde2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dddc:	2301      	movs	r3, #1
 800ddde:	60fb      	str	r3, [r7, #12]
 800dde0:	e001      	b.n	800dde6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dde2:	2300      	movs	r3, #0
 800dde4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dde6:	f001 fd21 	bl	800f82c <vPortExitCritical>

	return xReturn;
 800ddea:	68fb      	ldr	r3, [r7, #12]
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	3710      	adds	r7, #16
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}

0800ddf4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b084      	sub	sp, #16
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ddfc:	f001 fce4 	bl	800f7c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de08:	429a      	cmp	r2, r3
 800de0a:	d102      	bne.n	800de12 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800de0c:	2301      	movs	r3, #1
 800de0e:	60fb      	str	r3, [r7, #12]
 800de10:	e001      	b.n	800de16 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800de12:	2300      	movs	r3, #0
 800de14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800de16:	f001 fd09 	bl	800f82c <vPortExitCritical>

	return xReturn;
 800de1a:	68fb      	ldr	r3, [r7, #12]
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	3710      	adds	r7, #16
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}

0800de24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800de24:	b480      	push	{r7}
 800de26:	b085      	sub	sp, #20
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de2e:	2300      	movs	r3, #0
 800de30:	60fb      	str	r3, [r7, #12]
 800de32:	e014      	b.n	800de5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800de34:	4a0f      	ldr	r2, [pc, #60]	@ (800de74 <vQueueAddToRegistry+0x50>)
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d10b      	bne.n	800de58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800de40:	490c      	ldr	r1, [pc, #48]	@ (800de74 <vQueueAddToRegistry+0x50>)
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	683a      	ldr	r2, [r7, #0]
 800de46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800de4a:	4a0a      	ldr	r2, [pc, #40]	@ (800de74 <vQueueAddToRegistry+0x50>)
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	00db      	lsls	r3, r3, #3
 800de50:	4413      	add	r3, r2
 800de52:	687a      	ldr	r2, [r7, #4]
 800de54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800de56:	e006      	b.n	800de66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	3301      	adds	r3, #1
 800de5c:	60fb      	str	r3, [r7, #12]
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	2b07      	cmp	r3, #7
 800de62:	d9e7      	bls.n	800de34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800de64:	bf00      	nop
 800de66:	bf00      	nop
 800de68:	3714      	adds	r7, #20
 800de6a:	46bd      	mov	sp, r7
 800de6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de70:	4770      	bx	lr
 800de72:	bf00      	nop
 800de74:	20001340 	.word	0x20001340

0800de78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b086      	sub	sp, #24
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	60f8      	str	r0, [r7, #12]
 800de80:	60b9      	str	r1, [r7, #8]
 800de82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800de88:	f001 fc9e 	bl	800f7c8 <vPortEnterCritical>
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800de92:	b25b      	sxtb	r3, r3
 800de94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de98:	d103      	bne.n	800dea2 <vQueueWaitForMessageRestricted+0x2a>
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	2200      	movs	r2, #0
 800de9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dea8:	b25b      	sxtb	r3, r3
 800deaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deae:	d103      	bne.n	800deb8 <vQueueWaitForMessageRestricted+0x40>
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	2200      	movs	r2, #0
 800deb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800deb8:	f001 fcb8 	bl	800f82c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d106      	bne.n	800ded2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	3324      	adds	r3, #36	@ 0x24
 800dec8:	687a      	ldr	r2, [r7, #4]
 800deca:	68b9      	ldr	r1, [r7, #8]
 800decc:	4618      	mov	r0, r3
 800dece:	f000 fc83 	bl	800e7d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ded2:	6978      	ldr	r0, [r7, #20]
 800ded4:	f7ff ff26 	bl	800dd24 <prvUnlockQueue>
	}
 800ded8:	bf00      	nop
 800deda:	3718      	adds	r7, #24
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}

0800dee0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b08e      	sub	sp, #56	@ 0x38
 800dee4:	af04      	add	r7, sp, #16
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	60b9      	str	r1, [r7, #8]
 800deea:	607a      	str	r2, [r7, #4]
 800deec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800deee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800def0:	2b00      	cmp	r3, #0
 800def2:	d10b      	bne.n	800df0c <xTaskCreateStatic+0x2c>
	__asm volatile
 800def4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800def8:	f383 8811 	msr	BASEPRI, r3
 800defc:	f3bf 8f6f 	isb	sy
 800df00:	f3bf 8f4f 	dsb	sy
 800df04:	623b      	str	r3, [r7, #32]
}
 800df06:	bf00      	nop
 800df08:	bf00      	nop
 800df0a:	e7fd      	b.n	800df08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800df0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d10b      	bne.n	800df2a <xTaskCreateStatic+0x4a>
	__asm volatile
 800df12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df16:	f383 8811 	msr	BASEPRI, r3
 800df1a:	f3bf 8f6f 	isb	sy
 800df1e:	f3bf 8f4f 	dsb	sy
 800df22:	61fb      	str	r3, [r7, #28]
}
 800df24:	bf00      	nop
 800df26:	bf00      	nop
 800df28:	e7fd      	b.n	800df26 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800df2a:	235c      	movs	r3, #92	@ 0x5c
 800df2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800df2e:	693b      	ldr	r3, [r7, #16]
 800df30:	2b5c      	cmp	r3, #92	@ 0x5c
 800df32:	d00b      	beq.n	800df4c <xTaskCreateStatic+0x6c>
	__asm volatile
 800df34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df38:	f383 8811 	msr	BASEPRI, r3
 800df3c:	f3bf 8f6f 	isb	sy
 800df40:	f3bf 8f4f 	dsb	sy
 800df44:	61bb      	str	r3, [r7, #24]
}
 800df46:	bf00      	nop
 800df48:	bf00      	nop
 800df4a:	e7fd      	b.n	800df48 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800df4c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800df4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df50:	2b00      	cmp	r3, #0
 800df52:	d01e      	beq.n	800df92 <xTaskCreateStatic+0xb2>
 800df54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df56:	2b00      	cmp	r3, #0
 800df58:	d01b      	beq.n	800df92 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800df5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df5c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800df5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800df62:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800df64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df66:	2202      	movs	r2, #2
 800df68:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800df6c:	2300      	movs	r3, #0
 800df6e:	9303      	str	r3, [sp, #12]
 800df70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df72:	9302      	str	r3, [sp, #8]
 800df74:	f107 0314 	add.w	r3, r7, #20
 800df78:	9301      	str	r3, [sp, #4]
 800df7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df7c:	9300      	str	r3, [sp, #0]
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	687a      	ldr	r2, [r7, #4]
 800df82:	68b9      	ldr	r1, [r7, #8]
 800df84:	68f8      	ldr	r0, [r7, #12]
 800df86:	f000 f850 	bl	800e02a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800df8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800df8c:	f000 f8de 	bl	800e14c <prvAddNewTaskToReadyList>
 800df90:	e001      	b.n	800df96 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800df92:	2300      	movs	r3, #0
 800df94:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800df96:	697b      	ldr	r3, [r7, #20]
	}
 800df98:	4618      	mov	r0, r3
 800df9a:	3728      	adds	r7, #40	@ 0x28
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}

0800dfa0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b08c      	sub	sp, #48	@ 0x30
 800dfa4:	af04      	add	r7, sp, #16
 800dfa6:	60f8      	str	r0, [r7, #12]
 800dfa8:	60b9      	str	r1, [r7, #8]
 800dfaa:	603b      	str	r3, [r7, #0]
 800dfac:	4613      	mov	r3, r2
 800dfae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dfb0:	88fb      	ldrh	r3, [r7, #6]
 800dfb2:	009b      	lsls	r3, r3, #2
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f001 fd29 	bl	800fa0c <pvPortMalloc>
 800dfba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d00e      	beq.n	800dfe0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dfc2:	205c      	movs	r0, #92	@ 0x5c
 800dfc4:	f001 fd22 	bl	800fa0c <pvPortMalloc>
 800dfc8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dfca:	69fb      	ldr	r3, [r7, #28]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d003      	beq.n	800dfd8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dfd0:	69fb      	ldr	r3, [r7, #28]
 800dfd2:	697a      	ldr	r2, [r7, #20]
 800dfd4:	631a      	str	r2, [r3, #48]	@ 0x30
 800dfd6:	e005      	b.n	800dfe4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dfd8:	6978      	ldr	r0, [r7, #20]
 800dfda:	f001 fde5 	bl	800fba8 <vPortFree>
 800dfde:	e001      	b.n	800dfe4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dfe4:	69fb      	ldr	r3, [r7, #28]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d017      	beq.n	800e01a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dfea:	69fb      	ldr	r3, [r7, #28]
 800dfec:	2200      	movs	r2, #0
 800dfee:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dff2:	88fa      	ldrh	r2, [r7, #6]
 800dff4:	2300      	movs	r3, #0
 800dff6:	9303      	str	r3, [sp, #12]
 800dff8:	69fb      	ldr	r3, [r7, #28]
 800dffa:	9302      	str	r3, [sp, #8]
 800dffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dffe:	9301      	str	r3, [sp, #4]
 800e000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e002:	9300      	str	r3, [sp, #0]
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	68b9      	ldr	r1, [r7, #8]
 800e008:	68f8      	ldr	r0, [r7, #12]
 800e00a:	f000 f80e 	bl	800e02a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e00e:	69f8      	ldr	r0, [r7, #28]
 800e010:	f000 f89c 	bl	800e14c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e014:	2301      	movs	r3, #1
 800e016:	61bb      	str	r3, [r7, #24]
 800e018:	e002      	b.n	800e020 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e01a:	f04f 33ff 	mov.w	r3, #4294967295
 800e01e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e020:	69bb      	ldr	r3, [r7, #24]
	}
 800e022:	4618      	mov	r0, r3
 800e024:	3720      	adds	r7, #32
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}

0800e02a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e02a:	b580      	push	{r7, lr}
 800e02c:	b088      	sub	sp, #32
 800e02e:	af00      	add	r7, sp, #0
 800e030:	60f8      	str	r0, [r7, #12]
 800e032:	60b9      	str	r1, [r7, #8]
 800e034:	607a      	str	r2, [r7, #4]
 800e036:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e03a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	009b      	lsls	r3, r3, #2
 800e040:	461a      	mov	r2, r3
 800e042:	21a5      	movs	r1, #165	@ 0xa5
 800e044:	f003 fb74 	bl	8011730 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e04a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e052:	3b01      	subs	r3, #1
 800e054:	009b      	lsls	r3, r3, #2
 800e056:	4413      	add	r3, r2
 800e058:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e05a:	69bb      	ldr	r3, [r7, #24]
 800e05c:	f023 0307 	bic.w	r3, r3, #7
 800e060:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e062:	69bb      	ldr	r3, [r7, #24]
 800e064:	f003 0307 	and.w	r3, r3, #7
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d00b      	beq.n	800e084 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e06c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e070:	f383 8811 	msr	BASEPRI, r3
 800e074:	f3bf 8f6f 	isb	sy
 800e078:	f3bf 8f4f 	dsb	sy
 800e07c:	617b      	str	r3, [r7, #20]
}
 800e07e:	bf00      	nop
 800e080:	bf00      	nop
 800e082:	e7fd      	b.n	800e080 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d01f      	beq.n	800e0ca <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e08a:	2300      	movs	r3, #0
 800e08c:	61fb      	str	r3, [r7, #28]
 800e08e:	e012      	b.n	800e0b6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e090:	68ba      	ldr	r2, [r7, #8]
 800e092:	69fb      	ldr	r3, [r7, #28]
 800e094:	4413      	add	r3, r2
 800e096:	7819      	ldrb	r1, [r3, #0]
 800e098:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e09a:	69fb      	ldr	r3, [r7, #28]
 800e09c:	4413      	add	r3, r2
 800e09e:	3334      	adds	r3, #52	@ 0x34
 800e0a0:	460a      	mov	r2, r1
 800e0a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e0a4:	68ba      	ldr	r2, [r7, #8]
 800e0a6:	69fb      	ldr	r3, [r7, #28]
 800e0a8:	4413      	add	r3, r2
 800e0aa:	781b      	ldrb	r3, [r3, #0]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d006      	beq.n	800e0be <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e0b0:	69fb      	ldr	r3, [r7, #28]
 800e0b2:	3301      	adds	r3, #1
 800e0b4:	61fb      	str	r3, [r7, #28]
 800e0b6:	69fb      	ldr	r3, [r7, #28]
 800e0b8:	2b0f      	cmp	r3, #15
 800e0ba:	d9e9      	bls.n	800e090 <prvInitialiseNewTask+0x66>
 800e0bc:	e000      	b.n	800e0c0 <prvInitialiseNewTask+0x96>
			{
				break;
 800e0be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e0c8:	e003      	b.n	800e0d2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e0d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0d4:	2b37      	cmp	r3, #55	@ 0x37
 800e0d6:	d901      	bls.n	800e0dc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e0d8:	2337      	movs	r3, #55	@ 0x37
 800e0da:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e0dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e0e0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e0e6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0f0:	3304      	adds	r3, #4
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7ff f86a 	bl	800d1cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0fa:	3318      	adds	r3, #24
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f7ff f865 	bl	800d1cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e106:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e10a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e110:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e116:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e11a:	2200      	movs	r2, #0
 800e11c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e120:	2200      	movs	r2, #0
 800e122:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e126:	683a      	ldr	r2, [r7, #0]
 800e128:	68f9      	ldr	r1, [r7, #12]
 800e12a:	69b8      	ldr	r0, [r7, #24]
 800e12c:	f001 fa18 	bl	800f560 <pxPortInitialiseStack>
 800e130:	4602      	mov	r2, r0
 800e132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e134:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d002      	beq.n	800e142 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e13c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e13e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e140:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e142:	bf00      	nop
 800e144:	3720      	adds	r7, #32
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
	...

0800e14c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b082      	sub	sp, #8
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e154:	f001 fb38 	bl	800f7c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e158:	4b2d      	ldr	r3, [pc, #180]	@ (800e210 <prvAddNewTaskToReadyList+0xc4>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	3301      	adds	r3, #1
 800e15e:	4a2c      	ldr	r2, [pc, #176]	@ (800e210 <prvAddNewTaskToReadyList+0xc4>)
 800e160:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e162:	4b2c      	ldr	r3, [pc, #176]	@ (800e214 <prvAddNewTaskToReadyList+0xc8>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d109      	bne.n	800e17e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e16a:	4a2a      	ldr	r2, [pc, #168]	@ (800e214 <prvAddNewTaskToReadyList+0xc8>)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e170:	4b27      	ldr	r3, [pc, #156]	@ (800e210 <prvAddNewTaskToReadyList+0xc4>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	2b01      	cmp	r3, #1
 800e176:	d110      	bne.n	800e19a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e178:	f000 fcc0 	bl	800eafc <prvInitialiseTaskLists>
 800e17c:	e00d      	b.n	800e19a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e17e:	4b26      	ldr	r3, [pc, #152]	@ (800e218 <prvAddNewTaskToReadyList+0xcc>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d109      	bne.n	800e19a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e186:	4b23      	ldr	r3, [pc, #140]	@ (800e214 <prvAddNewTaskToReadyList+0xc8>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e190:	429a      	cmp	r2, r3
 800e192:	d802      	bhi.n	800e19a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e194:	4a1f      	ldr	r2, [pc, #124]	@ (800e214 <prvAddNewTaskToReadyList+0xc8>)
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e19a:	4b20      	ldr	r3, [pc, #128]	@ (800e21c <prvAddNewTaskToReadyList+0xd0>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	3301      	adds	r3, #1
 800e1a0:	4a1e      	ldr	r2, [pc, #120]	@ (800e21c <prvAddNewTaskToReadyList+0xd0>)
 800e1a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e1a4:	4b1d      	ldr	r3, [pc, #116]	@ (800e21c <prvAddNewTaskToReadyList+0xd0>)
 800e1a6:	681a      	ldr	r2, [r3, #0]
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1b0:	4b1b      	ldr	r3, [pc, #108]	@ (800e220 <prvAddNewTaskToReadyList+0xd4>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d903      	bls.n	800e1c0 <prvAddNewTaskToReadyList+0x74>
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1bc:	4a18      	ldr	r2, [pc, #96]	@ (800e220 <prvAddNewTaskToReadyList+0xd4>)
 800e1be:	6013      	str	r3, [r2, #0]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1c4:	4613      	mov	r3, r2
 800e1c6:	009b      	lsls	r3, r3, #2
 800e1c8:	4413      	add	r3, r2
 800e1ca:	009b      	lsls	r3, r3, #2
 800e1cc:	4a15      	ldr	r2, [pc, #84]	@ (800e224 <prvAddNewTaskToReadyList+0xd8>)
 800e1ce:	441a      	add	r2, r3
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	3304      	adds	r3, #4
 800e1d4:	4619      	mov	r1, r3
 800e1d6:	4610      	mov	r0, r2
 800e1d8:	f7ff f805 	bl	800d1e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e1dc:	f001 fb26 	bl	800f82c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e1e0:	4b0d      	ldr	r3, [pc, #52]	@ (800e218 <prvAddNewTaskToReadyList+0xcc>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d00e      	beq.n	800e206 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e1e8:	4b0a      	ldr	r3, [pc, #40]	@ (800e214 <prvAddNewTaskToReadyList+0xc8>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1f2:	429a      	cmp	r2, r3
 800e1f4:	d207      	bcs.n	800e206 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e1f6:	4b0c      	ldr	r3, [pc, #48]	@ (800e228 <prvAddNewTaskToReadyList+0xdc>)
 800e1f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e1fc:	601a      	str	r2, [r3, #0]
 800e1fe:	f3bf 8f4f 	dsb	sy
 800e202:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e206:	bf00      	nop
 800e208:	3708      	adds	r7, #8
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}
 800e20e:	bf00      	nop
 800e210:	20001854 	.word	0x20001854
 800e214:	20001380 	.word	0x20001380
 800e218:	20001860 	.word	0x20001860
 800e21c:	20001870 	.word	0x20001870
 800e220:	2000185c 	.word	0x2000185c
 800e224:	20001384 	.word	0x20001384
 800e228:	e000ed04 	.word	0xe000ed04

0800e22c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b084      	sub	sp, #16
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e234:	2300      	movs	r3, #0
 800e236:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d018      	beq.n	800e270 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e23e:	4b14      	ldr	r3, [pc, #80]	@ (800e290 <vTaskDelay+0x64>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d00b      	beq.n	800e25e <vTaskDelay+0x32>
	__asm volatile
 800e246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e24a:	f383 8811 	msr	BASEPRI, r3
 800e24e:	f3bf 8f6f 	isb	sy
 800e252:	f3bf 8f4f 	dsb	sy
 800e256:	60bb      	str	r3, [r7, #8]
}
 800e258:	bf00      	nop
 800e25a:	bf00      	nop
 800e25c:	e7fd      	b.n	800e25a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e25e:	f000 f883 	bl	800e368 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e262:	2100      	movs	r1, #0
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f000 fdad 	bl	800edc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e26a:	f000 f88b 	bl	800e384 <xTaskResumeAll>
 800e26e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d107      	bne.n	800e286 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e276:	4b07      	ldr	r3, [pc, #28]	@ (800e294 <vTaskDelay+0x68>)
 800e278:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e27c:	601a      	str	r2, [r3, #0]
 800e27e:	f3bf 8f4f 	dsb	sy
 800e282:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e286:	bf00      	nop
 800e288:	3710      	adds	r7, #16
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}
 800e28e:	bf00      	nop
 800e290:	2000187c 	.word	0x2000187c
 800e294:	e000ed04 	.word	0xe000ed04

0800e298 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b08a      	sub	sp, #40	@ 0x28
 800e29c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e2a6:	463a      	mov	r2, r7
 800e2a8:	1d39      	adds	r1, r7, #4
 800e2aa:	f107 0308 	add.w	r3, r7, #8
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f7fe fd42 	bl	800cd38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e2b4:	6839      	ldr	r1, [r7, #0]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	68ba      	ldr	r2, [r7, #8]
 800e2ba:	9202      	str	r2, [sp, #8]
 800e2bc:	9301      	str	r3, [sp, #4]
 800e2be:	2300      	movs	r3, #0
 800e2c0:	9300      	str	r3, [sp, #0]
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	460a      	mov	r2, r1
 800e2c6:	4922      	ldr	r1, [pc, #136]	@ (800e350 <vTaskStartScheduler+0xb8>)
 800e2c8:	4822      	ldr	r0, [pc, #136]	@ (800e354 <vTaskStartScheduler+0xbc>)
 800e2ca:	f7ff fe09 	bl	800dee0 <xTaskCreateStatic>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	4a21      	ldr	r2, [pc, #132]	@ (800e358 <vTaskStartScheduler+0xc0>)
 800e2d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e2d4:	4b20      	ldr	r3, [pc, #128]	@ (800e358 <vTaskStartScheduler+0xc0>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d002      	beq.n	800e2e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e2dc:	2301      	movs	r3, #1
 800e2de:	617b      	str	r3, [r7, #20]
 800e2e0:	e001      	b.n	800e2e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	2b01      	cmp	r3, #1
 800e2ea:	d102      	bne.n	800e2f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e2ec:	f000 fdbe 	bl	800ee6c <xTimerCreateTimerTask>
 800e2f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	2b01      	cmp	r3, #1
 800e2f6:	d116      	bne.n	800e326 <vTaskStartScheduler+0x8e>
	__asm volatile
 800e2f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2fc:	f383 8811 	msr	BASEPRI, r3
 800e300:	f3bf 8f6f 	isb	sy
 800e304:	f3bf 8f4f 	dsb	sy
 800e308:	613b      	str	r3, [r7, #16]
}
 800e30a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e30c:	4b13      	ldr	r3, [pc, #76]	@ (800e35c <vTaskStartScheduler+0xc4>)
 800e30e:	f04f 32ff 	mov.w	r2, #4294967295
 800e312:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e314:	4b12      	ldr	r3, [pc, #72]	@ (800e360 <vTaskStartScheduler+0xc8>)
 800e316:	2201      	movs	r2, #1
 800e318:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e31a:	4b12      	ldr	r3, [pc, #72]	@ (800e364 <vTaskStartScheduler+0xcc>)
 800e31c:	2200      	movs	r2, #0
 800e31e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e320:	f001 f9ae 	bl	800f680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e324:	e00f      	b.n	800e346 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e326:	697b      	ldr	r3, [r7, #20]
 800e328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e32c:	d10b      	bne.n	800e346 <vTaskStartScheduler+0xae>
	__asm volatile
 800e32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e332:	f383 8811 	msr	BASEPRI, r3
 800e336:	f3bf 8f6f 	isb	sy
 800e33a:	f3bf 8f4f 	dsb	sy
 800e33e:	60fb      	str	r3, [r7, #12]
}
 800e340:	bf00      	nop
 800e342:	bf00      	nop
 800e344:	e7fd      	b.n	800e342 <vTaskStartScheduler+0xaa>
}
 800e346:	bf00      	nop
 800e348:	3718      	adds	r7, #24
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}
 800e34e:	bf00      	nop
 800e350:	080137b8 	.word	0x080137b8
 800e354:	0800eacd 	.word	0x0800eacd
 800e358:	20001878 	.word	0x20001878
 800e35c:	20001874 	.word	0x20001874
 800e360:	20001860 	.word	0x20001860
 800e364:	20001858 	.word	0x20001858

0800e368 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e368:	b480      	push	{r7}
 800e36a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e36c:	4b04      	ldr	r3, [pc, #16]	@ (800e380 <vTaskSuspendAll+0x18>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	3301      	adds	r3, #1
 800e372:	4a03      	ldr	r2, [pc, #12]	@ (800e380 <vTaskSuspendAll+0x18>)
 800e374:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e376:	bf00      	nop
 800e378:	46bd      	mov	sp, r7
 800e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37e:	4770      	bx	lr
 800e380:	2000187c 	.word	0x2000187c

0800e384 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b084      	sub	sp, #16
 800e388:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e38a:	2300      	movs	r3, #0
 800e38c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e38e:	2300      	movs	r3, #0
 800e390:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e392:	4b42      	ldr	r3, [pc, #264]	@ (800e49c <xTaskResumeAll+0x118>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d10b      	bne.n	800e3b2 <xTaskResumeAll+0x2e>
	__asm volatile
 800e39a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e39e:	f383 8811 	msr	BASEPRI, r3
 800e3a2:	f3bf 8f6f 	isb	sy
 800e3a6:	f3bf 8f4f 	dsb	sy
 800e3aa:	603b      	str	r3, [r7, #0]
}
 800e3ac:	bf00      	nop
 800e3ae:	bf00      	nop
 800e3b0:	e7fd      	b.n	800e3ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e3b2:	f001 fa09 	bl	800f7c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e3b6:	4b39      	ldr	r3, [pc, #228]	@ (800e49c <xTaskResumeAll+0x118>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	3b01      	subs	r3, #1
 800e3bc:	4a37      	ldr	r2, [pc, #220]	@ (800e49c <xTaskResumeAll+0x118>)
 800e3be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3c0:	4b36      	ldr	r3, [pc, #216]	@ (800e49c <xTaskResumeAll+0x118>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d162      	bne.n	800e48e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e3c8:	4b35      	ldr	r3, [pc, #212]	@ (800e4a0 <xTaskResumeAll+0x11c>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d05e      	beq.n	800e48e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e3d0:	e02f      	b.n	800e432 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3d2:	4b34      	ldr	r3, [pc, #208]	@ (800e4a4 <xTaskResumeAll+0x120>)
 800e3d4:	68db      	ldr	r3, [r3, #12]
 800e3d6:	68db      	ldr	r3, [r3, #12]
 800e3d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	3318      	adds	r3, #24
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f7fe ff5e 	bl	800d2a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	3304      	adds	r3, #4
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f7fe ff59 	bl	800d2a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3f2:	4b2d      	ldr	r3, [pc, #180]	@ (800e4a8 <xTaskResumeAll+0x124>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	429a      	cmp	r2, r3
 800e3f8:	d903      	bls.n	800e402 <xTaskResumeAll+0x7e>
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3fe:	4a2a      	ldr	r2, [pc, #168]	@ (800e4a8 <xTaskResumeAll+0x124>)
 800e400:	6013      	str	r3, [r2, #0]
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e406:	4613      	mov	r3, r2
 800e408:	009b      	lsls	r3, r3, #2
 800e40a:	4413      	add	r3, r2
 800e40c:	009b      	lsls	r3, r3, #2
 800e40e:	4a27      	ldr	r2, [pc, #156]	@ (800e4ac <xTaskResumeAll+0x128>)
 800e410:	441a      	add	r2, r3
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	3304      	adds	r3, #4
 800e416:	4619      	mov	r1, r3
 800e418:	4610      	mov	r0, r2
 800e41a:	f7fe fee4 	bl	800d1e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e422:	4b23      	ldr	r3, [pc, #140]	@ (800e4b0 <xTaskResumeAll+0x12c>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e428:	429a      	cmp	r2, r3
 800e42a:	d302      	bcc.n	800e432 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e42c:	4b21      	ldr	r3, [pc, #132]	@ (800e4b4 <xTaskResumeAll+0x130>)
 800e42e:	2201      	movs	r2, #1
 800e430:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e432:	4b1c      	ldr	r3, [pc, #112]	@ (800e4a4 <xTaskResumeAll+0x120>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d1cb      	bne.n	800e3d2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d001      	beq.n	800e444 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e440:	f000 fbfa 	bl	800ec38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e444:	4b1c      	ldr	r3, [pc, #112]	@ (800e4b8 <xTaskResumeAll+0x134>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d010      	beq.n	800e472 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e450:	f000 f846 	bl	800e4e0 <xTaskIncrementTick>
 800e454:	4603      	mov	r3, r0
 800e456:	2b00      	cmp	r3, #0
 800e458:	d002      	beq.n	800e460 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e45a:	4b16      	ldr	r3, [pc, #88]	@ (800e4b4 <xTaskResumeAll+0x130>)
 800e45c:	2201      	movs	r2, #1
 800e45e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	3b01      	subs	r3, #1
 800e464:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d1f1      	bne.n	800e450 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e46c:	4b12      	ldr	r3, [pc, #72]	@ (800e4b8 <xTaskResumeAll+0x134>)
 800e46e:	2200      	movs	r2, #0
 800e470:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e472:	4b10      	ldr	r3, [pc, #64]	@ (800e4b4 <xTaskResumeAll+0x130>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d009      	beq.n	800e48e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e47a:	2301      	movs	r3, #1
 800e47c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e47e:	4b0f      	ldr	r3, [pc, #60]	@ (800e4bc <xTaskResumeAll+0x138>)
 800e480:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e484:	601a      	str	r2, [r3, #0]
 800e486:	f3bf 8f4f 	dsb	sy
 800e48a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e48e:	f001 f9cd 	bl	800f82c <vPortExitCritical>

	return xAlreadyYielded;
 800e492:	68bb      	ldr	r3, [r7, #8]
}
 800e494:	4618      	mov	r0, r3
 800e496:	3710      	adds	r7, #16
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}
 800e49c:	2000187c 	.word	0x2000187c
 800e4a0:	20001854 	.word	0x20001854
 800e4a4:	20001814 	.word	0x20001814
 800e4a8:	2000185c 	.word	0x2000185c
 800e4ac:	20001384 	.word	0x20001384
 800e4b0:	20001380 	.word	0x20001380
 800e4b4:	20001868 	.word	0x20001868
 800e4b8:	20001864 	.word	0x20001864
 800e4bc:	e000ed04 	.word	0xe000ed04

0800e4c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e4c0:	b480      	push	{r7}
 800e4c2:	b083      	sub	sp, #12
 800e4c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e4c6:	4b05      	ldr	r3, [pc, #20]	@ (800e4dc <xTaskGetTickCount+0x1c>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e4cc:	687b      	ldr	r3, [r7, #4]
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	370c      	adds	r7, #12
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d8:	4770      	bx	lr
 800e4da:	bf00      	nop
 800e4dc:	20001858 	.word	0x20001858

0800e4e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b086      	sub	sp, #24
 800e4e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4ea:	4b4f      	ldr	r3, [pc, #316]	@ (800e628 <xTaskIncrementTick+0x148>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	f040 8090 	bne.w	800e614 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e4f4:	4b4d      	ldr	r3, [pc, #308]	@ (800e62c <xTaskIncrementTick+0x14c>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	3301      	adds	r3, #1
 800e4fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e4fc:	4a4b      	ldr	r2, [pc, #300]	@ (800e62c <xTaskIncrementTick+0x14c>)
 800e4fe:	693b      	ldr	r3, [r7, #16]
 800e500:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d121      	bne.n	800e54c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e508:	4b49      	ldr	r3, [pc, #292]	@ (800e630 <xTaskIncrementTick+0x150>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d00b      	beq.n	800e52a <xTaskIncrementTick+0x4a>
	__asm volatile
 800e512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e516:	f383 8811 	msr	BASEPRI, r3
 800e51a:	f3bf 8f6f 	isb	sy
 800e51e:	f3bf 8f4f 	dsb	sy
 800e522:	603b      	str	r3, [r7, #0]
}
 800e524:	bf00      	nop
 800e526:	bf00      	nop
 800e528:	e7fd      	b.n	800e526 <xTaskIncrementTick+0x46>
 800e52a:	4b41      	ldr	r3, [pc, #260]	@ (800e630 <xTaskIncrementTick+0x150>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	60fb      	str	r3, [r7, #12]
 800e530:	4b40      	ldr	r3, [pc, #256]	@ (800e634 <xTaskIncrementTick+0x154>)
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	4a3e      	ldr	r2, [pc, #248]	@ (800e630 <xTaskIncrementTick+0x150>)
 800e536:	6013      	str	r3, [r2, #0]
 800e538:	4a3e      	ldr	r2, [pc, #248]	@ (800e634 <xTaskIncrementTick+0x154>)
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	6013      	str	r3, [r2, #0]
 800e53e:	4b3e      	ldr	r3, [pc, #248]	@ (800e638 <xTaskIncrementTick+0x158>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	3301      	adds	r3, #1
 800e544:	4a3c      	ldr	r2, [pc, #240]	@ (800e638 <xTaskIncrementTick+0x158>)
 800e546:	6013      	str	r3, [r2, #0]
 800e548:	f000 fb76 	bl	800ec38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e54c:	4b3b      	ldr	r3, [pc, #236]	@ (800e63c <xTaskIncrementTick+0x15c>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	693a      	ldr	r2, [r7, #16]
 800e552:	429a      	cmp	r2, r3
 800e554:	d349      	bcc.n	800e5ea <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e556:	4b36      	ldr	r3, [pc, #216]	@ (800e630 <xTaskIncrementTick+0x150>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d104      	bne.n	800e56a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e560:	4b36      	ldr	r3, [pc, #216]	@ (800e63c <xTaskIncrementTick+0x15c>)
 800e562:	f04f 32ff 	mov.w	r2, #4294967295
 800e566:	601a      	str	r2, [r3, #0]
					break;
 800e568:	e03f      	b.n	800e5ea <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e56a:	4b31      	ldr	r3, [pc, #196]	@ (800e630 <xTaskIncrementTick+0x150>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	68db      	ldr	r3, [r3, #12]
 800e570:	68db      	ldr	r3, [r3, #12]
 800e572:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	685b      	ldr	r3, [r3, #4]
 800e578:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e57a:	693a      	ldr	r2, [r7, #16]
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	429a      	cmp	r2, r3
 800e580:	d203      	bcs.n	800e58a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e582:	4a2e      	ldr	r2, [pc, #184]	@ (800e63c <xTaskIncrementTick+0x15c>)
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e588:	e02f      	b.n	800e5ea <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	3304      	adds	r3, #4
 800e58e:	4618      	mov	r0, r3
 800e590:	f7fe fe86 	bl	800d2a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d004      	beq.n	800e5a6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	3318      	adds	r3, #24
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f7fe fe7d 	bl	800d2a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5aa:	4b25      	ldr	r3, [pc, #148]	@ (800e640 <xTaskIncrementTick+0x160>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	d903      	bls.n	800e5ba <xTaskIncrementTick+0xda>
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5b6:	4a22      	ldr	r2, [pc, #136]	@ (800e640 <xTaskIncrementTick+0x160>)
 800e5b8:	6013      	str	r3, [r2, #0]
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5be:	4613      	mov	r3, r2
 800e5c0:	009b      	lsls	r3, r3, #2
 800e5c2:	4413      	add	r3, r2
 800e5c4:	009b      	lsls	r3, r3, #2
 800e5c6:	4a1f      	ldr	r2, [pc, #124]	@ (800e644 <xTaskIncrementTick+0x164>)
 800e5c8:	441a      	add	r2, r3
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	3304      	adds	r3, #4
 800e5ce:	4619      	mov	r1, r3
 800e5d0:	4610      	mov	r0, r2
 800e5d2:	f7fe fe08 	bl	800d1e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5da:	4b1b      	ldr	r3, [pc, #108]	@ (800e648 <xTaskIncrementTick+0x168>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	d3b8      	bcc.n	800e556 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5e8:	e7b5      	b.n	800e556 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e5ea:	4b17      	ldr	r3, [pc, #92]	@ (800e648 <xTaskIncrementTick+0x168>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5f0:	4914      	ldr	r1, [pc, #80]	@ (800e644 <xTaskIncrementTick+0x164>)
 800e5f2:	4613      	mov	r3, r2
 800e5f4:	009b      	lsls	r3, r3, #2
 800e5f6:	4413      	add	r3, r2
 800e5f8:	009b      	lsls	r3, r3, #2
 800e5fa:	440b      	add	r3, r1
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	2b01      	cmp	r3, #1
 800e600:	d901      	bls.n	800e606 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e602:	2301      	movs	r3, #1
 800e604:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e606:	4b11      	ldr	r3, [pc, #68]	@ (800e64c <xTaskIncrementTick+0x16c>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d007      	beq.n	800e61e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e60e:	2301      	movs	r3, #1
 800e610:	617b      	str	r3, [r7, #20]
 800e612:	e004      	b.n	800e61e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e614:	4b0e      	ldr	r3, [pc, #56]	@ (800e650 <xTaskIncrementTick+0x170>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	3301      	adds	r3, #1
 800e61a:	4a0d      	ldr	r2, [pc, #52]	@ (800e650 <xTaskIncrementTick+0x170>)
 800e61c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e61e:	697b      	ldr	r3, [r7, #20]
}
 800e620:	4618      	mov	r0, r3
 800e622:	3718      	adds	r7, #24
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}
 800e628:	2000187c 	.word	0x2000187c
 800e62c:	20001858 	.word	0x20001858
 800e630:	2000180c 	.word	0x2000180c
 800e634:	20001810 	.word	0x20001810
 800e638:	2000186c 	.word	0x2000186c
 800e63c:	20001874 	.word	0x20001874
 800e640:	2000185c 	.word	0x2000185c
 800e644:	20001384 	.word	0x20001384
 800e648:	20001380 	.word	0x20001380
 800e64c:	20001868 	.word	0x20001868
 800e650:	20001864 	.word	0x20001864

0800e654 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e654:	b480      	push	{r7}
 800e656:	b085      	sub	sp, #20
 800e658:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e65a:	4b28      	ldr	r3, [pc, #160]	@ (800e6fc <vTaskSwitchContext+0xa8>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d003      	beq.n	800e66a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e662:	4b27      	ldr	r3, [pc, #156]	@ (800e700 <vTaskSwitchContext+0xac>)
 800e664:	2201      	movs	r2, #1
 800e666:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e668:	e042      	b.n	800e6f0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800e66a:	4b25      	ldr	r3, [pc, #148]	@ (800e700 <vTaskSwitchContext+0xac>)
 800e66c:	2200      	movs	r2, #0
 800e66e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e670:	4b24      	ldr	r3, [pc, #144]	@ (800e704 <vTaskSwitchContext+0xb0>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	60fb      	str	r3, [r7, #12]
 800e676:	e011      	b.n	800e69c <vTaskSwitchContext+0x48>
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d10b      	bne.n	800e696 <vTaskSwitchContext+0x42>
	__asm volatile
 800e67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e682:	f383 8811 	msr	BASEPRI, r3
 800e686:	f3bf 8f6f 	isb	sy
 800e68a:	f3bf 8f4f 	dsb	sy
 800e68e:	607b      	str	r3, [r7, #4]
}
 800e690:	bf00      	nop
 800e692:	bf00      	nop
 800e694:	e7fd      	b.n	800e692 <vTaskSwitchContext+0x3e>
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	3b01      	subs	r3, #1
 800e69a:	60fb      	str	r3, [r7, #12]
 800e69c:	491a      	ldr	r1, [pc, #104]	@ (800e708 <vTaskSwitchContext+0xb4>)
 800e69e:	68fa      	ldr	r2, [r7, #12]
 800e6a0:	4613      	mov	r3, r2
 800e6a2:	009b      	lsls	r3, r3, #2
 800e6a4:	4413      	add	r3, r2
 800e6a6:	009b      	lsls	r3, r3, #2
 800e6a8:	440b      	add	r3, r1
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d0e3      	beq.n	800e678 <vTaskSwitchContext+0x24>
 800e6b0:	68fa      	ldr	r2, [r7, #12]
 800e6b2:	4613      	mov	r3, r2
 800e6b4:	009b      	lsls	r3, r3, #2
 800e6b6:	4413      	add	r3, r2
 800e6b8:	009b      	lsls	r3, r3, #2
 800e6ba:	4a13      	ldr	r2, [pc, #76]	@ (800e708 <vTaskSwitchContext+0xb4>)
 800e6bc:	4413      	add	r3, r2
 800e6be:	60bb      	str	r3, [r7, #8]
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	685b      	ldr	r3, [r3, #4]
 800e6c4:	685a      	ldr	r2, [r3, #4]
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	605a      	str	r2, [r3, #4]
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	685a      	ldr	r2, [r3, #4]
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	3308      	adds	r3, #8
 800e6d2:	429a      	cmp	r2, r3
 800e6d4:	d104      	bne.n	800e6e0 <vTaskSwitchContext+0x8c>
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	685b      	ldr	r3, [r3, #4]
 800e6da:	685a      	ldr	r2, [r3, #4]
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	605a      	str	r2, [r3, #4]
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	685b      	ldr	r3, [r3, #4]
 800e6e4:	68db      	ldr	r3, [r3, #12]
 800e6e6:	4a09      	ldr	r2, [pc, #36]	@ (800e70c <vTaskSwitchContext+0xb8>)
 800e6e8:	6013      	str	r3, [r2, #0]
 800e6ea:	4a06      	ldr	r2, [pc, #24]	@ (800e704 <vTaskSwitchContext+0xb0>)
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	6013      	str	r3, [r2, #0]
}
 800e6f0:	bf00      	nop
 800e6f2:	3714      	adds	r7, #20
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fa:	4770      	bx	lr
 800e6fc:	2000187c 	.word	0x2000187c
 800e700:	20001868 	.word	0x20001868
 800e704:	2000185c 	.word	0x2000185c
 800e708:	20001384 	.word	0x20001384
 800e70c:	20001380 	.word	0x20001380

0800e710 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b084      	sub	sp, #16
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
 800e718:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d10b      	bne.n	800e738 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e724:	f383 8811 	msr	BASEPRI, r3
 800e728:	f3bf 8f6f 	isb	sy
 800e72c:	f3bf 8f4f 	dsb	sy
 800e730:	60fb      	str	r3, [r7, #12]
}
 800e732:	bf00      	nop
 800e734:	bf00      	nop
 800e736:	e7fd      	b.n	800e734 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e738:	4b07      	ldr	r3, [pc, #28]	@ (800e758 <vTaskPlaceOnEventList+0x48>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	3318      	adds	r3, #24
 800e73e:	4619      	mov	r1, r3
 800e740:	6878      	ldr	r0, [r7, #4]
 800e742:	f7fe fd74 	bl	800d22e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e746:	2101      	movs	r1, #1
 800e748:	6838      	ldr	r0, [r7, #0]
 800e74a:	f000 fb3b 	bl	800edc4 <prvAddCurrentTaskToDelayedList>
}
 800e74e:	bf00      	nop
 800e750:	3710      	adds	r7, #16
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}
 800e756:	bf00      	nop
 800e758:	20001380 	.word	0x20001380

0800e75c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b086      	sub	sp, #24
 800e760:	af00      	add	r7, sp, #0
 800e762:	60f8      	str	r0, [r7, #12]
 800e764:	60b9      	str	r1, [r7, #8]
 800e766:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d10b      	bne.n	800e786 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800e76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e772:	f383 8811 	msr	BASEPRI, r3
 800e776:	f3bf 8f6f 	isb	sy
 800e77a:	f3bf 8f4f 	dsb	sy
 800e77e:	617b      	str	r3, [r7, #20]
}
 800e780:	bf00      	nop
 800e782:	bf00      	nop
 800e784:	e7fd      	b.n	800e782 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800e786:	4b12      	ldr	r3, [pc, #72]	@ (800e7d0 <vTaskPlaceOnUnorderedEventList+0x74>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d10b      	bne.n	800e7a6 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800e78e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e792:	f383 8811 	msr	BASEPRI, r3
 800e796:	f3bf 8f6f 	isb	sy
 800e79a:	f3bf 8f4f 	dsb	sy
 800e79e:	613b      	str	r3, [r7, #16]
}
 800e7a0:	bf00      	nop
 800e7a2:	bf00      	nop
 800e7a4:	e7fd      	b.n	800e7a2 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e7a6:	4b0b      	ldr	r3, [pc, #44]	@ (800e7d4 <vTaskPlaceOnUnorderedEventList+0x78>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	68ba      	ldr	r2, [r7, #8]
 800e7ac:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e7b0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e7b2:	4b08      	ldr	r3, [pc, #32]	@ (800e7d4 <vTaskPlaceOnUnorderedEventList+0x78>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	3318      	adds	r3, #24
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	68f8      	ldr	r0, [r7, #12]
 800e7bc:	f7fe fd13 	bl	800d1e6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e7c0:	2101      	movs	r1, #1
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f000 fafe 	bl	800edc4 <prvAddCurrentTaskToDelayedList>
}
 800e7c8:	bf00      	nop
 800e7ca:	3718      	adds	r7, #24
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}
 800e7d0:	2000187c 	.word	0x2000187c
 800e7d4:	20001380 	.word	0x20001380

0800e7d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b086      	sub	sp, #24
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	60f8      	str	r0, [r7, #12]
 800e7e0:	60b9      	str	r1, [r7, #8]
 800e7e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d10b      	bne.n	800e802 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e7ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7ee:	f383 8811 	msr	BASEPRI, r3
 800e7f2:	f3bf 8f6f 	isb	sy
 800e7f6:	f3bf 8f4f 	dsb	sy
 800e7fa:	617b      	str	r3, [r7, #20]
}
 800e7fc:	bf00      	nop
 800e7fe:	bf00      	nop
 800e800:	e7fd      	b.n	800e7fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e802:	4b0a      	ldr	r3, [pc, #40]	@ (800e82c <vTaskPlaceOnEventListRestricted+0x54>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	3318      	adds	r3, #24
 800e808:	4619      	mov	r1, r3
 800e80a:	68f8      	ldr	r0, [r7, #12]
 800e80c:	f7fe fceb 	bl	800d1e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d002      	beq.n	800e81c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e816:	f04f 33ff 	mov.w	r3, #4294967295
 800e81a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e81c:	6879      	ldr	r1, [r7, #4]
 800e81e:	68b8      	ldr	r0, [r7, #8]
 800e820:	f000 fad0 	bl	800edc4 <prvAddCurrentTaskToDelayedList>
	}
 800e824:	bf00      	nop
 800e826:	3718      	adds	r7, #24
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}
 800e82c:	20001380 	.word	0x20001380

0800e830 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b086      	sub	sp, #24
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	68db      	ldr	r3, [r3, #12]
 800e83c:	68db      	ldr	r3, [r3, #12]
 800e83e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d10b      	bne.n	800e85e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e84a:	f383 8811 	msr	BASEPRI, r3
 800e84e:	f3bf 8f6f 	isb	sy
 800e852:	f3bf 8f4f 	dsb	sy
 800e856:	60fb      	str	r3, [r7, #12]
}
 800e858:	bf00      	nop
 800e85a:	bf00      	nop
 800e85c:	e7fd      	b.n	800e85a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e85e:	693b      	ldr	r3, [r7, #16]
 800e860:	3318      	adds	r3, #24
 800e862:	4618      	mov	r0, r3
 800e864:	f7fe fd1c 	bl	800d2a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e868:	4b1d      	ldr	r3, [pc, #116]	@ (800e8e0 <xTaskRemoveFromEventList+0xb0>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d11d      	bne.n	800e8ac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e870:	693b      	ldr	r3, [r7, #16]
 800e872:	3304      	adds	r3, #4
 800e874:	4618      	mov	r0, r3
 800e876:	f7fe fd13 	bl	800d2a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e87a:	693b      	ldr	r3, [r7, #16]
 800e87c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e87e:	4b19      	ldr	r3, [pc, #100]	@ (800e8e4 <xTaskRemoveFromEventList+0xb4>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	429a      	cmp	r2, r3
 800e884:	d903      	bls.n	800e88e <xTaskRemoveFromEventList+0x5e>
 800e886:	693b      	ldr	r3, [r7, #16]
 800e888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e88a:	4a16      	ldr	r2, [pc, #88]	@ (800e8e4 <xTaskRemoveFromEventList+0xb4>)
 800e88c:	6013      	str	r3, [r2, #0]
 800e88e:	693b      	ldr	r3, [r7, #16]
 800e890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e892:	4613      	mov	r3, r2
 800e894:	009b      	lsls	r3, r3, #2
 800e896:	4413      	add	r3, r2
 800e898:	009b      	lsls	r3, r3, #2
 800e89a:	4a13      	ldr	r2, [pc, #76]	@ (800e8e8 <xTaskRemoveFromEventList+0xb8>)
 800e89c:	441a      	add	r2, r3
 800e89e:	693b      	ldr	r3, [r7, #16]
 800e8a0:	3304      	adds	r3, #4
 800e8a2:	4619      	mov	r1, r3
 800e8a4:	4610      	mov	r0, r2
 800e8a6:	f7fe fc9e 	bl	800d1e6 <vListInsertEnd>
 800e8aa:	e005      	b.n	800e8b8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e8ac:	693b      	ldr	r3, [r7, #16]
 800e8ae:	3318      	adds	r3, #24
 800e8b0:	4619      	mov	r1, r3
 800e8b2:	480e      	ldr	r0, [pc, #56]	@ (800e8ec <xTaskRemoveFromEventList+0xbc>)
 800e8b4:	f7fe fc97 	bl	800d1e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e8b8:	693b      	ldr	r3, [r7, #16]
 800e8ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8bc:	4b0c      	ldr	r3, [pc, #48]	@ (800e8f0 <xTaskRemoveFromEventList+0xc0>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d905      	bls.n	800e8d2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e8ca:	4b0a      	ldr	r3, [pc, #40]	@ (800e8f4 <xTaskRemoveFromEventList+0xc4>)
 800e8cc:	2201      	movs	r2, #1
 800e8ce:	601a      	str	r2, [r3, #0]
 800e8d0:	e001      	b.n	800e8d6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e8d6:	697b      	ldr	r3, [r7, #20]
}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	3718      	adds	r7, #24
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}
 800e8e0:	2000187c 	.word	0x2000187c
 800e8e4:	2000185c 	.word	0x2000185c
 800e8e8:	20001384 	.word	0x20001384
 800e8ec:	20001814 	.word	0x20001814
 800e8f0:	20001380 	.word	0x20001380
 800e8f4:	20001868 	.word	0x20001868

0800e8f8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b086      	sub	sp, #24
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800e902:	4b2a      	ldr	r3, [pc, #168]	@ (800e9ac <vTaskRemoveFromUnorderedEventList+0xb4>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d10b      	bne.n	800e922 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800e90a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e90e:	f383 8811 	msr	BASEPRI, r3
 800e912:	f3bf 8f6f 	isb	sy
 800e916:	f3bf 8f4f 	dsb	sy
 800e91a:	613b      	str	r3, [r7, #16]
}
 800e91c:	bf00      	nop
 800e91e:	bf00      	nop
 800e920:	e7fd      	b.n	800e91e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	68db      	ldr	r3, [r3, #12]
 800e930:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d10b      	bne.n	800e950 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800e938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e93c:	f383 8811 	msr	BASEPRI, r3
 800e940:	f3bf 8f6f 	isb	sy
 800e944:	f3bf 8f4f 	dsb	sy
 800e948:	60fb      	str	r3, [r7, #12]
}
 800e94a:	bf00      	nop
 800e94c:	bf00      	nop
 800e94e:	e7fd      	b.n	800e94c <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f7fe fca5 	bl	800d2a0 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	3304      	adds	r3, #4
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7fe fca0 	bl	800d2a0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800e960:	697b      	ldr	r3, [r7, #20]
 800e962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e964:	4b12      	ldr	r3, [pc, #72]	@ (800e9b0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	429a      	cmp	r2, r3
 800e96a:	d903      	bls.n	800e974 <vTaskRemoveFromUnorderedEventList+0x7c>
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e970:	4a0f      	ldr	r2, [pc, #60]	@ (800e9b0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e972:	6013      	str	r3, [r2, #0]
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e978:	4613      	mov	r3, r2
 800e97a:	009b      	lsls	r3, r3, #2
 800e97c:	4413      	add	r3, r2
 800e97e:	009b      	lsls	r3, r3, #2
 800e980:	4a0c      	ldr	r2, [pc, #48]	@ (800e9b4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800e982:	441a      	add	r2, r3
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	3304      	adds	r3, #4
 800e988:	4619      	mov	r1, r3
 800e98a:	4610      	mov	r0, r2
 800e98c:	f7fe fc2b 	bl	800d1e6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e990:	697b      	ldr	r3, [r7, #20]
 800e992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e994:	4b08      	ldr	r3, [pc, #32]	@ (800e9b8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d902      	bls.n	800e9a4 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800e99e:	4b07      	ldr	r3, [pc, #28]	@ (800e9bc <vTaskRemoveFromUnorderedEventList+0xc4>)
 800e9a0:	2201      	movs	r2, #1
 800e9a2:	601a      	str	r2, [r3, #0]
	}
}
 800e9a4:	bf00      	nop
 800e9a6:	3718      	adds	r7, #24
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}
 800e9ac:	2000187c 	.word	0x2000187c
 800e9b0:	2000185c 	.word	0x2000185c
 800e9b4:	20001384 	.word	0x20001384
 800e9b8:	20001380 	.word	0x20001380
 800e9bc:	20001868 	.word	0x20001868

0800e9c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e9c0:	b480      	push	{r7}
 800e9c2:	b083      	sub	sp, #12
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e9c8:	4b06      	ldr	r3, [pc, #24]	@ (800e9e4 <vTaskInternalSetTimeOutState+0x24>)
 800e9ca:	681a      	ldr	r2, [r3, #0]
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e9d0:	4b05      	ldr	r3, [pc, #20]	@ (800e9e8 <vTaskInternalSetTimeOutState+0x28>)
 800e9d2:	681a      	ldr	r2, [r3, #0]
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	605a      	str	r2, [r3, #4]
}
 800e9d8:	bf00      	nop
 800e9da:	370c      	adds	r7, #12
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e2:	4770      	bx	lr
 800e9e4:	2000186c 	.word	0x2000186c
 800e9e8:	20001858 	.word	0x20001858

0800e9ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b088      	sub	sp, #32
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
 800e9f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d10b      	bne.n	800ea14 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e9fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea00:	f383 8811 	msr	BASEPRI, r3
 800ea04:	f3bf 8f6f 	isb	sy
 800ea08:	f3bf 8f4f 	dsb	sy
 800ea0c:	613b      	str	r3, [r7, #16]
}
 800ea0e:	bf00      	nop
 800ea10:	bf00      	nop
 800ea12:	e7fd      	b.n	800ea10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d10b      	bne.n	800ea32 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ea1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea1e:	f383 8811 	msr	BASEPRI, r3
 800ea22:	f3bf 8f6f 	isb	sy
 800ea26:	f3bf 8f4f 	dsb	sy
 800ea2a:	60fb      	str	r3, [r7, #12]
}
 800ea2c:	bf00      	nop
 800ea2e:	bf00      	nop
 800ea30:	e7fd      	b.n	800ea2e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ea32:	f000 fec9 	bl	800f7c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ea36:	4b1d      	ldr	r3, [pc, #116]	@ (800eaac <xTaskCheckForTimeOut+0xc0>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	685b      	ldr	r3, [r3, #4]
 800ea40:	69ba      	ldr	r2, [r7, #24]
 800ea42:	1ad3      	subs	r3, r2, r3
 800ea44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea4e:	d102      	bne.n	800ea56 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ea50:	2300      	movs	r3, #0
 800ea52:	61fb      	str	r3, [r7, #28]
 800ea54:	e023      	b.n	800ea9e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681a      	ldr	r2, [r3, #0]
 800ea5a:	4b15      	ldr	r3, [pc, #84]	@ (800eab0 <xTaskCheckForTimeOut+0xc4>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	d007      	beq.n	800ea72 <xTaskCheckForTimeOut+0x86>
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	685b      	ldr	r3, [r3, #4]
 800ea66:	69ba      	ldr	r2, [r7, #24]
 800ea68:	429a      	cmp	r2, r3
 800ea6a:	d302      	bcc.n	800ea72 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ea6c:	2301      	movs	r3, #1
 800ea6e:	61fb      	str	r3, [r7, #28]
 800ea70:	e015      	b.n	800ea9e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	697a      	ldr	r2, [r7, #20]
 800ea78:	429a      	cmp	r2, r3
 800ea7a:	d20b      	bcs.n	800ea94 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	681a      	ldr	r2, [r3, #0]
 800ea80:	697b      	ldr	r3, [r7, #20]
 800ea82:	1ad2      	subs	r2, r2, r3
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ea88:	6878      	ldr	r0, [r7, #4]
 800ea8a:	f7ff ff99 	bl	800e9c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	61fb      	str	r3, [r7, #28]
 800ea92:	e004      	b.n	800ea9e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	2200      	movs	r2, #0
 800ea98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ea9e:	f000 fec5 	bl	800f82c <vPortExitCritical>

	return xReturn;
 800eaa2:	69fb      	ldr	r3, [r7, #28]
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3720      	adds	r7, #32
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}
 800eaac:	20001858 	.word	0x20001858
 800eab0:	2000186c 	.word	0x2000186c

0800eab4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eab4:	b480      	push	{r7}
 800eab6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eab8:	4b03      	ldr	r3, [pc, #12]	@ (800eac8 <vTaskMissedYield+0x14>)
 800eaba:	2201      	movs	r2, #1
 800eabc:	601a      	str	r2, [r3, #0]
}
 800eabe:	bf00      	nop
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr
 800eac8:	20001868 	.word	0x20001868

0800eacc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b082      	sub	sp, #8
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ead4:	f000 f852 	bl	800eb7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ead8:	4b06      	ldr	r3, [pc, #24]	@ (800eaf4 <prvIdleTask+0x28>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	2b01      	cmp	r3, #1
 800eade:	d9f9      	bls.n	800ead4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800eae0:	4b05      	ldr	r3, [pc, #20]	@ (800eaf8 <prvIdleTask+0x2c>)
 800eae2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eae6:	601a      	str	r2, [r3, #0]
 800eae8:	f3bf 8f4f 	dsb	sy
 800eaec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800eaf0:	e7f0      	b.n	800ead4 <prvIdleTask+0x8>
 800eaf2:	bf00      	nop
 800eaf4:	20001384 	.word	0x20001384
 800eaf8:	e000ed04 	.word	0xe000ed04

0800eafc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b082      	sub	sp, #8
 800eb00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb02:	2300      	movs	r3, #0
 800eb04:	607b      	str	r3, [r7, #4]
 800eb06:	e00c      	b.n	800eb22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eb08:	687a      	ldr	r2, [r7, #4]
 800eb0a:	4613      	mov	r3, r2
 800eb0c:	009b      	lsls	r3, r3, #2
 800eb0e:	4413      	add	r3, r2
 800eb10:	009b      	lsls	r3, r3, #2
 800eb12:	4a12      	ldr	r2, [pc, #72]	@ (800eb5c <prvInitialiseTaskLists+0x60>)
 800eb14:	4413      	add	r3, r2
 800eb16:	4618      	mov	r0, r3
 800eb18:	f7fe fb38 	bl	800d18c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	3301      	adds	r3, #1
 800eb20:	607b      	str	r3, [r7, #4]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2b37      	cmp	r3, #55	@ 0x37
 800eb26:	d9ef      	bls.n	800eb08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eb28:	480d      	ldr	r0, [pc, #52]	@ (800eb60 <prvInitialiseTaskLists+0x64>)
 800eb2a:	f7fe fb2f 	bl	800d18c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eb2e:	480d      	ldr	r0, [pc, #52]	@ (800eb64 <prvInitialiseTaskLists+0x68>)
 800eb30:	f7fe fb2c 	bl	800d18c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eb34:	480c      	ldr	r0, [pc, #48]	@ (800eb68 <prvInitialiseTaskLists+0x6c>)
 800eb36:	f7fe fb29 	bl	800d18c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800eb3a:	480c      	ldr	r0, [pc, #48]	@ (800eb6c <prvInitialiseTaskLists+0x70>)
 800eb3c:	f7fe fb26 	bl	800d18c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eb40:	480b      	ldr	r0, [pc, #44]	@ (800eb70 <prvInitialiseTaskLists+0x74>)
 800eb42:	f7fe fb23 	bl	800d18c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eb46:	4b0b      	ldr	r3, [pc, #44]	@ (800eb74 <prvInitialiseTaskLists+0x78>)
 800eb48:	4a05      	ldr	r2, [pc, #20]	@ (800eb60 <prvInitialiseTaskLists+0x64>)
 800eb4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eb4c:	4b0a      	ldr	r3, [pc, #40]	@ (800eb78 <prvInitialiseTaskLists+0x7c>)
 800eb4e:	4a05      	ldr	r2, [pc, #20]	@ (800eb64 <prvInitialiseTaskLists+0x68>)
 800eb50:	601a      	str	r2, [r3, #0]
}
 800eb52:	bf00      	nop
 800eb54:	3708      	adds	r7, #8
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}
 800eb5a:	bf00      	nop
 800eb5c:	20001384 	.word	0x20001384
 800eb60:	200017e4 	.word	0x200017e4
 800eb64:	200017f8 	.word	0x200017f8
 800eb68:	20001814 	.word	0x20001814
 800eb6c:	20001828 	.word	0x20001828
 800eb70:	20001840 	.word	0x20001840
 800eb74:	2000180c 	.word	0x2000180c
 800eb78:	20001810 	.word	0x20001810

0800eb7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b082      	sub	sp, #8
 800eb80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb82:	e019      	b.n	800ebb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800eb84:	f000 fe20 	bl	800f7c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb88:	4b10      	ldr	r3, [pc, #64]	@ (800ebcc <prvCheckTasksWaitingTermination+0x50>)
 800eb8a:	68db      	ldr	r3, [r3, #12]
 800eb8c:	68db      	ldr	r3, [r3, #12]
 800eb8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	3304      	adds	r3, #4
 800eb94:	4618      	mov	r0, r3
 800eb96:	f7fe fb83 	bl	800d2a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800eb9a:	4b0d      	ldr	r3, [pc, #52]	@ (800ebd0 <prvCheckTasksWaitingTermination+0x54>)
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	3b01      	subs	r3, #1
 800eba0:	4a0b      	ldr	r2, [pc, #44]	@ (800ebd0 <prvCheckTasksWaitingTermination+0x54>)
 800eba2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800eba4:	4b0b      	ldr	r3, [pc, #44]	@ (800ebd4 <prvCheckTasksWaitingTermination+0x58>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	3b01      	subs	r3, #1
 800ebaa:	4a0a      	ldr	r2, [pc, #40]	@ (800ebd4 <prvCheckTasksWaitingTermination+0x58>)
 800ebac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ebae:	f000 fe3d 	bl	800f82c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f000 f810 	bl	800ebd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ebb8:	4b06      	ldr	r3, [pc, #24]	@ (800ebd4 <prvCheckTasksWaitingTermination+0x58>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d1e1      	bne.n	800eb84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ebc0:	bf00      	nop
 800ebc2:	bf00      	nop
 800ebc4:	3708      	adds	r7, #8
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	bd80      	pop	{r7, pc}
 800ebca:	bf00      	nop
 800ebcc:	20001828 	.word	0x20001828
 800ebd0:	20001854 	.word	0x20001854
 800ebd4:	2000183c 	.word	0x2000183c

0800ebd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b084      	sub	sp, #16
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d108      	bne.n	800ebfc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f000 ffda 	bl	800fba8 <vPortFree>
				vPortFree( pxTCB );
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f000 ffd7 	bl	800fba8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ebfa:	e019      	b.n	800ec30 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ec02:	2b01      	cmp	r3, #1
 800ec04:	d103      	bne.n	800ec0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f000 ffce 	bl	800fba8 <vPortFree>
	}
 800ec0c:	e010      	b.n	800ec30 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ec14:	2b02      	cmp	r3, #2
 800ec16:	d00b      	beq.n	800ec30 <prvDeleteTCB+0x58>
	__asm volatile
 800ec18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec1c:	f383 8811 	msr	BASEPRI, r3
 800ec20:	f3bf 8f6f 	isb	sy
 800ec24:	f3bf 8f4f 	dsb	sy
 800ec28:	60fb      	str	r3, [r7, #12]
}
 800ec2a:	bf00      	nop
 800ec2c:	bf00      	nop
 800ec2e:	e7fd      	b.n	800ec2c <prvDeleteTCB+0x54>
	}
 800ec30:	bf00      	nop
 800ec32:	3710      	adds	r7, #16
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ec38:	b480      	push	{r7}
 800ec3a:	b083      	sub	sp, #12
 800ec3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec3e:	4b0c      	ldr	r3, [pc, #48]	@ (800ec70 <prvResetNextTaskUnblockTime+0x38>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d104      	bne.n	800ec52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ec48:	4b0a      	ldr	r3, [pc, #40]	@ (800ec74 <prvResetNextTaskUnblockTime+0x3c>)
 800ec4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ec4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ec50:	e008      	b.n	800ec64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec52:	4b07      	ldr	r3, [pc, #28]	@ (800ec70 <prvResetNextTaskUnblockTime+0x38>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	68db      	ldr	r3, [r3, #12]
 800ec58:	68db      	ldr	r3, [r3, #12]
 800ec5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	685b      	ldr	r3, [r3, #4]
 800ec60:	4a04      	ldr	r2, [pc, #16]	@ (800ec74 <prvResetNextTaskUnblockTime+0x3c>)
 800ec62:	6013      	str	r3, [r2, #0]
}
 800ec64:	bf00      	nop
 800ec66:	370c      	adds	r7, #12
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6e:	4770      	bx	lr
 800ec70:	2000180c 	.word	0x2000180c
 800ec74:	20001874 	.word	0x20001874

0800ec78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ec78:	b480      	push	{r7}
 800ec7a:	b083      	sub	sp, #12
 800ec7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ec7e:	4b0b      	ldr	r3, [pc, #44]	@ (800ecac <xTaskGetSchedulerState+0x34>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d102      	bne.n	800ec8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ec86:	2301      	movs	r3, #1
 800ec88:	607b      	str	r3, [r7, #4]
 800ec8a:	e008      	b.n	800ec9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec8c:	4b08      	ldr	r3, [pc, #32]	@ (800ecb0 <xTaskGetSchedulerState+0x38>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d102      	bne.n	800ec9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ec94:	2302      	movs	r3, #2
 800ec96:	607b      	str	r3, [r7, #4]
 800ec98:	e001      	b.n	800ec9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ec9e:	687b      	ldr	r3, [r7, #4]
	}
 800eca0:	4618      	mov	r0, r3
 800eca2:	370c      	adds	r7, #12
 800eca4:	46bd      	mov	sp, r7
 800eca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecaa:	4770      	bx	lr
 800ecac:	20001860 	.word	0x20001860
 800ecb0:	2000187c 	.word	0x2000187c

0800ecb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b086      	sub	sp, #24
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d058      	beq.n	800ed7c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ecca:	4b2f      	ldr	r3, [pc, #188]	@ (800ed88 <xTaskPriorityDisinherit+0xd4>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	693a      	ldr	r2, [r7, #16]
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	d00b      	beq.n	800ecec <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ecd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecd8:	f383 8811 	msr	BASEPRI, r3
 800ecdc:	f3bf 8f6f 	isb	sy
 800ece0:	f3bf 8f4f 	dsb	sy
 800ece4:	60fb      	str	r3, [r7, #12]
}
 800ece6:	bf00      	nop
 800ece8:	bf00      	nop
 800ecea:	e7fd      	b.n	800ece8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ecec:	693b      	ldr	r3, [r7, #16]
 800ecee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d10b      	bne.n	800ed0c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ecf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecf8:	f383 8811 	msr	BASEPRI, r3
 800ecfc:	f3bf 8f6f 	isb	sy
 800ed00:	f3bf 8f4f 	dsb	sy
 800ed04:	60bb      	str	r3, [r7, #8]
}
 800ed06:	bf00      	nop
 800ed08:	bf00      	nop
 800ed0a:	e7fd      	b.n	800ed08 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed10:	1e5a      	subs	r2, r3, #1
 800ed12:	693b      	ldr	r3, [r7, #16]
 800ed14:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ed16:	693b      	ldr	r3, [r7, #16]
 800ed18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d02c      	beq.n	800ed7c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ed22:	693b      	ldr	r3, [r7, #16]
 800ed24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d128      	bne.n	800ed7c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed2a:	693b      	ldr	r3, [r7, #16]
 800ed2c:	3304      	adds	r3, #4
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f7fe fab6 	bl	800d2a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ed38:	693b      	ldr	r3, [r7, #16]
 800ed3a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed3c:	693b      	ldr	r3, [r7, #16]
 800ed3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed40:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ed44:	693b      	ldr	r3, [r7, #16]
 800ed46:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ed48:	693b      	ldr	r3, [r7, #16]
 800ed4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed4c:	4b0f      	ldr	r3, [pc, #60]	@ (800ed8c <xTaskPriorityDisinherit+0xd8>)
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	429a      	cmp	r2, r3
 800ed52:	d903      	bls.n	800ed5c <xTaskPriorityDisinherit+0xa8>
 800ed54:	693b      	ldr	r3, [r7, #16]
 800ed56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed58:	4a0c      	ldr	r2, [pc, #48]	@ (800ed8c <xTaskPriorityDisinherit+0xd8>)
 800ed5a:	6013      	str	r3, [r2, #0]
 800ed5c:	693b      	ldr	r3, [r7, #16]
 800ed5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed60:	4613      	mov	r3, r2
 800ed62:	009b      	lsls	r3, r3, #2
 800ed64:	4413      	add	r3, r2
 800ed66:	009b      	lsls	r3, r3, #2
 800ed68:	4a09      	ldr	r2, [pc, #36]	@ (800ed90 <xTaskPriorityDisinherit+0xdc>)
 800ed6a:	441a      	add	r2, r3
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	3304      	adds	r3, #4
 800ed70:	4619      	mov	r1, r3
 800ed72:	4610      	mov	r0, r2
 800ed74:	f7fe fa37 	bl	800d1e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ed78:	2301      	movs	r3, #1
 800ed7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ed7c:	697b      	ldr	r3, [r7, #20]
	}
 800ed7e:	4618      	mov	r0, r3
 800ed80:	3718      	adds	r7, #24
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}
 800ed86:	bf00      	nop
 800ed88:	20001380 	.word	0x20001380
 800ed8c:	2000185c 	.word	0x2000185c
 800ed90:	20001384 	.word	0x20001384

0800ed94 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800ed94:	b480      	push	{r7}
 800ed96:	b083      	sub	sp, #12
 800ed98:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800ed9a:	4b09      	ldr	r3, [pc, #36]	@ (800edc0 <uxTaskResetEventItemValue+0x2c>)
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	699b      	ldr	r3, [r3, #24]
 800eda0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eda2:	4b07      	ldr	r3, [pc, #28]	@ (800edc0 <uxTaskResetEventItemValue+0x2c>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eda8:	4b05      	ldr	r3, [pc, #20]	@ (800edc0 <uxTaskResetEventItemValue+0x2c>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800edb0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800edb2:	687b      	ldr	r3, [r7, #4]
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	370c      	adds	r7, #12
 800edb8:	46bd      	mov	sp, r7
 800edba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbe:	4770      	bx	lr
 800edc0:	20001380 	.word	0x20001380

0800edc4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b084      	sub	sp, #16
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
 800edcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800edce:	4b21      	ldr	r3, [pc, #132]	@ (800ee54 <prvAddCurrentTaskToDelayedList+0x90>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800edd4:	4b20      	ldr	r3, [pc, #128]	@ (800ee58 <prvAddCurrentTaskToDelayedList+0x94>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	3304      	adds	r3, #4
 800edda:	4618      	mov	r0, r3
 800eddc:	f7fe fa60 	bl	800d2a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ede6:	d10a      	bne.n	800edfe <prvAddCurrentTaskToDelayedList+0x3a>
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d007      	beq.n	800edfe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800edee:	4b1a      	ldr	r3, [pc, #104]	@ (800ee58 <prvAddCurrentTaskToDelayedList+0x94>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	3304      	adds	r3, #4
 800edf4:	4619      	mov	r1, r3
 800edf6:	4819      	ldr	r0, [pc, #100]	@ (800ee5c <prvAddCurrentTaskToDelayedList+0x98>)
 800edf8:	f7fe f9f5 	bl	800d1e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800edfc:	e026      	b.n	800ee4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800edfe:	68fa      	ldr	r2, [r7, #12]
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	4413      	add	r3, r2
 800ee04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ee06:	4b14      	ldr	r3, [pc, #80]	@ (800ee58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	68ba      	ldr	r2, [r7, #8]
 800ee0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ee0e:	68ba      	ldr	r2, [r7, #8]
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d209      	bcs.n	800ee2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee16:	4b12      	ldr	r3, [pc, #72]	@ (800ee60 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ee18:	681a      	ldr	r2, [r3, #0]
 800ee1a:	4b0f      	ldr	r3, [pc, #60]	@ (800ee58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	3304      	adds	r3, #4
 800ee20:	4619      	mov	r1, r3
 800ee22:	4610      	mov	r0, r2
 800ee24:	f7fe fa03 	bl	800d22e <vListInsert>
}
 800ee28:	e010      	b.n	800ee4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee2a:	4b0e      	ldr	r3, [pc, #56]	@ (800ee64 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ee2c:	681a      	ldr	r2, [r3, #0]
 800ee2e:	4b0a      	ldr	r3, [pc, #40]	@ (800ee58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	3304      	adds	r3, #4
 800ee34:	4619      	mov	r1, r3
 800ee36:	4610      	mov	r0, r2
 800ee38:	f7fe f9f9 	bl	800d22e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ee3c:	4b0a      	ldr	r3, [pc, #40]	@ (800ee68 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	68ba      	ldr	r2, [r7, #8]
 800ee42:	429a      	cmp	r2, r3
 800ee44:	d202      	bcs.n	800ee4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ee46:	4a08      	ldr	r2, [pc, #32]	@ (800ee68 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	6013      	str	r3, [r2, #0]
}
 800ee4c:	bf00      	nop
 800ee4e:	3710      	adds	r7, #16
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}
 800ee54:	20001858 	.word	0x20001858
 800ee58:	20001380 	.word	0x20001380
 800ee5c:	20001840 	.word	0x20001840
 800ee60:	20001810 	.word	0x20001810
 800ee64:	2000180c 	.word	0x2000180c
 800ee68:	20001874 	.word	0x20001874

0800ee6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b08a      	sub	sp, #40	@ 0x28
 800ee70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ee72:	2300      	movs	r3, #0
 800ee74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ee76:	f000 fb13 	bl	800f4a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ee7a:	4b1d      	ldr	r3, [pc, #116]	@ (800eef0 <xTimerCreateTimerTask+0x84>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d021      	beq.n	800eec6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ee82:	2300      	movs	r3, #0
 800ee84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ee86:	2300      	movs	r3, #0
 800ee88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ee8a:	1d3a      	adds	r2, r7, #4
 800ee8c:	f107 0108 	add.w	r1, r7, #8
 800ee90:	f107 030c 	add.w	r3, r7, #12
 800ee94:	4618      	mov	r0, r3
 800ee96:	f7fd ff69 	bl	800cd6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ee9a:	6879      	ldr	r1, [r7, #4]
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	68fa      	ldr	r2, [r7, #12]
 800eea0:	9202      	str	r2, [sp, #8]
 800eea2:	9301      	str	r3, [sp, #4]
 800eea4:	2302      	movs	r3, #2
 800eea6:	9300      	str	r3, [sp, #0]
 800eea8:	2300      	movs	r3, #0
 800eeaa:	460a      	mov	r2, r1
 800eeac:	4911      	ldr	r1, [pc, #68]	@ (800eef4 <xTimerCreateTimerTask+0x88>)
 800eeae:	4812      	ldr	r0, [pc, #72]	@ (800eef8 <xTimerCreateTimerTask+0x8c>)
 800eeb0:	f7ff f816 	bl	800dee0 <xTaskCreateStatic>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	4a11      	ldr	r2, [pc, #68]	@ (800eefc <xTimerCreateTimerTask+0x90>)
 800eeb8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800eeba:	4b10      	ldr	r3, [pc, #64]	@ (800eefc <xTimerCreateTimerTask+0x90>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d001      	beq.n	800eec6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800eec2:	2301      	movs	r3, #1
 800eec4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d10b      	bne.n	800eee4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800eecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eed0:	f383 8811 	msr	BASEPRI, r3
 800eed4:	f3bf 8f6f 	isb	sy
 800eed8:	f3bf 8f4f 	dsb	sy
 800eedc:	613b      	str	r3, [r7, #16]
}
 800eede:	bf00      	nop
 800eee0:	bf00      	nop
 800eee2:	e7fd      	b.n	800eee0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800eee4:	697b      	ldr	r3, [r7, #20]
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	3718      	adds	r7, #24
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}
 800eeee:	bf00      	nop
 800eef0:	200018b0 	.word	0x200018b0
 800eef4:	080137c0 	.word	0x080137c0
 800eef8:	0800f039 	.word	0x0800f039
 800eefc:	200018b4 	.word	0x200018b4

0800ef00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b08a      	sub	sp, #40	@ 0x28
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	60f8      	str	r0, [r7, #12]
 800ef08:	60b9      	str	r1, [r7, #8]
 800ef0a:	607a      	str	r2, [r7, #4]
 800ef0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d10b      	bne.n	800ef30 <xTimerGenericCommand+0x30>
	__asm volatile
 800ef18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef1c:	f383 8811 	msr	BASEPRI, r3
 800ef20:	f3bf 8f6f 	isb	sy
 800ef24:	f3bf 8f4f 	dsb	sy
 800ef28:	623b      	str	r3, [r7, #32]
}
 800ef2a:	bf00      	nop
 800ef2c:	bf00      	nop
 800ef2e:	e7fd      	b.n	800ef2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ef30:	4b19      	ldr	r3, [pc, #100]	@ (800ef98 <xTimerGenericCommand+0x98>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d02a      	beq.n	800ef8e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	2b05      	cmp	r3, #5
 800ef48:	dc18      	bgt.n	800ef7c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ef4a:	f7ff fe95 	bl	800ec78 <xTaskGetSchedulerState>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	2b02      	cmp	r3, #2
 800ef52:	d109      	bne.n	800ef68 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ef54:	4b10      	ldr	r3, [pc, #64]	@ (800ef98 <xTimerGenericCommand+0x98>)
 800ef56:	6818      	ldr	r0, [r3, #0]
 800ef58:	f107 0110 	add.w	r1, r7, #16
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef60:	f7fe fb0e 	bl	800d580 <xQueueGenericSend>
 800ef64:	6278      	str	r0, [r7, #36]	@ 0x24
 800ef66:	e012      	b.n	800ef8e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ef68:	4b0b      	ldr	r3, [pc, #44]	@ (800ef98 <xTimerGenericCommand+0x98>)
 800ef6a:	6818      	ldr	r0, [r3, #0]
 800ef6c:	f107 0110 	add.w	r1, r7, #16
 800ef70:	2300      	movs	r3, #0
 800ef72:	2200      	movs	r2, #0
 800ef74:	f7fe fb04 	bl	800d580 <xQueueGenericSend>
 800ef78:	6278      	str	r0, [r7, #36]	@ 0x24
 800ef7a:	e008      	b.n	800ef8e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ef7c:	4b06      	ldr	r3, [pc, #24]	@ (800ef98 <xTimerGenericCommand+0x98>)
 800ef7e:	6818      	ldr	r0, [r3, #0]
 800ef80:	f107 0110 	add.w	r1, r7, #16
 800ef84:	2300      	movs	r3, #0
 800ef86:	683a      	ldr	r2, [r7, #0]
 800ef88:	f7fe fbfc 	bl	800d784 <xQueueGenericSendFromISR>
 800ef8c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ef8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ef90:	4618      	mov	r0, r3
 800ef92:	3728      	adds	r7, #40	@ 0x28
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}
 800ef98:	200018b0 	.word	0x200018b0

0800ef9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b088      	sub	sp, #32
 800efa0:	af02      	add	r7, sp, #8
 800efa2:	6078      	str	r0, [r7, #4]
 800efa4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efa6:	4b23      	ldr	r3, [pc, #140]	@ (800f034 <prvProcessExpiredTimer+0x98>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	68db      	ldr	r3, [r3, #12]
 800efac:	68db      	ldr	r3, [r3, #12]
 800efae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800efb0:	697b      	ldr	r3, [r7, #20]
 800efb2:	3304      	adds	r3, #4
 800efb4:	4618      	mov	r0, r3
 800efb6:	f7fe f973 	bl	800d2a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800efba:	697b      	ldr	r3, [r7, #20]
 800efbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800efc0:	f003 0304 	and.w	r3, r3, #4
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d023      	beq.n	800f010 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	699a      	ldr	r2, [r3, #24]
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	18d1      	adds	r1, r2, r3
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	683a      	ldr	r2, [r7, #0]
 800efd4:	6978      	ldr	r0, [r7, #20]
 800efd6:	f000 f8d5 	bl	800f184 <prvInsertTimerInActiveList>
 800efda:	4603      	mov	r3, r0
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d020      	beq.n	800f022 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800efe0:	2300      	movs	r3, #0
 800efe2:	9300      	str	r3, [sp, #0]
 800efe4:	2300      	movs	r3, #0
 800efe6:	687a      	ldr	r2, [r7, #4]
 800efe8:	2100      	movs	r1, #0
 800efea:	6978      	ldr	r0, [r7, #20]
 800efec:	f7ff ff88 	bl	800ef00 <xTimerGenericCommand>
 800eff0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d114      	bne.n	800f022 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800eff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800effc:	f383 8811 	msr	BASEPRI, r3
 800f000:	f3bf 8f6f 	isb	sy
 800f004:	f3bf 8f4f 	dsb	sy
 800f008:	60fb      	str	r3, [r7, #12]
}
 800f00a:	bf00      	nop
 800f00c:	bf00      	nop
 800f00e:	e7fd      	b.n	800f00c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f010:	697b      	ldr	r3, [r7, #20]
 800f012:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f016:	f023 0301 	bic.w	r3, r3, #1
 800f01a:	b2da      	uxtb	r2, r3
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f022:	697b      	ldr	r3, [r7, #20]
 800f024:	6a1b      	ldr	r3, [r3, #32]
 800f026:	6978      	ldr	r0, [r7, #20]
 800f028:	4798      	blx	r3
}
 800f02a:	bf00      	nop
 800f02c:	3718      	adds	r7, #24
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}
 800f032:	bf00      	nop
 800f034:	200018a8 	.word	0x200018a8

0800f038 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b084      	sub	sp, #16
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f040:	f107 0308 	add.w	r3, r7, #8
 800f044:	4618      	mov	r0, r3
 800f046:	f000 f859 	bl	800f0fc <prvGetNextExpireTime>
 800f04a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	4619      	mov	r1, r3
 800f050:	68f8      	ldr	r0, [r7, #12]
 800f052:	f000 f805 	bl	800f060 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f056:	f000 f8d7 	bl	800f208 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f05a:	bf00      	nop
 800f05c:	e7f0      	b.n	800f040 <prvTimerTask+0x8>
	...

0800f060 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b084      	sub	sp, #16
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
 800f068:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f06a:	f7ff f97d 	bl	800e368 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f06e:	f107 0308 	add.w	r3, r7, #8
 800f072:	4618      	mov	r0, r3
 800f074:	f000 f866 	bl	800f144 <prvSampleTimeNow>
 800f078:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d130      	bne.n	800f0e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d10a      	bne.n	800f09c <prvProcessTimerOrBlockTask+0x3c>
 800f086:	687a      	ldr	r2, [r7, #4]
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	429a      	cmp	r2, r3
 800f08c:	d806      	bhi.n	800f09c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f08e:	f7ff f979 	bl	800e384 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f092:	68f9      	ldr	r1, [r7, #12]
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f7ff ff81 	bl	800ef9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f09a:	e024      	b.n	800f0e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d008      	beq.n	800f0b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f0a2:	4b13      	ldr	r3, [pc, #76]	@ (800f0f0 <prvProcessTimerOrBlockTask+0x90>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d101      	bne.n	800f0b0 <prvProcessTimerOrBlockTask+0x50>
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	e000      	b.n	800f0b2 <prvProcessTimerOrBlockTask+0x52>
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f0b4:	4b0f      	ldr	r3, [pc, #60]	@ (800f0f4 <prvProcessTimerOrBlockTask+0x94>)
 800f0b6:	6818      	ldr	r0, [r3, #0]
 800f0b8:	687a      	ldr	r2, [r7, #4]
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	1ad3      	subs	r3, r2, r3
 800f0be:	683a      	ldr	r2, [r7, #0]
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	f7fe fed9 	bl	800de78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f0c6:	f7ff f95d 	bl	800e384 <xTaskResumeAll>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d10a      	bne.n	800f0e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f0d0:	4b09      	ldr	r3, [pc, #36]	@ (800f0f8 <prvProcessTimerOrBlockTask+0x98>)
 800f0d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f0d6:	601a      	str	r2, [r3, #0]
 800f0d8:	f3bf 8f4f 	dsb	sy
 800f0dc:	f3bf 8f6f 	isb	sy
}
 800f0e0:	e001      	b.n	800f0e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f0e2:	f7ff f94f 	bl	800e384 <xTaskResumeAll>
}
 800f0e6:	bf00      	nop
 800f0e8:	3710      	adds	r7, #16
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd80      	pop	{r7, pc}
 800f0ee:	bf00      	nop
 800f0f0:	200018ac 	.word	0x200018ac
 800f0f4:	200018b0 	.word	0x200018b0
 800f0f8:	e000ed04 	.word	0xe000ed04

0800f0fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f0fc:	b480      	push	{r7}
 800f0fe:	b085      	sub	sp, #20
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f104:	4b0e      	ldr	r3, [pc, #56]	@ (800f140 <prvGetNextExpireTime+0x44>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d101      	bne.n	800f112 <prvGetNextExpireTime+0x16>
 800f10e:	2201      	movs	r2, #1
 800f110:	e000      	b.n	800f114 <prvGetNextExpireTime+0x18>
 800f112:	2200      	movs	r2, #0
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d105      	bne.n	800f12c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f120:	4b07      	ldr	r3, [pc, #28]	@ (800f140 <prvGetNextExpireTime+0x44>)
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	68db      	ldr	r3, [r3, #12]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	60fb      	str	r3, [r7, #12]
 800f12a:	e001      	b.n	800f130 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f12c:	2300      	movs	r3, #0
 800f12e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f130:	68fb      	ldr	r3, [r7, #12]
}
 800f132:	4618      	mov	r0, r3
 800f134:	3714      	adds	r7, #20
 800f136:	46bd      	mov	sp, r7
 800f138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13c:	4770      	bx	lr
 800f13e:	bf00      	nop
 800f140:	200018a8 	.word	0x200018a8

0800f144 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b084      	sub	sp, #16
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f14c:	f7ff f9b8 	bl	800e4c0 <xTaskGetTickCount>
 800f150:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f152:	4b0b      	ldr	r3, [pc, #44]	@ (800f180 <prvSampleTimeNow+0x3c>)
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	68fa      	ldr	r2, [r7, #12]
 800f158:	429a      	cmp	r2, r3
 800f15a:	d205      	bcs.n	800f168 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f15c:	f000 f93a 	bl	800f3d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2201      	movs	r2, #1
 800f164:	601a      	str	r2, [r3, #0]
 800f166:	e002      	b.n	800f16e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2200      	movs	r2, #0
 800f16c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f16e:	4a04      	ldr	r2, [pc, #16]	@ (800f180 <prvSampleTimeNow+0x3c>)
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f174:	68fb      	ldr	r3, [r7, #12]
}
 800f176:	4618      	mov	r0, r3
 800f178:	3710      	adds	r7, #16
 800f17a:	46bd      	mov	sp, r7
 800f17c:	bd80      	pop	{r7, pc}
 800f17e:	bf00      	nop
 800f180:	200018b8 	.word	0x200018b8

0800f184 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b086      	sub	sp, #24
 800f188:	af00      	add	r7, sp, #0
 800f18a:	60f8      	str	r0, [r7, #12]
 800f18c:	60b9      	str	r1, [r7, #8]
 800f18e:	607a      	str	r2, [r7, #4]
 800f190:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f192:	2300      	movs	r3, #0
 800f194:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	68ba      	ldr	r2, [r7, #8]
 800f19a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	68fa      	ldr	r2, [r7, #12]
 800f1a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f1a2:	68ba      	ldr	r2, [r7, #8]
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	429a      	cmp	r2, r3
 800f1a8:	d812      	bhi.n	800f1d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1aa:	687a      	ldr	r2, [r7, #4]
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	1ad2      	subs	r2, r2, r3
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	699b      	ldr	r3, [r3, #24]
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	d302      	bcc.n	800f1be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f1b8:	2301      	movs	r3, #1
 800f1ba:	617b      	str	r3, [r7, #20]
 800f1bc:	e01b      	b.n	800f1f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f1be:	4b10      	ldr	r3, [pc, #64]	@ (800f200 <prvInsertTimerInActiveList+0x7c>)
 800f1c0:	681a      	ldr	r2, [r3, #0]
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	3304      	adds	r3, #4
 800f1c6:	4619      	mov	r1, r3
 800f1c8:	4610      	mov	r0, r2
 800f1ca:	f7fe f830 	bl	800d22e <vListInsert>
 800f1ce:	e012      	b.n	800f1f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f1d0:	687a      	ldr	r2, [r7, #4]
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	429a      	cmp	r2, r3
 800f1d6:	d206      	bcs.n	800f1e6 <prvInsertTimerInActiveList+0x62>
 800f1d8:	68ba      	ldr	r2, [r7, #8]
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	d302      	bcc.n	800f1e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f1e0:	2301      	movs	r3, #1
 800f1e2:	617b      	str	r3, [r7, #20]
 800f1e4:	e007      	b.n	800f1f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f1e6:	4b07      	ldr	r3, [pc, #28]	@ (800f204 <prvInsertTimerInActiveList+0x80>)
 800f1e8:	681a      	ldr	r2, [r3, #0]
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	3304      	adds	r3, #4
 800f1ee:	4619      	mov	r1, r3
 800f1f0:	4610      	mov	r0, r2
 800f1f2:	f7fe f81c 	bl	800d22e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f1f6:	697b      	ldr	r3, [r7, #20]
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	3718      	adds	r7, #24
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd80      	pop	{r7, pc}
 800f200:	200018ac 	.word	0x200018ac
 800f204:	200018a8 	.word	0x200018a8

0800f208 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b08e      	sub	sp, #56	@ 0x38
 800f20c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f20e:	e0ce      	b.n	800f3ae <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2b00      	cmp	r3, #0
 800f214:	da19      	bge.n	800f24a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f216:	1d3b      	adds	r3, r7, #4
 800f218:	3304      	adds	r3, #4
 800f21a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f21c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d10b      	bne.n	800f23a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f226:	f383 8811 	msr	BASEPRI, r3
 800f22a:	f3bf 8f6f 	isb	sy
 800f22e:	f3bf 8f4f 	dsb	sy
 800f232:	61fb      	str	r3, [r7, #28]
}
 800f234:	bf00      	nop
 800f236:	bf00      	nop
 800f238:	e7fd      	b.n	800f236 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f23a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f240:	6850      	ldr	r0, [r2, #4]
 800f242:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f244:	6892      	ldr	r2, [r2, #8]
 800f246:	4611      	mov	r1, r2
 800f248:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	f2c0 80ae 	blt.w	800f3ae <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f258:	695b      	ldr	r3, [r3, #20]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d004      	beq.n	800f268 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f25e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f260:	3304      	adds	r3, #4
 800f262:	4618      	mov	r0, r3
 800f264:	f7fe f81c 	bl	800d2a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f268:	463b      	mov	r3, r7
 800f26a:	4618      	mov	r0, r3
 800f26c:	f7ff ff6a 	bl	800f144 <prvSampleTimeNow>
 800f270:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2b09      	cmp	r3, #9
 800f276:	f200 8097 	bhi.w	800f3a8 <prvProcessReceivedCommands+0x1a0>
 800f27a:	a201      	add	r2, pc, #4	@ (adr r2, 800f280 <prvProcessReceivedCommands+0x78>)
 800f27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f280:	0800f2a9 	.word	0x0800f2a9
 800f284:	0800f2a9 	.word	0x0800f2a9
 800f288:	0800f2a9 	.word	0x0800f2a9
 800f28c:	0800f31f 	.word	0x0800f31f
 800f290:	0800f333 	.word	0x0800f333
 800f294:	0800f37f 	.word	0x0800f37f
 800f298:	0800f2a9 	.word	0x0800f2a9
 800f29c:	0800f2a9 	.word	0x0800f2a9
 800f2a0:	0800f31f 	.word	0x0800f31f
 800f2a4:	0800f333 	.word	0x0800f333
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f2a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f2ae:	f043 0301 	orr.w	r3, r3, #1
 800f2b2:	b2da      	uxtb	r2, r3
 800f2b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f2ba:	68ba      	ldr	r2, [r7, #8]
 800f2bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2be:	699b      	ldr	r3, [r3, #24]
 800f2c0:	18d1      	adds	r1, r2, r3
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f2c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f2c8:	f7ff ff5c 	bl	800f184 <prvInsertTimerInActiveList>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d06c      	beq.n	800f3ac <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2d4:	6a1b      	ldr	r3, [r3, #32]
 800f2d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f2d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f2da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f2e0:	f003 0304 	and.w	r3, r3, #4
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d061      	beq.n	800f3ac <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f2e8:	68ba      	ldr	r2, [r7, #8]
 800f2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2ec:	699b      	ldr	r3, [r3, #24]
 800f2ee:	441a      	add	r2, r3
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	9300      	str	r3, [sp, #0]
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	2100      	movs	r1, #0
 800f2f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f2fa:	f7ff fe01 	bl	800ef00 <xTimerGenericCommand>
 800f2fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f300:	6a3b      	ldr	r3, [r7, #32]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d152      	bne.n	800f3ac <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f30a:	f383 8811 	msr	BASEPRI, r3
 800f30e:	f3bf 8f6f 	isb	sy
 800f312:	f3bf 8f4f 	dsb	sy
 800f316:	61bb      	str	r3, [r7, #24]
}
 800f318:	bf00      	nop
 800f31a:	bf00      	nop
 800f31c:	e7fd      	b.n	800f31a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f31e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f320:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f324:	f023 0301 	bic.w	r3, r3, #1
 800f328:	b2da      	uxtb	r2, r3
 800f32a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f32c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f330:	e03d      	b.n	800f3ae <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f334:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f338:	f043 0301 	orr.w	r3, r3, #1
 800f33c:	b2da      	uxtb	r2, r3
 800f33e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f340:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f344:	68ba      	ldr	r2, [r7, #8]
 800f346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f348:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f34a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f34c:	699b      	ldr	r3, [r3, #24]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d10b      	bne.n	800f36a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f356:	f383 8811 	msr	BASEPRI, r3
 800f35a:	f3bf 8f6f 	isb	sy
 800f35e:	f3bf 8f4f 	dsb	sy
 800f362:	617b      	str	r3, [r7, #20]
}
 800f364:	bf00      	nop
 800f366:	bf00      	nop
 800f368:	e7fd      	b.n	800f366 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f36a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f36c:	699a      	ldr	r2, [r3, #24]
 800f36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f370:	18d1      	adds	r1, r2, r3
 800f372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f374:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f376:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f378:	f7ff ff04 	bl	800f184 <prvInsertTimerInActiveList>
					break;
 800f37c:	e017      	b.n	800f3ae <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f37e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f380:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f384:	f003 0302 	and.w	r3, r3, #2
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d103      	bne.n	800f394 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f38c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f38e:	f000 fc0b 	bl	800fba8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f392:	e00c      	b.n	800f3ae <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f396:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f39a:	f023 0301 	bic.w	r3, r3, #1
 800f39e:	b2da      	uxtb	r2, r3
 800f3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f3a6:	e002      	b.n	800f3ae <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f3a8:	bf00      	nop
 800f3aa:	e000      	b.n	800f3ae <prvProcessReceivedCommands+0x1a6>
					break;
 800f3ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f3ae:	4b08      	ldr	r3, [pc, #32]	@ (800f3d0 <prvProcessReceivedCommands+0x1c8>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	1d39      	adds	r1, r7, #4
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f7fe fa82 	bl	800d8c0 <xQueueReceive>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	f47f af26 	bne.w	800f210 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f3c4:	bf00      	nop
 800f3c6:	bf00      	nop
 800f3c8:	3730      	adds	r7, #48	@ 0x30
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	bd80      	pop	{r7, pc}
 800f3ce:	bf00      	nop
 800f3d0:	200018b0 	.word	0x200018b0

0800f3d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b088      	sub	sp, #32
 800f3d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f3da:	e049      	b.n	800f470 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f3dc:	4b2e      	ldr	r3, [pc, #184]	@ (800f498 <prvSwitchTimerLists+0xc4>)
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	68db      	ldr	r3, [r3, #12]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3e6:	4b2c      	ldr	r3, [pc, #176]	@ (800f498 <prvSwitchTimerLists+0xc4>)
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	68db      	ldr	r3, [r3, #12]
 800f3ec:	68db      	ldr	r3, [r3, #12]
 800f3ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	3304      	adds	r3, #4
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f7fd ff53 	bl	800d2a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	6a1b      	ldr	r3, [r3, #32]
 800f3fe:	68f8      	ldr	r0, [r7, #12]
 800f400:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f408:	f003 0304 	and.w	r3, r3, #4
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d02f      	beq.n	800f470 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	699b      	ldr	r3, [r3, #24]
 800f414:	693a      	ldr	r2, [r7, #16]
 800f416:	4413      	add	r3, r2
 800f418:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f41a:	68ba      	ldr	r2, [r7, #8]
 800f41c:	693b      	ldr	r3, [r7, #16]
 800f41e:	429a      	cmp	r2, r3
 800f420:	d90e      	bls.n	800f440 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	68ba      	ldr	r2, [r7, #8]
 800f426:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	68fa      	ldr	r2, [r7, #12]
 800f42c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f42e:	4b1a      	ldr	r3, [pc, #104]	@ (800f498 <prvSwitchTimerLists+0xc4>)
 800f430:	681a      	ldr	r2, [r3, #0]
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	3304      	adds	r3, #4
 800f436:	4619      	mov	r1, r3
 800f438:	4610      	mov	r0, r2
 800f43a:	f7fd fef8 	bl	800d22e <vListInsert>
 800f43e:	e017      	b.n	800f470 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f440:	2300      	movs	r3, #0
 800f442:	9300      	str	r3, [sp, #0]
 800f444:	2300      	movs	r3, #0
 800f446:	693a      	ldr	r2, [r7, #16]
 800f448:	2100      	movs	r1, #0
 800f44a:	68f8      	ldr	r0, [r7, #12]
 800f44c:	f7ff fd58 	bl	800ef00 <xTimerGenericCommand>
 800f450:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d10b      	bne.n	800f470 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f45c:	f383 8811 	msr	BASEPRI, r3
 800f460:	f3bf 8f6f 	isb	sy
 800f464:	f3bf 8f4f 	dsb	sy
 800f468:	603b      	str	r3, [r7, #0]
}
 800f46a:	bf00      	nop
 800f46c:	bf00      	nop
 800f46e:	e7fd      	b.n	800f46c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f470:	4b09      	ldr	r3, [pc, #36]	@ (800f498 <prvSwitchTimerLists+0xc4>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d1b0      	bne.n	800f3dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f47a:	4b07      	ldr	r3, [pc, #28]	@ (800f498 <prvSwitchTimerLists+0xc4>)
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f480:	4b06      	ldr	r3, [pc, #24]	@ (800f49c <prvSwitchTimerLists+0xc8>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	4a04      	ldr	r2, [pc, #16]	@ (800f498 <prvSwitchTimerLists+0xc4>)
 800f486:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f488:	4a04      	ldr	r2, [pc, #16]	@ (800f49c <prvSwitchTimerLists+0xc8>)
 800f48a:	697b      	ldr	r3, [r7, #20]
 800f48c:	6013      	str	r3, [r2, #0]
}
 800f48e:	bf00      	nop
 800f490:	3718      	adds	r7, #24
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}
 800f496:	bf00      	nop
 800f498:	200018a8 	.word	0x200018a8
 800f49c:	200018ac 	.word	0x200018ac

0800f4a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b082      	sub	sp, #8
 800f4a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f4a6:	f000 f98f 	bl	800f7c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f4aa:	4b15      	ldr	r3, [pc, #84]	@ (800f500 <prvCheckForValidListAndQueue+0x60>)
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d120      	bne.n	800f4f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f4b2:	4814      	ldr	r0, [pc, #80]	@ (800f504 <prvCheckForValidListAndQueue+0x64>)
 800f4b4:	f7fd fe6a 	bl	800d18c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f4b8:	4813      	ldr	r0, [pc, #76]	@ (800f508 <prvCheckForValidListAndQueue+0x68>)
 800f4ba:	f7fd fe67 	bl	800d18c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f4be:	4b13      	ldr	r3, [pc, #76]	@ (800f50c <prvCheckForValidListAndQueue+0x6c>)
 800f4c0:	4a10      	ldr	r2, [pc, #64]	@ (800f504 <prvCheckForValidListAndQueue+0x64>)
 800f4c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f4c4:	4b12      	ldr	r3, [pc, #72]	@ (800f510 <prvCheckForValidListAndQueue+0x70>)
 800f4c6:	4a10      	ldr	r2, [pc, #64]	@ (800f508 <prvCheckForValidListAndQueue+0x68>)
 800f4c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	9300      	str	r3, [sp, #0]
 800f4ce:	4b11      	ldr	r3, [pc, #68]	@ (800f514 <prvCheckForValidListAndQueue+0x74>)
 800f4d0:	4a11      	ldr	r2, [pc, #68]	@ (800f518 <prvCheckForValidListAndQueue+0x78>)
 800f4d2:	2110      	movs	r1, #16
 800f4d4:	200a      	movs	r0, #10
 800f4d6:	f7fd ff77 	bl	800d3c8 <xQueueGenericCreateStatic>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	4a08      	ldr	r2, [pc, #32]	@ (800f500 <prvCheckForValidListAndQueue+0x60>)
 800f4de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f4e0:	4b07      	ldr	r3, [pc, #28]	@ (800f500 <prvCheckForValidListAndQueue+0x60>)
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d005      	beq.n	800f4f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f4e8:	4b05      	ldr	r3, [pc, #20]	@ (800f500 <prvCheckForValidListAndQueue+0x60>)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	490b      	ldr	r1, [pc, #44]	@ (800f51c <prvCheckForValidListAndQueue+0x7c>)
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f7fe fc98 	bl	800de24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f4f4:	f000 f99a 	bl	800f82c <vPortExitCritical>
}
 800f4f8:	bf00      	nop
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}
 800f4fe:	bf00      	nop
 800f500:	200018b0 	.word	0x200018b0
 800f504:	20001880 	.word	0x20001880
 800f508:	20001894 	.word	0x20001894
 800f50c:	200018a8 	.word	0x200018a8
 800f510:	200018ac 	.word	0x200018ac
 800f514:	2000195c 	.word	0x2000195c
 800f518:	200018bc 	.word	0x200018bc
 800f51c:	080137c8 	.word	0x080137c8

0800f520 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f520:	b580      	push	{r7, lr}
 800f522:	b08a      	sub	sp, #40	@ 0x28
 800f524:	af00      	add	r7, sp, #0
 800f526:	60f8      	str	r0, [r7, #12]
 800f528:	60b9      	str	r1, [r7, #8]
 800f52a:	607a      	str	r2, [r7, #4]
 800f52c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800f52e:	f06f 0301 	mvn.w	r3, #1
 800f532:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800f538:	68bb      	ldr	r3, [r7, #8]
 800f53a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f540:	4b06      	ldr	r3, [pc, #24]	@ (800f55c <xTimerPendFunctionCallFromISR+0x3c>)
 800f542:	6818      	ldr	r0, [r3, #0]
 800f544:	f107 0114 	add.w	r1, r7, #20
 800f548:	2300      	movs	r3, #0
 800f54a:	683a      	ldr	r2, [r7, #0]
 800f54c:	f7fe f91a 	bl	800d784 <xQueueGenericSendFromISR>
 800f550:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800f552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800f554:	4618      	mov	r0, r3
 800f556:	3728      	adds	r7, #40	@ 0x28
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}
 800f55c:	200018b0 	.word	0x200018b0

0800f560 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f560:	b480      	push	{r7}
 800f562:	b085      	sub	sp, #20
 800f564:	af00      	add	r7, sp, #0
 800f566:	60f8      	str	r0, [r7, #12]
 800f568:	60b9      	str	r1, [r7, #8]
 800f56a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	3b04      	subs	r3, #4
 800f570:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f578:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	3b04      	subs	r3, #4
 800f57e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	f023 0201 	bic.w	r2, r3, #1
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	3b04      	subs	r3, #4
 800f58e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f590:	4a0c      	ldr	r2, [pc, #48]	@ (800f5c4 <pxPortInitialiseStack+0x64>)
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	3b14      	subs	r3, #20
 800f59a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f59c:	687a      	ldr	r2, [r7, #4]
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	3b04      	subs	r3, #4
 800f5a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	f06f 0202 	mvn.w	r2, #2
 800f5ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	3b20      	subs	r3, #32
 800f5b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	3714      	adds	r7, #20
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c2:	4770      	bx	lr
 800f5c4:	0800f5c9 	.word	0x0800f5c9

0800f5c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f5c8:	b480      	push	{r7}
 800f5ca:	b085      	sub	sp, #20
 800f5cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f5d2:	4b13      	ldr	r3, [pc, #76]	@ (800f620 <prvTaskExitError+0x58>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5da:	d00b      	beq.n	800f5f4 <prvTaskExitError+0x2c>
	__asm volatile
 800f5dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5e0:	f383 8811 	msr	BASEPRI, r3
 800f5e4:	f3bf 8f6f 	isb	sy
 800f5e8:	f3bf 8f4f 	dsb	sy
 800f5ec:	60fb      	str	r3, [r7, #12]
}
 800f5ee:	bf00      	nop
 800f5f0:	bf00      	nop
 800f5f2:	e7fd      	b.n	800f5f0 <prvTaskExitError+0x28>
	__asm volatile
 800f5f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5f8:	f383 8811 	msr	BASEPRI, r3
 800f5fc:	f3bf 8f6f 	isb	sy
 800f600:	f3bf 8f4f 	dsb	sy
 800f604:	60bb      	str	r3, [r7, #8]
}
 800f606:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f608:	bf00      	nop
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d0fc      	beq.n	800f60a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f610:	bf00      	nop
 800f612:	bf00      	nop
 800f614:	3714      	adds	r7, #20
 800f616:	46bd      	mov	sp, r7
 800f618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61c:	4770      	bx	lr
 800f61e:	bf00      	nop
 800f620:	20000010 	.word	0x20000010
	...

0800f630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f630:	4b07      	ldr	r3, [pc, #28]	@ (800f650 <pxCurrentTCBConst2>)
 800f632:	6819      	ldr	r1, [r3, #0]
 800f634:	6808      	ldr	r0, [r1, #0]
 800f636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f63a:	f380 8809 	msr	PSP, r0
 800f63e:	f3bf 8f6f 	isb	sy
 800f642:	f04f 0000 	mov.w	r0, #0
 800f646:	f380 8811 	msr	BASEPRI, r0
 800f64a:	4770      	bx	lr
 800f64c:	f3af 8000 	nop.w

0800f650 <pxCurrentTCBConst2>:
 800f650:	20001380 	.word	0x20001380
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f654:	bf00      	nop
 800f656:	bf00      	nop

0800f658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f658:	4808      	ldr	r0, [pc, #32]	@ (800f67c <prvPortStartFirstTask+0x24>)
 800f65a:	6800      	ldr	r0, [r0, #0]
 800f65c:	6800      	ldr	r0, [r0, #0]
 800f65e:	f380 8808 	msr	MSP, r0
 800f662:	f04f 0000 	mov.w	r0, #0
 800f666:	f380 8814 	msr	CONTROL, r0
 800f66a:	b662      	cpsie	i
 800f66c:	b661      	cpsie	f
 800f66e:	f3bf 8f4f 	dsb	sy
 800f672:	f3bf 8f6f 	isb	sy
 800f676:	df00      	svc	0
 800f678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f67a:	bf00      	nop
 800f67c:	e000ed08 	.word	0xe000ed08

0800f680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b086      	sub	sp, #24
 800f684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f686:	4b47      	ldr	r3, [pc, #284]	@ (800f7a4 <xPortStartScheduler+0x124>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	4a47      	ldr	r2, [pc, #284]	@ (800f7a8 <xPortStartScheduler+0x128>)
 800f68c:	4293      	cmp	r3, r2
 800f68e:	d10b      	bne.n	800f6a8 <xPortStartScheduler+0x28>
	__asm volatile
 800f690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f694:	f383 8811 	msr	BASEPRI, r3
 800f698:	f3bf 8f6f 	isb	sy
 800f69c:	f3bf 8f4f 	dsb	sy
 800f6a0:	60fb      	str	r3, [r7, #12]
}
 800f6a2:	bf00      	nop
 800f6a4:	bf00      	nop
 800f6a6:	e7fd      	b.n	800f6a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f6a8:	4b3e      	ldr	r3, [pc, #248]	@ (800f7a4 <xPortStartScheduler+0x124>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	4a3f      	ldr	r2, [pc, #252]	@ (800f7ac <xPortStartScheduler+0x12c>)
 800f6ae:	4293      	cmp	r3, r2
 800f6b0:	d10b      	bne.n	800f6ca <xPortStartScheduler+0x4a>
	__asm volatile
 800f6b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6b6:	f383 8811 	msr	BASEPRI, r3
 800f6ba:	f3bf 8f6f 	isb	sy
 800f6be:	f3bf 8f4f 	dsb	sy
 800f6c2:	613b      	str	r3, [r7, #16]
}
 800f6c4:	bf00      	nop
 800f6c6:	bf00      	nop
 800f6c8:	e7fd      	b.n	800f6c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f6ca:	4b39      	ldr	r3, [pc, #228]	@ (800f7b0 <xPortStartScheduler+0x130>)
 800f6cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f6ce:	697b      	ldr	r3, [r7, #20]
 800f6d0:	781b      	ldrb	r3, [r3, #0]
 800f6d2:	b2db      	uxtb	r3, r3
 800f6d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f6d6:	697b      	ldr	r3, [r7, #20]
 800f6d8:	22ff      	movs	r2, #255	@ 0xff
 800f6da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	b2db      	uxtb	r3, r3
 800f6e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f6e4:	78fb      	ldrb	r3, [r7, #3]
 800f6e6:	b2db      	uxtb	r3, r3
 800f6e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f6ec:	b2da      	uxtb	r2, r3
 800f6ee:	4b31      	ldr	r3, [pc, #196]	@ (800f7b4 <xPortStartScheduler+0x134>)
 800f6f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f6f2:	4b31      	ldr	r3, [pc, #196]	@ (800f7b8 <xPortStartScheduler+0x138>)
 800f6f4:	2207      	movs	r2, #7
 800f6f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f6f8:	e009      	b.n	800f70e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f6fa:	4b2f      	ldr	r3, [pc, #188]	@ (800f7b8 <xPortStartScheduler+0x138>)
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	3b01      	subs	r3, #1
 800f700:	4a2d      	ldr	r2, [pc, #180]	@ (800f7b8 <xPortStartScheduler+0x138>)
 800f702:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f704:	78fb      	ldrb	r3, [r7, #3]
 800f706:	b2db      	uxtb	r3, r3
 800f708:	005b      	lsls	r3, r3, #1
 800f70a:	b2db      	uxtb	r3, r3
 800f70c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f70e:	78fb      	ldrb	r3, [r7, #3]
 800f710:	b2db      	uxtb	r3, r3
 800f712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f716:	2b80      	cmp	r3, #128	@ 0x80
 800f718:	d0ef      	beq.n	800f6fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f71a:	4b27      	ldr	r3, [pc, #156]	@ (800f7b8 <xPortStartScheduler+0x138>)
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	f1c3 0307 	rsb	r3, r3, #7
 800f722:	2b04      	cmp	r3, #4
 800f724:	d00b      	beq.n	800f73e <xPortStartScheduler+0xbe>
	__asm volatile
 800f726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f72a:	f383 8811 	msr	BASEPRI, r3
 800f72e:	f3bf 8f6f 	isb	sy
 800f732:	f3bf 8f4f 	dsb	sy
 800f736:	60bb      	str	r3, [r7, #8]
}
 800f738:	bf00      	nop
 800f73a:	bf00      	nop
 800f73c:	e7fd      	b.n	800f73a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f73e:	4b1e      	ldr	r3, [pc, #120]	@ (800f7b8 <xPortStartScheduler+0x138>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	021b      	lsls	r3, r3, #8
 800f744:	4a1c      	ldr	r2, [pc, #112]	@ (800f7b8 <xPortStartScheduler+0x138>)
 800f746:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f748:	4b1b      	ldr	r3, [pc, #108]	@ (800f7b8 <xPortStartScheduler+0x138>)
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f750:	4a19      	ldr	r2, [pc, #100]	@ (800f7b8 <xPortStartScheduler+0x138>)
 800f752:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	b2da      	uxtb	r2, r3
 800f758:	697b      	ldr	r3, [r7, #20]
 800f75a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f75c:	4b17      	ldr	r3, [pc, #92]	@ (800f7bc <xPortStartScheduler+0x13c>)
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	4a16      	ldr	r2, [pc, #88]	@ (800f7bc <xPortStartScheduler+0x13c>)
 800f762:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f766:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f768:	4b14      	ldr	r3, [pc, #80]	@ (800f7bc <xPortStartScheduler+0x13c>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	4a13      	ldr	r2, [pc, #76]	@ (800f7bc <xPortStartScheduler+0x13c>)
 800f76e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f772:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f774:	f000 f8da 	bl	800f92c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f778:	4b11      	ldr	r3, [pc, #68]	@ (800f7c0 <xPortStartScheduler+0x140>)
 800f77a:	2200      	movs	r2, #0
 800f77c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f77e:	f000 f8f9 	bl	800f974 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f782:	4b10      	ldr	r3, [pc, #64]	@ (800f7c4 <xPortStartScheduler+0x144>)
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	4a0f      	ldr	r2, [pc, #60]	@ (800f7c4 <xPortStartScheduler+0x144>)
 800f788:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f78c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f78e:	f7ff ff63 	bl	800f658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f792:	f7fe ff5f 	bl	800e654 <vTaskSwitchContext>
	prvTaskExitError();
 800f796:	f7ff ff17 	bl	800f5c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f79a:	2300      	movs	r3, #0
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	3718      	adds	r7, #24
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}
 800f7a4:	e000ed00 	.word	0xe000ed00
 800f7a8:	410fc271 	.word	0x410fc271
 800f7ac:	410fc270 	.word	0x410fc270
 800f7b0:	e000e400 	.word	0xe000e400
 800f7b4:	200019ac 	.word	0x200019ac
 800f7b8:	200019b0 	.word	0x200019b0
 800f7bc:	e000ed20 	.word	0xe000ed20
 800f7c0:	20000010 	.word	0x20000010
 800f7c4:	e000ef34 	.word	0xe000ef34

0800f7c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f7c8:	b480      	push	{r7}
 800f7ca:	b083      	sub	sp, #12
 800f7cc:	af00      	add	r7, sp, #0
	__asm volatile
 800f7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7d2:	f383 8811 	msr	BASEPRI, r3
 800f7d6:	f3bf 8f6f 	isb	sy
 800f7da:	f3bf 8f4f 	dsb	sy
 800f7de:	607b      	str	r3, [r7, #4]
}
 800f7e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f7e2:	4b10      	ldr	r3, [pc, #64]	@ (800f824 <vPortEnterCritical+0x5c>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	3301      	adds	r3, #1
 800f7e8:	4a0e      	ldr	r2, [pc, #56]	@ (800f824 <vPortEnterCritical+0x5c>)
 800f7ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f7ec:	4b0d      	ldr	r3, [pc, #52]	@ (800f824 <vPortEnterCritical+0x5c>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	2b01      	cmp	r3, #1
 800f7f2:	d110      	bne.n	800f816 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f7f4:	4b0c      	ldr	r3, [pc, #48]	@ (800f828 <vPortEnterCritical+0x60>)
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	b2db      	uxtb	r3, r3
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d00b      	beq.n	800f816 <vPortEnterCritical+0x4e>
	__asm volatile
 800f7fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f802:	f383 8811 	msr	BASEPRI, r3
 800f806:	f3bf 8f6f 	isb	sy
 800f80a:	f3bf 8f4f 	dsb	sy
 800f80e:	603b      	str	r3, [r7, #0]
}
 800f810:	bf00      	nop
 800f812:	bf00      	nop
 800f814:	e7fd      	b.n	800f812 <vPortEnterCritical+0x4a>
	}
}
 800f816:	bf00      	nop
 800f818:	370c      	adds	r7, #12
 800f81a:	46bd      	mov	sp, r7
 800f81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f820:	4770      	bx	lr
 800f822:	bf00      	nop
 800f824:	20000010 	.word	0x20000010
 800f828:	e000ed04 	.word	0xe000ed04

0800f82c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f82c:	b480      	push	{r7}
 800f82e:	b083      	sub	sp, #12
 800f830:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f832:	4b12      	ldr	r3, [pc, #72]	@ (800f87c <vPortExitCritical+0x50>)
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d10b      	bne.n	800f852 <vPortExitCritical+0x26>
	__asm volatile
 800f83a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f83e:	f383 8811 	msr	BASEPRI, r3
 800f842:	f3bf 8f6f 	isb	sy
 800f846:	f3bf 8f4f 	dsb	sy
 800f84a:	607b      	str	r3, [r7, #4]
}
 800f84c:	bf00      	nop
 800f84e:	bf00      	nop
 800f850:	e7fd      	b.n	800f84e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f852:	4b0a      	ldr	r3, [pc, #40]	@ (800f87c <vPortExitCritical+0x50>)
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	3b01      	subs	r3, #1
 800f858:	4a08      	ldr	r2, [pc, #32]	@ (800f87c <vPortExitCritical+0x50>)
 800f85a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f85c:	4b07      	ldr	r3, [pc, #28]	@ (800f87c <vPortExitCritical+0x50>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d105      	bne.n	800f870 <vPortExitCritical+0x44>
 800f864:	2300      	movs	r3, #0
 800f866:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	f383 8811 	msr	BASEPRI, r3
}
 800f86e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f870:	bf00      	nop
 800f872:	370c      	adds	r7, #12
 800f874:	46bd      	mov	sp, r7
 800f876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87a:	4770      	bx	lr
 800f87c:	20000010 	.word	0x20000010

0800f880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f880:	f3ef 8009 	mrs	r0, PSP
 800f884:	f3bf 8f6f 	isb	sy
 800f888:	4b15      	ldr	r3, [pc, #84]	@ (800f8e0 <pxCurrentTCBConst>)
 800f88a:	681a      	ldr	r2, [r3, #0]
 800f88c:	f01e 0f10 	tst.w	lr, #16
 800f890:	bf08      	it	eq
 800f892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f89a:	6010      	str	r0, [r2, #0]
 800f89c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f8a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f8a4:	f380 8811 	msr	BASEPRI, r0
 800f8a8:	f3bf 8f4f 	dsb	sy
 800f8ac:	f3bf 8f6f 	isb	sy
 800f8b0:	f7fe fed0 	bl	800e654 <vTaskSwitchContext>
 800f8b4:	f04f 0000 	mov.w	r0, #0
 800f8b8:	f380 8811 	msr	BASEPRI, r0
 800f8bc:	bc09      	pop	{r0, r3}
 800f8be:	6819      	ldr	r1, [r3, #0]
 800f8c0:	6808      	ldr	r0, [r1, #0]
 800f8c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8c6:	f01e 0f10 	tst.w	lr, #16
 800f8ca:	bf08      	it	eq
 800f8cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f8d0:	f380 8809 	msr	PSP, r0
 800f8d4:	f3bf 8f6f 	isb	sy
 800f8d8:	4770      	bx	lr
 800f8da:	bf00      	nop
 800f8dc:	f3af 8000 	nop.w

0800f8e0 <pxCurrentTCBConst>:
 800f8e0:	20001380 	.word	0x20001380
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f8e4:	bf00      	nop
 800f8e6:	bf00      	nop

0800f8e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b082      	sub	sp, #8
 800f8ec:	af00      	add	r7, sp, #0
	__asm volatile
 800f8ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8f2:	f383 8811 	msr	BASEPRI, r3
 800f8f6:	f3bf 8f6f 	isb	sy
 800f8fa:	f3bf 8f4f 	dsb	sy
 800f8fe:	607b      	str	r3, [r7, #4]
}
 800f900:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f902:	f7fe fded 	bl	800e4e0 <xTaskIncrementTick>
 800f906:	4603      	mov	r3, r0
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d003      	beq.n	800f914 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f90c:	4b06      	ldr	r3, [pc, #24]	@ (800f928 <xPortSysTickHandler+0x40>)
 800f90e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f912:	601a      	str	r2, [r3, #0]
 800f914:	2300      	movs	r3, #0
 800f916:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	f383 8811 	msr	BASEPRI, r3
}
 800f91e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f920:	bf00      	nop
 800f922:	3708      	adds	r7, #8
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}
 800f928:	e000ed04 	.word	0xe000ed04

0800f92c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f92c:	b480      	push	{r7}
 800f92e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f930:	4b0b      	ldr	r3, [pc, #44]	@ (800f960 <vPortSetupTimerInterrupt+0x34>)
 800f932:	2200      	movs	r2, #0
 800f934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f936:	4b0b      	ldr	r3, [pc, #44]	@ (800f964 <vPortSetupTimerInterrupt+0x38>)
 800f938:	2200      	movs	r2, #0
 800f93a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f93c:	4b0a      	ldr	r3, [pc, #40]	@ (800f968 <vPortSetupTimerInterrupt+0x3c>)
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	4a0a      	ldr	r2, [pc, #40]	@ (800f96c <vPortSetupTimerInterrupt+0x40>)
 800f942:	fba2 2303 	umull	r2, r3, r2, r3
 800f946:	099b      	lsrs	r3, r3, #6
 800f948:	4a09      	ldr	r2, [pc, #36]	@ (800f970 <vPortSetupTimerInterrupt+0x44>)
 800f94a:	3b01      	subs	r3, #1
 800f94c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f94e:	4b04      	ldr	r3, [pc, #16]	@ (800f960 <vPortSetupTimerInterrupt+0x34>)
 800f950:	2207      	movs	r2, #7
 800f952:	601a      	str	r2, [r3, #0]
}
 800f954:	bf00      	nop
 800f956:	46bd      	mov	sp, r7
 800f958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95c:	4770      	bx	lr
 800f95e:	bf00      	nop
 800f960:	e000e010 	.word	0xe000e010
 800f964:	e000e018 	.word	0xe000e018
 800f968:	20000004 	.word	0x20000004
 800f96c:	10624dd3 	.word	0x10624dd3
 800f970:	e000e014 	.word	0xe000e014

0800f974 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f974:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f984 <vPortEnableVFP+0x10>
 800f978:	6801      	ldr	r1, [r0, #0]
 800f97a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f97e:	6001      	str	r1, [r0, #0]
 800f980:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f982:	bf00      	nop
 800f984:	e000ed88 	.word	0xe000ed88

0800f988 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f988:	b480      	push	{r7}
 800f98a:	b085      	sub	sp, #20
 800f98c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f98e:	f3ef 8305 	mrs	r3, IPSR
 800f992:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	2b0f      	cmp	r3, #15
 800f998:	d915      	bls.n	800f9c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f99a:	4a18      	ldr	r2, [pc, #96]	@ (800f9fc <vPortValidateInterruptPriority+0x74>)
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	4413      	add	r3, r2
 800f9a0:	781b      	ldrb	r3, [r3, #0]
 800f9a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f9a4:	4b16      	ldr	r3, [pc, #88]	@ (800fa00 <vPortValidateInterruptPriority+0x78>)
 800f9a6:	781b      	ldrb	r3, [r3, #0]
 800f9a8:	7afa      	ldrb	r2, [r7, #11]
 800f9aa:	429a      	cmp	r2, r3
 800f9ac:	d20b      	bcs.n	800f9c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f9ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9b2:	f383 8811 	msr	BASEPRI, r3
 800f9b6:	f3bf 8f6f 	isb	sy
 800f9ba:	f3bf 8f4f 	dsb	sy
 800f9be:	607b      	str	r3, [r7, #4]
}
 800f9c0:	bf00      	nop
 800f9c2:	bf00      	nop
 800f9c4:	e7fd      	b.n	800f9c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f9c6:	4b0f      	ldr	r3, [pc, #60]	@ (800fa04 <vPortValidateInterruptPriority+0x7c>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f9ce:	4b0e      	ldr	r3, [pc, #56]	@ (800fa08 <vPortValidateInterruptPriority+0x80>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	d90b      	bls.n	800f9ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f9d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9da:	f383 8811 	msr	BASEPRI, r3
 800f9de:	f3bf 8f6f 	isb	sy
 800f9e2:	f3bf 8f4f 	dsb	sy
 800f9e6:	603b      	str	r3, [r7, #0]
}
 800f9e8:	bf00      	nop
 800f9ea:	bf00      	nop
 800f9ec:	e7fd      	b.n	800f9ea <vPortValidateInterruptPriority+0x62>
	}
 800f9ee:	bf00      	nop
 800f9f0:	3714      	adds	r7, #20
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f8:	4770      	bx	lr
 800f9fa:	bf00      	nop
 800f9fc:	e000e3f0 	.word	0xe000e3f0
 800fa00:	200019ac 	.word	0x200019ac
 800fa04:	e000ed0c 	.word	0xe000ed0c
 800fa08:	200019b0 	.word	0x200019b0

0800fa0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b08a      	sub	sp, #40	@ 0x28
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fa14:	2300      	movs	r3, #0
 800fa16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fa18:	f7fe fca6 	bl	800e368 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fa1c:	4b5c      	ldr	r3, [pc, #368]	@ (800fb90 <pvPortMalloc+0x184>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d101      	bne.n	800fa28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fa24:	f000 f924 	bl	800fc70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fa28:	4b5a      	ldr	r3, [pc, #360]	@ (800fb94 <pvPortMalloc+0x188>)
 800fa2a:	681a      	ldr	r2, [r3, #0]
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	4013      	ands	r3, r2
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	f040 8095 	bne.w	800fb60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d01e      	beq.n	800fa7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800fa3c:	2208      	movs	r2, #8
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	4413      	add	r3, r2
 800fa42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f003 0307 	and.w	r3, r3, #7
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d015      	beq.n	800fa7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	f023 0307 	bic.w	r3, r3, #7
 800fa54:	3308      	adds	r3, #8
 800fa56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	f003 0307 	and.w	r3, r3, #7
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d00b      	beq.n	800fa7a <pvPortMalloc+0x6e>
	__asm volatile
 800fa62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa66:	f383 8811 	msr	BASEPRI, r3
 800fa6a:	f3bf 8f6f 	isb	sy
 800fa6e:	f3bf 8f4f 	dsb	sy
 800fa72:	617b      	str	r3, [r7, #20]
}
 800fa74:	bf00      	nop
 800fa76:	bf00      	nop
 800fa78:	e7fd      	b.n	800fa76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d06f      	beq.n	800fb60 <pvPortMalloc+0x154>
 800fa80:	4b45      	ldr	r3, [pc, #276]	@ (800fb98 <pvPortMalloc+0x18c>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	687a      	ldr	r2, [r7, #4]
 800fa86:	429a      	cmp	r2, r3
 800fa88:	d86a      	bhi.n	800fb60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fa8a:	4b44      	ldr	r3, [pc, #272]	@ (800fb9c <pvPortMalloc+0x190>)
 800fa8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fa8e:	4b43      	ldr	r3, [pc, #268]	@ (800fb9c <pvPortMalloc+0x190>)
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fa94:	e004      	b.n	800faa0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800fa96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fa9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800faa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faa2:	685b      	ldr	r3, [r3, #4]
 800faa4:	687a      	ldr	r2, [r7, #4]
 800faa6:	429a      	cmp	r2, r3
 800faa8:	d903      	bls.n	800fab2 <pvPortMalloc+0xa6>
 800faaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d1f1      	bne.n	800fa96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fab2:	4b37      	ldr	r3, [pc, #220]	@ (800fb90 <pvPortMalloc+0x184>)
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fab8:	429a      	cmp	r2, r3
 800faba:	d051      	beq.n	800fb60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fabc:	6a3b      	ldr	r3, [r7, #32]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	2208      	movs	r2, #8
 800fac2:	4413      	add	r3, r2
 800fac4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fac8:	681a      	ldr	r2, [r3, #0]
 800faca:	6a3b      	ldr	r3, [r7, #32]
 800facc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800face:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fad0:	685a      	ldr	r2, [r3, #4]
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	1ad2      	subs	r2, r2, r3
 800fad6:	2308      	movs	r3, #8
 800fad8:	005b      	lsls	r3, r3, #1
 800fada:	429a      	cmp	r2, r3
 800fadc:	d920      	bls.n	800fb20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	4413      	add	r3, r2
 800fae4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fae6:	69bb      	ldr	r3, [r7, #24]
 800fae8:	f003 0307 	and.w	r3, r3, #7
 800faec:	2b00      	cmp	r3, #0
 800faee:	d00b      	beq.n	800fb08 <pvPortMalloc+0xfc>
	__asm volatile
 800faf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faf4:	f383 8811 	msr	BASEPRI, r3
 800faf8:	f3bf 8f6f 	isb	sy
 800fafc:	f3bf 8f4f 	dsb	sy
 800fb00:	613b      	str	r3, [r7, #16]
}
 800fb02:	bf00      	nop
 800fb04:	bf00      	nop
 800fb06:	e7fd      	b.n	800fb04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fb08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb0a:	685a      	ldr	r2, [r3, #4]
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	1ad2      	subs	r2, r2, r3
 800fb10:	69bb      	ldr	r3, [r7, #24]
 800fb12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fb14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb16:	687a      	ldr	r2, [r7, #4]
 800fb18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fb1a:	69b8      	ldr	r0, [r7, #24]
 800fb1c:	f000 f90a 	bl	800fd34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fb20:	4b1d      	ldr	r3, [pc, #116]	@ (800fb98 <pvPortMalloc+0x18c>)
 800fb22:	681a      	ldr	r2, [r3, #0]
 800fb24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb26:	685b      	ldr	r3, [r3, #4]
 800fb28:	1ad3      	subs	r3, r2, r3
 800fb2a:	4a1b      	ldr	r2, [pc, #108]	@ (800fb98 <pvPortMalloc+0x18c>)
 800fb2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fb2e:	4b1a      	ldr	r3, [pc, #104]	@ (800fb98 <pvPortMalloc+0x18c>)
 800fb30:	681a      	ldr	r2, [r3, #0]
 800fb32:	4b1b      	ldr	r3, [pc, #108]	@ (800fba0 <pvPortMalloc+0x194>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	429a      	cmp	r2, r3
 800fb38:	d203      	bcs.n	800fb42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fb3a:	4b17      	ldr	r3, [pc, #92]	@ (800fb98 <pvPortMalloc+0x18c>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	4a18      	ldr	r2, [pc, #96]	@ (800fba0 <pvPortMalloc+0x194>)
 800fb40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fb42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb44:	685a      	ldr	r2, [r3, #4]
 800fb46:	4b13      	ldr	r3, [pc, #76]	@ (800fb94 <pvPortMalloc+0x188>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	431a      	orrs	r2, r3
 800fb4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fb50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb52:	2200      	movs	r2, #0
 800fb54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fb56:	4b13      	ldr	r3, [pc, #76]	@ (800fba4 <pvPortMalloc+0x198>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	3301      	adds	r3, #1
 800fb5c:	4a11      	ldr	r2, [pc, #68]	@ (800fba4 <pvPortMalloc+0x198>)
 800fb5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fb60:	f7fe fc10 	bl	800e384 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb64:	69fb      	ldr	r3, [r7, #28]
 800fb66:	f003 0307 	and.w	r3, r3, #7
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d00b      	beq.n	800fb86 <pvPortMalloc+0x17a>
	__asm volatile
 800fb6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb72:	f383 8811 	msr	BASEPRI, r3
 800fb76:	f3bf 8f6f 	isb	sy
 800fb7a:	f3bf 8f4f 	dsb	sy
 800fb7e:	60fb      	str	r3, [r7, #12]
}
 800fb80:	bf00      	nop
 800fb82:	bf00      	nop
 800fb84:	e7fd      	b.n	800fb82 <pvPortMalloc+0x176>
	return pvReturn;
 800fb86:	69fb      	ldr	r3, [r7, #28]
}
 800fb88:	4618      	mov	r0, r3
 800fb8a:	3728      	adds	r7, #40	@ 0x28
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd80      	pop	{r7, pc}
 800fb90:	200055bc 	.word	0x200055bc
 800fb94:	200055d0 	.word	0x200055d0
 800fb98:	200055c0 	.word	0x200055c0
 800fb9c:	200055b4 	.word	0x200055b4
 800fba0:	200055c4 	.word	0x200055c4
 800fba4:	200055c8 	.word	0x200055c8

0800fba8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b086      	sub	sp, #24
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d04f      	beq.n	800fc5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fbba:	2308      	movs	r3, #8
 800fbbc:	425b      	negs	r3, r3
 800fbbe:	697a      	ldr	r2, [r7, #20]
 800fbc0:	4413      	add	r3, r2
 800fbc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fbc8:	693b      	ldr	r3, [r7, #16]
 800fbca:	685a      	ldr	r2, [r3, #4]
 800fbcc:	4b25      	ldr	r3, [pc, #148]	@ (800fc64 <vPortFree+0xbc>)
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	4013      	ands	r3, r2
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d10b      	bne.n	800fbee <vPortFree+0x46>
	__asm volatile
 800fbd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbda:	f383 8811 	msr	BASEPRI, r3
 800fbde:	f3bf 8f6f 	isb	sy
 800fbe2:	f3bf 8f4f 	dsb	sy
 800fbe6:	60fb      	str	r3, [r7, #12]
}
 800fbe8:	bf00      	nop
 800fbea:	bf00      	nop
 800fbec:	e7fd      	b.n	800fbea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fbee:	693b      	ldr	r3, [r7, #16]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d00b      	beq.n	800fc0e <vPortFree+0x66>
	__asm volatile
 800fbf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbfa:	f383 8811 	msr	BASEPRI, r3
 800fbfe:	f3bf 8f6f 	isb	sy
 800fc02:	f3bf 8f4f 	dsb	sy
 800fc06:	60bb      	str	r3, [r7, #8]
}
 800fc08:	bf00      	nop
 800fc0a:	bf00      	nop
 800fc0c:	e7fd      	b.n	800fc0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fc0e:	693b      	ldr	r3, [r7, #16]
 800fc10:	685a      	ldr	r2, [r3, #4]
 800fc12:	4b14      	ldr	r3, [pc, #80]	@ (800fc64 <vPortFree+0xbc>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	4013      	ands	r3, r2
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d01e      	beq.n	800fc5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fc1c:	693b      	ldr	r3, [r7, #16]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d11a      	bne.n	800fc5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fc24:	693b      	ldr	r3, [r7, #16]
 800fc26:	685a      	ldr	r2, [r3, #4]
 800fc28:	4b0e      	ldr	r3, [pc, #56]	@ (800fc64 <vPortFree+0xbc>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	43db      	mvns	r3, r3
 800fc2e:	401a      	ands	r2, r3
 800fc30:	693b      	ldr	r3, [r7, #16]
 800fc32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fc34:	f7fe fb98 	bl	800e368 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fc38:	693b      	ldr	r3, [r7, #16]
 800fc3a:	685a      	ldr	r2, [r3, #4]
 800fc3c:	4b0a      	ldr	r3, [pc, #40]	@ (800fc68 <vPortFree+0xc0>)
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	4413      	add	r3, r2
 800fc42:	4a09      	ldr	r2, [pc, #36]	@ (800fc68 <vPortFree+0xc0>)
 800fc44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fc46:	6938      	ldr	r0, [r7, #16]
 800fc48:	f000 f874 	bl	800fd34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fc4c:	4b07      	ldr	r3, [pc, #28]	@ (800fc6c <vPortFree+0xc4>)
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	3301      	adds	r3, #1
 800fc52:	4a06      	ldr	r2, [pc, #24]	@ (800fc6c <vPortFree+0xc4>)
 800fc54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fc56:	f7fe fb95 	bl	800e384 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fc5a:	bf00      	nop
 800fc5c:	3718      	adds	r7, #24
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}
 800fc62:	bf00      	nop
 800fc64:	200055d0 	.word	0x200055d0
 800fc68:	200055c0 	.word	0x200055c0
 800fc6c:	200055cc 	.word	0x200055cc

0800fc70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fc70:	b480      	push	{r7}
 800fc72:	b085      	sub	sp, #20
 800fc74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fc76:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800fc7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fc7c:	4b27      	ldr	r3, [pc, #156]	@ (800fd1c <prvHeapInit+0xac>)
 800fc7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	f003 0307 	and.w	r3, r3, #7
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d00c      	beq.n	800fca4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	3307      	adds	r3, #7
 800fc8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	f023 0307 	bic.w	r3, r3, #7
 800fc96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fc98:	68ba      	ldr	r2, [r7, #8]
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	1ad3      	subs	r3, r2, r3
 800fc9e:	4a1f      	ldr	r2, [pc, #124]	@ (800fd1c <prvHeapInit+0xac>)
 800fca0:	4413      	add	r3, r2
 800fca2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fca8:	4a1d      	ldr	r2, [pc, #116]	@ (800fd20 <prvHeapInit+0xb0>)
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fcae:	4b1c      	ldr	r3, [pc, #112]	@ (800fd20 <prvHeapInit+0xb0>)
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	68ba      	ldr	r2, [r7, #8]
 800fcb8:	4413      	add	r3, r2
 800fcba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fcbc:	2208      	movs	r2, #8
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	1a9b      	subs	r3, r3, r2
 800fcc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	f023 0307 	bic.w	r3, r3, #7
 800fcca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	4a15      	ldr	r2, [pc, #84]	@ (800fd24 <prvHeapInit+0xb4>)
 800fcd0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fcd2:	4b14      	ldr	r3, [pc, #80]	@ (800fd24 <prvHeapInit+0xb4>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fcda:	4b12      	ldr	r3, [pc, #72]	@ (800fd24 <prvHeapInit+0xb4>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	2200      	movs	r2, #0
 800fce0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	68fa      	ldr	r2, [r7, #12]
 800fcea:	1ad2      	subs	r2, r2, r3
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fcf0:	4b0c      	ldr	r3, [pc, #48]	@ (800fd24 <prvHeapInit+0xb4>)
 800fcf2:	681a      	ldr	r2, [r3, #0]
 800fcf4:	683b      	ldr	r3, [r7, #0]
 800fcf6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	685b      	ldr	r3, [r3, #4]
 800fcfc:	4a0a      	ldr	r2, [pc, #40]	@ (800fd28 <prvHeapInit+0xb8>)
 800fcfe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	685b      	ldr	r3, [r3, #4]
 800fd04:	4a09      	ldr	r2, [pc, #36]	@ (800fd2c <prvHeapInit+0xbc>)
 800fd06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fd08:	4b09      	ldr	r3, [pc, #36]	@ (800fd30 <prvHeapInit+0xc0>)
 800fd0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800fd0e:	601a      	str	r2, [r3, #0]
}
 800fd10:	bf00      	nop
 800fd12:	3714      	adds	r7, #20
 800fd14:	46bd      	mov	sp, r7
 800fd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1a:	4770      	bx	lr
 800fd1c:	200019b4 	.word	0x200019b4
 800fd20:	200055b4 	.word	0x200055b4
 800fd24:	200055bc 	.word	0x200055bc
 800fd28:	200055c4 	.word	0x200055c4
 800fd2c:	200055c0 	.word	0x200055c0
 800fd30:	200055d0 	.word	0x200055d0

0800fd34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fd34:	b480      	push	{r7}
 800fd36:	b085      	sub	sp, #20
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fd3c:	4b28      	ldr	r3, [pc, #160]	@ (800fde0 <prvInsertBlockIntoFreeList+0xac>)
 800fd3e:	60fb      	str	r3, [r7, #12]
 800fd40:	e002      	b.n	800fd48 <prvInsertBlockIntoFreeList+0x14>
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	60fb      	str	r3, [r7, #12]
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	687a      	ldr	r2, [r7, #4]
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d8f7      	bhi.n	800fd42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	685b      	ldr	r3, [r3, #4]
 800fd5a:	68ba      	ldr	r2, [r7, #8]
 800fd5c:	4413      	add	r3, r2
 800fd5e:	687a      	ldr	r2, [r7, #4]
 800fd60:	429a      	cmp	r2, r3
 800fd62:	d108      	bne.n	800fd76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	685a      	ldr	r2, [r3, #4]
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	685b      	ldr	r3, [r3, #4]
 800fd6c:	441a      	add	r2, r3
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	685b      	ldr	r3, [r3, #4]
 800fd7e:	68ba      	ldr	r2, [r7, #8]
 800fd80:	441a      	add	r2, r3
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	429a      	cmp	r2, r3
 800fd88:	d118      	bne.n	800fdbc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	681a      	ldr	r2, [r3, #0]
 800fd8e:	4b15      	ldr	r3, [pc, #84]	@ (800fde4 <prvInsertBlockIntoFreeList+0xb0>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	429a      	cmp	r2, r3
 800fd94:	d00d      	beq.n	800fdb2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	685a      	ldr	r2, [r3, #4]
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	685b      	ldr	r3, [r3, #4]
 800fda0:	441a      	add	r2, r3
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	681a      	ldr	r2, [r3, #0]
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	601a      	str	r2, [r3, #0]
 800fdb0:	e008      	b.n	800fdc4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fdb2:	4b0c      	ldr	r3, [pc, #48]	@ (800fde4 <prvInsertBlockIntoFreeList+0xb0>)
 800fdb4:	681a      	ldr	r2, [r3, #0]
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	601a      	str	r2, [r3, #0]
 800fdba:	e003      	b.n	800fdc4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	681a      	ldr	r2, [r3, #0]
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fdc4:	68fa      	ldr	r2, [r7, #12]
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	429a      	cmp	r2, r3
 800fdca:	d002      	beq.n	800fdd2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	687a      	ldr	r2, [r7, #4]
 800fdd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fdd2:	bf00      	nop
 800fdd4:	3714      	adds	r7, #20
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fddc:	4770      	bx	lr
 800fdde:	bf00      	nop
 800fde0:	200055b4 	.word	0x200055b4
 800fde4:	200055bc 	.word	0x200055bc

0800fde8 <_Znwj>:
 800fde8:	2801      	cmp	r0, #1
 800fdea:	bf38      	it	cc
 800fdec:	2001      	movcc	r0, #1
 800fdee:	b510      	push	{r4, lr}
 800fdf0:	4604      	mov	r4, r0
 800fdf2:	4620      	mov	r0, r4
 800fdf4:	f000 fcbc 	bl	8010770 <malloc>
 800fdf8:	b100      	cbz	r0, 800fdfc <_Znwj+0x14>
 800fdfa:	bd10      	pop	{r4, pc}
 800fdfc:	f000 f806 	bl	800fe0c <_ZSt15get_new_handlerv>
 800fe00:	b908      	cbnz	r0, 800fe06 <_Znwj+0x1e>
 800fe02:	f000 fcad 	bl	8010760 <abort>
 800fe06:	4780      	blx	r0
 800fe08:	e7f3      	b.n	800fdf2 <_Znwj+0xa>
	...

0800fe0c <_ZSt15get_new_handlerv>:
 800fe0c:	4b02      	ldr	r3, [pc, #8]	@ (800fe18 <_ZSt15get_new_handlerv+0xc>)
 800fe0e:	6818      	ldr	r0, [r3, #0]
 800fe10:	f3bf 8f5b 	dmb	ish
 800fe14:	4770      	bx	lr
 800fe16:	bf00      	nop
 800fe18:	200055d4 	.word	0x200055d4

0800fe1c <atan2>:
 800fe1c:	f000 b930 	b.w	8010080 <__ieee754_atan2>

0800fe20 <fmod>:
 800fe20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe22:	ed2d 8b02 	vpush	{d8}
 800fe26:	ec57 6b10 	vmov	r6, r7, d0
 800fe2a:	ec55 4b11 	vmov	r4, r5, d1
 800fe2e:	f000 f9ed 	bl	801020c <__ieee754_fmod>
 800fe32:	4622      	mov	r2, r4
 800fe34:	462b      	mov	r3, r5
 800fe36:	4630      	mov	r0, r6
 800fe38:	4639      	mov	r1, r7
 800fe3a:	eeb0 8a40 	vmov.f32	s16, s0
 800fe3e:	eef0 8a60 	vmov.f32	s17, s1
 800fe42:	f7f0 fe73 	bl	8000b2c <__aeabi_dcmpun>
 800fe46:	b990      	cbnz	r0, 800fe6e <fmod+0x4e>
 800fe48:	2200      	movs	r2, #0
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	4620      	mov	r0, r4
 800fe4e:	4629      	mov	r1, r5
 800fe50:	f7f0 fe3a 	bl	8000ac8 <__aeabi_dcmpeq>
 800fe54:	b158      	cbz	r0, 800fe6e <fmod+0x4e>
 800fe56:	f001 fd11 	bl	801187c <__errno>
 800fe5a:	2321      	movs	r3, #33	@ 0x21
 800fe5c:	6003      	str	r3, [r0, #0]
 800fe5e:	2200      	movs	r2, #0
 800fe60:	2300      	movs	r3, #0
 800fe62:	4610      	mov	r0, r2
 800fe64:	4619      	mov	r1, r3
 800fe66:	f7f0 fcf1 	bl	800084c <__aeabi_ddiv>
 800fe6a:	ec41 0b18 	vmov	d8, r0, r1
 800fe6e:	eeb0 0a48 	vmov.f32	s0, s16
 800fe72:	eef0 0a68 	vmov.f32	s1, s17
 800fe76:	ecbd 8b02 	vpop	{d8}
 800fe7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fe7c <sqrt>:
 800fe7c:	b538      	push	{r3, r4, r5, lr}
 800fe7e:	ed2d 8b02 	vpush	{d8}
 800fe82:	ec55 4b10 	vmov	r4, r5, d0
 800fe86:	f000 f825 	bl	800fed4 <__ieee754_sqrt>
 800fe8a:	4622      	mov	r2, r4
 800fe8c:	462b      	mov	r3, r5
 800fe8e:	4620      	mov	r0, r4
 800fe90:	4629      	mov	r1, r5
 800fe92:	eeb0 8a40 	vmov.f32	s16, s0
 800fe96:	eef0 8a60 	vmov.f32	s17, s1
 800fe9a:	f7f0 fe47 	bl	8000b2c <__aeabi_dcmpun>
 800fe9e:	b990      	cbnz	r0, 800fec6 <sqrt+0x4a>
 800fea0:	2200      	movs	r2, #0
 800fea2:	2300      	movs	r3, #0
 800fea4:	4620      	mov	r0, r4
 800fea6:	4629      	mov	r1, r5
 800fea8:	f7f0 fe18 	bl	8000adc <__aeabi_dcmplt>
 800feac:	b158      	cbz	r0, 800fec6 <sqrt+0x4a>
 800feae:	f001 fce5 	bl	801187c <__errno>
 800feb2:	2321      	movs	r3, #33	@ 0x21
 800feb4:	6003      	str	r3, [r0, #0]
 800feb6:	2200      	movs	r2, #0
 800feb8:	2300      	movs	r3, #0
 800feba:	4610      	mov	r0, r2
 800febc:	4619      	mov	r1, r3
 800febe:	f7f0 fcc5 	bl	800084c <__aeabi_ddiv>
 800fec2:	ec41 0b18 	vmov	d8, r0, r1
 800fec6:	eeb0 0a48 	vmov.f32	s0, s16
 800feca:	eef0 0a68 	vmov.f32	s1, s17
 800fece:	ecbd 8b02 	vpop	{d8}
 800fed2:	bd38      	pop	{r3, r4, r5, pc}

0800fed4 <__ieee754_sqrt>:
 800fed4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fed8:	4a66      	ldr	r2, [pc, #408]	@ (8010074 <__ieee754_sqrt+0x1a0>)
 800feda:	ec55 4b10 	vmov	r4, r5, d0
 800fede:	43aa      	bics	r2, r5
 800fee0:	462b      	mov	r3, r5
 800fee2:	4621      	mov	r1, r4
 800fee4:	d110      	bne.n	800ff08 <__ieee754_sqrt+0x34>
 800fee6:	4622      	mov	r2, r4
 800fee8:	4620      	mov	r0, r4
 800feea:	4629      	mov	r1, r5
 800feec:	f7f0 fb84 	bl	80005f8 <__aeabi_dmul>
 800fef0:	4602      	mov	r2, r0
 800fef2:	460b      	mov	r3, r1
 800fef4:	4620      	mov	r0, r4
 800fef6:	4629      	mov	r1, r5
 800fef8:	f7f0 f9c8 	bl	800028c <__adddf3>
 800fefc:	4604      	mov	r4, r0
 800fefe:	460d      	mov	r5, r1
 800ff00:	ec45 4b10 	vmov	d0, r4, r5
 800ff04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff08:	2d00      	cmp	r5, #0
 800ff0a:	dc0e      	bgt.n	800ff2a <__ieee754_sqrt+0x56>
 800ff0c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ff10:	4322      	orrs	r2, r4
 800ff12:	d0f5      	beq.n	800ff00 <__ieee754_sqrt+0x2c>
 800ff14:	b19d      	cbz	r5, 800ff3e <__ieee754_sqrt+0x6a>
 800ff16:	4622      	mov	r2, r4
 800ff18:	4620      	mov	r0, r4
 800ff1a:	4629      	mov	r1, r5
 800ff1c:	f7f0 f9b4 	bl	8000288 <__aeabi_dsub>
 800ff20:	4602      	mov	r2, r0
 800ff22:	460b      	mov	r3, r1
 800ff24:	f7f0 fc92 	bl	800084c <__aeabi_ddiv>
 800ff28:	e7e8      	b.n	800fefc <__ieee754_sqrt+0x28>
 800ff2a:	152a      	asrs	r2, r5, #20
 800ff2c:	d115      	bne.n	800ff5a <__ieee754_sqrt+0x86>
 800ff2e:	2000      	movs	r0, #0
 800ff30:	e009      	b.n	800ff46 <__ieee754_sqrt+0x72>
 800ff32:	0acb      	lsrs	r3, r1, #11
 800ff34:	3a15      	subs	r2, #21
 800ff36:	0549      	lsls	r1, r1, #21
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d0fa      	beq.n	800ff32 <__ieee754_sqrt+0x5e>
 800ff3c:	e7f7      	b.n	800ff2e <__ieee754_sqrt+0x5a>
 800ff3e:	462a      	mov	r2, r5
 800ff40:	e7fa      	b.n	800ff38 <__ieee754_sqrt+0x64>
 800ff42:	005b      	lsls	r3, r3, #1
 800ff44:	3001      	adds	r0, #1
 800ff46:	02dc      	lsls	r4, r3, #11
 800ff48:	d5fb      	bpl.n	800ff42 <__ieee754_sqrt+0x6e>
 800ff4a:	1e44      	subs	r4, r0, #1
 800ff4c:	1b12      	subs	r2, r2, r4
 800ff4e:	f1c0 0420 	rsb	r4, r0, #32
 800ff52:	fa21 f404 	lsr.w	r4, r1, r4
 800ff56:	4323      	orrs	r3, r4
 800ff58:	4081      	lsls	r1, r0
 800ff5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff5e:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800ff62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ff66:	07d2      	lsls	r2, r2, #31
 800ff68:	bf5c      	itt	pl
 800ff6a:	005b      	lslpl	r3, r3, #1
 800ff6c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ff70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ff74:	bf58      	it	pl
 800ff76:	0049      	lslpl	r1, r1, #1
 800ff78:	2600      	movs	r6, #0
 800ff7a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ff7e:	107f      	asrs	r7, r7, #1
 800ff80:	0049      	lsls	r1, r1, #1
 800ff82:	2016      	movs	r0, #22
 800ff84:	4632      	mov	r2, r6
 800ff86:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ff8a:	1915      	adds	r5, r2, r4
 800ff8c:	429d      	cmp	r5, r3
 800ff8e:	bfde      	ittt	le
 800ff90:	192a      	addle	r2, r5, r4
 800ff92:	1b5b      	suble	r3, r3, r5
 800ff94:	1936      	addle	r6, r6, r4
 800ff96:	0fcd      	lsrs	r5, r1, #31
 800ff98:	3801      	subs	r0, #1
 800ff9a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800ff9e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ffa2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ffa6:	d1f0      	bne.n	800ff8a <__ieee754_sqrt+0xb6>
 800ffa8:	4605      	mov	r5, r0
 800ffaa:	2420      	movs	r4, #32
 800ffac:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ffb0:	4293      	cmp	r3, r2
 800ffb2:	eb0c 0e00 	add.w	lr, ip, r0
 800ffb6:	dc02      	bgt.n	800ffbe <__ieee754_sqrt+0xea>
 800ffb8:	d113      	bne.n	800ffe2 <__ieee754_sqrt+0x10e>
 800ffba:	458e      	cmp	lr, r1
 800ffbc:	d811      	bhi.n	800ffe2 <__ieee754_sqrt+0x10e>
 800ffbe:	f1be 0f00 	cmp.w	lr, #0
 800ffc2:	eb0e 000c 	add.w	r0, lr, ip
 800ffc6:	da3f      	bge.n	8010048 <__ieee754_sqrt+0x174>
 800ffc8:	2800      	cmp	r0, #0
 800ffca:	db3d      	blt.n	8010048 <__ieee754_sqrt+0x174>
 800ffcc:	f102 0801 	add.w	r8, r2, #1
 800ffd0:	1a9b      	subs	r3, r3, r2
 800ffd2:	458e      	cmp	lr, r1
 800ffd4:	bf88      	it	hi
 800ffd6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ffda:	eba1 010e 	sub.w	r1, r1, lr
 800ffde:	4465      	add	r5, ip
 800ffe0:	4642      	mov	r2, r8
 800ffe2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ffe6:	3c01      	subs	r4, #1
 800ffe8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ffec:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fff0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800fff4:	d1dc      	bne.n	800ffb0 <__ieee754_sqrt+0xdc>
 800fff6:	4319      	orrs	r1, r3
 800fff8:	d01b      	beq.n	8010032 <__ieee754_sqrt+0x15e>
 800fffa:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8010078 <__ieee754_sqrt+0x1a4>
 800fffe:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 801007c <__ieee754_sqrt+0x1a8>
 8010002:	e9da 0100 	ldrd	r0, r1, [sl]
 8010006:	e9db 2300 	ldrd	r2, r3, [fp]
 801000a:	f7f0 f93d 	bl	8000288 <__aeabi_dsub>
 801000e:	e9da 8900 	ldrd	r8, r9, [sl]
 8010012:	4602      	mov	r2, r0
 8010014:	460b      	mov	r3, r1
 8010016:	4640      	mov	r0, r8
 8010018:	4649      	mov	r1, r9
 801001a:	f7f0 fd69 	bl	8000af0 <__aeabi_dcmple>
 801001e:	b140      	cbz	r0, 8010032 <__ieee754_sqrt+0x15e>
 8010020:	f1b5 3fff 	cmp.w	r5, #4294967295
 8010024:	e9da 0100 	ldrd	r0, r1, [sl]
 8010028:	e9db 2300 	ldrd	r2, r3, [fp]
 801002c:	d10e      	bne.n	801004c <__ieee754_sqrt+0x178>
 801002e:	3601      	adds	r6, #1
 8010030:	4625      	mov	r5, r4
 8010032:	1073      	asrs	r3, r6, #1
 8010034:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8010038:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 801003c:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8010040:	086b      	lsrs	r3, r5, #1
 8010042:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8010046:	e759      	b.n	800fefc <__ieee754_sqrt+0x28>
 8010048:	4690      	mov	r8, r2
 801004a:	e7c1      	b.n	800ffd0 <__ieee754_sqrt+0xfc>
 801004c:	f7f0 f91e 	bl	800028c <__adddf3>
 8010050:	e9da 8900 	ldrd	r8, r9, [sl]
 8010054:	4602      	mov	r2, r0
 8010056:	460b      	mov	r3, r1
 8010058:	4640      	mov	r0, r8
 801005a:	4649      	mov	r1, r9
 801005c:	f7f0 fd3e 	bl	8000adc <__aeabi_dcmplt>
 8010060:	b120      	cbz	r0, 801006c <__ieee754_sqrt+0x198>
 8010062:	1cab      	adds	r3, r5, #2
 8010064:	bf08      	it	eq
 8010066:	3601      	addeq	r6, #1
 8010068:	3502      	adds	r5, #2
 801006a:	e7e2      	b.n	8010032 <__ieee754_sqrt+0x15e>
 801006c:	1c6b      	adds	r3, r5, #1
 801006e:	f023 0501 	bic.w	r5, r3, #1
 8010072:	e7de      	b.n	8010032 <__ieee754_sqrt+0x15e>
 8010074:	7ff00000 	.word	0x7ff00000
 8010078:	08014320 	.word	0x08014320
 801007c:	08014318 	.word	0x08014318

08010080 <__ieee754_atan2>:
 8010080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010084:	ec57 6b11 	vmov	r6, r7, d1
 8010088:	4273      	negs	r3, r6
 801008a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8010208 <__ieee754_atan2+0x188>
 801008e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8010092:	4333      	orrs	r3, r6
 8010094:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010098:	4543      	cmp	r3, r8
 801009a:	ec51 0b10 	vmov	r0, r1, d0
 801009e:	4635      	mov	r5, r6
 80100a0:	d809      	bhi.n	80100b6 <__ieee754_atan2+0x36>
 80100a2:	4244      	negs	r4, r0
 80100a4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80100a8:	4304      	orrs	r4, r0
 80100aa:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80100ae:	4544      	cmp	r4, r8
 80100b0:	468e      	mov	lr, r1
 80100b2:	4681      	mov	r9, r0
 80100b4:	d907      	bls.n	80100c6 <__ieee754_atan2+0x46>
 80100b6:	4632      	mov	r2, r6
 80100b8:	463b      	mov	r3, r7
 80100ba:	f7f0 f8e7 	bl	800028c <__adddf3>
 80100be:	ec41 0b10 	vmov	d0, r0, r1
 80100c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100c6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80100ca:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80100ce:	4334      	orrs	r4, r6
 80100d0:	d103      	bne.n	80100da <__ieee754_atan2+0x5a>
 80100d2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100d6:	f000 b9a3 	b.w	8010420 <atan>
 80100da:	17bc      	asrs	r4, r7, #30
 80100dc:	f004 0402 	and.w	r4, r4, #2
 80100e0:	ea53 0909 	orrs.w	r9, r3, r9
 80100e4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80100e8:	d107      	bne.n	80100fa <__ieee754_atan2+0x7a>
 80100ea:	2c02      	cmp	r4, #2
 80100ec:	d05f      	beq.n	80101ae <__ieee754_atan2+0x12e>
 80100ee:	2c03      	cmp	r4, #3
 80100f0:	d1e5      	bne.n	80100be <__ieee754_atan2+0x3e>
 80100f2:	a143      	add	r1, pc, #268	@ (adr r1, 8010200 <__ieee754_atan2+0x180>)
 80100f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100f8:	e7e1      	b.n	80100be <__ieee754_atan2+0x3e>
 80100fa:	4315      	orrs	r5, r2
 80100fc:	d106      	bne.n	801010c <__ieee754_atan2+0x8c>
 80100fe:	f1be 0f00 	cmp.w	lr, #0
 8010102:	db5f      	blt.n	80101c4 <__ieee754_atan2+0x144>
 8010104:	a136      	add	r1, pc, #216	@ (adr r1, 80101e0 <__ieee754_atan2+0x160>)
 8010106:	e9d1 0100 	ldrd	r0, r1, [r1]
 801010a:	e7d8      	b.n	80100be <__ieee754_atan2+0x3e>
 801010c:	4542      	cmp	r2, r8
 801010e:	d10f      	bne.n	8010130 <__ieee754_atan2+0xb0>
 8010110:	4293      	cmp	r3, r2
 8010112:	f104 34ff 	add.w	r4, r4, #4294967295
 8010116:	d107      	bne.n	8010128 <__ieee754_atan2+0xa8>
 8010118:	2c02      	cmp	r4, #2
 801011a:	d84c      	bhi.n	80101b6 <__ieee754_atan2+0x136>
 801011c:	4b36      	ldr	r3, [pc, #216]	@ (80101f8 <__ieee754_atan2+0x178>)
 801011e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010122:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010126:	e7ca      	b.n	80100be <__ieee754_atan2+0x3e>
 8010128:	2c02      	cmp	r4, #2
 801012a:	d848      	bhi.n	80101be <__ieee754_atan2+0x13e>
 801012c:	4b33      	ldr	r3, [pc, #204]	@ (80101fc <__ieee754_atan2+0x17c>)
 801012e:	e7f6      	b.n	801011e <__ieee754_atan2+0x9e>
 8010130:	4543      	cmp	r3, r8
 8010132:	d0e4      	beq.n	80100fe <__ieee754_atan2+0x7e>
 8010134:	1a9b      	subs	r3, r3, r2
 8010136:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801013a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801013e:	da1e      	bge.n	801017e <__ieee754_atan2+0xfe>
 8010140:	2f00      	cmp	r7, #0
 8010142:	da01      	bge.n	8010148 <__ieee754_atan2+0xc8>
 8010144:	323c      	adds	r2, #60	@ 0x3c
 8010146:	db1e      	blt.n	8010186 <__ieee754_atan2+0x106>
 8010148:	4632      	mov	r2, r6
 801014a:	463b      	mov	r3, r7
 801014c:	f7f0 fb7e 	bl	800084c <__aeabi_ddiv>
 8010150:	ec41 0b10 	vmov	d0, r0, r1
 8010154:	f000 fafc 	bl	8010750 <fabs>
 8010158:	f000 f962 	bl	8010420 <atan>
 801015c:	ec51 0b10 	vmov	r0, r1, d0
 8010160:	2c01      	cmp	r4, #1
 8010162:	d013      	beq.n	801018c <__ieee754_atan2+0x10c>
 8010164:	2c02      	cmp	r4, #2
 8010166:	d015      	beq.n	8010194 <__ieee754_atan2+0x114>
 8010168:	2c00      	cmp	r4, #0
 801016a:	d0a8      	beq.n	80100be <__ieee754_atan2+0x3e>
 801016c:	a318      	add	r3, pc, #96	@ (adr r3, 80101d0 <__ieee754_atan2+0x150>)
 801016e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010172:	f7f0 f889 	bl	8000288 <__aeabi_dsub>
 8010176:	a318      	add	r3, pc, #96	@ (adr r3, 80101d8 <__ieee754_atan2+0x158>)
 8010178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801017c:	e014      	b.n	80101a8 <__ieee754_atan2+0x128>
 801017e:	a118      	add	r1, pc, #96	@ (adr r1, 80101e0 <__ieee754_atan2+0x160>)
 8010180:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010184:	e7ec      	b.n	8010160 <__ieee754_atan2+0xe0>
 8010186:	2000      	movs	r0, #0
 8010188:	2100      	movs	r1, #0
 801018a:	e7e9      	b.n	8010160 <__ieee754_atan2+0xe0>
 801018c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010190:	4619      	mov	r1, r3
 8010192:	e794      	b.n	80100be <__ieee754_atan2+0x3e>
 8010194:	a30e      	add	r3, pc, #56	@ (adr r3, 80101d0 <__ieee754_atan2+0x150>)
 8010196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801019a:	f7f0 f875 	bl	8000288 <__aeabi_dsub>
 801019e:	4602      	mov	r2, r0
 80101a0:	460b      	mov	r3, r1
 80101a2:	a10d      	add	r1, pc, #52	@ (adr r1, 80101d8 <__ieee754_atan2+0x158>)
 80101a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80101a8:	f7f0 f86e 	bl	8000288 <__aeabi_dsub>
 80101ac:	e787      	b.n	80100be <__ieee754_atan2+0x3e>
 80101ae:	a10a      	add	r1, pc, #40	@ (adr r1, 80101d8 <__ieee754_atan2+0x158>)
 80101b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80101b4:	e783      	b.n	80100be <__ieee754_atan2+0x3e>
 80101b6:	a10c      	add	r1, pc, #48	@ (adr r1, 80101e8 <__ieee754_atan2+0x168>)
 80101b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80101bc:	e77f      	b.n	80100be <__ieee754_atan2+0x3e>
 80101be:	2000      	movs	r0, #0
 80101c0:	2100      	movs	r1, #0
 80101c2:	e77c      	b.n	80100be <__ieee754_atan2+0x3e>
 80101c4:	a10a      	add	r1, pc, #40	@ (adr r1, 80101f0 <__ieee754_atan2+0x170>)
 80101c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80101ca:	e778      	b.n	80100be <__ieee754_atan2+0x3e>
 80101cc:	f3af 8000 	nop.w
 80101d0:	33145c07 	.word	0x33145c07
 80101d4:	3ca1a626 	.word	0x3ca1a626
 80101d8:	54442d18 	.word	0x54442d18
 80101dc:	400921fb 	.word	0x400921fb
 80101e0:	54442d18 	.word	0x54442d18
 80101e4:	3ff921fb 	.word	0x3ff921fb
 80101e8:	54442d18 	.word	0x54442d18
 80101ec:	3fe921fb 	.word	0x3fe921fb
 80101f0:	54442d18 	.word	0x54442d18
 80101f4:	bff921fb 	.word	0xbff921fb
 80101f8:	08014340 	.word	0x08014340
 80101fc:	08014328 	.word	0x08014328
 8010200:	54442d18 	.word	0x54442d18
 8010204:	c00921fb 	.word	0xc00921fb
 8010208:	7ff00000 	.word	0x7ff00000

0801020c <__ieee754_fmod>:
 801020c:	ec53 2b11 	vmov	r2, r3, d1
 8010210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010214:	f023 4800 	bic.w	r8, r3, #2147483648	@ 0x80000000
 8010218:	ea52 0408 	orrs.w	r4, r2, r8
 801021c:	ec51 0b10 	vmov	r0, r1, d0
 8010220:	461e      	mov	r6, r3
 8010222:	4696      	mov	lr, r2
 8010224:	4694      	mov	ip, r2
 8010226:	d00c      	beq.n	8010242 <__ieee754_fmod+0x36>
 8010228:	4d76      	ldr	r5, [pc, #472]	@ (8010404 <__ieee754_fmod+0x1f8>)
 801022a:	f021 4900 	bic.w	r9, r1, #2147483648	@ 0x80000000
 801022e:	45a9      	cmp	r9, r5
 8010230:	460c      	mov	r4, r1
 8010232:	d806      	bhi.n	8010242 <__ieee754_fmod+0x36>
 8010234:	4255      	negs	r5, r2
 8010236:	4f74      	ldr	r7, [pc, #464]	@ (8010408 <__ieee754_fmod+0x1fc>)
 8010238:	4315      	orrs	r5, r2
 801023a:	ea48 75d5 	orr.w	r5, r8, r5, lsr #31
 801023e:	42bd      	cmp	r5, r7
 8010240:	d909      	bls.n	8010256 <__ieee754_fmod+0x4a>
 8010242:	f7f0 f9d9 	bl	80005f8 <__aeabi_dmul>
 8010246:	4602      	mov	r2, r0
 8010248:	460b      	mov	r3, r1
 801024a:	f7f0 faff 	bl	800084c <__aeabi_ddiv>
 801024e:	ec41 0b10 	vmov	d0, r0, r1
 8010252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010256:	45c1      	cmp	r9, r8
 8010258:	4682      	mov	sl, r0
 801025a:	4607      	mov	r7, r0
 801025c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8010260:	dc09      	bgt.n	8010276 <__ieee754_fmod+0x6a>
 8010262:	dbf4      	blt.n	801024e <__ieee754_fmod+0x42>
 8010264:	4282      	cmp	r2, r0
 8010266:	d8f2      	bhi.n	801024e <__ieee754_fmod+0x42>
 8010268:	d105      	bne.n	8010276 <__ieee754_fmod+0x6a>
 801026a:	4b68      	ldr	r3, [pc, #416]	@ (801040c <__ieee754_fmod+0x200>)
 801026c:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8010270:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010274:	e7eb      	b.n	801024e <__ieee754_fmod+0x42>
 8010276:	4964      	ldr	r1, [pc, #400]	@ (8010408 <__ieee754_fmod+0x1fc>)
 8010278:	420c      	tst	r4, r1
 801027a:	d148      	bne.n	801030e <__ieee754_fmod+0x102>
 801027c:	f1b9 0f00 	cmp.w	r9, #0
 8010280:	d13d      	bne.n	80102fe <__ieee754_fmod+0xf2>
 8010282:	4a63      	ldr	r2, [pc, #396]	@ (8010410 <__ieee754_fmod+0x204>)
 8010284:	4653      	mov	r3, sl
 8010286:	2b00      	cmp	r3, #0
 8010288:	dc36      	bgt.n	80102f8 <__ieee754_fmod+0xec>
 801028a:	420e      	tst	r6, r1
 801028c:	d14f      	bne.n	801032e <__ieee754_fmod+0x122>
 801028e:	f1b8 0f00 	cmp.w	r8, #0
 8010292:	d144      	bne.n	801031e <__ieee754_fmod+0x112>
 8010294:	4b5e      	ldr	r3, [pc, #376]	@ (8010410 <__ieee754_fmod+0x204>)
 8010296:	4671      	mov	r1, lr
 8010298:	2900      	cmp	r1, #0
 801029a:	dc3d      	bgt.n	8010318 <__ieee754_fmod+0x10c>
 801029c:	485d      	ldr	r0, [pc, #372]	@ (8010414 <__ieee754_fmod+0x208>)
 801029e:	4282      	cmp	r2, r0
 80102a0:	db4a      	blt.n	8010338 <__ieee754_fmod+0x12c>
 80102a2:	f3c4 0113 	ubfx	r1, r4, #0, #20
 80102a6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80102aa:	485a      	ldr	r0, [pc, #360]	@ (8010414 <__ieee754_fmod+0x208>)
 80102ac:	4283      	cmp	r3, r0
 80102ae:	db57      	blt.n	8010360 <__ieee754_fmod+0x154>
 80102b0:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80102b4:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 80102b8:	1ad0      	subs	r0, r2, r3
 80102ba:	1b8a      	subs	r2, r1, r6
 80102bc:	eba7 040c 	sub.w	r4, r7, ip
 80102c0:	2800      	cmp	r0, #0
 80102c2:	d162      	bne.n	801038a <__ieee754_fmod+0x17e>
 80102c4:	4567      	cmp	r7, ip
 80102c6:	bf38      	it	cc
 80102c8:	f102 32ff 	addcc.w	r2, r2, #4294967295
 80102cc:	2a00      	cmp	r2, #0
 80102ce:	bfbc      	itt	lt
 80102d0:	463c      	movlt	r4, r7
 80102d2:	460a      	movlt	r2, r1
 80102d4:	ea52 0104 	orrs.w	r1, r2, r4
 80102d8:	d0c7      	beq.n	801026a <__ieee754_fmod+0x5e>
 80102da:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 80102de:	db69      	blt.n	80103b4 <__ieee754_fmod+0x1a8>
 80102e0:	494c      	ldr	r1, [pc, #304]	@ (8010414 <__ieee754_fmod+0x208>)
 80102e2:	428b      	cmp	r3, r1
 80102e4:	db6c      	blt.n	80103c0 <__ieee754_fmod+0x1b4>
 80102e6:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 80102ea:	432a      	orrs	r2, r5
 80102ec:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 80102f0:	ea42 5103 	orr.w	r1, r2, r3, lsl #20
 80102f4:	4620      	mov	r0, r4
 80102f6:	e7aa      	b.n	801024e <__ieee754_fmod+0x42>
 80102f8:	3a01      	subs	r2, #1
 80102fa:	005b      	lsls	r3, r3, #1
 80102fc:	e7c3      	b.n	8010286 <__ieee754_fmod+0x7a>
 80102fe:	4a45      	ldr	r2, [pc, #276]	@ (8010414 <__ieee754_fmod+0x208>)
 8010300:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 8010304:	2b00      	cmp	r3, #0
 8010306:	ddc0      	ble.n	801028a <__ieee754_fmod+0x7e>
 8010308:	3a01      	subs	r2, #1
 801030a:	005b      	lsls	r3, r3, #1
 801030c:	e7fa      	b.n	8010304 <__ieee754_fmod+0xf8>
 801030e:	ea4f 5229 	mov.w	r2, r9, asr #20
 8010312:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8010316:	e7b8      	b.n	801028a <__ieee754_fmod+0x7e>
 8010318:	3b01      	subs	r3, #1
 801031a:	0049      	lsls	r1, r1, #1
 801031c:	e7bc      	b.n	8010298 <__ieee754_fmod+0x8c>
 801031e:	4b3d      	ldr	r3, [pc, #244]	@ (8010414 <__ieee754_fmod+0x208>)
 8010320:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8010324:	2900      	cmp	r1, #0
 8010326:	ddb9      	ble.n	801029c <__ieee754_fmod+0x90>
 8010328:	3b01      	subs	r3, #1
 801032a:	0049      	lsls	r1, r1, #1
 801032c:	e7fa      	b.n	8010324 <__ieee754_fmod+0x118>
 801032e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010332:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8010336:	e7b1      	b.n	801029c <__ieee754_fmod+0x90>
 8010338:	1a80      	subs	r0, r0, r2
 801033a:	281f      	cmp	r0, #31
 801033c:	dc0a      	bgt.n	8010354 <__ieee754_fmod+0x148>
 801033e:	f202 411e 	addw	r1, r2, #1054	@ 0x41e
 8010342:	fa09 f900 	lsl.w	r9, r9, r0
 8010346:	fa2a f101 	lsr.w	r1, sl, r1
 801034a:	ea41 0109 	orr.w	r1, r1, r9
 801034e:	fa0a f700 	lsl.w	r7, sl, r0
 8010352:	e7aa      	b.n	80102aa <__ieee754_fmod+0x9e>
 8010354:	4930      	ldr	r1, [pc, #192]	@ (8010418 <__ieee754_fmod+0x20c>)
 8010356:	1a89      	subs	r1, r1, r2
 8010358:	fa0a f101 	lsl.w	r1, sl, r1
 801035c:	2700      	movs	r7, #0
 801035e:	e7a4      	b.n	80102aa <__ieee754_fmod+0x9e>
 8010360:	1ac0      	subs	r0, r0, r3
 8010362:	281f      	cmp	r0, #31
 8010364:	dc0a      	bgt.n	801037c <__ieee754_fmod+0x170>
 8010366:	f203 461e 	addw	r6, r3, #1054	@ 0x41e
 801036a:	fa08 f800 	lsl.w	r8, r8, r0
 801036e:	fa2e f606 	lsr.w	r6, lr, r6
 8010372:	ea46 0608 	orr.w	r6, r6, r8
 8010376:	fa0e fc00 	lsl.w	ip, lr, r0
 801037a:	e79d      	b.n	80102b8 <__ieee754_fmod+0xac>
 801037c:	4e26      	ldr	r6, [pc, #152]	@ (8010418 <__ieee754_fmod+0x20c>)
 801037e:	1af6      	subs	r6, r6, r3
 8010380:	fa0e f606 	lsl.w	r6, lr, r6
 8010384:	f04f 0c00 	mov.w	ip, #0
 8010388:	e796      	b.n	80102b8 <__ieee754_fmod+0xac>
 801038a:	4567      	cmp	r7, ip
 801038c:	bf38      	it	cc
 801038e:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8010392:	2a00      	cmp	r2, #0
 8010394:	da05      	bge.n	80103a2 <__ieee754_fmod+0x196>
 8010396:	0ffa      	lsrs	r2, r7, #31
 8010398:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801039c:	007f      	lsls	r7, r7, #1
 801039e:	3801      	subs	r0, #1
 80103a0:	e78b      	b.n	80102ba <__ieee754_fmod+0xae>
 80103a2:	ea52 0104 	orrs.w	r1, r2, r4
 80103a6:	f43f af60 	beq.w	801026a <__ieee754_fmod+0x5e>
 80103aa:	0fe1      	lsrs	r1, r4, #31
 80103ac:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 80103b0:	0067      	lsls	r7, r4, #1
 80103b2:	e7f4      	b.n	801039e <__ieee754_fmod+0x192>
 80103b4:	0fe1      	lsrs	r1, r4, #31
 80103b6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80103ba:	0064      	lsls	r4, r4, #1
 80103bc:	3b01      	subs	r3, #1
 80103be:	e78c      	b.n	80102da <__ieee754_fmod+0xce>
 80103c0:	1ac9      	subs	r1, r1, r3
 80103c2:	2914      	cmp	r1, #20
 80103c4:	dc0a      	bgt.n	80103dc <__ieee754_fmod+0x1d0>
 80103c6:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 80103ca:	fa02 f303 	lsl.w	r3, r2, r3
 80103ce:	40cc      	lsrs	r4, r1
 80103d0:	4323      	orrs	r3, r4
 80103d2:	410a      	asrs	r2, r1
 80103d4:	ea42 0105 	orr.w	r1, r2, r5
 80103d8:	4618      	mov	r0, r3
 80103da:	e738      	b.n	801024e <__ieee754_fmod+0x42>
 80103dc:	291f      	cmp	r1, #31
 80103de:	dc07      	bgt.n	80103f0 <__ieee754_fmod+0x1e4>
 80103e0:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 80103e4:	40cc      	lsrs	r4, r1
 80103e6:	fa02 f303 	lsl.w	r3, r2, r3
 80103ea:	4323      	orrs	r3, r4
 80103ec:	462a      	mov	r2, r5
 80103ee:	e7f1      	b.n	80103d4 <__ieee754_fmod+0x1c8>
 80103f0:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 80103f4:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 80103f8:	f503 437b 	add.w	r3, r3, #64256	@ 0xfb00
 80103fc:	33e2      	adds	r3, #226	@ 0xe2
 80103fe:	fa42 f303 	asr.w	r3, r2, r3
 8010402:	e7f3      	b.n	80103ec <__ieee754_fmod+0x1e0>
 8010404:	7fefffff 	.word	0x7fefffff
 8010408:	7ff00000 	.word	0x7ff00000
 801040c:	08014358 	.word	0x08014358
 8010410:	fffffbed 	.word	0xfffffbed
 8010414:	fffffc02 	.word	0xfffffc02
 8010418:	fffffbe2 	.word	0xfffffbe2
 801041c:	00000000 	.word	0x00000000

08010420 <atan>:
 8010420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010424:	ec55 4b10 	vmov	r4, r5, d0
 8010428:	4bbf      	ldr	r3, [pc, #764]	@ (8010728 <atan+0x308>)
 801042a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801042e:	429e      	cmp	r6, r3
 8010430:	46ab      	mov	fp, r5
 8010432:	d918      	bls.n	8010466 <atan+0x46>
 8010434:	4bbd      	ldr	r3, [pc, #756]	@ (801072c <atan+0x30c>)
 8010436:	429e      	cmp	r6, r3
 8010438:	d801      	bhi.n	801043e <atan+0x1e>
 801043a:	d109      	bne.n	8010450 <atan+0x30>
 801043c:	b144      	cbz	r4, 8010450 <atan+0x30>
 801043e:	4622      	mov	r2, r4
 8010440:	462b      	mov	r3, r5
 8010442:	4620      	mov	r0, r4
 8010444:	4629      	mov	r1, r5
 8010446:	f7ef ff21 	bl	800028c <__adddf3>
 801044a:	4604      	mov	r4, r0
 801044c:	460d      	mov	r5, r1
 801044e:	e006      	b.n	801045e <atan+0x3e>
 8010450:	f1bb 0f00 	cmp.w	fp, #0
 8010454:	f340 812b 	ble.w	80106ae <atan+0x28e>
 8010458:	a597      	add	r5, pc, #604	@ (adr r5, 80106b8 <atan+0x298>)
 801045a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801045e:	ec45 4b10 	vmov	d0, r4, r5
 8010462:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010466:	4bb2      	ldr	r3, [pc, #712]	@ (8010730 <atan+0x310>)
 8010468:	429e      	cmp	r6, r3
 801046a:	d813      	bhi.n	8010494 <atan+0x74>
 801046c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8010470:	429e      	cmp	r6, r3
 8010472:	d80c      	bhi.n	801048e <atan+0x6e>
 8010474:	a392      	add	r3, pc, #584	@ (adr r3, 80106c0 <atan+0x2a0>)
 8010476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801047a:	4620      	mov	r0, r4
 801047c:	4629      	mov	r1, r5
 801047e:	f7ef ff05 	bl	800028c <__adddf3>
 8010482:	4bac      	ldr	r3, [pc, #688]	@ (8010734 <atan+0x314>)
 8010484:	2200      	movs	r2, #0
 8010486:	f7f0 fb47 	bl	8000b18 <__aeabi_dcmpgt>
 801048a:	2800      	cmp	r0, #0
 801048c:	d1e7      	bne.n	801045e <atan+0x3e>
 801048e:	f04f 3aff 	mov.w	sl, #4294967295
 8010492:	e029      	b.n	80104e8 <atan+0xc8>
 8010494:	f000 f95c 	bl	8010750 <fabs>
 8010498:	4ba7      	ldr	r3, [pc, #668]	@ (8010738 <atan+0x318>)
 801049a:	429e      	cmp	r6, r3
 801049c:	ec55 4b10 	vmov	r4, r5, d0
 80104a0:	f200 80bc 	bhi.w	801061c <atan+0x1fc>
 80104a4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80104a8:	429e      	cmp	r6, r3
 80104aa:	f200 809e 	bhi.w	80105ea <atan+0x1ca>
 80104ae:	4622      	mov	r2, r4
 80104b0:	462b      	mov	r3, r5
 80104b2:	4620      	mov	r0, r4
 80104b4:	4629      	mov	r1, r5
 80104b6:	f7ef fee9 	bl	800028c <__adddf3>
 80104ba:	4b9e      	ldr	r3, [pc, #632]	@ (8010734 <atan+0x314>)
 80104bc:	2200      	movs	r2, #0
 80104be:	f7ef fee3 	bl	8000288 <__aeabi_dsub>
 80104c2:	2200      	movs	r2, #0
 80104c4:	4606      	mov	r6, r0
 80104c6:	460f      	mov	r7, r1
 80104c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80104cc:	4620      	mov	r0, r4
 80104ce:	4629      	mov	r1, r5
 80104d0:	f7ef fedc 	bl	800028c <__adddf3>
 80104d4:	4602      	mov	r2, r0
 80104d6:	460b      	mov	r3, r1
 80104d8:	4630      	mov	r0, r6
 80104da:	4639      	mov	r1, r7
 80104dc:	f7f0 f9b6 	bl	800084c <__aeabi_ddiv>
 80104e0:	f04f 0a00 	mov.w	sl, #0
 80104e4:	4604      	mov	r4, r0
 80104e6:	460d      	mov	r5, r1
 80104e8:	4622      	mov	r2, r4
 80104ea:	462b      	mov	r3, r5
 80104ec:	4620      	mov	r0, r4
 80104ee:	4629      	mov	r1, r5
 80104f0:	f7f0 f882 	bl	80005f8 <__aeabi_dmul>
 80104f4:	4602      	mov	r2, r0
 80104f6:	460b      	mov	r3, r1
 80104f8:	4680      	mov	r8, r0
 80104fa:	4689      	mov	r9, r1
 80104fc:	f7f0 f87c 	bl	80005f8 <__aeabi_dmul>
 8010500:	a371      	add	r3, pc, #452	@ (adr r3, 80106c8 <atan+0x2a8>)
 8010502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010506:	4606      	mov	r6, r0
 8010508:	460f      	mov	r7, r1
 801050a:	f7f0 f875 	bl	80005f8 <__aeabi_dmul>
 801050e:	a370      	add	r3, pc, #448	@ (adr r3, 80106d0 <atan+0x2b0>)
 8010510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010514:	f7ef feba 	bl	800028c <__adddf3>
 8010518:	4632      	mov	r2, r6
 801051a:	463b      	mov	r3, r7
 801051c:	f7f0 f86c 	bl	80005f8 <__aeabi_dmul>
 8010520:	a36d      	add	r3, pc, #436	@ (adr r3, 80106d8 <atan+0x2b8>)
 8010522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010526:	f7ef feb1 	bl	800028c <__adddf3>
 801052a:	4632      	mov	r2, r6
 801052c:	463b      	mov	r3, r7
 801052e:	f7f0 f863 	bl	80005f8 <__aeabi_dmul>
 8010532:	a36b      	add	r3, pc, #428	@ (adr r3, 80106e0 <atan+0x2c0>)
 8010534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010538:	f7ef fea8 	bl	800028c <__adddf3>
 801053c:	4632      	mov	r2, r6
 801053e:	463b      	mov	r3, r7
 8010540:	f7f0 f85a 	bl	80005f8 <__aeabi_dmul>
 8010544:	a368      	add	r3, pc, #416	@ (adr r3, 80106e8 <atan+0x2c8>)
 8010546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801054a:	f7ef fe9f 	bl	800028c <__adddf3>
 801054e:	4632      	mov	r2, r6
 8010550:	463b      	mov	r3, r7
 8010552:	f7f0 f851 	bl	80005f8 <__aeabi_dmul>
 8010556:	a366      	add	r3, pc, #408	@ (adr r3, 80106f0 <atan+0x2d0>)
 8010558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801055c:	f7ef fe96 	bl	800028c <__adddf3>
 8010560:	4642      	mov	r2, r8
 8010562:	464b      	mov	r3, r9
 8010564:	f7f0 f848 	bl	80005f8 <__aeabi_dmul>
 8010568:	a363      	add	r3, pc, #396	@ (adr r3, 80106f8 <atan+0x2d8>)
 801056a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801056e:	4680      	mov	r8, r0
 8010570:	4689      	mov	r9, r1
 8010572:	4630      	mov	r0, r6
 8010574:	4639      	mov	r1, r7
 8010576:	f7f0 f83f 	bl	80005f8 <__aeabi_dmul>
 801057a:	a361      	add	r3, pc, #388	@ (adr r3, 8010700 <atan+0x2e0>)
 801057c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010580:	f7ef fe82 	bl	8000288 <__aeabi_dsub>
 8010584:	4632      	mov	r2, r6
 8010586:	463b      	mov	r3, r7
 8010588:	f7f0 f836 	bl	80005f8 <__aeabi_dmul>
 801058c:	a35e      	add	r3, pc, #376	@ (adr r3, 8010708 <atan+0x2e8>)
 801058e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010592:	f7ef fe79 	bl	8000288 <__aeabi_dsub>
 8010596:	4632      	mov	r2, r6
 8010598:	463b      	mov	r3, r7
 801059a:	f7f0 f82d 	bl	80005f8 <__aeabi_dmul>
 801059e:	a35c      	add	r3, pc, #368	@ (adr r3, 8010710 <atan+0x2f0>)
 80105a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105a4:	f7ef fe70 	bl	8000288 <__aeabi_dsub>
 80105a8:	4632      	mov	r2, r6
 80105aa:	463b      	mov	r3, r7
 80105ac:	f7f0 f824 	bl	80005f8 <__aeabi_dmul>
 80105b0:	a359      	add	r3, pc, #356	@ (adr r3, 8010718 <atan+0x2f8>)
 80105b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105b6:	f7ef fe67 	bl	8000288 <__aeabi_dsub>
 80105ba:	4632      	mov	r2, r6
 80105bc:	463b      	mov	r3, r7
 80105be:	f7f0 f81b 	bl	80005f8 <__aeabi_dmul>
 80105c2:	4602      	mov	r2, r0
 80105c4:	460b      	mov	r3, r1
 80105c6:	4640      	mov	r0, r8
 80105c8:	4649      	mov	r1, r9
 80105ca:	f7ef fe5f 	bl	800028c <__adddf3>
 80105ce:	4622      	mov	r2, r4
 80105d0:	462b      	mov	r3, r5
 80105d2:	f7f0 f811 	bl	80005f8 <__aeabi_dmul>
 80105d6:	f1ba 3fff 	cmp.w	sl, #4294967295
 80105da:	4602      	mov	r2, r0
 80105dc:	460b      	mov	r3, r1
 80105de:	d148      	bne.n	8010672 <atan+0x252>
 80105e0:	4620      	mov	r0, r4
 80105e2:	4629      	mov	r1, r5
 80105e4:	f7ef fe50 	bl	8000288 <__aeabi_dsub>
 80105e8:	e72f      	b.n	801044a <atan+0x2a>
 80105ea:	4b52      	ldr	r3, [pc, #328]	@ (8010734 <atan+0x314>)
 80105ec:	2200      	movs	r2, #0
 80105ee:	4620      	mov	r0, r4
 80105f0:	4629      	mov	r1, r5
 80105f2:	f7ef fe49 	bl	8000288 <__aeabi_dsub>
 80105f6:	4b4f      	ldr	r3, [pc, #316]	@ (8010734 <atan+0x314>)
 80105f8:	4606      	mov	r6, r0
 80105fa:	460f      	mov	r7, r1
 80105fc:	2200      	movs	r2, #0
 80105fe:	4620      	mov	r0, r4
 8010600:	4629      	mov	r1, r5
 8010602:	f7ef fe43 	bl	800028c <__adddf3>
 8010606:	4602      	mov	r2, r0
 8010608:	460b      	mov	r3, r1
 801060a:	4630      	mov	r0, r6
 801060c:	4639      	mov	r1, r7
 801060e:	f7f0 f91d 	bl	800084c <__aeabi_ddiv>
 8010612:	f04f 0a01 	mov.w	sl, #1
 8010616:	4604      	mov	r4, r0
 8010618:	460d      	mov	r5, r1
 801061a:	e765      	b.n	80104e8 <atan+0xc8>
 801061c:	4b47      	ldr	r3, [pc, #284]	@ (801073c <atan+0x31c>)
 801061e:	429e      	cmp	r6, r3
 8010620:	d21c      	bcs.n	801065c <atan+0x23c>
 8010622:	4b47      	ldr	r3, [pc, #284]	@ (8010740 <atan+0x320>)
 8010624:	2200      	movs	r2, #0
 8010626:	4620      	mov	r0, r4
 8010628:	4629      	mov	r1, r5
 801062a:	f7ef fe2d 	bl	8000288 <__aeabi_dsub>
 801062e:	4b44      	ldr	r3, [pc, #272]	@ (8010740 <atan+0x320>)
 8010630:	4606      	mov	r6, r0
 8010632:	460f      	mov	r7, r1
 8010634:	2200      	movs	r2, #0
 8010636:	4620      	mov	r0, r4
 8010638:	4629      	mov	r1, r5
 801063a:	f7ef ffdd 	bl	80005f8 <__aeabi_dmul>
 801063e:	4b3d      	ldr	r3, [pc, #244]	@ (8010734 <atan+0x314>)
 8010640:	2200      	movs	r2, #0
 8010642:	f7ef fe23 	bl	800028c <__adddf3>
 8010646:	4602      	mov	r2, r0
 8010648:	460b      	mov	r3, r1
 801064a:	4630      	mov	r0, r6
 801064c:	4639      	mov	r1, r7
 801064e:	f7f0 f8fd 	bl	800084c <__aeabi_ddiv>
 8010652:	f04f 0a02 	mov.w	sl, #2
 8010656:	4604      	mov	r4, r0
 8010658:	460d      	mov	r5, r1
 801065a:	e745      	b.n	80104e8 <atan+0xc8>
 801065c:	4622      	mov	r2, r4
 801065e:	462b      	mov	r3, r5
 8010660:	4938      	ldr	r1, [pc, #224]	@ (8010744 <atan+0x324>)
 8010662:	2000      	movs	r0, #0
 8010664:	f7f0 f8f2 	bl	800084c <__aeabi_ddiv>
 8010668:	f04f 0a03 	mov.w	sl, #3
 801066c:	4604      	mov	r4, r0
 801066e:	460d      	mov	r5, r1
 8010670:	e73a      	b.n	80104e8 <atan+0xc8>
 8010672:	4b35      	ldr	r3, [pc, #212]	@ (8010748 <atan+0x328>)
 8010674:	4e35      	ldr	r6, [pc, #212]	@ (801074c <atan+0x32c>)
 8010676:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801067a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801067e:	f7ef fe03 	bl	8000288 <__aeabi_dsub>
 8010682:	4622      	mov	r2, r4
 8010684:	462b      	mov	r3, r5
 8010686:	f7ef fdff 	bl	8000288 <__aeabi_dsub>
 801068a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801068e:	4602      	mov	r2, r0
 8010690:	460b      	mov	r3, r1
 8010692:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010696:	f7ef fdf7 	bl	8000288 <__aeabi_dsub>
 801069a:	f1bb 0f00 	cmp.w	fp, #0
 801069e:	4604      	mov	r4, r0
 80106a0:	460d      	mov	r5, r1
 80106a2:	f6bf aedc 	bge.w	801045e <atan+0x3e>
 80106a6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80106aa:	461d      	mov	r5, r3
 80106ac:	e6d7      	b.n	801045e <atan+0x3e>
 80106ae:	a51c      	add	r5, pc, #112	@ (adr r5, 8010720 <atan+0x300>)
 80106b0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80106b4:	e6d3      	b.n	801045e <atan+0x3e>
 80106b6:	bf00      	nop
 80106b8:	54442d18 	.word	0x54442d18
 80106bc:	3ff921fb 	.word	0x3ff921fb
 80106c0:	8800759c 	.word	0x8800759c
 80106c4:	7e37e43c 	.word	0x7e37e43c
 80106c8:	e322da11 	.word	0xe322da11
 80106cc:	3f90ad3a 	.word	0x3f90ad3a
 80106d0:	24760deb 	.word	0x24760deb
 80106d4:	3fa97b4b 	.word	0x3fa97b4b
 80106d8:	a0d03d51 	.word	0xa0d03d51
 80106dc:	3fb10d66 	.word	0x3fb10d66
 80106e0:	c54c206e 	.word	0xc54c206e
 80106e4:	3fb745cd 	.word	0x3fb745cd
 80106e8:	920083ff 	.word	0x920083ff
 80106ec:	3fc24924 	.word	0x3fc24924
 80106f0:	5555550d 	.word	0x5555550d
 80106f4:	3fd55555 	.word	0x3fd55555
 80106f8:	2c6a6c2f 	.word	0x2c6a6c2f
 80106fc:	bfa2b444 	.word	0xbfa2b444
 8010700:	52defd9a 	.word	0x52defd9a
 8010704:	3fadde2d 	.word	0x3fadde2d
 8010708:	af749a6d 	.word	0xaf749a6d
 801070c:	3fb3b0f2 	.word	0x3fb3b0f2
 8010710:	fe231671 	.word	0xfe231671
 8010714:	3fbc71c6 	.word	0x3fbc71c6
 8010718:	9998ebc4 	.word	0x9998ebc4
 801071c:	3fc99999 	.word	0x3fc99999
 8010720:	54442d18 	.word	0x54442d18
 8010724:	bff921fb 	.word	0xbff921fb
 8010728:	440fffff 	.word	0x440fffff
 801072c:	7ff00000 	.word	0x7ff00000
 8010730:	3fdbffff 	.word	0x3fdbffff
 8010734:	3ff00000 	.word	0x3ff00000
 8010738:	3ff2ffff 	.word	0x3ff2ffff
 801073c:	40038000 	.word	0x40038000
 8010740:	3ff80000 	.word	0x3ff80000
 8010744:	bff00000 	.word	0xbff00000
 8010748:	08014368 	.word	0x08014368
 801074c:	08014388 	.word	0x08014388

08010750 <fabs>:
 8010750:	ec51 0b10 	vmov	r0, r1, d0
 8010754:	4602      	mov	r2, r0
 8010756:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801075a:	ec43 2b10 	vmov	d0, r2, r3
 801075e:	4770      	bx	lr

08010760 <abort>:
 8010760:	b508      	push	{r3, lr}
 8010762:	2006      	movs	r0, #6
 8010764:	f001 f814 	bl	8011790 <raise>
 8010768:	2001      	movs	r0, #1
 801076a:	f7f5 f855 	bl	8005818 <_exit>
	...

08010770 <malloc>:
 8010770:	4b02      	ldr	r3, [pc, #8]	@ (801077c <malloc+0xc>)
 8010772:	4601      	mov	r1, r0
 8010774:	6818      	ldr	r0, [r3, #0]
 8010776:	f000 b825 	b.w	80107c4 <_malloc_r>
 801077a:	bf00      	nop
 801077c:	20000020 	.word	0x20000020

08010780 <sbrk_aligned>:
 8010780:	b570      	push	{r4, r5, r6, lr}
 8010782:	4e0f      	ldr	r6, [pc, #60]	@ (80107c0 <sbrk_aligned+0x40>)
 8010784:	460c      	mov	r4, r1
 8010786:	6831      	ldr	r1, [r6, #0]
 8010788:	4605      	mov	r5, r0
 801078a:	b911      	cbnz	r1, 8010792 <sbrk_aligned+0x12>
 801078c:	f001 f854 	bl	8011838 <_sbrk_r>
 8010790:	6030      	str	r0, [r6, #0]
 8010792:	4621      	mov	r1, r4
 8010794:	4628      	mov	r0, r5
 8010796:	f001 f84f 	bl	8011838 <_sbrk_r>
 801079a:	1c43      	adds	r3, r0, #1
 801079c:	d103      	bne.n	80107a6 <sbrk_aligned+0x26>
 801079e:	f04f 34ff 	mov.w	r4, #4294967295
 80107a2:	4620      	mov	r0, r4
 80107a4:	bd70      	pop	{r4, r5, r6, pc}
 80107a6:	1cc4      	adds	r4, r0, #3
 80107a8:	f024 0403 	bic.w	r4, r4, #3
 80107ac:	42a0      	cmp	r0, r4
 80107ae:	d0f8      	beq.n	80107a2 <sbrk_aligned+0x22>
 80107b0:	1a21      	subs	r1, r4, r0
 80107b2:	4628      	mov	r0, r5
 80107b4:	f001 f840 	bl	8011838 <_sbrk_r>
 80107b8:	3001      	adds	r0, #1
 80107ba:	d1f2      	bne.n	80107a2 <sbrk_aligned+0x22>
 80107bc:	e7ef      	b.n	801079e <sbrk_aligned+0x1e>
 80107be:	bf00      	nop
 80107c0:	200055d8 	.word	0x200055d8

080107c4 <_malloc_r>:
 80107c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107c8:	1ccd      	adds	r5, r1, #3
 80107ca:	f025 0503 	bic.w	r5, r5, #3
 80107ce:	3508      	adds	r5, #8
 80107d0:	2d0c      	cmp	r5, #12
 80107d2:	bf38      	it	cc
 80107d4:	250c      	movcc	r5, #12
 80107d6:	2d00      	cmp	r5, #0
 80107d8:	4606      	mov	r6, r0
 80107da:	db01      	blt.n	80107e0 <_malloc_r+0x1c>
 80107dc:	42a9      	cmp	r1, r5
 80107de:	d904      	bls.n	80107ea <_malloc_r+0x26>
 80107e0:	230c      	movs	r3, #12
 80107e2:	6033      	str	r3, [r6, #0]
 80107e4:	2000      	movs	r0, #0
 80107e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80108c0 <_malloc_r+0xfc>
 80107ee:	f000 f869 	bl	80108c4 <__malloc_lock>
 80107f2:	f8d8 3000 	ldr.w	r3, [r8]
 80107f6:	461c      	mov	r4, r3
 80107f8:	bb44      	cbnz	r4, 801084c <_malloc_r+0x88>
 80107fa:	4629      	mov	r1, r5
 80107fc:	4630      	mov	r0, r6
 80107fe:	f7ff ffbf 	bl	8010780 <sbrk_aligned>
 8010802:	1c43      	adds	r3, r0, #1
 8010804:	4604      	mov	r4, r0
 8010806:	d158      	bne.n	80108ba <_malloc_r+0xf6>
 8010808:	f8d8 4000 	ldr.w	r4, [r8]
 801080c:	4627      	mov	r7, r4
 801080e:	2f00      	cmp	r7, #0
 8010810:	d143      	bne.n	801089a <_malloc_r+0xd6>
 8010812:	2c00      	cmp	r4, #0
 8010814:	d04b      	beq.n	80108ae <_malloc_r+0xea>
 8010816:	6823      	ldr	r3, [r4, #0]
 8010818:	4639      	mov	r1, r7
 801081a:	4630      	mov	r0, r6
 801081c:	eb04 0903 	add.w	r9, r4, r3
 8010820:	f001 f80a 	bl	8011838 <_sbrk_r>
 8010824:	4581      	cmp	r9, r0
 8010826:	d142      	bne.n	80108ae <_malloc_r+0xea>
 8010828:	6821      	ldr	r1, [r4, #0]
 801082a:	1a6d      	subs	r5, r5, r1
 801082c:	4629      	mov	r1, r5
 801082e:	4630      	mov	r0, r6
 8010830:	f7ff ffa6 	bl	8010780 <sbrk_aligned>
 8010834:	3001      	adds	r0, #1
 8010836:	d03a      	beq.n	80108ae <_malloc_r+0xea>
 8010838:	6823      	ldr	r3, [r4, #0]
 801083a:	442b      	add	r3, r5
 801083c:	6023      	str	r3, [r4, #0]
 801083e:	f8d8 3000 	ldr.w	r3, [r8]
 8010842:	685a      	ldr	r2, [r3, #4]
 8010844:	bb62      	cbnz	r2, 80108a0 <_malloc_r+0xdc>
 8010846:	f8c8 7000 	str.w	r7, [r8]
 801084a:	e00f      	b.n	801086c <_malloc_r+0xa8>
 801084c:	6822      	ldr	r2, [r4, #0]
 801084e:	1b52      	subs	r2, r2, r5
 8010850:	d420      	bmi.n	8010894 <_malloc_r+0xd0>
 8010852:	2a0b      	cmp	r2, #11
 8010854:	d917      	bls.n	8010886 <_malloc_r+0xc2>
 8010856:	1961      	adds	r1, r4, r5
 8010858:	42a3      	cmp	r3, r4
 801085a:	6025      	str	r5, [r4, #0]
 801085c:	bf18      	it	ne
 801085e:	6059      	strne	r1, [r3, #4]
 8010860:	6863      	ldr	r3, [r4, #4]
 8010862:	bf08      	it	eq
 8010864:	f8c8 1000 	streq.w	r1, [r8]
 8010868:	5162      	str	r2, [r4, r5]
 801086a:	604b      	str	r3, [r1, #4]
 801086c:	4630      	mov	r0, r6
 801086e:	f000 f82f 	bl	80108d0 <__malloc_unlock>
 8010872:	f104 000b 	add.w	r0, r4, #11
 8010876:	1d23      	adds	r3, r4, #4
 8010878:	f020 0007 	bic.w	r0, r0, #7
 801087c:	1ac2      	subs	r2, r0, r3
 801087e:	bf1c      	itt	ne
 8010880:	1a1b      	subne	r3, r3, r0
 8010882:	50a3      	strne	r3, [r4, r2]
 8010884:	e7af      	b.n	80107e6 <_malloc_r+0x22>
 8010886:	6862      	ldr	r2, [r4, #4]
 8010888:	42a3      	cmp	r3, r4
 801088a:	bf0c      	ite	eq
 801088c:	f8c8 2000 	streq.w	r2, [r8]
 8010890:	605a      	strne	r2, [r3, #4]
 8010892:	e7eb      	b.n	801086c <_malloc_r+0xa8>
 8010894:	4623      	mov	r3, r4
 8010896:	6864      	ldr	r4, [r4, #4]
 8010898:	e7ae      	b.n	80107f8 <_malloc_r+0x34>
 801089a:	463c      	mov	r4, r7
 801089c:	687f      	ldr	r7, [r7, #4]
 801089e:	e7b6      	b.n	801080e <_malloc_r+0x4a>
 80108a0:	461a      	mov	r2, r3
 80108a2:	685b      	ldr	r3, [r3, #4]
 80108a4:	42a3      	cmp	r3, r4
 80108a6:	d1fb      	bne.n	80108a0 <_malloc_r+0xdc>
 80108a8:	2300      	movs	r3, #0
 80108aa:	6053      	str	r3, [r2, #4]
 80108ac:	e7de      	b.n	801086c <_malloc_r+0xa8>
 80108ae:	230c      	movs	r3, #12
 80108b0:	6033      	str	r3, [r6, #0]
 80108b2:	4630      	mov	r0, r6
 80108b4:	f000 f80c 	bl	80108d0 <__malloc_unlock>
 80108b8:	e794      	b.n	80107e4 <_malloc_r+0x20>
 80108ba:	6005      	str	r5, [r0, #0]
 80108bc:	e7d6      	b.n	801086c <_malloc_r+0xa8>
 80108be:	bf00      	nop
 80108c0:	200055dc 	.word	0x200055dc

080108c4 <__malloc_lock>:
 80108c4:	4801      	ldr	r0, [pc, #4]	@ (80108cc <__malloc_lock+0x8>)
 80108c6:	f001 b804 	b.w	80118d2 <__retarget_lock_acquire_recursive>
 80108ca:	bf00      	nop
 80108cc:	20005720 	.word	0x20005720

080108d0 <__malloc_unlock>:
 80108d0:	4801      	ldr	r0, [pc, #4]	@ (80108d8 <__malloc_unlock+0x8>)
 80108d2:	f000 bfff 	b.w	80118d4 <__retarget_lock_release_recursive>
 80108d6:	bf00      	nop
 80108d8:	20005720 	.word	0x20005720

080108dc <_strtol_l.isra.0>:
 80108dc:	2b24      	cmp	r3, #36	@ 0x24
 80108de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108e2:	4686      	mov	lr, r0
 80108e4:	4690      	mov	r8, r2
 80108e6:	d801      	bhi.n	80108ec <_strtol_l.isra.0+0x10>
 80108e8:	2b01      	cmp	r3, #1
 80108ea:	d106      	bne.n	80108fa <_strtol_l.isra.0+0x1e>
 80108ec:	f000 ffc6 	bl	801187c <__errno>
 80108f0:	2316      	movs	r3, #22
 80108f2:	6003      	str	r3, [r0, #0]
 80108f4:	2000      	movs	r0, #0
 80108f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108fa:	4834      	ldr	r0, [pc, #208]	@ (80109cc <_strtol_l.isra.0+0xf0>)
 80108fc:	460d      	mov	r5, r1
 80108fe:	462a      	mov	r2, r5
 8010900:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010904:	5d06      	ldrb	r6, [r0, r4]
 8010906:	f016 0608 	ands.w	r6, r6, #8
 801090a:	d1f8      	bne.n	80108fe <_strtol_l.isra.0+0x22>
 801090c:	2c2d      	cmp	r4, #45	@ 0x2d
 801090e:	d110      	bne.n	8010932 <_strtol_l.isra.0+0x56>
 8010910:	782c      	ldrb	r4, [r5, #0]
 8010912:	2601      	movs	r6, #1
 8010914:	1c95      	adds	r5, r2, #2
 8010916:	f033 0210 	bics.w	r2, r3, #16
 801091a:	d115      	bne.n	8010948 <_strtol_l.isra.0+0x6c>
 801091c:	2c30      	cmp	r4, #48	@ 0x30
 801091e:	d10d      	bne.n	801093c <_strtol_l.isra.0+0x60>
 8010920:	782a      	ldrb	r2, [r5, #0]
 8010922:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010926:	2a58      	cmp	r2, #88	@ 0x58
 8010928:	d108      	bne.n	801093c <_strtol_l.isra.0+0x60>
 801092a:	786c      	ldrb	r4, [r5, #1]
 801092c:	3502      	adds	r5, #2
 801092e:	2310      	movs	r3, #16
 8010930:	e00a      	b.n	8010948 <_strtol_l.isra.0+0x6c>
 8010932:	2c2b      	cmp	r4, #43	@ 0x2b
 8010934:	bf04      	itt	eq
 8010936:	782c      	ldrbeq	r4, [r5, #0]
 8010938:	1c95      	addeq	r5, r2, #2
 801093a:	e7ec      	b.n	8010916 <_strtol_l.isra.0+0x3a>
 801093c:	2b00      	cmp	r3, #0
 801093e:	d1f6      	bne.n	801092e <_strtol_l.isra.0+0x52>
 8010940:	2c30      	cmp	r4, #48	@ 0x30
 8010942:	bf14      	ite	ne
 8010944:	230a      	movne	r3, #10
 8010946:	2308      	moveq	r3, #8
 8010948:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801094c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010950:	2200      	movs	r2, #0
 8010952:	fbbc f9f3 	udiv	r9, ip, r3
 8010956:	4610      	mov	r0, r2
 8010958:	fb03 ca19 	mls	sl, r3, r9, ip
 801095c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010960:	2f09      	cmp	r7, #9
 8010962:	d80f      	bhi.n	8010984 <_strtol_l.isra.0+0xa8>
 8010964:	463c      	mov	r4, r7
 8010966:	42a3      	cmp	r3, r4
 8010968:	dd1b      	ble.n	80109a2 <_strtol_l.isra.0+0xc6>
 801096a:	1c57      	adds	r7, r2, #1
 801096c:	d007      	beq.n	801097e <_strtol_l.isra.0+0xa2>
 801096e:	4581      	cmp	r9, r0
 8010970:	d314      	bcc.n	801099c <_strtol_l.isra.0+0xc0>
 8010972:	d101      	bne.n	8010978 <_strtol_l.isra.0+0x9c>
 8010974:	45a2      	cmp	sl, r4
 8010976:	db11      	blt.n	801099c <_strtol_l.isra.0+0xc0>
 8010978:	fb00 4003 	mla	r0, r0, r3, r4
 801097c:	2201      	movs	r2, #1
 801097e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010982:	e7eb      	b.n	801095c <_strtol_l.isra.0+0x80>
 8010984:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010988:	2f19      	cmp	r7, #25
 801098a:	d801      	bhi.n	8010990 <_strtol_l.isra.0+0xb4>
 801098c:	3c37      	subs	r4, #55	@ 0x37
 801098e:	e7ea      	b.n	8010966 <_strtol_l.isra.0+0x8a>
 8010990:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010994:	2f19      	cmp	r7, #25
 8010996:	d804      	bhi.n	80109a2 <_strtol_l.isra.0+0xc6>
 8010998:	3c57      	subs	r4, #87	@ 0x57
 801099a:	e7e4      	b.n	8010966 <_strtol_l.isra.0+0x8a>
 801099c:	f04f 32ff 	mov.w	r2, #4294967295
 80109a0:	e7ed      	b.n	801097e <_strtol_l.isra.0+0xa2>
 80109a2:	1c53      	adds	r3, r2, #1
 80109a4:	d108      	bne.n	80109b8 <_strtol_l.isra.0+0xdc>
 80109a6:	2322      	movs	r3, #34	@ 0x22
 80109a8:	f8ce 3000 	str.w	r3, [lr]
 80109ac:	4660      	mov	r0, ip
 80109ae:	f1b8 0f00 	cmp.w	r8, #0
 80109b2:	d0a0      	beq.n	80108f6 <_strtol_l.isra.0+0x1a>
 80109b4:	1e69      	subs	r1, r5, #1
 80109b6:	e006      	b.n	80109c6 <_strtol_l.isra.0+0xea>
 80109b8:	b106      	cbz	r6, 80109bc <_strtol_l.isra.0+0xe0>
 80109ba:	4240      	negs	r0, r0
 80109bc:	f1b8 0f00 	cmp.w	r8, #0
 80109c0:	d099      	beq.n	80108f6 <_strtol_l.isra.0+0x1a>
 80109c2:	2a00      	cmp	r2, #0
 80109c4:	d1f6      	bne.n	80109b4 <_strtol_l.isra.0+0xd8>
 80109c6:	f8c8 1000 	str.w	r1, [r8]
 80109ca:	e794      	b.n	80108f6 <_strtol_l.isra.0+0x1a>
 80109cc:	080143a9 	.word	0x080143a9

080109d0 <strtol>:
 80109d0:	4613      	mov	r3, r2
 80109d2:	460a      	mov	r2, r1
 80109d4:	4601      	mov	r1, r0
 80109d6:	4802      	ldr	r0, [pc, #8]	@ (80109e0 <strtol+0x10>)
 80109d8:	6800      	ldr	r0, [r0, #0]
 80109da:	f7ff bf7f 	b.w	80108dc <_strtol_l.isra.0>
 80109de:	bf00      	nop
 80109e0:	20000020 	.word	0x20000020

080109e4 <__cvt>:
 80109e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80109e8:	ec57 6b10 	vmov	r6, r7, d0
 80109ec:	2f00      	cmp	r7, #0
 80109ee:	460c      	mov	r4, r1
 80109f0:	4619      	mov	r1, r3
 80109f2:	463b      	mov	r3, r7
 80109f4:	bfbb      	ittet	lt
 80109f6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80109fa:	461f      	movlt	r7, r3
 80109fc:	2300      	movge	r3, #0
 80109fe:	232d      	movlt	r3, #45	@ 0x2d
 8010a00:	700b      	strb	r3, [r1, #0]
 8010a02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010a04:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010a08:	4691      	mov	r9, r2
 8010a0a:	f023 0820 	bic.w	r8, r3, #32
 8010a0e:	bfbc      	itt	lt
 8010a10:	4632      	movlt	r2, r6
 8010a12:	4616      	movlt	r6, r2
 8010a14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010a18:	d005      	beq.n	8010a26 <__cvt+0x42>
 8010a1a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010a1e:	d100      	bne.n	8010a22 <__cvt+0x3e>
 8010a20:	3401      	adds	r4, #1
 8010a22:	2102      	movs	r1, #2
 8010a24:	e000      	b.n	8010a28 <__cvt+0x44>
 8010a26:	2103      	movs	r1, #3
 8010a28:	ab03      	add	r3, sp, #12
 8010a2a:	9301      	str	r3, [sp, #4]
 8010a2c:	ab02      	add	r3, sp, #8
 8010a2e:	9300      	str	r3, [sp, #0]
 8010a30:	ec47 6b10 	vmov	d0, r6, r7
 8010a34:	4653      	mov	r3, sl
 8010a36:	4622      	mov	r2, r4
 8010a38:	f000 ffe6 	bl	8011a08 <_dtoa_r>
 8010a3c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010a40:	4605      	mov	r5, r0
 8010a42:	d119      	bne.n	8010a78 <__cvt+0x94>
 8010a44:	f019 0f01 	tst.w	r9, #1
 8010a48:	d00e      	beq.n	8010a68 <__cvt+0x84>
 8010a4a:	eb00 0904 	add.w	r9, r0, r4
 8010a4e:	2200      	movs	r2, #0
 8010a50:	2300      	movs	r3, #0
 8010a52:	4630      	mov	r0, r6
 8010a54:	4639      	mov	r1, r7
 8010a56:	f7f0 f837 	bl	8000ac8 <__aeabi_dcmpeq>
 8010a5a:	b108      	cbz	r0, 8010a60 <__cvt+0x7c>
 8010a5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010a60:	2230      	movs	r2, #48	@ 0x30
 8010a62:	9b03      	ldr	r3, [sp, #12]
 8010a64:	454b      	cmp	r3, r9
 8010a66:	d31e      	bcc.n	8010aa6 <__cvt+0xc2>
 8010a68:	9b03      	ldr	r3, [sp, #12]
 8010a6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010a6c:	1b5b      	subs	r3, r3, r5
 8010a6e:	4628      	mov	r0, r5
 8010a70:	6013      	str	r3, [r2, #0]
 8010a72:	b004      	add	sp, #16
 8010a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010a7c:	eb00 0904 	add.w	r9, r0, r4
 8010a80:	d1e5      	bne.n	8010a4e <__cvt+0x6a>
 8010a82:	7803      	ldrb	r3, [r0, #0]
 8010a84:	2b30      	cmp	r3, #48	@ 0x30
 8010a86:	d10a      	bne.n	8010a9e <__cvt+0xba>
 8010a88:	2200      	movs	r2, #0
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	4630      	mov	r0, r6
 8010a8e:	4639      	mov	r1, r7
 8010a90:	f7f0 f81a 	bl	8000ac8 <__aeabi_dcmpeq>
 8010a94:	b918      	cbnz	r0, 8010a9e <__cvt+0xba>
 8010a96:	f1c4 0401 	rsb	r4, r4, #1
 8010a9a:	f8ca 4000 	str.w	r4, [sl]
 8010a9e:	f8da 3000 	ldr.w	r3, [sl]
 8010aa2:	4499      	add	r9, r3
 8010aa4:	e7d3      	b.n	8010a4e <__cvt+0x6a>
 8010aa6:	1c59      	adds	r1, r3, #1
 8010aa8:	9103      	str	r1, [sp, #12]
 8010aaa:	701a      	strb	r2, [r3, #0]
 8010aac:	e7d9      	b.n	8010a62 <__cvt+0x7e>

08010aae <__exponent>:
 8010aae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ab0:	2900      	cmp	r1, #0
 8010ab2:	bfba      	itte	lt
 8010ab4:	4249      	neglt	r1, r1
 8010ab6:	232d      	movlt	r3, #45	@ 0x2d
 8010ab8:	232b      	movge	r3, #43	@ 0x2b
 8010aba:	2909      	cmp	r1, #9
 8010abc:	7002      	strb	r2, [r0, #0]
 8010abe:	7043      	strb	r3, [r0, #1]
 8010ac0:	dd29      	ble.n	8010b16 <__exponent+0x68>
 8010ac2:	f10d 0307 	add.w	r3, sp, #7
 8010ac6:	461d      	mov	r5, r3
 8010ac8:	270a      	movs	r7, #10
 8010aca:	461a      	mov	r2, r3
 8010acc:	fbb1 f6f7 	udiv	r6, r1, r7
 8010ad0:	fb07 1416 	mls	r4, r7, r6, r1
 8010ad4:	3430      	adds	r4, #48	@ 0x30
 8010ad6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010ada:	460c      	mov	r4, r1
 8010adc:	2c63      	cmp	r4, #99	@ 0x63
 8010ade:	f103 33ff 	add.w	r3, r3, #4294967295
 8010ae2:	4631      	mov	r1, r6
 8010ae4:	dcf1      	bgt.n	8010aca <__exponent+0x1c>
 8010ae6:	3130      	adds	r1, #48	@ 0x30
 8010ae8:	1e94      	subs	r4, r2, #2
 8010aea:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010aee:	1c41      	adds	r1, r0, #1
 8010af0:	4623      	mov	r3, r4
 8010af2:	42ab      	cmp	r3, r5
 8010af4:	d30a      	bcc.n	8010b0c <__exponent+0x5e>
 8010af6:	f10d 0309 	add.w	r3, sp, #9
 8010afa:	1a9b      	subs	r3, r3, r2
 8010afc:	42ac      	cmp	r4, r5
 8010afe:	bf88      	it	hi
 8010b00:	2300      	movhi	r3, #0
 8010b02:	3302      	adds	r3, #2
 8010b04:	4403      	add	r3, r0
 8010b06:	1a18      	subs	r0, r3, r0
 8010b08:	b003      	add	sp, #12
 8010b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b0c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010b10:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010b14:	e7ed      	b.n	8010af2 <__exponent+0x44>
 8010b16:	2330      	movs	r3, #48	@ 0x30
 8010b18:	3130      	adds	r1, #48	@ 0x30
 8010b1a:	7083      	strb	r3, [r0, #2]
 8010b1c:	70c1      	strb	r1, [r0, #3]
 8010b1e:	1d03      	adds	r3, r0, #4
 8010b20:	e7f1      	b.n	8010b06 <__exponent+0x58>
	...

08010b24 <_printf_float>:
 8010b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b28:	b08d      	sub	sp, #52	@ 0x34
 8010b2a:	460c      	mov	r4, r1
 8010b2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010b30:	4616      	mov	r6, r2
 8010b32:	461f      	mov	r7, r3
 8010b34:	4605      	mov	r5, r0
 8010b36:	f000 fe33 	bl	80117a0 <_localeconv_r>
 8010b3a:	6803      	ldr	r3, [r0, #0]
 8010b3c:	9304      	str	r3, [sp, #16]
 8010b3e:	4618      	mov	r0, r3
 8010b40:	f7ef fb96 	bl	8000270 <strlen>
 8010b44:	2300      	movs	r3, #0
 8010b46:	930a      	str	r3, [sp, #40]	@ 0x28
 8010b48:	f8d8 3000 	ldr.w	r3, [r8]
 8010b4c:	9005      	str	r0, [sp, #20]
 8010b4e:	3307      	adds	r3, #7
 8010b50:	f023 0307 	bic.w	r3, r3, #7
 8010b54:	f103 0208 	add.w	r2, r3, #8
 8010b58:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010b5c:	f8d4 b000 	ldr.w	fp, [r4]
 8010b60:	f8c8 2000 	str.w	r2, [r8]
 8010b64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010b68:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010b6c:	9307      	str	r3, [sp, #28]
 8010b6e:	f8cd 8018 	str.w	r8, [sp, #24]
 8010b72:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8010b76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010b7a:	4b9c      	ldr	r3, [pc, #624]	@ (8010dec <_printf_float+0x2c8>)
 8010b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8010b80:	f7ef ffd4 	bl	8000b2c <__aeabi_dcmpun>
 8010b84:	bb70      	cbnz	r0, 8010be4 <_printf_float+0xc0>
 8010b86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010b8a:	4b98      	ldr	r3, [pc, #608]	@ (8010dec <_printf_float+0x2c8>)
 8010b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8010b90:	f7ef ffae 	bl	8000af0 <__aeabi_dcmple>
 8010b94:	bb30      	cbnz	r0, 8010be4 <_printf_float+0xc0>
 8010b96:	2200      	movs	r2, #0
 8010b98:	2300      	movs	r3, #0
 8010b9a:	4640      	mov	r0, r8
 8010b9c:	4649      	mov	r1, r9
 8010b9e:	f7ef ff9d 	bl	8000adc <__aeabi_dcmplt>
 8010ba2:	b110      	cbz	r0, 8010baa <_printf_float+0x86>
 8010ba4:	232d      	movs	r3, #45	@ 0x2d
 8010ba6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010baa:	4a91      	ldr	r2, [pc, #580]	@ (8010df0 <_printf_float+0x2cc>)
 8010bac:	4b91      	ldr	r3, [pc, #580]	@ (8010df4 <_printf_float+0x2d0>)
 8010bae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010bb2:	bf8c      	ite	hi
 8010bb4:	4690      	movhi	r8, r2
 8010bb6:	4698      	movls	r8, r3
 8010bb8:	2303      	movs	r3, #3
 8010bba:	6123      	str	r3, [r4, #16]
 8010bbc:	f02b 0304 	bic.w	r3, fp, #4
 8010bc0:	6023      	str	r3, [r4, #0]
 8010bc2:	f04f 0900 	mov.w	r9, #0
 8010bc6:	9700      	str	r7, [sp, #0]
 8010bc8:	4633      	mov	r3, r6
 8010bca:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010bcc:	4621      	mov	r1, r4
 8010bce:	4628      	mov	r0, r5
 8010bd0:	f000 f9d2 	bl	8010f78 <_printf_common>
 8010bd4:	3001      	adds	r0, #1
 8010bd6:	f040 808d 	bne.w	8010cf4 <_printf_float+0x1d0>
 8010bda:	f04f 30ff 	mov.w	r0, #4294967295
 8010bde:	b00d      	add	sp, #52	@ 0x34
 8010be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010be4:	4642      	mov	r2, r8
 8010be6:	464b      	mov	r3, r9
 8010be8:	4640      	mov	r0, r8
 8010bea:	4649      	mov	r1, r9
 8010bec:	f7ef ff9e 	bl	8000b2c <__aeabi_dcmpun>
 8010bf0:	b140      	cbz	r0, 8010c04 <_printf_float+0xe0>
 8010bf2:	464b      	mov	r3, r9
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	bfbc      	itt	lt
 8010bf8:	232d      	movlt	r3, #45	@ 0x2d
 8010bfa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010bfe:	4a7e      	ldr	r2, [pc, #504]	@ (8010df8 <_printf_float+0x2d4>)
 8010c00:	4b7e      	ldr	r3, [pc, #504]	@ (8010dfc <_printf_float+0x2d8>)
 8010c02:	e7d4      	b.n	8010bae <_printf_float+0x8a>
 8010c04:	6863      	ldr	r3, [r4, #4]
 8010c06:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8010c0a:	9206      	str	r2, [sp, #24]
 8010c0c:	1c5a      	adds	r2, r3, #1
 8010c0e:	d13b      	bne.n	8010c88 <_printf_float+0x164>
 8010c10:	2306      	movs	r3, #6
 8010c12:	6063      	str	r3, [r4, #4]
 8010c14:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010c18:	2300      	movs	r3, #0
 8010c1a:	6022      	str	r2, [r4, #0]
 8010c1c:	9303      	str	r3, [sp, #12]
 8010c1e:	ab0a      	add	r3, sp, #40	@ 0x28
 8010c20:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010c24:	ab09      	add	r3, sp, #36	@ 0x24
 8010c26:	9300      	str	r3, [sp, #0]
 8010c28:	6861      	ldr	r1, [r4, #4]
 8010c2a:	ec49 8b10 	vmov	d0, r8, r9
 8010c2e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010c32:	4628      	mov	r0, r5
 8010c34:	f7ff fed6 	bl	80109e4 <__cvt>
 8010c38:	9b06      	ldr	r3, [sp, #24]
 8010c3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010c3c:	2b47      	cmp	r3, #71	@ 0x47
 8010c3e:	4680      	mov	r8, r0
 8010c40:	d129      	bne.n	8010c96 <_printf_float+0x172>
 8010c42:	1cc8      	adds	r0, r1, #3
 8010c44:	db02      	blt.n	8010c4c <_printf_float+0x128>
 8010c46:	6863      	ldr	r3, [r4, #4]
 8010c48:	4299      	cmp	r1, r3
 8010c4a:	dd41      	ble.n	8010cd0 <_printf_float+0x1ac>
 8010c4c:	f1aa 0a02 	sub.w	sl, sl, #2
 8010c50:	fa5f fa8a 	uxtb.w	sl, sl
 8010c54:	3901      	subs	r1, #1
 8010c56:	4652      	mov	r2, sl
 8010c58:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010c5c:	9109      	str	r1, [sp, #36]	@ 0x24
 8010c5e:	f7ff ff26 	bl	8010aae <__exponent>
 8010c62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010c64:	1813      	adds	r3, r2, r0
 8010c66:	2a01      	cmp	r2, #1
 8010c68:	4681      	mov	r9, r0
 8010c6a:	6123      	str	r3, [r4, #16]
 8010c6c:	dc02      	bgt.n	8010c74 <_printf_float+0x150>
 8010c6e:	6822      	ldr	r2, [r4, #0]
 8010c70:	07d2      	lsls	r2, r2, #31
 8010c72:	d501      	bpl.n	8010c78 <_printf_float+0x154>
 8010c74:	3301      	adds	r3, #1
 8010c76:	6123      	str	r3, [r4, #16]
 8010c78:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d0a2      	beq.n	8010bc6 <_printf_float+0xa2>
 8010c80:	232d      	movs	r3, #45	@ 0x2d
 8010c82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010c86:	e79e      	b.n	8010bc6 <_printf_float+0xa2>
 8010c88:	9a06      	ldr	r2, [sp, #24]
 8010c8a:	2a47      	cmp	r2, #71	@ 0x47
 8010c8c:	d1c2      	bne.n	8010c14 <_printf_float+0xf0>
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d1c0      	bne.n	8010c14 <_printf_float+0xf0>
 8010c92:	2301      	movs	r3, #1
 8010c94:	e7bd      	b.n	8010c12 <_printf_float+0xee>
 8010c96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010c9a:	d9db      	bls.n	8010c54 <_printf_float+0x130>
 8010c9c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8010ca0:	d118      	bne.n	8010cd4 <_printf_float+0x1b0>
 8010ca2:	2900      	cmp	r1, #0
 8010ca4:	6863      	ldr	r3, [r4, #4]
 8010ca6:	dd0b      	ble.n	8010cc0 <_printf_float+0x19c>
 8010ca8:	6121      	str	r1, [r4, #16]
 8010caa:	b913      	cbnz	r3, 8010cb2 <_printf_float+0x18e>
 8010cac:	6822      	ldr	r2, [r4, #0]
 8010cae:	07d0      	lsls	r0, r2, #31
 8010cb0:	d502      	bpl.n	8010cb8 <_printf_float+0x194>
 8010cb2:	3301      	adds	r3, #1
 8010cb4:	440b      	add	r3, r1
 8010cb6:	6123      	str	r3, [r4, #16]
 8010cb8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010cba:	f04f 0900 	mov.w	r9, #0
 8010cbe:	e7db      	b.n	8010c78 <_printf_float+0x154>
 8010cc0:	b913      	cbnz	r3, 8010cc8 <_printf_float+0x1a4>
 8010cc2:	6822      	ldr	r2, [r4, #0]
 8010cc4:	07d2      	lsls	r2, r2, #31
 8010cc6:	d501      	bpl.n	8010ccc <_printf_float+0x1a8>
 8010cc8:	3302      	adds	r3, #2
 8010cca:	e7f4      	b.n	8010cb6 <_printf_float+0x192>
 8010ccc:	2301      	movs	r3, #1
 8010cce:	e7f2      	b.n	8010cb6 <_printf_float+0x192>
 8010cd0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010cd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010cd6:	4299      	cmp	r1, r3
 8010cd8:	db05      	blt.n	8010ce6 <_printf_float+0x1c2>
 8010cda:	6823      	ldr	r3, [r4, #0]
 8010cdc:	6121      	str	r1, [r4, #16]
 8010cde:	07d8      	lsls	r0, r3, #31
 8010ce0:	d5ea      	bpl.n	8010cb8 <_printf_float+0x194>
 8010ce2:	1c4b      	adds	r3, r1, #1
 8010ce4:	e7e7      	b.n	8010cb6 <_printf_float+0x192>
 8010ce6:	2900      	cmp	r1, #0
 8010ce8:	bfd4      	ite	le
 8010cea:	f1c1 0202 	rsble	r2, r1, #2
 8010cee:	2201      	movgt	r2, #1
 8010cf0:	4413      	add	r3, r2
 8010cf2:	e7e0      	b.n	8010cb6 <_printf_float+0x192>
 8010cf4:	6823      	ldr	r3, [r4, #0]
 8010cf6:	055a      	lsls	r2, r3, #21
 8010cf8:	d407      	bmi.n	8010d0a <_printf_float+0x1e6>
 8010cfa:	6923      	ldr	r3, [r4, #16]
 8010cfc:	4642      	mov	r2, r8
 8010cfe:	4631      	mov	r1, r6
 8010d00:	4628      	mov	r0, r5
 8010d02:	47b8      	blx	r7
 8010d04:	3001      	adds	r0, #1
 8010d06:	d12b      	bne.n	8010d60 <_printf_float+0x23c>
 8010d08:	e767      	b.n	8010bda <_printf_float+0xb6>
 8010d0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010d0e:	f240 80dd 	bls.w	8010ecc <_printf_float+0x3a8>
 8010d12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010d16:	2200      	movs	r2, #0
 8010d18:	2300      	movs	r3, #0
 8010d1a:	f7ef fed5 	bl	8000ac8 <__aeabi_dcmpeq>
 8010d1e:	2800      	cmp	r0, #0
 8010d20:	d033      	beq.n	8010d8a <_printf_float+0x266>
 8010d22:	4a37      	ldr	r2, [pc, #220]	@ (8010e00 <_printf_float+0x2dc>)
 8010d24:	2301      	movs	r3, #1
 8010d26:	4631      	mov	r1, r6
 8010d28:	4628      	mov	r0, r5
 8010d2a:	47b8      	blx	r7
 8010d2c:	3001      	adds	r0, #1
 8010d2e:	f43f af54 	beq.w	8010bda <_printf_float+0xb6>
 8010d32:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010d36:	4543      	cmp	r3, r8
 8010d38:	db02      	blt.n	8010d40 <_printf_float+0x21c>
 8010d3a:	6823      	ldr	r3, [r4, #0]
 8010d3c:	07d8      	lsls	r0, r3, #31
 8010d3e:	d50f      	bpl.n	8010d60 <_printf_float+0x23c>
 8010d40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010d44:	4631      	mov	r1, r6
 8010d46:	4628      	mov	r0, r5
 8010d48:	47b8      	blx	r7
 8010d4a:	3001      	adds	r0, #1
 8010d4c:	f43f af45 	beq.w	8010bda <_printf_float+0xb6>
 8010d50:	f04f 0900 	mov.w	r9, #0
 8010d54:	f108 38ff 	add.w	r8, r8, #4294967295
 8010d58:	f104 0a1a 	add.w	sl, r4, #26
 8010d5c:	45c8      	cmp	r8, r9
 8010d5e:	dc09      	bgt.n	8010d74 <_printf_float+0x250>
 8010d60:	6823      	ldr	r3, [r4, #0]
 8010d62:	079b      	lsls	r3, r3, #30
 8010d64:	f100 8103 	bmi.w	8010f6e <_printf_float+0x44a>
 8010d68:	68e0      	ldr	r0, [r4, #12]
 8010d6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010d6c:	4298      	cmp	r0, r3
 8010d6e:	bfb8      	it	lt
 8010d70:	4618      	movlt	r0, r3
 8010d72:	e734      	b.n	8010bde <_printf_float+0xba>
 8010d74:	2301      	movs	r3, #1
 8010d76:	4652      	mov	r2, sl
 8010d78:	4631      	mov	r1, r6
 8010d7a:	4628      	mov	r0, r5
 8010d7c:	47b8      	blx	r7
 8010d7e:	3001      	adds	r0, #1
 8010d80:	f43f af2b 	beq.w	8010bda <_printf_float+0xb6>
 8010d84:	f109 0901 	add.w	r9, r9, #1
 8010d88:	e7e8      	b.n	8010d5c <_printf_float+0x238>
 8010d8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	dc39      	bgt.n	8010e04 <_printf_float+0x2e0>
 8010d90:	4a1b      	ldr	r2, [pc, #108]	@ (8010e00 <_printf_float+0x2dc>)
 8010d92:	2301      	movs	r3, #1
 8010d94:	4631      	mov	r1, r6
 8010d96:	4628      	mov	r0, r5
 8010d98:	47b8      	blx	r7
 8010d9a:	3001      	adds	r0, #1
 8010d9c:	f43f af1d 	beq.w	8010bda <_printf_float+0xb6>
 8010da0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010da4:	ea59 0303 	orrs.w	r3, r9, r3
 8010da8:	d102      	bne.n	8010db0 <_printf_float+0x28c>
 8010daa:	6823      	ldr	r3, [r4, #0]
 8010dac:	07d9      	lsls	r1, r3, #31
 8010dae:	d5d7      	bpl.n	8010d60 <_printf_float+0x23c>
 8010db0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010db4:	4631      	mov	r1, r6
 8010db6:	4628      	mov	r0, r5
 8010db8:	47b8      	blx	r7
 8010dba:	3001      	adds	r0, #1
 8010dbc:	f43f af0d 	beq.w	8010bda <_printf_float+0xb6>
 8010dc0:	f04f 0a00 	mov.w	sl, #0
 8010dc4:	f104 0b1a 	add.w	fp, r4, #26
 8010dc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010dca:	425b      	negs	r3, r3
 8010dcc:	4553      	cmp	r3, sl
 8010dce:	dc01      	bgt.n	8010dd4 <_printf_float+0x2b0>
 8010dd0:	464b      	mov	r3, r9
 8010dd2:	e793      	b.n	8010cfc <_printf_float+0x1d8>
 8010dd4:	2301      	movs	r3, #1
 8010dd6:	465a      	mov	r2, fp
 8010dd8:	4631      	mov	r1, r6
 8010dda:	4628      	mov	r0, r5
 8010ddc:	47b8      	blx	r7
 8010dde:	3001      	adds	r0, #1
 8010de0:	f43f aefb 	beq.w	8010bda <_printf_float+0xb6>
 8010de4:	f10a 0a01 	add.w	sl, sl, #1
 8010de8:	e7ee      	b.n	8010dc8 <_printf_float+0x2a4>
 8010dea:	bf00      	nop
 8010dec:	7fefffff 	.word	0x7fefffff
 8010df0:	080144ad 	.word	0x080144ad
 8010df4:	080144a9 	.word	0x080144a9
 8010df8:	080144b5 	.word	0x080144b5
 8010dfc:	080144b1 	.word	0x080144b1
 8010e00:	080144b9 	.word	0x080144b9
 8010e04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010e06:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010e0a:	4553      	cmp	r3, sl
 8010e0c:	bfa8      	it	ge
 8010e0e:	4653      	movge	r3, sl
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	4699      	mov	r9, r3
 8010e14:	dc36      	bgt.n	8010e84 <_printf_float+0x360>
 8010e16:	f04f 0b00 	mov.w	fp, #0
 8010e1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010e1e:	f104 021a 	add.w	r2, r4, #26
 8010e22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010e24:	9306      	str	r3, [sp, #24]
 8010e26:	eba3 0309 	sub.w	r3, r3, r9
 8010e2a:	455b      	cmp	r3, fp
 8010e2c:	dc31      	bgt.n	8010e92 <_printf_float+0x36e>
 8010e2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e30:	459a      	cmp	sl, r3
 8010e32:	dc3a      	bgt.n	8010eaa <_printf_float+0x386>
 8010e34:	6823      	ldr	r3, [r4, #0]
 8010e36:	07da      	lsls	r2, r3, #31
 8010e38:	d437      	bmi.n	8010eaa <_printf_float+0x386>
 8010e3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e3c:	ebaa 0903 	sub.w	r9, sl, r3
 8010e40:	9b06      	ldr	r3, [sp, #24]
 8010e42:	ebaa 0303 	sub.w	r3, sl, r3
 8010e46:	4599      	cmp	r9, r3
 8010e48:	bfa8      	it	ge
 8010e4a:	4699      	movge	r9, r3
 8010e4c:	f1b9 0f00 	cmp.w	r9, #0
 8010e50:	dc33      	bgt.n	8010eba <_printf_float+0x396>
 8010e52:	f04f 0800 	mov.w	r8, #0
 8010e56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010e5a:	f104 0b1a 	add.w	fp, r4, #26
 8010e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e60:	ebaa 0303 	sub.w	r3, sl, r3
 8010e64:	eba3 0309 	sub.w	r3, r3, r9
 8010e68:	4543      	cmp	r3, r8
 8010e6a:	f77f af79 	ble.w	8010d60 <_printf_float+0x23c>
 8010e6e:	2301      	movs	r3, #1
 8010e70:	465a      	mov	r2, fp
 8010e72:	4631      	mov	r1, r6
 8010e74:	4628      	mov	r0, r5
 8010e76:	47b8      	blx	r7
 8010e78:	3001      	adds	r0, #1
 8010e7a:	f43f aeae 	beq.w	8010bda <_printf_float+0xb6>
 8010e7e:	f108 0801 	add.w	r8, r8, #1
 8010e82:	e7ec      	b.n	8010e5e <_printf_float+0x33a>
 8010e84:	4642      	mov	r2, r8
 8010e86:	4631      	mov	r1, r6
 8010e88:	4628      	mov	r0, r5
 8010e8a:	47b8      	blx	r7
 8010e8c:	3001      	adds	r0, #1
 8010e8e:	d1c2      	bne.n	8010e16 <_printf_float+0x2f2>
 8010e90:	e6a3      	b.n	8010bda <_printf_float+0xb6>
 8010e92:	2301      	movs	r3, #1
 8010e94:	4631      	mov	r1, r6
 8010e96:	4628      	mov	r0, r5
 8010e98:	9206      	str	r2, [sp, #24]
 8010e9a:	47b8      	blx	r7
 8010e9c:	3001      	adds	r0, #1
 8010e9e:	f43f ae9c 	beq.w	8010bda <_printf_float+0xb6>
 8010ea2:	9a06      	ldr	r2, [sp, #24]
 8010ea4:	f10b 0b01 	add.w	fp, fp, #1
 8010ea8:	e7bb      	b.n	8010e22 <_printf_float+0x2fe>
 8010eaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010eae:	4631      	mov	r1, r6
 8010eb0:	4628      	mov	r0, r5
 8010eb2:	47b8      	blx	r7
 8010eb4:	3001      	adds	r0, #1
 8010eb6:	d1c0      	bne.n	8010e3a <_printf_float+0x316>
 8010eb8:	e68f      	b.n	8010bda <_printf_float+0xb6>
 8010eba:	9a06      	ldr	r2, [sp, #24]
 8010ebc:	464b      	mov	r3, r9
 8010ebe:	4442      	add	r2, r8
 8010ec0:	4631      	mov	r1, r6
 8010ec2:	4628      	mov	r0, r5
 8010ec4:	47b8      	blx	r7
 8010ec6:	3001      	adds	r0, #1
 8010ec8:	d1c3      	bne.n	8010e52 <_printf_float+0x32e>
 8010eca:	e686      	b.n	8010bda <_printf_float+0xb6>
 8010ecc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010ed0:	f1ba 0f01 	cmp.w	sl, #1
 8010ed4:	dc01      	bgt.n	8010eda <_printf_float+0x3b6>
 8010ed6:	07db      	lsls	r3, r3, #31
 8010ed8:	d536      	bpl.n	8010f48 <_printf_float+0x424>
 8010eda:	2301      	movs	r3, #1
 8010edc:	4642      	mov	r2, r8
 8010ede:	4631      	mov	r1, r6
 8010ee0:	4628      	mov	r0, r5
 8010ee2:	47b8      	blx	r7
 8010ee4:	3001      	adds	r0, #1
 8010ee6:	f43f ae78 	beq.w	8010bda <_printf_float+0xb6>
 8010eea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010eee:	4631      	mov	r1, r6
 8010ef0:	4628      	mov	r0, r5
 8010ef2:	47b8      	blx	r7
 8010ef4:	3001      	adds	r0, #1
 8010ef6:	f43f ae70 	beq.w	8010bda <_printf_float+0xb6>
 8010efa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010efe:	2200      	movs	r2, #0
 8010f00:	2300      	movs	r3, #0
 8010f02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010f06:	f7ef fddf 	bl	8000ac8 <__aeabi_dcmpeq>
 8010f0a:	b9c0      	cbnz	r0, 8010f3e <_printf_float+0x41a>
 8010f0c:	4653      	mov	r3, sl
 8010f0e:	f108 0201 	add.w	r2, r8, #1
 8010f12:	4631      	mov	r1, r6
 8010f14:	4628      	mov	r0, r5
 8010f16:	47b8      	blx	r7
 8010f18:	3001      	adds	r0, #1
 8010f1a:	d10c      	bne.n	8010f36 <_printf_float+0x412>
 8010f1c:	e65d      	b.n	8010bda <_printf_float+0xb6>
 8010f1e:	2301      	movs	r3, #1
 8010f20:	465a      	mov	r2, fp
 8010f22:	4631      	mov	r1, r6
 8010f24:	4628      	mov	r0, r5
 8010f26:	47b8      	blx	r7
 8010f28:	3001      	adds	r0, #1
 8010f2a:	f43f ae56 	beq.w	8010bda <_printf_float+0xb6>
 8010f2e:	f108 0801 	add.w	r8, r8, #1
 8010f32:	45d0      	cmp	r8, sl
 8010f34:	dbf3      	blt.n	8010f1e <_printf_float+0x3fa>
 8010f36:	464b      	mov	r3, r9
 8010f38:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010f3c:	e6df      	b.n	8010cfe <_printf_float+0x1da>
 8010f3e:	f04f 0800 	mov.w	r8, #0
 8010f42:	f104 0b1a 	add.w	fp, r4, #26
 8010f46:	e7f4      	b.n	8010f32 <_printf_float+0x40e>
 8010f48:	2301      	movs	r3, #1
 8010f4a:	4642      	mov	r2, r8
 8010f4c:	e7e1      	b.n	8010f12 <_printf_float+0x3ee>
 8010f4e:	2301      	movs	r3, #1
 8010f50:	464a      	mov	r2, r9
 8010f52:	4631      	mov	r1, r6
 8010f54:	4628      	mov	r0, r5
 8010f56:	47b8      	blx	r7
 8010f58:	3001      	adds	r0, #1
 8010f5a:	f43f ae3e 	beq.w	8010bda <_printf_float+0xb6>
 8010f5e:	f108 0801 	add.w	r8, r8, #1
 8010f62:	68e3      	ldr	r3, [r4, #12]
 8010f64:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010f66:	1a5b      	subs	r3, r3, r1
 8010f68:	4543      	cmp	r3, r8
 8010f6a:	dcf0      	bgt.n	8010f4e <_printf_float+0x42a>
 8010f6c:	e6fc      	b.n	8010d68 <_printf_float+0x244>
 8010f6e:	f04f 0800 	mov.w	r8, #0
 8010f72:	f104 0919 	add.w	r9, r4, #25
 8010f76:	e7f4      	b.n	8010f62 <_printf_float+0x43e>

08010f78 <_printf_common>:
 8010f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f7c:	4616      	mov	r6, r2
 8010f7e:	4698      	mov	r8, r3
 8010f80:	688a      	ldr	r2, [r1, #8]
 8010f82:	690b      	ldr	r3, [r1, #16]
 8010f84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010f88:	4293      	cmp	r3, r2
 8010f8a:	bfb8      	it	lt
 8010f8c:	4613      	movlt	r3, r2
 8010f8e:	6033      	str	r3, [r6, #0]
 8010f90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010f94:	4607      	mov	r7, r0
 8010f96:	460c      	mov	r4, r1
 8010f98:	b10a      	cbz	r2, 8010f9e <_printf_common+0x26>
 8010f9a:	3301      	adds	r3, #1
 8010f9c:	6033      	str	r3, [r6, #0]
 8010f9e:	6823      	ldr	r3, [r4, #0]
 8010fa0:	0699      	lsls	r1, r3, #26
 8010fa2:	bf42      	ittt	mi
 8010fa4:	6833      	ldrmi	r3, [r6, #0]
 8010fa6:	3302      	addmi	r3, #2
 8010fa8:	6033      	strmi	r3, [r6, #0]
 8010faa:	6825      	ldr	r5, [r4, #0]
 8010fac:	f015 0506 	ands.w	r5, r5, #6
 8010fb0:	d106      	bne.n	8010fc0 <_printf_common+0x48>
 8010fb2:	f104 0a19 	add.w	sl, r4, #25
 8010fb6:	68e3      	ldr	r3, [r4, #12]
 8010fb8:	6832      	ldr	r2, [r6, #0]
 8010fba:	1a9b      	subs	r3, r3, r2
 8010fbc:	42ab      	cmp	r3, r5
 8010fbe:	dc26      	bgt.n	801100e <_printf_common+0x96>
 8010fc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010fc4:	6822      	ldr	r2, [r4, #0]
 8010fc6:	3b00      	subs	r3, #0
 8010fc8:	bf18      	it	ne
 8010fca:	2301      	movne	r3, #1
 8010fcc:	0692      	lsls	r2, r2, #26
 8010fce:	d42b      	bmi.n	8011028 <_printf_common+0xb0>
 8010fd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010fd4:	4641      	mov	r1, r8
 8010fd6:	4638      	mov	r0, r7
 8010fd8:	47c8      	blx	r9
 8010fda:	3001      	adds	r0, #1
 8010fdc:	d01e      	beq.n	801101c <_printf_common+0xa4>
 8010fde:	6823      	ldr	r3, [r4, #0]
 8010fe0:	6922      	ldr	r2, [r4, #16]
 8010fe2:	f003 0306 	and.w	r3, r3, #6
 8010fe6:	2b04      	cmp	r3, #4
 8010fe8:	bf02      	ittt	eq
 8010fea:	68e5      	ldreq	r5, [r4, #12]
 8010fec:	6833      	ldreq	r3, [r6, #0]
 8010fee:	1aed      	subeq	r5, r5, r3
 8010ff0:	68a3      	ldr	r3, [r4, #8]
 8010ff2:	bf0c      	ite	eq
 8010ff4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010ff8:	2500      	movne	r5, #0
 8010ffa:	4293      	cmp	r3, r2
 8010ffc:	bfc4      	itt	gt
 8010ffe:	1a9b      	subgt	r3, r3, r2
 8011000:	18ed      	addgt	r5, r5, r3
 8011002:	2600      	movs	r6, #0
 8011004:	341a      	adds	r4, #26
 8011006:	42b5      	cmp	r5, r6
 8011008:	d11a      	bne.n	8011040 <_printf_common+0xc8>
 801100a:	2000      	movs	r0, #0
 801100c:	e008      	b.n	8011020 <_printf_common+0xa8>
 801100e:	2301      	movs	r3, #1
 8011010:	4652      	mov	r2, sl
 8011012:	4641      	mov	r1, r8
 8011014:	4638      	mov	r0, r7
 8011016:	47c8      	blx	r9
 8011018:	3001      	adds	r0, #1
 801101a:	d103      	bne.n	8011024 <_printf_common+0xac>
 801101c:	f04f 30ff 	mov.w	r0, #4294967295
 8011020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011024:	3501      	adds	r5, #1
 8011026:	e7c6      	b.n	8010fb6 <_printf_common+0x3e>
 8011028:	18e1      	adds	r1, r4, r3
 801102a:	1c5a      	adds	r2, r3, #1
 801102c:	2030      	movs	r0, #48	@ 0x30
 801102e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011032:	4422      	add	r2, r4
 8011034:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011038:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801103c:	3302      	adds	r3, #2
 801103e:	e7c7      	b.n	8010fd0 <_printf_common+0x58>
 8011040:	2301      	movs	r3, #1
 8011042:	4622      	mov	r2, r4
 8011044:	4641      	mov	r1, r8
 8011046:	4638      	mov	r0, r7
 8011048:	47c8      	blx	r9
 801104a:	3001      	adds	r0, #1
 801104c:	d0e6      	beq.n	801101c <_printf_common+0xa4>
 801104e:	3601      	adds	r6, #1
 8011050:	e7d9      	b.n	8011006 <_printf_common+0x8e>
	...

08011054 <_printf_i>:
 8011054:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011058:	7e0f      	ldrb	r7, [r1, #24]
 801105a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801105c:	2f78      	cmp	r7, #120	@ 0x78
 801105e:	4691      	mov	r9, r2
 8011060:	4680      	mov	r8, r0
 8011062:	460c      	mov	r4, r1
 8011064:	469a      	mov	sl, r3
 8011066:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801106a:	d807      	bhi.n	801107c <_printf_i+0x28>
 801106c:	2f62      	cmp	r7, #98	@ 0x62
 801106e:	d80a      	bhi.n	8011086 <_printf_i+0x32>
 8011070:	2f00      	cmp	r7, #0
 8011072:	f000 80d1 	beq.w	8011218 <_printf_i+0x1c4>
 8011076:	2f58      	cmp	r7, #88	@ 0x58
 8011078:	f000 80b8 	beq.w	80111ec <_printf_i+0x198>
 801107c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011080:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011084:	e03a      	b.n	80110fc <_printf_i+0xa8>
 8011086:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801108a:	2b15      	cmp	r3, #21
 801108c:	d8f6      	bhi.n	801107c <_printf_i+0x28>
 801108e:	a101      	add	r1, pc, #4	@ (adr r1, 8011094 <_printf_i+0x40>)
 8011090:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011094:	080110ed 	.word	0x080110ed
 8011098:	08011101 	.word	0x08011101
 801109c:	0801107d 	.word	0x0801107d
 80110a0:	0801107d 	.word	0x0801107d
 80110a4:	0801107d 	.word	0x0801107d
 80110a8:	0801107d 	.word	0x0801107d
 80110ac:	08011101 	.word	0x08011101
 80110b0:	0801107d 	.word	0x0801107d
 80110b4:	0801107d 	.word	0x0801107d
 80110b8:	0801107d 	.word	0x0801107d
 80110bc:	0801107d 	.word	0x0801107d
 80110c0:	080111ff 	.word	0x080111ff
 80110c4:	0801112b 	.word	0x0801112b
 80110c8:	080111b9 	.word	0x080111b9
 80110cc:	0801107d 	.word	0x0801107d
 80110d0:	0801107d 	.word	0x0801107d
 80110d4:	08011221 	.word	0x08011221
 80110d8:	0801107d 	.word	0x0801107d
 80110dc:	0801112b 	.word	0x0801112b
 80110e0:	0801107d 	.word	0x0801107d
 80110e4:	0801107d 	.word	0x0801107d
 80110e8:	080111c1 	.word	0x080111c1
 80110ec:	6833      	ldr	r3, [r6, #0]
 80110ee:	1d1a      	adds	r2, r3, #4
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	6032      	str	r2, [r6, #0]
 80110f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80110f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80110fc:	2301      	movs	r3, #1
 80110fe:	e09c      	b.n	801123a <_printf_i+0x1e6>
 8011100:	6833      	ldr	r3, [r6, #0]
 8011102:	6820      	ldr	r0, [r4, #0]
 8011104:	1d19      	adds	r1, r3, #4
 8011106:	6031      	str	r1, [r6, #0]
 8011108:	0606      	lsls	r6, r0, #24
 801110a:	d501      	bpl.n	8011110 <_printf_i+0xbc>
 801110c:	681d      	ldr	r5, [r3, #0]
 801110e:	e003      	b.n	8011118 <_printf_i+0xc4>
 8011110:	0645      	lsls	r5, r0, #25
 8011112:	d5fb      	bpl.n	801110c <_printf_i+0xb8>
 8011114:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011118:	2d00      	cmp	r5, #0
 801111a:	da03      	bge.n	8011124 <_printf_i+0xd0>
 801111c:	232d      	movs	r3, #45	@ 0x2d
 801111e:	426d      	negs	r5, r5
 8011120:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011124:	4858      	ldr	r0, [pc, #352]	@ (8011288 <_printf_i+0x234>)
 8011126:	230a      	movs	r3, #10
 8011128:	e011      	b.n	801114e <_printf_i+0xfa>
 801112a:	6821      	ldr	r1, [r4, #0]
 801112c:	6833      	ldr	r3, [r6, #0]
 801112e:	0608      	lsls	r0, r1, #24
 8011130:	f853 5b04 	ldr.w	r5, [r3], #4
 8011134:	d402      	bmi.n	801113c <_printf_i+0xe8>
 8011136:	0649      	lsls	r1, r1, #25
 8011138:	bf48      	it	mi
 801113a:	b2ad      	uxthmi	r5, r5
 801113c:	2f6f      	cmp	r7, #111	@ 0x6f
 801113e:	4852      	ldr	r0, [pc, #328]	@ (8011288 <_printf_i+0x234>)
 8011140:	6033      	str	r3, [r6, #0]
 8011142:	bf14      	ite	ne
 8011144:	230a      	movne	r3, #10
 8011146:	2308      	moveq	r3, #8
 8011148:	2100      	movs	r1, #0
 801114a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801114e:	6866      	ldr	r6, [r4, #4]
 8011150:	60a6      	str	r6, [r4, #8]
 8011152:	2e00      	cmp	r6, #0
 8011154:	db05      	blt.n	8011162 <_printf_i+0x10e>
 8011156:	6821      	ldr	r1, [r4, #0]
 8011158:	432e      	orrs	r6, r5
 801115a:	f021 0104 	bic.w	r1, r1, #4
 801115e:	6021      	str	r1, [r4, #0]
 8011160:	d04b      	beq.n	80111fa <_printf_i+0x1a6>
 8011162:	4616      	mov	r6, r2
 8011164:	fbb5 f1f3 	udiv	r1, r5, r3
 8011168:	fb03 5711 	mls	r7, r3, r1, r5
 801116c:	5dc7      	ldrb	r7, [r0, r7]
 801116e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011172:	462f      	mov	r7, r5
 8011174:	42bb      	cmp	r3, r7
 8011176:	460d      	mov	r5, r1
 8011178:	d9f4      	bls.n	8011164 <_printf_i+0x110>
 801117a:	2b08      	cmp	r3, #8
 801117c:	d10b      	bne.n	8011196 <_printf_i+0x142>
 801117e:	6823      	ldr	r3, [r4, #0]
 8011180:	07df      	lsls	r7, r3, #31
 8011182:	d508      	bpl.n	8011196 <_printf_i+0x142>
 8011184:	6923      	ldr	r3, [r4, #16]
 8011186:	6861      	ldr	r1, [r4, #4]
 8011188:	4299      	cmp	r1, r3
 801118a:	bfde      	ittt	le
 801118c:	2330      	movle	r3, #48	@ 0x30
 801118e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011192:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011196:	1b92      	subs	r2, r2, r6
 8011198:	6122      	str	r2, [r4, #16]
 801119a:	f8cd a000 	str.w	sl, [sp]
 801119e:	464b      	mov	r3, r9
 80111a0:	aa03      	add	r2, sp, #12
 80111a2:	4621      	mov	r1, r4
 80111a4:	4640      	mov	r0, r8
 80111a6:	f7ff fee7 	bl	8010f78 <_printf_common>
 80111aa:	3001      	adds	r0, #1
 80111ac:	d14a      	bne.n	8011244 <_printf_i+0x1f0>
 80111ae:	f04f 30ff 	mov.w	r0, #4294967295
 80111b2:	b004      	add	sp, #16
 80111b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111b8:	6823      	ldr	r3, [r4, #0]
 80111ba:	f043 0320 	orr.w	r3, r3, #32
 80111be:	6023      	str	r3, [r4, #0]
 80111c0:	4832      	ldr	r0, [pc, #200]	@ (801128c <_printf_i+0x238>)
 80111c2:	2778      	movs	r7, #120	@ 0x78
 80111c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80111c8:	6823      	ldr	r3, [r4, #0]
 80111ca:	6831      	ldr	r1, [r6, #0]
 80111cc:	061f      	lsls	r7, r3, #24
 80111ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80111d2:	d402      	bmi.n	80111da <_printf_i+0x186>
 80111d4:	065f      	lsls	r7, r3, #25
 80111d6:	bf48      	it	mi
 80111d8:	b2ad      	uxthmi	r5, r5
 80111da:	6031      	str	r1, [r6, #0]
 80111dc:	07d9      	lsls	r1, r3, #31
 80111de:	bf44      	itt	mi
 80111e0:	f043 0320 	orrmi.w	r3, r3, #32
 80111e4:	6023      	strmi	r3, [r4, #0]
 80111e6:	b11d      	cbz	r5, 80111f0 <_printf_i+0x19c>
 80111e8:	2310      	movs	r3, #16
 80111ea:	e7ad      	b.n	8011148 <_printf_i+0xf4>
 80111ec:	4826      	ldr	r0, [pc, #152]	@ (8011288 <_printf_i+0x234>)
 80111ee:	e7e9      	b.n	80111c4 <_printf_i+0x170>
 80111f0:	6823      	ldr	r3, [r4, #0]
 80111f2:	f023 0320 	bic.w	r3, r3, #32
 80111f6:	6023      	str	r3, [r4, #0]
 80111f8:	e7f6      	b.n	80111e8 <_printf_i+0x194>
 80111fa:	4616      	mov	r6, r2
 80111fc:	e7bd      	b.n	801117a <_printf_i+0x126>
 80111fe:	6833      	ldr	r3, [r6, #0]
 8011200:	6825      	ldr	r5, [r4, #0]
 8011202:	6961      	ldr	r1, [r4, #20]
 8011204:	1d18      	adds	r0, r3, #4
 8011206:	6030      	str	r0, [r6, #0]
 8011208:	062e      	lsls	r6, r5, #24
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	d501      	bpl.n	8011212 <_printf_i+0x1be>
 801120e:	6019      	str	r1, [r3, #0]
 8011210:	e002      	b.n	8011218 <_printf_i+0x1c4>
 8011212:	0668      	lsls	r0, r5, #25
 8011214:	d5fb      	bpl.n	801120e <_printf_i+0x1ba>
 8011216:	8019      	strh	r1, [r3, #0]
 8011218:	2300      	movs	r3, #0
 801121a:	6123      	str	r3, [r4, #16]
 801121c:	4616      	mov	r6, r2
 801121e:	e7bc      	b.n	801119a <_printf_i+0x146>
 8011220:	6833      	ldr	r3, [r6, #0]
 8011222:	1d1a      	adds	r2, r3, #4
 8011224:	6032      	str	r2, [r6, #0]
 8011226:	681e      	ldr	r6, [r3, #0]
 8011228:	6862      	ldr	r2, [r4, #4]
 801122a:	2100      	movs	r1, #0
 801122c:	4630      	mov	r0, r6
 801122e:	f7ee ffcf 	bl	80001d0 <memchr>
 8011232:	b108      	cbz	r0, 8011238 <_printf_i+0x1e4>
 8011234:	1b80      	subs	r0, r0, r6
 8011236:	6060      	str	r0, [r4, #4]
 8011238:	6863      	ldr	r3, [r4, #4]
 801123a:	6123      	str	r3, [r4, #16]
 801123c:	2300      	movs	r3, #0
 801123e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011242:	e7aa      	b.n	801119a <_printf_i+0x146>
 8011244:	6923      	ldr	r3, [r4, #16]
 8011246:	4632      	mov	r2, r6
 8011248:	4649      	mov	r1, r9
 801124a:	4640      	mov	r0, r8
 801124c:	47d0      	blx	sl
 801124e:	3001      	adds	r0, #1
 8011250:	d0ad      	beq.n	80111ae <_printf_i+0x15a>
 8011252:	6823      	ldr	r3, [r4, #0]
 8011254:	079b      	lsls	r3, r3, #30
 8011256:	d413      	bmi.n	8011280 <_printf_i+0x22c>
 8011258:	68e0      	ldr	r0, [r4, #12]
 801125a:	9b03      	ldr	r3, [sp, #12]
 801125c:	4298      	cmp	r0, r3
 801125e:	bfb8      	it	lt
 8011260:	4618      	movlt	r0, r3
 8011262:	e7a6      	b.n	80111b2 <_printf_i+0x15e>
 8011264:	2301      	movs	r3, #1
 8011266:	4632      	mov	r2, r6
 8011268:	4649      	mov	r1, r9
 801126a:	4640      	mov	r0, r8
 801126c:	47d0      	blx	sl
 801126e:	3001      	adds	r0, #1
 8011270:	d09d      	beq.n	80111ae <_printf_i+0x15a>
 8011272:	3501      	adds	r5, #1
 8011274:	68e3      	ldr	r3, [r4, #12]
 8011276:	9903      	ldr	r1, [sp, #12]
 8011278:	1a5b      	subs	r3, r3, r1
 801127a:	42ab      	cmp	r3, r5
 801127c:	dcf2      	bgt.n	8011264 <_printf_i+0x210>
 801127e:	e7eb      	b.n	8011258 <_printf_i+0x204>
 8011280:	2500      	movs	r5, #0
 8011282:	f104 0619 	add.w	r6, r4, #25
 8011286:	e7f5      	b.n	8011274 <_printf_i+0x220>
 8011288:	080144bb 	.word	0x080144bb
 801128c:	080144cc 	.word	0x080144cc

08011290 <std>:
 8011290:	2300      	movs	r3, #0
 8011292:	b510      	push	{r4, lr}
 8011294:	4604      	mov	r4, r0
 8011296:	e9c0 3300 	strd	r3, r3, [r0]
 801129a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801129e:	6083      	str	r3, [r0, #8]
 80112a0:	8181      	strh	r1, [r0, #12]
 80112a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80112a4:	81c2      	strh	r2, [r0, #14]
 80112a6:	6183      	str	r3, [r0, #24]
 80112a8:	4619      	mov	r1, r3
 80112aa:	2208      	movs	r2, #8
 80112ac:	305c      	adds	r0, #92	@ 0x5c
 80112ae:	f000 fa3f 	bl	8011730 <memset>
 80112b2:	4b0d      	ldr	r3, [pc, #52]	@ (80112e8 <std+0x58>)
 80112b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80112b6:	4b0d      	ldr	r3, [pc, #52]	@ (80112ec <std+0x5c>)
 80112b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80112ba:	4b0d      	ldr	r3, [pc, #52]	@ (80112f0 <std+0x60>)
 80112bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80112be:	4b0d      	ldr	r3, [pc, #52]	@ (80112f4 <std+0x64>)
 80112c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80112c2:	4b0d      	ldr	r3, [pc, #52]	@ (80112f8 <std+0x68>)
 80112c4:	6224      	str	r4, [r4, #32]
 80112c6:	429c      	cmp	r4, r3
 80112c8:	d006      	beq.n	80112d8 <std+0x48>
 80112ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80112ce:	4294      	cmp	r4, r2
 80112d0:	d002      	beq.n	80112d8 <std+0x48>
 80112d2:	33d0      	adds	r3, #208	@ 0xd0
 80112d4:	429c      	cmp	r4, r3
 80112d6:	d105      	bne.n	80112e4 <std+0x54>
 80112d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80112dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112e0:	f000 baf6 	b.w	80118d0 <__retarget_lock_init_recursive>
 80112e4:	bd10      	pop	{r4, pc}
 80112e6:	bf00      	nop
 80112e8:	08011581 	.word	0x08011581
 80112ec:	080115a3 	.word	0x080115a3
 80112f0:	080115db 	.word	0x080115db
 80112f4:	080115ff 	.word	0x080115ff
 80112f8:	200055e0 	.word	0x200055e0

080112fc <stdio_exit_handler>:
 80112fc:	4a02      	ldr	r2, [pc, #8]	@ (8011308 <stdio_exit_handler+0xc>)
 80112fe:	4903      	ldr	r1, [pc, #12]	@ (801130c <stdio_exit_handler+0x10>)
 8011300:	4803      	ldr	r0, [pc, #12]	@ (8011310 <stdio_exit_handler+0x14>)
 8011302:	f000 b869 	b.w	80113d8 <_fwalk_sglue>
 8011306:	bf00      	nop
 8011308:	20000014 	.word	0x20000014
 801130c:	080130e9 	.word	0x080130e9
 8011310:	20000024 	.word	0x20000024

08011314 <cleanup_stdio>:
 8011314:	6841      	ldr	r1, [r0, #4]
 8011316:	4b0c      	ldr	r3, [pc, #48]	@ (8011348 <cleanup_stdio+0x34>)
 8011318:	4299      	cmp	r1, r3
 801131a:	b510      	push	{r4, lr}
 801131c:	4604      	mov	r4, r0
 801131e:	d001      	beq.n	8011324 <cleanup_stdio+0x10>
 8011320:	f001 fee2 	bl	80130e8 <_fflush_r>
 8011324:	68a1      	ldr	r1, [r4, #8]
 8011326:	4b09      	ldr	r3, [pc, #36]	@ (801134c <cleanup_stdio+0x38>)
 8011328:	4299      	cmp	r1, r3
 801132a:	d002      	beq.n	8011332 <cleanup_stdio+0x1e>
 801132c:	4620      	mov	r0, r4
 801132e:	f001 fedb 	bl	80130e8 <_fflush_r>
 8011332:	68e1      	ldr	r1, [r4, #12]
 8011334:	4b06      	ldr	r3, [pc, #24]	@ (8011350 <cleanup_stdio+0x3c>)
 8011336:	4299      	cmp	r1, r3
 8011338:	d004      	beq.n	8011344 <cleanup_stdio+0x30>
 801133a:	4620      	mov	r0, r4
 801133c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011340:	f001 bed2 	b.w	80130e8 <_fflush_r>
 8011344:	bd10      	pop	{r4, pc}
 8011346:	bf00      	nop
 8011348:	200055e0 	.word	0x200055e0
 801134c:	20005648 	.word	0x20005648
 8011350:	200056b0 	.word	0x200056b0

08011354 <global_stdio_init.part.0>:
 8011354:	b510      	push	{r4, lr}
 8011356:	4b0b      	ldr	r3, [pc, #44]	@ (8011384 <global_stdio_init.part.0+0x30>)
 8011358:	4c0b      	ldr	r4, [pc, #44]	@ (8011388 <global_stdio_init.part.0+0x34>)
 801135a:	4a0c      	ldr	r2, [pc, #48]	@ (801138c <global_stdio_init.part.0+0x38>)
 801135c:	601a      	str	r2, [r3, #0]
 801135e:	4620      	mov	r0, r4
 8011360:	2200      	movs	r2, #0
 8011362:	2104      	movs	r1, #4
 8011364:	f7ff ff94 	bl	8011290 <std>
 8011368:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801136c:	2201      	movs	r2, #1
 801136e:	2109      	movs	r1, #9
 8011370:	f7ff ff8e 	bl	8011290 <std>
 8011374:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011378:	2202      	movs	r2, #2
 801137a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801137e:	2112      	movs	r1, #18
 8011380:	f7ff bf86 	b.w	8011290 <std>
 8011384:	20005718 	.word	0x20005718
 8011388:	200055e0 	.word	0x200055e0
 801138c:	080112fd 	.word	0x080112fd

08011390 <__sfp_lock_acquire>:
 8011390:	4801      	ldr	r0, [pc, #4]	@ (8011398 <__sfp_lock_acquire+0x8>)
 8011392:	f000 ba9e 	b.w	80118d2 <__retarget_lock_acquire_recursive>
 8011396:	bf00      	nop
 8011398:	20005721 	.word	0x20005721

0801139c <__sfp_lock_release>:
 801139c:	4801      	ldr	r0, [pc, #4]	@ (80113a4 <__sfp_lock_release+0x8>)
 801139e:	f000 ba99 	b.w	80118d4 <__retarget_lock_release_recursive>
 80113a2:	bf00      	nop
 80113a4:	20005721 	.word	0x20005721

080113a8 <__sinit>:
 80113a8:	b510      	push	{r4, lr}
 80113aa:	4604      	mov	r4, r0
 80113ac:	f7ff fff0 	bl	8011390 <__sfp_lock_acquire>
 80113b0:	6a23      	ldr	r3, [r4, #32]
 80113b2:	b11b      	cbz	r3, 80113bc <__sinit+0x14>
 80113b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113b8:	f7ff bff0 	b.w	801139c <__sfp_lock_release>
 80113bc:	4b04      	ldr	r3, [pc, #16]	@ (80113d0 <__sinit+0x28>)
 80113be:	6223      	str	r3, [r4, #32]
 80113c0:	4b04      	ldr	r3, [pc, #16]	@ (80113d4 <__sinit+0x2c>)
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d1f5      	bne.n	80113b4 <__sinit+0xc>
 80113c8:	f7ff ffc4 	bl	8011354 <global_stdio_init.part.0>
 80113cc:	e7f2      	b.n	80113b4 <__sinit+0xc>
 80113ce:	bf00      	nop
 80113d0:	08011315 	.word	0x08011315
 80113d4:	20005718 	.word	0x20005718

080113d8 <_fwalk_sglue>:
 80113d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113dc:	4607      	mov	r7, r0
 80113de:	4688      	mov	r8, r1
 80113e0:	4614      	mov	r4, r2
 80113e2:	2600      	movs	r6, #0
 80113e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80113e8:	f1b9 0901 	subs.w	r9, r9, #1
 80113ec:	d505      	bpl.n	80113fa <_fwalk_sglue+0x22>
 80113ee:	6824      	ldr	r4, [r4, #0]
 80113f0:	2c00      	cmp	r4, #0
 80113f2:	d1f7      	bne.n	80113e4 <_fwalk_sglue+0xc>
 80113f4:	4630      	mov	r0, r6
 80113f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113fa:	89ab      	ldrh	r3, [r5, #12]
 80113fc:	2b01      	cmp	r3, #1
 80113fe:	d907      	bls.n	8011410 <_fwalk_sglue+0x38>
 8011400:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011404:	3301      	adds	r3, #1
 8011406:	d003      	beq.n	8011410 <_fwalk_sglue+0x38>
 8011408:	4629      	mov	r1, r5
 801140a:	4638      	mov	r0, r7
 801140c:	47c0      	blx	r8
 801140e:	4306      	orrs	r6, r0
 8011410:	3568      	adds	r5, #104	@ 0x68
 8011412:	e7e9      	b.n	80113e8 <_fwalk_sglue+0x10>

08011414 <_puts_r>:
 8011414:	6a03      	ldr	r3, [r0, #32]
 8011416:	b570      	push	{r4, r5, r6, lr}
 8011418:	6884      	ldr	r4, [r0, #8]
 801141a:	4605      	mov	r5, r0
 801141c:	460e      	mov	r6, r1
 801141e:	b90b      	cbnz	r3, 8011424 <_puts_r+0x10>
 8011420:	f7ff ffc2 	bl	80113a8 <__sinit>
 8011424:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011426:	07db      	lsls	r3, r3, #31
 8011428:	d405      	bmi.n	8011436 <_puts_r+0x22>
 801142a:	89a3      	ldrh	r3, [r4, #12]
 801142c:	0598      	lsls	r0, r3, #22
 801142e:	d402      	bmi.n	8011436 <_puts_r+0x22>
 8011430:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011432:	f000 fa4e 	bl	80118d2 <__retarget_lock_acquire_recursive>
 8011436:	89a3      	ldrh	r3, [r4, #12]
 8011438:	0719      	lsls	r1, r3, #28
 801143a:	d502      	bpl.n	8011442 <_puts_r+0x2e>
 801143c:	6923      	ldr	r3, [r4, #16]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d135      	bne.n	80114ae <_puts_r+0x9a>
 8011442:	4621      	mov	r1, r4
 8011444:	4628      	mov	r0, r5
 8011446:	f000 f91d 	bl	8011684 <__swsetup_r>
 801144a:	b380      	cbz	r0, 80114ae <_puts_r+0x9a>
 801144c:	f04f 35ff 	mov.w	r5, #4294967295
 8011450:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011452:	07da      	lsls	r2, r3, #31
 8011454:	d405      	bmi.n	8011462 <_puts_r+0x4e>
 8011456:	89a3      	ldrh	r3, [r4, #12]
 8011458:	059b      	lsls	r3, r3, #22
 801145a:	d402      	bmi.n	8011462 <_puts_r+0x4e>
 801145c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801145e:	f000 fa39 	bl	80118d4 <__retarget_lock_release_recursive>
 8011462:	4628      	mov	r0, r5
 8011464:	bd70      	pop	{r4, r5, r6, pc}
 8011466:	2b00      	cmp	r3, #0
 8011468:	da04      	bge.n	8011474 <_puts_r+0x60>
 801146a:	69a2      	ldr	r2, [r4, #24]
 801146c:	429a      	cmp	r2, r3
 801146e:	dc17      	bgt.n	80114a0 <_puts_r+0x8c>
 8011470:	290a      	cmp	r1, #10
 8011472:	d015      	beq.n	80114a0 <_puts_r+0x8c>
 8011474:	6823      	ldr	r3, [r4, #0]
 8011476:	1c5a      	adds	r2, r3, #1
 8011478:	6022      	str	r2, [r4, #0]
 801147a:	7019      	strb	r1, [r3, #0]
 801147c:	68a3      	ldr	r3, [r4, #8]
 801147e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011482:	3b01      	subs	r3, #1
 8011484:	60a3      	str	r3, [r4, #8]
 8011486:	2900      	cmp	r1, #0
 8011488:	d1ed      	bne.n	8011466 <_puts_r+0x52>
 801148a:	2b00      	cmp	r3, #0
 801148c:	da11      	bge.n	80114b2 <_puts_r+0x9e>
 801148e:	4622      	mov	r2, r4
 8011490:	210a      	movs	r1, #10
 8011492:	4628      	mov	r0, r5
 8011494:	f000 f8b7 	bl	8011606 <__swbuf_r>
 8011498:	3001      	adds	r0, #1
 801149a:	d0d7      	beq.n	801144c <_puts_r+0x38>
 801149c:	250a      	movs	r5, #10
 801149e:	e7d7      	b.n	8011450 <_puts_r+0x3c>
 80114a0:	4622      	mov	r2, r4
 80114a2:	4628      	mov	r0, r5
 80114a4:	f000 f8af 	bl	8011606 <__swbuf_r>
 80114a8:	3001      	adds	r0, #1
 80114aa:	d1e7      	bne.n	801147c <_puts_r+0x68>
 80114ac:	e7ce      	b.n	801144c <_puts_r+0x38>
 80114ae:	3e01      	subs	r6, #1
 80114b0:	e7e4      	b.n	801147c <_puts_r+0x68>
 80114b2:	6823      	ldr	r3, [r4, #0]
 80114b4:	1c5a      	adds	r2, r3, #1
 80114b6:	6022      	str	r2, [r4, #0]
 80114b8:	220a      	movs	r2, #10
 80114ba:	701a      	strb	r2, [r3, #0]
 80114bc:	e7ee      	b.n	801149c <_puts_r+0x88>
	...

080114c0 <puts>:
 80114c0:	4b02      	ldr	r3, [pc, #8]	@ (80114cc <puts+0xc>)
 80114c2:	4601      	mov	r1, r0
 80114c4:	6818      	ldr	r0, [r3, #0]
 80114c6:	f7ff bfa5 	b.w	8011414 <_puts_r>
 80114ca:	bf00      	nop
 80114cc:	20000020 	.word	0x20000020

080114d0 <sniprintf>:
 80114d0:	b40c      	push	{r2, r3}
 80114d2:	b530      	push	{r4, r5, lr}
 80114d4:	4b18      	ldr	r3, [pc, #96]	@ (8011538 <sniprintf+0x68>)
 80114d6:	1e0c      	subs	r4, r1, #0
 80114d8:	681d      	ldr	r5, [r3, #0]
 80114da:	b09d      	sub	sp, #116	@ 0x74
 80114dc:	da08      	bge.n	80114f0 <sniprintf+0x20>
 80114de:	238b      	movs	r3, #139	@ 0x8b
 80114e0:	602b      	str	r3, [r5, #0]
 80114e2:	f04f 30ff 	mov.w	r0, #4294967295
 80114e6:	b01d      	add	sp, #116	@ 0x74
 80114e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80114ec:	b002      	add	sp, #8
 80114ee:	4770      	bx	lr
 80114f0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80114f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80114f8:	f04f 0300 	mov.w	r3, #0
 80114fc:	931b      	str	r3, [sp, #108]	@ 0x6c
 80114fe:	bf14      	ite	ne
 8011500:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011504:	4623      	moveq	r3, r4
 8011506:	9304      	str	r3, [sp, #16]
 8011508:	9307      	str	r3, [sp, #28]
 801150a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801150e:	9002      	str	r0, [sp, #8]
 8011510:	9006      	str	r0, [sp, #24]
 8011512:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011516:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011518:	ab21      	add	r3, sp, #132	@ 0x84
 801151a:	a902      	add	r1, sp, #8
 801151c:	4628      	mov	r0, r5
 801151e:	9301      	str	r3, [sp, #4]
 8011520:	f001 fc62 	bl	8012de8 <_svfiprintf_r>
 8011524:	1c43      	adds	r3, r0, #1
 8011526:	bfbc      	itt	lt
 8011528:	238b      	movlt	r3, #139	@ 0x8b
 801152a:	602b      	strlt	r3, [r5, #0]
 801152c:	2c00      	cmp	r4, #0
 801152e:	d0da      	beq.n	80114e6 <sniprintf+0x16>
 8011530:	9b02      	ldr	r3, [sp, #8]
 8011532:	2200      	movs	r2, #0
 8011534:	701a      	strb	r2, [r3, #0]
 8011536:	e7d6      	b.n	80114e6 <sniprintf+0x16>
 8011538:	20000020 	.word	0x20000020

0801153c <siprintf>:
 801153c:	b40e      	push	{r1, r2, r3}
 801153e:	b510      	push	{r4, lr}
 8011540:	b09d      	sub	sp, #116	@ 0x74
 8011542:	ab1f      	add	r3, sp, #124	@ 0x7c
 8011544:	9002      	str	r0, [sp, #8]
 8011546:	9006      	str	r0, [sp, #24]
 8011548:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801154c:	480a      	ldr	r0, [pc, #40]	@ (8011578 <siprintf+0x3c>)
 801154e:	9107      	str	r1, [sp, #28]
 8011550:	9104      	str	r1, [sp, #16]
 8011552:	490a      	ldr	r1, [pc, #40]	@ (801157c <siprintf+0x40>)
 8011554:	f853 2b04 	ldr.w	r2, [r3], #4
 8011558:	9105      	str	r1, [sp, #20]
 801155a:	2400      	movs	r4, #0
 801155c:	a902      	add	r1, sp, #8
 801155e:	6800      	ldr	r0, [r0, #0]
 8011560:	9301      	str	r3, [sp, #4]
 8011562:	941b      	str	r4, [sp, #108]	@ 0x6c
 8011564:	f001 fc40 	bl	8012de8 <_svfiprintf_r>
 8011568:	9b02      	ldr	r3, [sp, #8]
 801156a:	701c      	strb	r4, [r3, #0]
 801156c:	b01d      	add	sp, #116	@ 0x74
 801156e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011572:	b003      	add	sp, #12
 8011574:	4770      	bx	lr
 8011576:	bf00      	nop
 8011578:	20000020 	.word	0x20000020
 801157c:	ffff0208 	.word	0xffff0208

08011580 <__sread>:
 8011580:	b510      	push	{r4, lr}
 8011582:	460c      	mov	r4, r1
 8011584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011588:	f000 f930 	bl	80117ec <_read_r>
 801158c:	2800      	cmp	r0, #0
 801158e:	bfab      	itete	ge
 8011590:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011592:	89a3      	ldrhlt	r3, [r4, #12]
 8011594:	181b      	addge	r3, r3, r0
 8011596:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801159a:	bfac      	ite	ge
 801159c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801159e:	81a3      	strhlt	r3, [r4, #12]
 80115a0:	bd10      	pop	{r4, pc}

080115a2 <__swrite>:
 80115a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115a6:	461f      	mov	r7, r3
 80115a8:	898b      	ldrh	r3, [r1, #12]
 80115aa:	05db      	lsls	r3, r3, #23
 80115ac:	4605      	mov	r5, r0
 80115ae:	460c      	mov	r4, r1
 80115b0:	4616      	mov	r6, r2
 80115b2:	d505      	bpl.n	80115c0 <__swrite+0x1e>
 80115b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115b8:	2302      	movs	r3, #2
 80115ba:	2200      	movs	r2, #0
 80115bc:	f000 f904 	bl	80117c8 <_lseek_r>
 80115c0:	89a3      	ldrh	r3, [r4, #12]
 80115c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80115c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80115ca:	81a3      	strh	r3, [r4, #12]
 80115cc:	4632      	mov	r2, r6
 80115ce:	463b      	mov	r3, r7
 80115d0:	4628      	mov	r0, r5
 80115d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115d6:	f000 b93f 	b.w	8011858 <_write_r>

080115da <__sseek>:
 80115da:	b510      	push	{r4, lr}
 80115dc:	460c      	mov	r4, r1
 80115de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115e2:	f000 f8f1 	bl	80117c8 <_lseek_r>
 80115e6:	1c43      	adds	r3, r0, #1
 80115e8:	89a3      	ldrh	r3, [r4, #12]
 80115ea:	bf15      	itete	ne
 80115ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80115ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80115f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80115f6:	81a3      	strheq	r3, [r4, #12]
 80115f8:	bf18      	it	ne
 80115fa:	81a3      	strhne	r3, [r4, #12]
 80115fc:	bd10      	pop	{r4, pc}

080115fe <__sclose>:
 80115fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011602:	f000 b8d1 	b.w	80117a8 <_close_r>

08011606 <__swbuf_r>:
 8011606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011608:	460e      	mov	r6, r1
 801160a:	4614      	mov	r4, r2
 801160c:	4605      	mov	r5, r0
 801160e:	b118      	cbz	r0, 8011618 <__swbuf_r+0x12>
 8011610:	6a03      	ldr	r3, [r0, #32]
 8011612:	b90b      	cbnz	r3, 8011618 <__swbuf_r+0x12>
 8011614:	f7ff fec8 	bl	80113a8 <__sinit>
 8011618:	69a3      	ldr	r3, [r4, #24]
 801161a:	60a3      	str	r3, [r4, #8]
 801161c:	89a3      	ldrh	r3, [r4, #12]
 801161e:	071a      	lsls	r2, r3, #28
 8011620:	d501      	bpl.n	8011626 <__swbuf_r+0x20>
 8011622:	6923      	ldr	r3, [r4, #16]
 8011624:	b943      	cbnz	r3, 8011638 <__swbuf_r+0x32>
 8011626:	4621      	mov	r1, r4
 8011628:	4628      	mov	r0, r5
 801162a:	f000 f82b 	bl	8011684 <__swsetup_r>
 801162e:	b118      	cbz	r0, 8011638 <__swbuf_r+0x32>
 8011630:	f04f 37ff 	mov.w	r7, #4294967295
 8011634:	4638      	mov	r0, r7
 8011636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011638:	6823      	ldr	r3, [r4, #0]
 801163a:	6922      	ldr	r2, [r4, #16]
 801163c:	1a98      	subs	r0, r3, r2
 801163e:	6963      	ldr	r3, [r4, #20]
 8011640:	b2f6      	uxtb	r6, r6
 8011642:	4283      	cmp	r3, r0
 8011644:	4637      	mov	r7, r6
 8011646:	dc05      	bgt.n	8011654 <__swbuf_r+0x4e>
 8011648:	4621      	mov	r1, r4
 801164a:	4628      	mov	r0, r5
 801164c:	f001 fd4c 	bl	80130e8 <_fflush_r>
 8011650:	2800      	cmp	r0, #0
 8011652:	d1ed      	bne.n	8011630 <__swbuf_r+0x2a>
 8011654:	68a3      	ldr	r3, [r4, #8]
 8011656:	3b01      	subs	r3, #1
 8011658:	60a3      	str	r3, [r4, #8]
 801165a:	6823      	ldr	r3, [r4, #0]
 801165c:	1c5a      	adds	r2, r3, #1
 801165e:	6022      	str	r2, [r4, #0]
 8011660:	701e      	strb	r6, [r3, #0]
 8011662:	6962      	ldr	r2, [r4, #20]
 8011664:	1c43      	adds	r3, r0, #1
 8011666:	429a      	cmp	r2, r3
 8011668:	d004      	beq.n	8011674 <__swbuf_r+0x6e>
 801166a:	89a3      	ldrh	r3, [r4, #12]
 801166c:	07db      	lsls	r3, r3, #31
 801166e:	d5e1      	bpl.n	8011634 <__swbuf_r+0x2e>
 8011670:	2e0a      	cmp	r6, #10
 8011672:	d1df      	bne.n	8011634 <__swbuf_r+0x2e>
 8011674:	4621      	mov	r1, r4
 8011676:	4628      	mov	r0, r5
 8011678:	f001 fd36 	bl	80130e8 <_fflush_r>
 801167c:	2800      	cmp	r0, #0
 801167e:	d0d9      	beq.n	8011634 <__swbuf_r+0x2e>
 8011680:	e7d6      	b.n	8011630 <__swbuf_r+0x2a>
	...

08011684 <__swsetup_r>:
 8011684:	b538      	push	{r3, r4, r5, lr}
 8011686:	4b29      	ldr	r3, [pc, #164]	@ (801172c <__swsetup_r+0xa8>)
 8011688:	4605      	mov	r5, r0
 801168a:	6818      	ldr	r0, [r3, #0]
 801168c:	460c      	mov	r4, r1
 801168e:	b118      	cbz	r0, 8011698 <__swsetup_r+0x14>
 8011690:	6a03      	ldr	r3, [r0, #32]
 8011692:	b90b      	cbnz	r3, 8011698 <__swsetup_r+0x14>
 8011694:	f7ff fe88 	bl	80113a8 <__sinit>
 8011698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801169c:	0719      	lsls	r1, r3, #28
 801169e:	d422      	bmi.n	80116e6 <__swsetup_r+0x62>
 80116a0:	06da      	lsls	r2, r3, #27
 80116a2:	d407      	bmi.n	80116b4 <__swsetup_r+0x30>
 80116a4:	2209      	movs	r2, #9
 80116a6:	602a      	str	r2, [r5, #0]
 80116a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80116ac:	81a3      	strh	r3, [r4, #12]
 80116ae:	f04f 30ff 	mov.w	r0, #4294967295
 80116b2:	e033      	b.n	801171c <__swsetup_r+0x98>
 80116b4:	0758      	lsls	r0, r3, #29
 80116b6:	d512      	bpl.n	80116de <__swsetup_r+0x5a>
 80116b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80116ba:	b141      	cbz	r1, 80116ce <__swsetup_r+0x4a>
 80116bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80116c0:	4299      	cmp	r1, r3
 80116c2:	d002      	beq.n	80116ca <__swsetup_r+0x46>
 80116c4:	4628      	mov	r0, r5
 80116c6:	f000 ff6f 	bl	80125a8 <_free_r>
 80116ca:	2300      	movs	r3, #0
 80116cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80116ce:	89a3      	ldrh	r3, [r4, #12]
 80116d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80116d4:	81a3      	strh	r3, [r4, #12]
 80116d6:	2300      	movs	r3, #0
 80116d8:	6063      	str	r3, [r4, #4]
 80116da:	6923      	ldr	r3, [r4, #16]
 80116dc:	6023      	str	r3, [r4, #0]
 80116de:	89a3      	ldrh	r3, [r4, #12]
 80116e0:	f043 0308 	orr.w	r3, r3, #8
 80116e4:	81a3      	strh	r3, [r4, #12]
 80116e6:	6923      	ldr	r3, [r4, #16]
 80116e8:	b94b      	cbnz	r3, 80116fe <__swsetup_r+0x7a>
 80116ea:	89a3      	ldrh	r3, [r4, #12]
 80116ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80116f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80116f4:	d003      	beq.n	80116fe <__swsetup_r+0x7a>
 80116f6:	4621      	mov	r1, r4
 80116f8:	4628      	mov	r0, r5
 80116fa:	f001 fd43 	bl	8013184 <__smakebuf_r>
 80116fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011702:	f013 0201 	ands.w	r2, r3, #1
 8011706:	d00a      	beq.n	801171e <__swsetup_r+0x9a>
 8011708:	2200      	movs	r2, #0
 801170a:	60a2      	str	r2, [r4, #8]
 801170c:	6962      	ldr	r2, [r4, #20]
 801170e:	4252      	negs	r2, r2
 8011710:	61a2      	str	r2, [r4, #24]
 8011712:	6922      	ldr	r2, [r4, #16]
 8011714:	b942      	cbnz	r2, 8011728 <__swsetup_r+0xa4>
 8011716:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801171a:	d1c5      	bne.n	80116a8 <__swsetup_r+0x24>
 801171c:	bd38      	pop	{r3, r4, r5, pc}
 801171e:	0799      	lsls	r1, r3, #30
 8011720:	bf58      	it	pl
 8011722:	6962      	ldrpl	r2, [r4, #20]
 8011724:	60a2      	str	r2, [r4, #8]
 8011726:	e7f4      	b.n	8011712 <__swsetup_r+0x8e>
 8011728:	2000      	movs	r0, #0
 801172a:	e7f7      	b.n	801171c <__swsetup_r+0x98>
 801172c:	20000020 	.word	0x20000020

08011730 <memset>:
 8011730:	4402      	add	r2, r0
 8011732:	4603      	mov	r3, r0
 8011734:	4293      	cmp	r3, r2
 8011736:	d100      	bne.n	801173a <memset+0xa>
 8011738:	4770      	bx	lr
 801173a:	f803 1b01 	strb.w	r1, [r3], #1
 801173e:	e7f9      	b.n	8011734 <memset+0x4>

08011740 <_raise_r>:
 8011740:	291f      	cmp	r1, #31
 8011742:	b538      	push	{r3, r4, r5, lr}
 8011744:	4605      	mov	r5, r0
 8011746:	460c      	mov	r4, r1
 8011748:	d904      	bls.n	8011754 <_raise_r+0x14>
 801174a:	2316      	movs	r3, #22
 801174c:	6003      	str	r3, [r0, #0]
 801174e:	f04f 30ff 	mov.w	r0, #4294967295
 8011752:	bd38      	pop	{r3, r4, r5, pc}
 8011754:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011756:	b112      	cbz	r2, 801175e <_raise_r+0x1e>
 8011758:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801175c:	b94b      	cbnz	r3, 8011772 <_raise_r+0x32>
 801175e:	4628      	mov	r0, r5
 8011760:	f000 f868 	bl	8011834 <_getpid_r>
 8011764:	4622      	mov	r2, r4
 8011766:	4601      	mov	r1, r0
 8011768:	4628      	mov	r0, r5
 801176a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801176e:	f000 b84f 	b.w	8011810 <_kill_r>
 8011772:	2b01      	cmp	r3, #1
 8011774:	d00a      	beq.n	801178c <_raise_r+0x4c>
 8011776:	1c59      	adds	r1, r3, #1
 8011778:	d103      	bne.n	8011782 <_raise_r+0x42>
 801177a:	2316      	movs	r3, #22
 801177c:	6003      	str	r3, [r0, #0]
 801177e:	2001      	movs	r0, #1
 8011780:	e7e7      	b.n	8011752 <_raise_r+0x12>
 8011782:	2100      	movs	r1, #0
 8011784:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011788:	4620      	mov	r0, r4
 801178a:	4798      	blx	r3
 801178c:	2000      	movs	r0, #0
 801178e:	e7e0      	b.n	8011752 <_raise_r+0x12>

08011790 <raise>:
 8011790:	4b02      	ldr	r3, [pc, #8]	@ (801179c <raise+0xc>)
 8011792:	4601      	mov	r1, r0
 8011794:	6818      	ldr	r0, [r3, #0]
 8011796:	f7ff bfd3 	b.w	8011740 <_raise_r>
 801179a:	bf00      	nop
 801179c:	20000020 	.word	0x20000020

080117a0 <_localeconv_r>:
 80117a0:	4800      	ldr	r0, [pc, #0]	@ (80117a4 <_localeconv_r+0x4>)
 80117a2:	4770      	bx	lr
 80117a4:	20000160 	.word	0x20000160

080117a8 <_close_r>:
 80117a8:	b538      	push	{r3, r4, r5, lr}
 80117aa:	4d06      	ldr	r5, [pc, #24]	@ (80117c4 <_close_r+0x1c>)
 80117ac:	2300      	movs	r3, #0
 80117ae:	4604      	mov	r4, r0
 80117b0:	4608      	mov	r0, r1
 80117b2:	602b      	str	r3, [r5, #0]
 80117b4:	f7f4 f874 	bl	80058a0 <_close>
 80117b8:	1c43      	adds	r3, r0, #1
 80117ba:	d102      	bne.n	80117c2 <_close_r+0x1a>
 80117bc:	682b      	ldr	r3, [r5, #0]
 80117be:	b103      	cbz	r3, 80117c2 <_close_r+0x1a>
 80117c0:	6023      	str	r3, [r4, #0]
 80117c2:	bd38      	pop	{r3, r4, r5, pc}
 80117c4:	2000571c 	.word	0x2000571c

080117c8 <_lseek_r>:
 80117c8:	b538      	push	{r3, r4, r5, lr}
 80117ca:	4d07      	ldr	r5, [pc, #28]	@ (80117e8 <_lseek_r+0x20>)
 80117cc:	4604      	mov	r4, r0
 80117ce:	4608      	mov	r0, r1
 80117d0:	4611      	mov	r1, r2
 80117d2:	2200      	movs	r2, #0
 80117d4:	602a      	str	r2, [r5, #0]
 80117d6:	461a      	mov	r2, r3
 80117d8:	f7f4 f889 	bl	80058ee <_lseek>
 80117dc:	1c43      	adds	r3, r0, #1
 80117de:	d102      	bne.n	80117e6 <_lseek_r+0x1e>
 80117e0:	682b      	ldr	r3, [r5, #0]
 80117e2:	b103      	cbz	r3, 80117e6 <_lseek_r+0x1e>
 80117e4:	6023      	str	r3, [r4, #0]
 80117e6:	bd38      	pop	{r3, r4, r5, pc}
 80117e8:	2000571c 	.word	0x2000571c

080117ec <_read_r>:
 80117ec:	b538      	push	{r3, r4, r5, lr}
 80117ee:	4d07      	ldr	r5, [pc, #28]	@ (801180c <_read_r+0x20>)
 80117f0:	4604      	mov	r4, r0
 80117f2:	4608      	mov	r0, r1
 80117f4:	4611      	mov	r1, r2
 80117f6:	2200      	movs	r2, #0
 80117f8:	602a      	str	r2, [r5, #0]
 80117fa:	461a      	mov	r2, r3
 80117fc:	f7f4 f817 	bl	800582e <_read>
 8011800:	1c43      	adds	r3, r0, #1
 8011802:	d102      	bne.n	801180a <_read_r+0x1e>
 8011804:	682b      	ldr	r3, [r5, #0]
 8011806:	b103      	cbz	r3, 801180a <_read_r+0x1e>
 8011808:	6023      	str	r3, [r4, #0]
 801180a:	bd38      	pop	{r3, r4, r5, pc}
 801180c:	2000571c 	.word	0x2000571c

08011810 <_kill_r>:
 8011810:	b538      	push	{r3, r4, r5, lr}
 8011812:	4d07      	ldr	r5, [pc, #28]	@ (8011830 <_kill_r+0x20>)
 8011814:	2300      	movs	r3, #0
 8011816:	4604      	mov	r4, r0
 8011818:	4608      	mov	r0, r1
 801181a:	4611      	mov	r1, r2
 801181c:	602b      	str	r3, [r5, #0]
 801181e:	f7f3 ffeb 	bl	80057f8 <_kill>
 8011822:	1c43      	adds	r3, r0, #1
 8011824:	d102      	bne.n	801182c <_kill_r+0x1c>
 8011826:	682b      	ldr	r3, [r5, #0]
 8011828:	b103      	cbz	r3, 801182c <_kill_r+0x1c>
 801182a:	6023      	str	r3, [r4, #0]
 801182c:	bd38      	pop	{r3, r4, r5, pc}
 801182e:	bf00      	nop
 8011830:	2000571c 	.word	0x2000571c

08011834 <_getpid_r>:
 8011834:	f7f3 bfd8 	b.w	80057e8 <_getpid>

08011838 <_sbrk_r>:
 8011838:	b538      	push	{r3, r4, r5, lr}
 801183a:	4d06      	ldr	r5, [pc, #24]	@ (8011854 <_sbrk_r+0x1c>)
 801183c:	2300      	movs	r3, #0
 801183e:	4604      	mov	r4, r0
 8011840:	4608      	mov	r0, r1
 8011842:	602b      	str	r3, [r5, #0]
 8011844:	f7f4 f860 	bl	8005908 <_sbrk>
 8011848:	1c43      	adds	r3, r0, #1
 801184a:	d102      	bne.n	8011852 <_sbrk_r+0x1a>
 801184c:	682b      	ldr	r3, [r5, #0]
 801184e:	b103      	cbz	r3, 8011852 <_sbrk_r+0x1a>
 8011850:	6023      	str	r3, [r4, #0]
 8011852:	bd38      	pop	{r3, r4, r5, pc}
 8011854:	2000571c 	.word	0x2000571c

08011858 <_write_r>:
 8011858:	b538      	push	{r3, r4, r5, lr}
 801185a:	4d07      	ldr	r5, [pc, #28]	@ (8011878 <_write_r+0x20>)
 801185c:	4604      	mov	r4, r0
 801185e:	4608      	mov	r0, r1
 8011860:	4611      	mov	r1, r2
 8011862:	2200      	movs	r2, #0
 8011864:	602a      	str	r2, [r5, #0]
 8011866:	461a      	mov	r2, r3
 8011868:	f7f3 fffe 	bl	8005868 <_write>
 801186c:	1c43      	adds	r3, r0, #1
 801186e:	d102      	bne.n	8011876 <_write_r+0x1e>
 8011870:	682b      	ldr	r3, [r5, #0]
 8011872:	b103      	cbz	r3, 8011876 <_write_r+0x1e>
 8011874:	6023      	str	r3, [r4, #0]
 8011876:	bd38      	pop	{r3, r4, r5, pc}
 8011878:	2000571c 	.word	0x2000571c

0801187c <__errno>:
 801187c:	4b01      	ldr	r3, [pc, #4]	@ (8011884 <__errno+0x8>)
 801187e:	6818      	ldr	r0, [r3, #0]
 8011880:	4770      	bx	lr
 8011882:	bf00      	nop
 8011884:	20000020 	.word	0x20000020

08011888 <__libc_init_array>:
 8011888:	b570      	push	{r4, r5, r6, lr}
 801188a:	4d0d      	ldr	r5, [pc, #52]	@ (80118c0 <__libc_init_array+0x38>)
 801188c:	4c0d      	ldr	r4, [pc, #52]	@ (80118c4 <__libc_init_array+0x3c>)
 801188e:	1b64      	subs	r4, r4, r5
 8011890:	10a4      	asrs	r4, r4, #2
 8011892:	2600      	movs	r6, #0
 8011894:	42a6      	cmp	r6, r4
 8011896:	d109      	bne.n	80118ac <__libc_init_array+0x24>
 8011898:	4d0b      	ldr	r5, [pc, #44]	@ (80118c8 <__libc_init_array+0x40>)
 801189a:	4c0c      	ldr	r4, [pc, #48]	@ (80118cc <__libc_init_array+0x44>)
 801189c:	f001 fec6 	bl	801362c <_init>
 80118a0:	1b64      	subs	r4, r4, r5
 80118a2:	10a4      	asrs	r4, r4, #2
 80118a4:	2600      	movs	r6, #0
 80118a6:	42a6      	cmp	r6, r4
 80118a8:	d105      	bne.n	80118b6 <__libc_init_array+0x2e>
 80118aa:	bd70      	pop	{r4, r5, r6, pc}
 80118ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80118b0:	4798      	blx	r3
 80118b2:	3601      	adds	r6, #1
 80118b4:	e7ee      	b.n	8011894 <__libc_init_array+0xc>
 80118b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80118ba:	4798      	blx	r3
 80118bc:	3601      	adds	r6, #1
 80118be:	e7f2      	b.n	80118a6 <__libc_init_array+0x1e>
 80118c0:	08014720 	.word	0x08014720
 80118c4:	08014720 	.word	0x08014720
 80118c8:	08014720 	.word	0x08014720
 80118cc:	08014728 	.word	0x08014728

080118d0 <__retarget_lock_init_recursive>:
 80118d0:	4770      	bx	lr

080118d2 <__retarget_lock_acquire_recursive>:
 80118d2:	4770      	bx	lr

080118d4 <__retarget_lock_release_recursive>:
 80118d4:	4770      	bx	lr

080118d6 <memcpy>:
 80118d6:	440a      	add	r2, r1
 80118d8:	4291      	cmp	r1, r2
 80118da:	f100 33ff 	add.w	r3, r0, #4294967295
 80118de:	d100      	bne.n	80118e2 <memcpy+0xc>
 80118e0:	4770      	bx	lr
 80118e2:	b510      	push	{r4, lr}
 80118e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80118e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80118ec:	4291      	cmp	r1, r2
 80118ee:	d1f9      	bne.n	80118e4 <memcpy+0xe>
 80118f0:	bd10      	pop	{r4, pc}

080118f2 <quorem>:
 80118f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118f6:	6903      	ldr	r3, [r0, #16]
 80118f8:	690c      	ldr	r4, [r1, #16]
 80118fa:	42a3      	cmp	r3, r4
 80118fc:	4607      	mov	r7, r0
 80118fe:	db7e      	blt.n	80119fe <quorem+0x10c>
 8011900:	3c01      	subs	r4, #1
 8011902:	f101 0814 	add.w	r8, r1, #20
 8011906:	00a3      	lsls	r3, r4, #2
 8011908:	f100 0514 	add.w	r5, r0, #20
 801190c:	9300      	str	r3, [sp, #0]
 801190e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011912:	9301      	str	r3, [sp, #4]
 8011914:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011918:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801191c:	3301      	adds	r3, #1
 801191e:	429a      	cmp	r2, r3
 8011920:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011924:	fbb2 f6f3 	udiv	r6, r2, r3
 8011928:	d32e      	bcc.n	8011988 <quorem+0x96>
 801192a:	f04f 0a00 	mov.w	sl, #0
 801192e:	46c4      	mov	ip, r8
 8011930:	46ae      	mov	lr, r5
 8011932:	46d3      	mov	fp, sl
 8011934:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011938:	b298      	uxth	r0, r3
 801193a:	fb06 a000 	mla	r0, r6, r0, sl
 801193e:	0c02      	lsrs	r2, r0, #16
 8011940:	0c1b      	lsrs	r3, r3, #16
 8011942:	fb06 2303 	mla	r3, r6, r3, r2
 8011946:	f8de 2000 	ldr.w	r2, [lr]
 801194a:	b280      	uxth	r0, r0
 801194c:	b292      	uxth	r2, r2
 801194e:	1a12      	subs	r2, r2, r0
 8011950:	445a      	add	r2, fp
 8011952:	f8de 0000 	ldr.w	r0, [lr]
 8011956:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801195a:	b29b      	uxth	r3, r3
 801195c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011960:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011964:	b292      	uxth	r2, r2
 8011966:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801196a:	45e1      	cmp	r9, ip
 801196c:	f84e 2b04 	str.w	r2, [lr], #4
 8011970:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011974:	d2de      	bcs.n	8011934 <quorem+0x42>
 8011976:	9b00      	ldr	r3, [sp, #0]
 8011978:	58eb      	ldr	r3, [r5, r3]
 801197a:	b92b      	cbnz	r3, 8011988 <quorem+0x96>
 801197c:	9b01      	ldr	r3, [sp, #4]
 801197e:	3b04      	subs	r3, #4
 8011980:	429d      	cmp	r5, r3
 8011982:	461a      	mov	r2, r3
 8011984:	d32f      	bcc.n	80119e6 <quorem+0xf4>
 8011986:	613c      	str	r4, [r7, #16]
 8011988:	4638      	mov	r0, r7
 801198a:	f001 f8c9 	bl	8012b20 <__mcmp>
 801198e:	2800      	cmp	r0, #0
 8011990:	db25      	blt.n	80119de <quorem+0xec>
 8011992:	4629      	mov	r1, r5
 8011994:	2000      	movs	r0, #0
 8011996:	f858 2b04 	ldr.w	r2, [r8], #4
 801199a:	f8d1 c000 	ldr.w	ip, [r1]
 801199e:	fa1f fe82 	uxth.w	lr, r2
 80119a2:	fa1f f38c 	uxth.w	r3, ip
 80119a6:	eba3 030e 	sub.w	r3, r3, lr
 80119aa:	4403      	add	r3, r0
 80119ac:	0c12      	lsrs	r2, r2, #16
 80119ae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80119b2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80119b6:	b29b      	uxth	r3, r3
 80119b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80119bc:	45c1      	cmp	r9, r8
 80119be:	f841 3b04 	str.w	r3, [r1], #4
 80119c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80119c6:	d2e6      	bcs.n	8011996 <quorem+0xa4>
 80119c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80119cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80119d0:	b922      	cbnz	r2, 80119dc <quorem+0xea>
 80119d2:	3b04      	subs	r3, #4
 80119d4:	429d      	cmp	r5, r3
 80119d6:	461a      	mov	r2, r3
 80119d8:	d30b      	bcc.n	80119f2 <quorem+0x100>
 80119da:	613c      	str	r4, [r7, #16]
 80119dc:	3601      	adds	r6, #1
 80119de:	4630      	mov	r0, r6
 80119e0:	b003      	add	sp, #12
 80119e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119e6:	6812      	ldr	r2, [r2, #0]
 80119e8:	3b04      	subs	r3, #4
 80119ea:	2a00      	cmp	r2, #0
 80119ec:	d1cb      	bne.n	8011986 <quorem+0x94>
 80119ee:	3c01      	subs	r4, #1
 80119f0:	e7c6      	b.n	8011980 <quorem+0x8e>
 80119f2:	6812      	ldr	r2, [r2, #0]
 80119f4:	3b04      	subs	r3, #4
 80119f6:	2a00      	cmp	r2, #0
 80119f8:	d1ef      	bne.n	80119da <quorem+0xe8>
 80119fa:	3c01      	subs	r4, #1
 80119fc:	e7ea      	b.n	80119d4 <quorem+0xe2>
 80119fe:	2000      	movs	r0, #0
 8011a00:	e7ee      	b.n	80119e0 <quorem+0xee>
 8011a02:	0000      	movs	r0, r0
 8011a04:	0000      	movs	r0, r0
	...

08011a08 <_dtoa_r>:
 8011a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a0c:	69c7      	ldr	r7, [r0, #28]
 8011a0e:	b097      	sub	sp, #92	@ 0x5c
 8011a10:	ed8d 0b04 	vstr	d0, [sp, #16]
 8011a14:	ec55 4b10 	vmov	r4, r5, d0
 8011a18:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8011a1a:	9107      	str	r1, [sp, #28]
 8011a1c:	4681      	mov	r9, r0
 8011a1e:	920c      	str	r2, [sp, #48]	@ 0x30
 8011a20:	9311      	str	r3, [sp, #68]	@ 0x44
 8011a22:	b97f      	cbnz	r7, 8011a44 <_dtoa_r+0x3c>
 8011a24:	2010      	movs	r0, #16
 8011a26:	f7fe fea3 	bl	8010770 <malloc>
 8011a2a:	4602      	mov	r2, r0
 8011a2c:	f8c9 001c 	str.w	r0, [r9, #28]
 8011a30:	b920      	cbnz	r0, 8011a3c <_dtoa_r+0x34>
 8011a32:	4ba9      	ldr	r3, [pc, #676]	@ (8011cd8 <_dtoa_r+0x2d0>)
 8011a34:	21ef      	movs	r1, #239	@ 0xef
 8011a36:	48a9      	ldr	r0, [pc, #676]	@ (8011cdc <_dtoa_r+0x2d4>)
 8011a38:	f001 fc1c 	bl	8013274 <__assert_func>
 8011a3c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011a40:	6007      	str	r7, [r0, #0]
 8011a42:	60c7      	str	r7, [r0, #12]
 8011a44:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011a48:	6819      	ldr	r1, [r3, #0]
 8011a4a:	b159      	cbz	r1, 8011a64 <_dtoa_r+0x5c>
 8011a4c:	685a      	ldr	r2, [r3, #4]
 8011a4e:	604a      	str	r2, [r1, #4]
 8011a50:	2301      	movs	r3, #1
 8011a52:	4093      	lsls	r3, r2
 8011a54:	608b      	str	r3, [r1, #8]
 8011a56:	4648      	mov	r0, r9
 8011a58:	f000 fe30 	bl	80126bc <_Bfree>
 8011a5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011a60:	2200      	movs	r2, #0
 8011a62:	601a      	str	r2, [r3, #0]
 8011a64:	1e2b      	subs	r3, r5, #0
 8011a66:	bfb9      	ittee	lt
 8011a68:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011a6c:	9305      	strlt	r3, [sp, #20]
 8011a6e:	2300      	movge	r3, #0
 8011a70:	6033      	strge	r3, [r6, #0]
 8011a72:	9f05      	ldr	r7, [sp, #20]
 8011a74:	4b9a      	ldr	r3, [pc, #616]	@ (8011ce0 <_dtoa_r+0x2d8>)
 8011a76:	bfbc      	itt	lt
 8011a78:	2201      	movlt	r2, #1
 8011a7a:	6032      	strlt	r2, [r6, #0]
 8011a7c:	43bb      	bics	r3, r7
 8011a7e:	d112      	bne.n	8011aa6 <_dtoa_r+0x9e>
 8011a80:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011a82:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011a86:	6013      	str	r3, [r2, #0]
 8011a88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011a8c:	4323      	orrs	r3, r4
 8011a8e:	f000 855a 	beq.w	8012546 <_dtoa_r+0xb3e>
 8011a92:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011a94:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8011cf4 <_dtoa_r+0x2ec>
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	f000 855c 	beq.w	8012556 <_dtoa_r+0xb4e>
 8011a9e:	f10a 0303 	add.w	r3, sl, #3
 8011aa2:	f000 bd56 	b.w	8012552 <_dtoa_r+0xb4a>
 8011aa6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8011aaa:	2200      	movs	r2, #0
 8011aac:	ec51 0b17 	vmov	r0, r1, d7
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8011ab6:	f7ef f807 	bl	8000ac8 <__aeabi_dcmpeq>
 8011aba:	4680      	mov	r8, r0
 8011abc:	b158      	cbz	r0, 8011ad6 <_dtoa_r+0xce>
 8011abe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011ac0:	2301      	movs	r3, #1
 8011ac2:	6013      	str	r3, [r2, #0]
 8011ac4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011ac6:	b113      	cbz	r3, 8011ace <_dtoa_r+0xc6>
 8011ac8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011aca:	4b86      	ldr	r3, [pc, #536]	@ (8011ce4 <_dtoa_r+0x2dc>)
 8011acc:	6013      	str	r3, [r2, #0]
 8011ace:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8011cf8 <_dtoa_r+0x2f0>
 8011ad2:	f000 bd40 	b.w	8012556 <_dtoa_r+0xb4e>
 8011ad6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8011ada:	aa14      	add	r2, sp, #80	@ 0x50
 8011adc:	a915      	add	r1, sp, #84	@ 0x54
 8011ade:	4648      	mov	r0, r9
 8011ae0:	f001 f8ce 	bl	8012c80 <__d2b>
 8011ae4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011ae8:	9002      	str	r0, [sp, #8]
 8011aea:	2e00      	cmp	r6, #0
 8011aec:	d078      	beq.n	8011be0 <_dtoa_r+0x1d8>
 8011aee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011af0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8011af4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011af8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011afc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011b00:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8011b04:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011b08:	4619      	mov	r1, r3
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	4b76      	ldr	r3, [pc, #472]	@ (8011ce8 <_dtoa_r+0x2e0>)
 8011b0e:	f7ee fbbb 	bl	8000288 <__aeabi_dsub>
 8011b12:	a36b      	add	r3, pc, #428	@ (adr r3, 8011cc0 <_dtoa_r+0x2b8>)
 8011b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b18:	f7ee fd6e 	bl	80005f8 <__aeabi_dmul>
 8011b1c:	a36a      	add	r3, pc, #424	@ (adr r3, 8011cc8 <_dtoa_r+0x2c0>)
 8011b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b22:	f7ee fbb3 	bl	800028c <__adddf3>
 8011b26:	4604      	mov	r4, r0
 8011b28:	4630      	mov	r0, r6
 8011b2a:	460d      	mov	r5, r1
 8011b2c:	f7ee fcfa 	bl	8000524 <__aeabi_i2d>
 8011b30:	a367      	add	r3, pc, #412	@ (adr r3, 8011cd0 <_dtoa_r+0x2c8>)
 8011b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b36:	f7ee fd5f 	bl	80005f8 <__aeabi_dmul>
 8011b3a:	4602      	mov	r2, r0
 8011b3c:	460b      	mov	r3, r1
 8011b3e:	4620      	mov	r0, r4
 8011b40:	4629      	mov	r1, r5
 8011b42:	f7ee fba3 	bl	800028c <__adddf3>
 8011b46:	4604      	mov	r4, r0
 8011b48:	460d      	mov	r5, r1
 8011b4a:	f7ef f805 	bl	8000b58 <__aeabi_d2iz>
 8011b4e:	2200      	movs	r2, #0
 8011b50:	4607      	mov	r7, r0
 8011b52:	2300      	movs	r3, #0
 8011b54:	4620      	mov	r0, r4
 8011b56:	4629      	mov	r1, r5
 8011b58:	f7ee ffc0 	bl	8000adc <__aeabi_dcmplt>
 8011b5c:	b140      	cbz	r0, 8011b70 <_dtoa_r+0x168>
 8011b5e:	4638      	mov	r0, r7
 8011b60:	f7ee fce0 	bl	8000524 <__aeabi_i2d>
 8011b64:	4622      	mov	r2, r4
 8011b66:	462b      	mov	r3, r5
 8011b68:	f7ee ffae 	bl	8000ac8 <__aeabi_dcmpeq>
 8011b6c:	b900      	cbnz	r0, 8011b70 <_dtoa_r+0x168>
 8011b6e:	3f01      	subs	r7, #1
 8011b70:	2f16      	cmp	r7, #22
 8011b72:	d852      	bhi.n	8011c1a <_dtoa_r+0x212>
 8011b74:	4b5d      	ldr	r3, [pc, #372]	@ (8011cec <_dtoa_r+0x2e4>)
 8011b76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011b82:	f7ee ffab 	bl	8000adc <__aeabi_dcmplt>
 8011b86:	2800      	cmp	r0, #0
 8011b88:	d049      	beq.n	8011c1e <_dtoa_r+0x216>
 8011b8a:	3f01      	subs	r7, #1
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	9310      	str	r3, [sp, #64]	@ 0x40
 8011b90:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011b92:	1b9b      	subs	r3, r3, r6
 8011b94:	1e5a      	subs	r2, r3, #1
 8011b96:	bf45      	ittet	mi
 8011b98:	f1c3 0301 	rsbmi	r3, r3, #1
 8011b9c:	9300      	strmi	r3, [sp, #0]
 8011b9e:	2300      	movpl	r3, #0
 8011ba0:	2300      	movmi	r3, #0
 8011ba2:	9206      	str	r2, [sp, #24]
 8011ba4:	bf54      	ite	pl
 8011ba6:	9300      	strpl	r3, [sp, #0]
 8011ba8:	9306      	strmi	r3, [sp, #24]
 8011baa:	2f00      	cmp	r7, #0
 8011bac:	db39      	blt.n	8011c22 <_dtoa_r+0x21a>
 8011bae:	9b06      	ldr	r3, [sp, #24]
 8011bb0:	970d      	str	r7, [sp, #52]	@ 0x34
 8011bb2:	443b      	add	r3, r7
 8011bb4:	9306      	str	r3, [sp, #24]
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	9308      	str	r3, [sp, #32]
 8011bba:	9b07      	ldr	r3, [sp, #28]
 8011bbc:	2b09      	cmp	r3, #9
 8011bbe:	d863      	bhi.n	8011c88 <_dtoa_r+0x280>
 8011bc0:	2b05      	cmp	r3, #5
 8011bc2:	bfc4      	itt	gt
 8011bc4:	3b04      	subgt	r3, #4
 8011bc6:	9307      	strgt	r3, [sp, #28]
 8011bc8:	9b07      	ldr	r3, [sp, #28]
 8011bca:	f1a3 0302 	sub.w	r3, r3, #2
 8011bce:	bfcc      	ite	gt
 8011bd0:	2400      	movgt	r4, #0
 8011bd2:	2401      	movle	r4, #1
 8011bd4:	2b03      	cmp	r3, #3
 8011bd6:	d863      	bhi.n	8011ca0 <_dtoa_r+0x298>
 8011bd8:	e8df f003 	tbb	[pc, r3]
 8011bdc:	2b375452 	.word	0x2b375452
 8011be0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8011be4:	441e      	add	r6, r3
 8011be6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011bea:	2b20      	cmp	r3, #32
 8011bec:	bfc1      	itttt	gt
 8011bee:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011bf2:	409f      	lslgt	r7, r3
 8011bf4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011bf8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011bfc:	bfd6      	itet	le
 8011bfe:	f1c3 0320 	rsble	r3, r3, #32
 8011c02:	ea47 0003 	orrgt.w	r0, r7, r3
 8011c06:	fa04 f003 	lslle.w	r0, r4, r3
 8011c0a:	f7ee fc7b 	bl	8000504 <__aeabi_ui2d>
 8011c0e:	2201      	movs	r2, #1
 8011c10:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011c14:	3e01      	subs	r6, #1
 8011c16:	9212      	str	r2, [sp, #72]	@ 0x48
 8011c18:	e776      	b.n	8011b08 <_dtoa_r+0x100>
 8011c1a:	2301      	movs	r3, #1
 8011c1c:	e7b7      	b.n	8011b8e <_dtoa_r+0x186>
 8011c1e:	9010      	str	r0, [sp, #64]	@ 0x40
 8011c20:	e7b6      	b.n	8011b90 <_dtoa_r+0x188>
 8011c22:	9b00      	ldr	r3, [sp, #0]
 8011c24:	1bdb      	subs	r3, r3, r7
 8011c26:	9300      	str	r3, [sp, #0]
 8011c28:	427b      	negs	r3, r7
 8011c2a:	9308      	str	r3, [sp, #32]
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	930d      	str	r3, [sp, #52]	@ 0x34
 8011c30:	e7c3      	b.n	8011bba <_dtoa_r+0x1b2>
 8011c32:	2301      	movs	r3, #1
 8011c34:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011c38:	eb07 0b03 	add.w	fp, r7, r3
 8011c3c:	f10b 0301 	add.w	r3, fp, #1
 8011c40:	2b01      	cmp	r3, #1
 8011c42:	9303      	str	r3, [sp, #12]
 8011c44:	bfb8      	it	lt
 8011c46:	2301      	movlt	r3, #1
 8011c48:	e006      	b.n	8011c58 <_dtoa_r+0x250>
 8011c4a:	2301      	movs	r3, #1
 8011c4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	dd28      	ble.n	8011ca6 <_dtoa_r+0x29e>
 8011c54:	469b      	mov	fp, r3
 8011c56:	9303      	str	r3, [sp, #12]
 8011c58:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8011c5c:	2100      	movs	r1, #0
 8011c5e:	2204      	movs	r2, #4
 8011c60:	f102 0514 	add.w	r5, r2, #20
 8011c64:	429d      	cmp	r5, r3
 8011c66:	d926      	bls.n	8011cb6 <_dtoa_r+0x2ae>
 8011c68:	6041      	str	r1, [r0, #4]
 8011c6a:	4648      	mov	r0, r9
 8011c6c:	f000 fce6 	bl	801263c <_Balloc>
 8011c70:	4682      	mov	sl, r0
 8011c72:	2800      	cmp	r0, #0
 8011c74:	d142      	bne.n	8011cfc <_dtoa_r+0x2f4>
 8011c76:	4b1e      	ldr	r3, [pc, #120]	@ (8011cf0 <_dtoa_r+0x2e8>)
 8011c78:	4602      	mov	r2, r0
 8011c7a:	f240 11af 	movw	r1, #431	@ 0x1af
 8011c7e:	e6da      	b.n	8011a36 <_dtoa_r+0x2e>
 8011c80:	2300      	movs	r3, #0
 8011c82:	e7e3      	b.n	8011c4c <_dtoa_r+0x244>
 8011c84:	2300      	movs	r3, #0
 8011c86:	e7d5      	b.n	8011c34 <_dtoa_r+0x22c>
 8011c88:	2401      	movs	r4, #1
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	9307      	str	r3, [sp, #28]
 8011c8e:	9409      	str	r4, [sp, #36]	@ 0x24
 8011c90:	f04f 3bff 	mov.w	fp, #4294967295
 8011c94:	2200      	movs	r2, #0
 8011c96:	f8cd b00c 	str.w	fp, [sp, #12]
 8011c9a:	2312      	movs	r3, #18
 8011c9c:	920c      	str	r2, [sp, #48]	@ 0x30
 8011c9e:	e7db      	b.n	8011c58 <_dtoa_r+0x250>
 8011ca0:	2301      	movs	r3, #1
 8011ca2:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ca4:	e7f4      	b.n	8011c90 <_dtoa_r+0x288>
 8011ca6:	f04f 0b01 	mov.w	fp, #1
 8011caa:	f8cd b00c 	str.w	fp, [sp, #12]
 8011cae:	465b      	mov	r3, fp
 8011cb0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8011cb4:	e7d0      	b.n	8011c58 <_dtoa_r+0x250>
 8011cb6:	3101      	adds	r1, #1
 8011cb8:	0052      	lsls	r2, r2, #1
 8011cba:	e7d1      	b.n	8011c60 <_dtoa_r+0x258>
 8011cbc:	f3af 8000 	nop.w
 8011cc0:	636f4361 	.word	0x636f4361
 8011cc4:	3fd287a7 	.word	0x3fd287a7
 8011cc8:	8b60c8b3 	.word	0x8b60c8b3
 8011ccc:	3fc68a28 	.word	0x3fc68a28
 8011cd0:	509f79fb 	.word	0x509f79fb
 8011cd4:	3fd34413 	.word	0x3fd34413
 8011cd8:	080144ea 	.word	0x080144ea
 8011cdc:	08014501 	.word	0x08014501
 8011ce0:	7ff00000 	.word	0x7ff00000
 8011ce4:	080144ba 	.word	0x080144ba
 8011ce8:	3ff80000 	.word	0x3ff80000
 8011cec:	08014650 	.word	0x08014650
 8011cf0:	08014559 	.word	0x08014559
 8011cf4:	080144e6 	.word	0x080144e6
 8011cf8:	080144b9 	.word	0x080144b9
 8011cfc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011d00:	6018      	str	r0, [r3, #0]
 8011d02:	9b03      	ldr	r3, [sp, #12]
 8011d04:	2b0e      	cmp	r3, #14
 8011d06:	f200 80a1 	bhi.w	8011e4c <_dtoa_r+0x444>
 8011d0a:	2c00      	cmp	r4, #0
 8011d0c:	f000 809e 	beq.w	8011e4c <_dtoa_r+0x444>
 8011d10:	2f00      	cmp	r7, #0
 8011d12:	dd33      	ble.n	8011d7c <_dtoa_r+0x374>
 8011d14:	4b9c      	ldr	r3, [pc, #624]	@ (8011f88 <_dtoa_r+0x580>)
 8011d16:	f007 020f 	and.w	r2, r7, #15
 8011d1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011d1e:	ed93 7b00 	vldr	d7, [r3]
 8011d22:	05f8      	lsls	r0, r7, #23
 8011d24:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8011d28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8011d2c:	d516      	bpl.n	8011d5c <_dtoa_r+0x354>
 8011d2e:	4b97      	ldr	r3, [pc, #604]	@ (8011f8c <_dtoa_r+0x584>)
 8011d30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011d34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011d38:	f7ee fd88 	bl	800084c <__aeabi_ddiv>
 8011d3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011d40:	f004 040f 	and.w	r4, r4, #15
 8011d44:	2603      	movs	r6, #3
 8011d46:	4d91      	ldr	r5, [pc, #580]	@ (8011f8c <_dtoa_r+0x584>)
 8011d48:	b954      	cbnz	r4, 8011d60 <_dtoa_r+0x358>
 8011d4a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011d4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011d52:	f7ee fd7b 	bl	800084c <__aeabi_ddiv>
 8011d56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011d5a:	e028      	b.n	8011dae <_dtoa_r+0x3a6>
 8011d5c:	2602      	movs	r6, #2
 8011d5e:	e7f2      	b.n	8011d46 <_dtoa_r+0x33e>
 8011d60:	07e1      	lsls	r1, r4, #31
 8011d62:	d508      	bpl.n	8011d76 <_dtoa_r+0x36e>
 8011d64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011d68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011d6c:	f7ee fc44 	bl	80005f8 <__aeabi_dmul>
 8011d70:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011d74:	3601      	adds	r6, #1
 8011d76:	1064      	asrs	r4, r4, #1
 8011d78:	3508      	adds	r5, #8
 8011d7a:	e7e5      	b.n	8011d48 <_dtoa_r+0x340>
 8011d7c:	f000 80af 	beq.w	8011ede <_dtoa_r+0x4d6>
 8011d80:	427c      	negs	r4, r7
 8011d82:	4b81      	ldr	r3, [pc, #516]	@ (8011f88 <_dtoa_r+0x580>)
 8011d84:	4d81      	ldr	r5, [pc, #516]	@ (8011f8c <_dtoa_r+0x584>)
 8011d86:	f004 020f 	and.w	r2, r4, #15
 8011d8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011d96:	f7ee fc2f 	bl	80005f8 <__aeabi_dmul>
 8011d9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011d9e:	1124      	asrs	r4, r4, #4
 8011da0:	2300      	movs	r3, #0
 8011da2:	2602      	movs	r6, #2
 8011da4:	2c00      	cmp	r4, #0
 8011da6:	f040 808f 	bne.w	8011ec8 <_dtoa_r+0x4c0>
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d1d3      	bne.n	8011d56 <_dtoa_r+0x34e>
 8011dae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011db0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	f000 8094 	beq.w	8011ee2 <_dtoa_r+0x4da>
 8011dba:	4b75      	ldr	r3, [pc, #468]	@ (8011f90 <_dtoa_r+0x588>)
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	4620      	mov	r0, r4
 8011dc0:	4629      	mov	r1, r5
 8011dc2:	f7ee fe8b 	bl	8000adc <__aeabi_dcmplt>
 8011dc6:	2800      	cmp	r0, #0
 8011dc8:	f000 808b 	beq.w	8011ee2 <_dtoa_r+0x4da>
 8011dcc:	9b03      	ldr	r3, [sp, #12]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	f000 8087 	beq.w	8011ee2 <_dtoa_r+0x4da>
 8011dd4:	f1bb 0f00 	cmp.w	fp, #0
 8011dd8:	dd34      	ble.n	8011e44 <_dtoa_r+0x43c>
 8011dda:	4620      	mov	r0, r4
 8011ddc:	4b6d      	ldr	r3, [pc, #436]	@ (8011f94 <_dtoa_r+0x58c>)
 8011dde:	2200      	movs	r2, #0
 8011de0:	4629      	mov	r1, r5
 8011de2:	f7ee fc09 	bl	80005f8 <__aeabi_dmul>
 8011de6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011dea:	f107 38ff 	add.w	r8, r7, #4294967295
 8011dee:	3601      	adds	r6, #1
 8011df0:	465c      	mov	r4, fp
 8011df2:	4630      	mov	r0, r6
 8011df4:	f7ee fb96 	bl	8000524 <__aeabi_i2d>
 8011df8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011dfc:	f7ee fbfc 	bl	80005f8 <__aeabi_dmul>
 8011e00:	4b65      	ldr	r3, [pc, #404]	@ (8011f98 <_dtoa_r+0x590>)
 8011e02:	2200      	movs	r2, #0
 8011e04:	f7ee fa42 	bl	800028c <__adddf3>
 8011e08:	4605      	mov	r5, r0
 8011e0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011e0e:	2c00      	cmp	r4, #0
 8011e10:	d16a      	bne.n	8011ee8 <_dtoa_r+0x4e0>
 8011e12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011e16:	4b61      	ldr	r3, [pc, #388]	@ (8011f9c <_dtoa_r+0x594>)
 8011e18:	2200      	movs	r2, #0
 8011e1a:	f7ee fa35 	bl	8000288 <__aeabi_dsub>
 8011e1e:	4602      	mov	r2, r0
 8011e20:	460b      	mov	r3, r1
 8011e22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011e26:	462a      	mov	r2, r5
 8011e28:	4633      	mov	r3, r6
 8011e2a:	f7ee fe75 	bl	8000b18 <__aeabi_dcmpgt>
 8011e2e:	2800      	cmp	r0, #0
 8011e30:	f040 8298 	bne.w	8012364 <_dtoa_r+0x95c>
 8011e34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011e38:	462a      	mov	r2, r5
 8011e3a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011e3e:	f7ee fe4d 	bl	8000adc <__aeabi_dcmplt>
 8011e42:	bb38      	cbnz	r0, 8011e94 <_dtoa_r+0x48c>
 8011e44:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8011e48:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8011e4c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	f2c0 8157 	blt.w	8012102 <_dtoa_r+0x6fa>
 8011e54:	2f0e      	cmp	r7, #14
 8011e56:	f300 8154 	bgt.w	8012102 <_dtoa_r+0x6fa>
 8011e5a:	4b4b      	ldr	r3, [pc, #300]	@ (8011f88 <_dtoa_r+0x580>)
 8011e5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011e60:	ed93 7b00 	vldr	d7, [r3]
 8011e64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	ed8d 7b00 	vstr	d7, [sp]
 8011e6c:	f280 80e5 	bge.w	801203a <_dtoa_r+0x632>
 8011e70:	9b03      	ldr	r3, [sp, #12]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	f300 80e1 	bgt.w	801203a <_dtoa_r+0x632>
 8011e78:	d10c      	bne.n	8011e94 <_dtoa_r+0x48c>
 8011e7a:	4b48      	ldr	r3, [pc, #288]	@ (8011f9c <_dtoa_r+0x594>)
 8011e7c:	2200      	movs	r2, #0
 8011e7e:	ec51 0b17 	vmov	r0, r1, d7
 8011e82:	f7ee fbb9 	bl	80005f8 <__aeabi_dmul>
 8011e86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011e8a:	f7ee fe3b 	bl	8000b04 <__aeabi_dcmpge>
 8011e8e:	2800      	cmp	r0, #0
 8011e90:	f000 8266 	beq.w	8012360 <_dtoa_r+0x958>
 8011e94:	2400      	movs	r4, #0
 8011e96:	4625      	mov	r5, r4
 8011e98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011e9a:	4656      	mov	r6, sl
 8011e9c:	ea6f 0803 	mvn.w	r8, r3
 8011ea0:	2700      	movs	r7, #0
 8011ea2:	4621      	mov	r1, r4
 8011ea4:	4648      	mov	r0, r9
 8011ea6:	f000 fc09 	bl	80126bc <_Bfree>
 8011eaa:	2d00      	cmp	r5, #0
 8011eac:	f000 80bd 	beq.w	801202a <_dtoa_r+0x622>
 8011eb0:	b12f      	cbz	r7, 8011ebe <_dtoa_r+0x4b6>
 8011eb2:	42af      	cmp	r7, r5
 8011eb4:	d003      	beq.n	8011ebe <_dtoa_r+0x4b6>
 8011eb6:	4639      	mov	r1, r7
 8011eb8:	4648      	mov	r0, r9
 8011eba:	f000 fbff 	bl	80126bc <_Bfree>
 8011ebe:	4629      	mov	r1, r5
 8011ec0:	4648      	mov	r0, r9
 8011ec2:	f000 fbfb 	bl	80126bc <_Bfree>
 8011ec6:	e0b0      	b.n	801202a <_dtoa_r+0x622>
 8011ec8:	07e2      	lsls	r2, r4, #31
 8011eca:	d505      	bpl.n	8011ed8 <_dtoa_r+0x4d0>
 8011ecc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011ed0:	f7ee fb92 	bl	80005f8 <__aeabi_dmul>
 8011ed4:	3601      	adds	r6, #1
 8011ed6:	2301      	movs	r3, #1
 8011ed8:	1064      	asrs	r4, r4, #1
 8011eda:	3508      	adds	r5, #8
 8011edc:	e762      	b.n	8011da4 <_dtoa_r+0x39c>
 8011ede:	2602      	movs	r6, #2
 8011ee0:	e765      	b.n	8011dae <_dtoa_r+0x3a6>
 8011ee2:	9c03      	ldr	r4, [sp, #12]
 8011ee4:	46b8      	mov	r8, r7
 8011ee6:	e784      	b.n	8011df2 <_dtoa_r+0x3ea>
 8011ee8:	4b27      	ldr	r3, [pc, #156]	@ (8011f88 <_dtoa_r+0x580>)
 8011eea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011eec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011ef0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011ef4:	4454      	add	r4, sl
 8011ef6:	2900      	cmp	r1, #0
 8011ef8:	d054      	beq.n	8011fa4 <_dtoa_r+0x59c>
 8011efa:	4929      	ldr	r1, [pc, #164]	@ (8011fa0 <_dtoa_r+0x598>)
 8011efc:	2000      	movs	r0, #0
 8011efe:	f7ee fca5 	bl	800084c <__aeabi_ddiv>
 8011f02:	4633      	mov	r3, r6
 8011f04:	462a      	mov	r2, r5
 8011f06:	f7ee f9bf 	bl	8000288 <__aeabi_dsub>
 8011f0a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011f0e:	4656      	mov	r6, sl
 8011f10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011f14:	f7ee fe20 	bl	8000b58 <__aeabi_d2iz>
 8011f18:	4605      	mov	r5, r0
 8011f1a:	f7ee fb03 	bl	8000524 <__aeabi_i2d>
 8011f1e:	4602      	mov	r2, r0
 8011f20:	460b      	mov	r3, r1
 8011f22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011f26:	f7ee f9af 	bl	8000288 <__aeabi_dsub>
 8011f2a:	3530      	adds	r5, #48	@ 0x30
 8011f2c:	4602      	mov	r2, r0
 8011f2e:	460b      	mov	r3, r1
 8011f30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011f34:	f806 5b01 	strb.w	r5, [r6], #1
 8011f38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011f3c:	f7ee fdce 	bl	8000adc <__aeabi_dcmplt>
 8011f40:	2800      	cmp	r0, #0
 8011f42:	d172      	bne.n	801202a <_dtoa_r+0x622>
 8011f44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011f48:	4911      	ldr	r1, [pc, #68]	@ (8011f90 <_dtoa_r+0x588>)
 8011f4a:	2000      	movs	r0, #0
 8011f4c:	f7ee f99c 	bl	8000288 <__aeabi_dsub>
 8011f50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011f54:	f7ee fdc2 	bl	8000adc <__aeabi_dcmplt>
 8011f58:	2800      	cmp	r0, #0
 8011f5a:	f040 80b4 	bne.w	80120c6 <_dtoa_r+0x6be>
 8011f5e:	42a6      	cmp	r6, r4
 8011f60:	f43f af70 	beq.w	8011e44 <_dtoa_r+0x43c>
 8011f64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011f68:	4b0a      	ldr	r3, [pc, #40]	@ (8011f94 <_dtoa_r+0x58c>)
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	f7ee fb44 	bl	80005f8 <__aeabi_dmul>
 8011f70:	4b08      	ldr	r3, [pc, #32]	@ (8011f94 <_dtoa_r+0x58c>)
 8011f72:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011f76:	2200      	movs	r2, #0
 8011f78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011f7c:	f7ee fb3c 	bl	80005f8 <__aeabi_dmul>
 8011f80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011f84:	e7c4      	b.n	8011f10 <_dtoa_r+0x508>
 8011f86:	bf00      	nop
 8011f88:	08014650 	.word	0x08014650
 8011f8c:	08014628 	.word	0x08014628
 8011f90:	3ff00000 	.word	0x3ff00000
 8011f94:	40240000 	.word	0x40240000
 8011f98:	401c0000 	.word	0x401c0000
 8011f9c:	40140000 	.word	0x40140000
 8011fa0:	3fe00000 	.word	0x3fe00000
 8011fa4:	4631      	mov	r1, r6
 8011fa6:	4628      	mov	r0, r5
 8011fa8:	f7ee fb26 	bl	80005f8 <__aeabi_dmul>
 8011fac:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011fb0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8011fb2:	4656      	mov	r6, sl
 8011fb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011fb8:	f7ee fdce 	bl	8000b58 <__aeabi_d2iz>
 8011fbc:	4605      	mov	r5, r0
 8011fbe:	f7ee fab1 	bl	8000524 <__aeabi_i2d>
 8011fc2:	4602      	mov	r2, r0
 8011fc4:	460b      	mov	r3, r1
 8011fc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011fca:	f7ee f95d 	bl	8000288 <__aeabi_dsub>
 8011fce:	3530      	adds	r5, #48	@ 0x30
 8011fd0:	f806 5b01 	strb.w	r5, [r6], #1
 8011fd4:	4602      	mov	r2, r0
 8011fd6:	460b      	mov	r3, r1
 8011fd8:	42a6      	cmp	r6, r4
 8011fda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011fde:	f04f 0200 	mov.w	r2, #0
 8011fe2:	d124      	bne.n	801202e <_dtoa_r+0x626>
 8011fe4:	4baf      	ldr	r3, [pc, #700]	@ (80122a4 <_dtoa_r+0x89c>)
 8011fe6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011fea:	f7ee f94f 	bl	800028c <__adddf3>
 8011fee:	4602      	mov	r2, r0
 8011ff0:	460b      	mov	r3, r1
 8011ff2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011ff6:	f7ee fd8f 	bl	8000b18 <__aeabi_dcmpgt>
 8011ffa:	2800      	cmp	r0, #0
 8011ffc:	d163      	bne.n	80120c6 <_dtoa_r+0x6be>
 8011ffe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8012002:	49a8      	ldr	r1, [pc, #672]	@ (80122a4 <_dtoa_r+0x89c>)
 8012004:	2000      	movs	r0, #0
 8012006:	f7ee f93f 	bl	8000288 <__aeabi_dsub>
 801200a:	4602      	mov	r2, r0
 801200c:	460b      	mov	r3, r1
 801200e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012012:	f7ee fd63 	bl	8000adc <__aeabi_dcmplt>
 8012016:	2800      	cmp	r0, #0
 8012018:	f43f af14 	beq.w	8011e44 <_dtoa_r+0x43c>
 801201c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801201e:	1e73      	subs	r3, r6, #1
 8012020:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012022:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012026:	2b30      	cmp	r3, #48	@ 0x30
 8012028:	d0f8      	beq.n	801201c <_dtoa_r+0x614>
 801202a:	4647      	mov	r7, r8
 801202c:	e03b      	b.n	80120a6 <_dtoa_r+0x69e>
 801202e:	4b9e      	ldr	r3, [pc, #632]	@ (80122a8 <_dtoa_r+0x8a0>)
 8012030:	f7ee fae2 	bl	80005f8 <__aeabi_dmul>
 8012034:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012038:	e7bc      	b.n	8011fb4 <_dtoa_r+0x5ac>
 801203a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801203e:	4656      	mov	r6, sl
 8012040:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012044:	4620      	mov	r0, r4
 8012046:	4629      	mov	r1, r5
 8012048:	f7ee fc00 	bl	800084c <__aeabi_ddiv>
 801204c:	f7ee fd84 	bl	8000b58 <__aeabi_d2iz>
 8012050:	4680      	mov	r8, r0
 8012052:	f7ee fa67 	bl	8000524 <__aeabi_i2d>
 8012056:	e9dd 2300 	ldrd	r2, r3, [sp]
 801205a:	f7ee facd 	bl	80005f8 <__aeabi_dmul>
 801205e:	4602      	mov	r2, r0
 8012060:	460b      	mov	r3, r1
 8012062:	4620      	mov	r0, r4
 8012064:	4629      	mov	r1, r5
 8012066:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801206a:	f7ee f90d 	bl	8000288 <__aeabi_dsub>
 801206e:	f806 4b01 	strb.w	r4, [r6], #1
 8012072:	9d03      	ldr	r5, [sp, #12]
 8012074:	eba6 040a 	sub.w	r4, r6, sl
 8012078:	42a5      	cmp	r5, r4
 801207a:	4602      	mov	r2, r0
 801207c:	460b      	mov	r3, r1
 801207e:	d133      	bne.n	80120e8 <_dtoa_r+0x6e0>
 8012080:	f7ee f904 	bl	800028c <__adddf3>
 8012084:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012088:	4604      	mov	r4, r0
 801208a:	460d      	mov	r5, r1
 801208c:	f7ee fd44 	bl	8000b18 <__aeabi_dcmpgt>
 8012090:	b9c0      	cbnz	r0, 80120c4 <_dtoa_r+0x6bc>
 8012092:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012096:	4620      	mov	r0, r4
 8012098:	4629      	mov	r1, r5
 801209a:	f7ee fd15 	bl	8000ac8 <__aeabi_dcmpeq>
 801209e:	b110      	cbz	r0, 80120a6 <_dtoa_r+0x69e>
 80120a0:	f018 0f01 	tst.w	r8, #1
 80120a4:	d10e      	bne.n	80120c4 <_dtoa_r+0x6bc>
 80120a6:	9902      	ldr	r1, [sp, #8]
 80120a8:	4648      	mov	r0, r9
 80120aa:	f000 fb07 	bl	80126bc <_Bfree>
 80120ae:	2300      	movs	r3, #0
 80120b0:	7033      	strb	r3, [r6, #0]
 80120b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80120b4:	3701      	adds	r7, #1
 80120b6:	601f      	str	r7, [r3, #0]
 80120b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	f000 824b 	beq.w	8012556 <_dtoa_r+0xb4e>
 80120c0:	601e      	str	r6, [r3, #0]
 80120c2:	e248      	b.n	8012556 <_dtoa_r+0xb4e>
 80120c4:	46b8      	mov	r8, r7
 80120c6:	4633      	mov	r3, r6
 80120c8:	461e      	mov	r6, r3
 80120ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80120ce:	2a39      	cmp	r2, #57	@ 0x39
 80120d0:	d106      	bne.n	80120e0 <_dtoa_r+0x6d8>
 80120d2:	459a      	cmp	sl, r3
 80120d4:	d1f8      	bne.n	80120c8 <_dtoa_r+0x6c0>
 80120d6:	2230      	movs	r2, #48	@ 0x30
 80120d8:	f108 0801 	add.w	r8, r8, #1
 80120dc:	f88a 2000 	strb.w	r2, [sl]
 80120e0:	781a      	ldrb	r2, [r3, #0]
 80120e2:	3201      	adds	r2, #1
 80120e4:	701a      	strb	r2, [r3, #0]
 80120e6:	e7a0      	b.n	801202a <_dtoa_r+0x622>
 80120e8:	4b6f      	ldr	r3, [pc, #444]	@ (80122a8 <_dtoa_r+0x8a0>)
 80120ea:	2200      	movs	r2, #0
 80120ec:	f7ee fa84 	bl	80005f8 <__aeabi_dmul>
 80120f0:	2200      	movs	r2, #0
 80120f2:	2300      	movs	r3, #0
 80120f4:	4604      	mov	r4, r0
 80120f6:	460d      	mov	r5, r1
 80120f8:	f7ee fce6 	bl	8000ac8 <__aeabi_dcmpeq>
 80120fc:	2800      	cmp	r0, #0
 80120fe:	d09f      	beq.n	8012040 <_dtoa_r+0x638>
 8012100:	e7d1      	b.n	80120a6 <_dtoa_r+0x69e>
 8012102:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012104:	2a00      	cmp	r2, #0
 8012106:	f000 80ea 	beq.w	80122de <_dtoa_r+0x8d6>
 801210a:	9a07      	ldr	r2, [sp, #28]
 801210c:	2a01      	cmp	r2, #1
 801210e:	f300 80cd 	bgt.w	80122ac <_dtoa_r+0x8a4>
 8012112:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8012114:	2a00      	cmp	r2, #0
 8012116:	f000 80c1 	beq.w	801229c <_dtoa_r+0x894>
 801211a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801211e:	9c08      	ldr	r4, [sp, #32]
 8012120:	9e00      	ldr	r6, [sp, #0]
 8012122:	9a00      	ldr	r2, [sp, #0]
 8012124:	441a      	add	r2, r3
 8012126:	9200      	str	r2, [sp, #0]
 8012128:	9a06      	ldr	r2, [sp, #24]
 801212a:	2101      	movs	r1, #1
 801212c:	441a      	add	r2, r3
 801212e:	4648      	mov	r0, r9
 8012130:	9206      	str	r2, [sp, #24]
 8012132:	f000 fb77 	bl	8012824 <__i2b>
 8012136:	4605      	mov	r5, r0
 8012138:	b166      	cbz	r6, 8012154 <_dtoa_r+0x74c>
 801213a:	9b06      	ldr	r3, [sp, #24]
 801213c:	2b00      	cmp	r3, #0
 801213e:	dd09      	ble.n	8012154 <_dtoa_r+0x74c>
 8012140:	42b3      	cmp	r3, r6
 8012142:	9a00      	ldr	r2, [sp, #0]
 8012144:	bfa8      	it	ge
 8012146:	4633      	movge	r3, r6
 8012148:	1ad2      	subs	r2, r2, r3
 801214a:	9200      	str	r2, [sp, #0]
 801214c:	9a06      	ldr	r2, [sp, #24]
 801214e:	1af6      	subs	r6, r6, r3
 8012150:	1ad3      	subs	r3, r2, r3
 8012152:	9306      	str	r3, [sp, #24]
 8012154:	9b08      	ldr	r3, [sp, #32]
 8012156:	b30b      	cbz	r3, 801219c <_dtoa_r+0x794>
 8012158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801215a:	2b00      	cmp	r3, #0
 801215c:	f000 80c6 	beq.w	80122ec <_dtoa_r+0x8e4>
 8012160:	2c00      	cmp	r4, #0
 8012162:	f000 80c0 	beq.w	80122e6 <_dtoa_r+0x8de>
 8012166:	4629      	mov	r1, r5
 8012168:	4622      	mov	r2, r4
 801216a:	4648      	mov	r0, r9
 801216c:	f000 fc12 	bl	8012994 <__pow5mult>
 8012170:	9a02      	ldr	r2, [sp, #8]
 8012172:	4601      	mov	r1, r0
 8012174:	4605      	mov	r5, r0
 8012176:	4648      	mov	r0, r9
 8012178:	f000 fb6a 	bl	8012850 <__multiply>
 801217c:	9902      	ldr	r1, [sp, #8]
 801217e:	4680      	mov	r8, r0
 8012180:	4648      	mov	r0, r9
 8012182:	f000 fa9b 	bl	80126bc <_Bfree>
 8012186:	9b08      	ldr	r3, [sp, #32]
 8012188:	1b1b      	subs	r3, r3, r4
 801218a:	9308      	str	r3, [sp, #32]
 801218c:	f000 80b1 	beq.w	80122f2 <_dtoa_r+0x8ea>
 8012190:	9a08      	ldr	r2, [sp, #32]
 8012192:	4641      	mov	r1, r8
 8012194:	4648      	mov	r0, r9
 8012196:	f000 fbfd 	bl	8012994 <__pow5mult>
 801219a:	9002      	str	r0, [sp, #8]
 801219c:	2101      	movs	r1, #1
 801219e:	4648      	mov	r0, r9
 80121a0:	f000 fb40 	bl	8012824 <__i2b>
 80121a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80121a6:	4604      	mov	r4, r0
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	f000 81d8 	beq.w	801255e <_dtoa_r+0xb56>
 80121ae:	461a      	mov	r2, r3
 80121b0:	4601      	mov	r1, r0
 80121b2:	4648      	mov	r0, r9
 80121b4:	f000 fbee 	bl	8012994 <__pow5mult>
 80121b8:	9b07      	ldr	r3, [sp, #28]
 80121ba:	2b01      	cmp	r3, #1
 80121bc:	4604      	mov	r4, r0
 80121be:	f300 809f 	bgt.w	8012300 <_dtoa_r+0x8f8>
 80121c2:	9b04      	ldr	r3, [sp, #16]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	f040 8097 	bne.w	80122f8 <_dtoa_r+0x8f0>
 80121ca:	9b05      	ldr	r3, [sp, #20]
 80121cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	f040 8093 	bne.w	80122fc <_dtoa_r+0x8f4>
 80121d6:	9b05      	ldr	r3, [sp, #20]
 80121d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80121dc:	0d1b      	lsrs	r3, r3, #20
 80121de:	051b      	lsls	r3, r3, #20
 80121e0:	b133      	cbz	r3, 80121f0 <_dtoa_r+0x7e8>
 80121e2:	9b00      	ldr	r3, [sp, #0]
 80121e4:	3301      	adds	r3, #1
 80121e6:	9300      	str	r3, [sp, #0]
 80121e8:	9b06      	ldr	r3, [sp, #24]
 80121ea:	3301      	adds	r3, #1
 80121ec:	9306      	str	r3, [sp, #24]
 80121ee:	2301      	movs	r3, #1
 80121f0:	9308      	str	r3, [sp, #32]
 80121f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	f000 81b8 	beq.w	801256a <_dtoa_r+0xb62>
 80121fa:	6923      	ldr	r3, [r4, #16]
 80121fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012200:	6918      	ldr	r0, [r3, #16]
 8012202:	f000 fac3 	bl	801278c <__hi0bits>
 8012206:	f1c0 0020 	rsb	r0, r0, #32
 801220a:	9b06      	ldr	r3, [sp, #24]
 801220c:	4418      	add	r0, r3
 801220e:	f010 001f 	ands.w	r0, r0, #31
 8012212:	f000 8082 	beq.w	801231a <_dtoa_r+0x912>
 8012216:	f1c0 0320 	rsb	r3, r0, #32
 801221a:	2b04      	cmp	r3, #4
 801221c:	dd73      	ble.n	8012306 <_dtoa_r+0x8fe>
 801221e:	9b00      	ldr	r3, [sp, #0]
 8012220:	f1c0 001c 	rsb	r0, r0, #28
 8012224:	4403      	add	r3, r0
 8012226:	9300      	str	r3, [sp, #0]
 8012228:	9b06      	ldr	r3, [sp, #24]
 801222a:	4403      	add	r3, r0
 801222c:	4406      	add	r6, r0
 801222e:	9306      	str	r3, [sp, #24]
 8012230:	9b00      	ldr	r3, [sp, #0]
 8012232:	2b00      	cmp	r3, #0
 8012234:	dd05      	ble.n	8012242 <_dtoa_r+0x83a>
 8012236:	9902      	ldr	r1, [sp, #8]
 8012238:	461a      	mov	r2, r3
 801223a:	4648      	mov	r0, r9
 801223c:	f000 fc04 	bl	8012a48 <__lshift>
 8012240:	9002      	str	r0, [sp, #8]
 8012242:	9b06      	ldr	r3, [sp, #24]
 8012244:	2b00      	cmp	r3, #0
 8012246:	dd05      	ble.n	8012254 <_dtoa_r+0x84c>
 8012248:	4621      	mov	r1, r4
 801224a:	461a      	mov	r2, r3
 801224c:	4648      	mov	r0, r9
 801224e:	f000 fbfb 	bl	8012a48 <__lshift>
 8012252:	4604      	mov	r4, r0
 8012254:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012256:	2b00      	cmp	r3, #0
 8012258:	d061      	beq.n	801231e <_dtoa_r+0x916>
 801225a:	9802      	ldr	r0, [sp, #8]
 801225c:	4621      	mov	r1, r4
 801225e:	f000 fc5f 	bl	8012b20 <__mcmp>
 8012262:	2800      	cmp	r0, #0
 8012264:	da5b      	bge.n	801231e <_dtoa_r+0x916>
 8012266:	2300      	movs	r3, #0
 8012268:	9902      	ldr	r1, [sp, #8]
 801226a:	220a      	movs	r2, #10
 801226c:	4648      	mov	r0, r9
 801226e:	f000 fa47 	bl	8012700 <__multadd>
 8012272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012274:	9002      	str	r0, [sp, #8]
 8012276:	f107 38ff 	add.w	r8, r7, #4294967295
 801227a:	2b00      	cmp	r3, #0
 801227c:	f000 8177 	beq.w	801256e <_dtoa_r+0xb66>
 8012280:	4629      	mov	r1, r5
 8012282:	2300      	movs	r3, #0
 8012284:	220a      	movs	r2, #10
 8012286:	4648      	mov	r0, r9
 8012288:	f000 fa3a 	bl	8012700 <__multadd>
 801228c:	f1bb 0f00 	cmp.w	fp, #0
 8012290:	4605      	mov	r5, r0
 8012292:	dc6f      	bgt.n	8012374 <_dtoa_r+0x96c>
 8012294:	9b07      	ldr	r3, [sp, #28]
 8012296:	2b02      	cmp	r3, #2
 8012298:	dc49      	bgt.n	801232e <_dtoa_r+0x926>
 801229a:	e06b      	b.n	8012374 <_dtoa_r+0x96c>
 801229c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801229e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80122a2:	e73c      	b.n	801211e <_dtoa_r+0x716>
 80122a4:	3fe00000 	.word	0x3fe00000
 80122a8:	40240000 	.word	0x40240000
 80122ac:	9b03      	ldr	r3, [sp, #12]
 80122ae:	1e5c      	subs	r4, r3, #1
 80122b0:	9b08      	ldr	r3, [sp, #32]
 80122b2:	42a3      	cmp	r3, r4
 80122b4:	db09      	blt.n	80122ca <_dtoa_r+0x8c2>
 80122b6:	1b1c      	subs	r4, r3, r4
 80122b8:	9b03      	ldr	r3, [sp, #12]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	f6bf af30 	bge.w	8012120 <_dtoa_r+0x718>
 80122c0:	9b00      	ldr	r3, [sp, #0]
 80122c2:	9a03      	ldr	r2, [sp, #12]
 80122c4:	1a9e      	subs	r6, r3, r2
 80122c6:	2300      	movs	r3, #0
 80122c8:	e72b      	b.n	8012122 <_dtoa_r+0x71a>
 80122ca:	9b08      	ldr	r3, [sp, #32]
 80122cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80122ce:	9408      	str	r4, [sp, #32]
 80122d0:	1ae3      	subs	r3, r4, r3
 80122d2:	441a      	add	r2, r3
 80122d4:	9e00      	ldr	r6, [sp, #0]
 80122d6:	9b03      	ldr	r3, [sp, #12]
 80122d8:	920d      	str	r2, [sp, #52]	@ 0x34
 80122da:	2400      	movs	r4, #0
 80122dc:	e721      	b.n	8012122 <_dtoa_r+0x71a>
 80122de:	9c08      	ldr	r4, [sp, #32]
 80122e0:	9e00      	ldr	r6, [sp, #0]
 80122e2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80122e4:	e728      	b.n	8012138 <_dtoa_r+0x730>
 80122e6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80122ea:	e751      	b.n	8012190 <_dtoa_r+0x788>
 80122ec:	9a08      	ldr	r2, [sp, #32]
 80122ee:	9902      	ldr	r1, [sp, #8]
 80122f0:	e750      	b.n	8012194 <_dtoa_r+0x78c>
 80122f2:	f8cd 8008 	str.w	r8, [sp, #8]
 80122f6:	e751      	b.n	801219c <_dtoa_r+0x794>
 80122f8:	2300      	movs	r3, #0
 80122fa:	e779      	b.n	80121f0 <_dtoa_r+0x7e8>
 80122fc:	9b04      	ldr	r3, [sp, #16]
 80122fe:	e777      	b.n	80121f0 <_dtoa_r+0x7e8>
 8012300:	2300      	movs	r3, #0
 8012302:	9308      	str	r3, [sp, #32]
 8012304:	e779      	b.n	80121fa <_dtoa_r+0x7f2>
 8012306:	d093      	beq.n	8012230 <_dtoa_r+0x828>
 8012308:	9a00      	ldr	r2, [sp, #0]
 801230a:	331c      	adds	r3, #28
 801230c:	441a      	add	r2, r3
 801230e:	9200      	str	r2, [sp, #0]
 8012310:	9a06      	ldr	r2, [sp, #24]
 8012312:	441a      	add	r2, r3
 8012314:	441e      	add	r6, r3
 8012316:	9206      	str	r2, [sp, #24]
 8012318:	e78a      	b.n	8012230 <_dtoa_r+0x828>
 801231a:	4603      	mov	r3, r0
 801231c:	e7f4      	b.n	8012308 <_dtoa_r+0x900>
 801231e:	9b03      	ldr	r3, [sp, #12]
 8012320:	2b00      	cmp	r3, #0
 8012322:	46b8      	mov	r8, r7
 8012324:	dc20      	bgt.n	8012368 <_dtoa_r+0x960>
 8012326:	469b      	mov	fp, r3
 8012328:	9b07      	ldr	r3, [sp, #28]
 801232a:	2b02      	cmp	r3, #2
 801232c:	dd1e      	ble.n	801236c <_dtoa_r+0x964>
 801232e:	f1bb 0f00 	cmp.w	fp, #0
 8012332:	f47f adb1 	bne.w	8011e98 <_dtoa_r+0x490>
 8012336:	4621      	mov	r1, r4
 8012338:	465b      	mov	r3, fp
 801233a:	2205      	movs	r2, #5
 801233c:	4648      	mov	r0, r9
 801233e:	f000 f9df 	bl	8012700 <__multadd>
 8012342:	4601      	mov	r1, r0
 8012344:	4604      	mov	r4, r0
 8012346:	9802      	ldr	r0, [sp, #8]
 8012348:	f000 fbea 	bl	8012b20 <__mcmp>
 801234c:	2800      	cmp	r0, #0
 801234e:	f77f ada3 	ble.w	8011e98 <_dtoa_r+0x490>
 8012352:	4656      	mov	r6, sl
 8012354:	2331      	movs	r3, #49	@ 0x31
 8012356:	f806 3b01 	strb.w	r3, [r6], #1
 801235a:	f108 0801 	add.w	r8, r8, #1
 801235e:	e59f      	b.n	8011ea0 <_dtoa_r+0x498>
 8012360:	9c03      	ldr	r4, [sp, #12]
 8012362:	46b8      	mov	r8, r7
 8012364:	4625      	mov	r5, r4
 8012366:	e7f4      	b.n	8012352 <_dtoa_r+0x94a>
 8012368:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801236c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801236e:	2b00      	cmp	r3, #0
 8012370:	f000 8101 	beq.w	8012576 <_dtoa_r+0xb6e>
 8012374:	2e00      	cmp	r6, #0
 8012376:	dd05      	ble.n	8012384 <_dtoa_r+0x97c>
 8012378:	4629      	mov	r1, r5
 801237a:	4632      	mov	r2, r6
 801237c:	4648      	mov	r0, r9
 801237e:	f000 fb63 	bl	8012a48 <__lshift>
 8012382:	4605      	mov	r5, r0
 8012384:	9b08      	ldr	r3, [sp, #32]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d05c      	beq.n	8012444 <_dtoa_r+0xa3c>
 801238a:	6869      	ldr	r1, [r5, #4]
 801238c:	4648      	mov	r0, r9
 801238e:	f000 f955 	bl	801263c <_Balloc>
 8012392:	4606      	mov	r6, r0
 8012394:	b928      	cbnz	r0, 80123a2 <_dtoa_r+0x99a>
 8012396:	4b82      	ldr	r3, [pc, #520]	@ (80125a0 <_dtoa_r+0xb98>)
 8012398:	4602      	mov	r2, r0
 801239a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801239e:	f7ff bb4a 	b.w	8011a36 <_dtoa_r+0x2e>
 80123a2:	692a      	ldr	r2, [r5, #16]
 80123a4:	3202      	adds	r2, #2
 80123a6:	0092      	lsls	r2, r2, #2
 80123a8:	f105 010c 	add.w	r1, r5, #12
 80123ac:	300c      	adds	r0, #12
 80123ae:	f7ff fa92 	bl	80118d6 <memcpy>
 80123b2:	2201      	movs	r2, #1
 80123b4:	4631      	mov	r1, r6
 80123b6:	4648      	mov	r0, r9
 80123b8:	f000 fb46 	bl	8012a48 <__lshift>
 80123bc:	f10a 0301 	add.w	r3, sl, #1
 80123c0:	9300      	str	r3, [sp, #0]
 80123c2:	eb0a 030b 	add.w	r3, sl, fp
 80123c6:	9308      	str	r3, [sp, #32]
 80123c8:	9b04      	ldr	r3, [sp, #16]
 80123ca:	f003 0301 	and.w	r3, r3, #1
 80123ce:	462f      	mov	r7, r5
 80123d0:	9306      	str	r3, [sp, #24]
 80123d2:	4605      	mov	r5, r0
 80123d4:	9b00      	ldr	r3, [sp, #0]
 80123d6:	9802      	ldr	r0, [sp, #8]
 80123d8:	4621      	mov	r1, r4
 80123da:	f103 3bff 	add.w	fp, r3, #4294967295
 80123de:	f7ff fa88 	bl	80118f2 <quorem>
 80123e2:	4603      	mov	r3, r0
 80123e4:	3330      	adds	r3, #48	@ 0x30
 80123e6:	9003      	str	r0, [sp, #12]
 80123e8:	4639      	mov	r1, r7
 80123ea:	9802      	ldr	r0, [sp, #8]
 80123ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80123ee:	f000 fb97 	bl	8012b20 <__mcmp>
 80123f2:	462a      	mov	r2, r5
 80123f4:	9004      	str	r0, [sp, #16]
 80123f6:	4621      	mov	r1, r4
 80123f8:	4648      	mov	r0, r9
 80123fa:	f000 fbad 	bl	8012b58 <__mdiff>
 80123fe:	68c2      	ldr	r2, [r0, #12]
 8012400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012402:	4606      	mov	r6, r0
 8012404:	bb02      	cbnz	r2, 8012448 <_dtoa_r+0xa40>
 8012406:	4601      	mov	r1, r0
 8012408:	9802      	ldr	r0, [sp, #8]
 801240a:	f000 fb89 	bl	8012b20 <__mcmp>
 801240e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012410:	4602      	mov	r2, r0
 8012412:	4631      	mov	r1, r6
 8012414:	4648      	mov	r0, r9
 8012416:	920c      	str	r2, [sp, #48]	@ 0x30
 8012418:	9309      	str	r3, [sp, #36]	@ 0x24
 801241a:	f000 f94f 	bl	80126bc <_Bfree>
 801241e:	9b07      	ldr	r3, [sp, #28]
 8012420:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012422:	9e00      	ldr	r6, [sp, #0]
 8012424:	ea42 0103 	orr.w	r1, r2, r3
 8012428:	9b06      	ldr	r3, [sp, #24]
 801242a:	4319      	orrs	r1, r3
 801242c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801242e:	d10d      	bne.n	801244c <_dtoa_r+0xa44>
 8012430:	2b39      	cmp	r3, #57	@ 0x39
 8012432:	d027      	beq.n	8012484 <_dtoa_r+0xa7c>
 8012434:	9a04      	ldr	r2, [sp, #16]
 8012436:	2a00      	cmp	r2, #0
 8012438:	dd01      	ble.n	801243e <_dtoa_r+0xa36>
 801243a:	9b03      	ldr	r3, [sp, #12]
 801243c:	3331      	adds	r3, #49	@ 0x31
 801243e:	f88b 3000 	strb.w	r3, [fp]
 8012442:	e52e      	b.n	8011ea2 <_dtoa_r+0x49a>
 8012444:	4628      	mov	r0, r5
 8012446:	e7b9      	b.n	80123bc <_dtoa_r+0x9b4>
 8012448:	2201      	movs	r2, #1
 801244a:	e7e2      	b.n	8012412 <_dtoa_r+0xa0a>
 801244c:	9904      	ldr	r1, [sp, #16]
 801244e:	2900      	cmp	r1, #0
 8012450:	db04      	blt.n	801245c <_dtoa_r+0xa54>
 8012452:	9807      	ldr	r0, [sp, #28]
 8012454:	4301      	orrs	r1, r0
 8012456:	9806      	ldr	r0, [sp, #24]
 8012458:	4301      	orrs	r1, r0
 801245a:	d120      	bne.n	801249e <_dtoa_r+0xa96>
 801245c:	2a00      	cmp	r2, #0
 801245e:	ddee      	ble.n	801243e <_dtoa_r+0xa36>
 8012460:	9902      	ldr	r1, [sp, #8]
 8012462:	9300      	str	r3, [sp, #0]
 8012464:	2201      	movs	r2, #1
 8012466:	4648      	mov	r0, r9
 8012468:	f000 faee 	bl	8012a48 <__lshift>
 801246c:	4621      	mov	r1, r4
 801246e:	9002      	str	r0, [sp, #8]
 8012470:	f000 fb56 	bl	8012b20 <__mcmp>
 8012474:	2800      	cmp	r0, #0
 8012476:	9b00      	ldr	r3, [sp, #0]
 8012478:	dc02      	bgt.n	8012480 <_dtoa_r+0xa78>
 801247a:	d1e0      	bne.n	801243e <_dtoa_r+0xa36>
 801247c:	07da      	lsls	r2, r3, #31
 801247e:	d5de      	bpl.n	801243e <_dtoa_r+0xa36>
 8012480:	2b39      	cmp	r3, #57	@ 0x39
 8012482:	d1da      	bne.n	801243a <_dtoa_r+0xa32>
 8012484:	2339      	movs	r3, #57	@ 0x39
 8012486:	f88b 3000 	strb.w	r3, [fp]
 801248a:	4633      	mov	r3, r6
 801248c:	461e      	mov	r6, r3
 801248e:	3b01      	subs	r3, #1
 8012490:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012494:	2a39      	cmp	r2, #57	@ 0x39
 8012496:	d04e      	beq.n	8012536 <_dtoa_r+0xb2e>
 8012498:	3201      	adds	r2, #1
 801249a:	701a      	strb	r2, [r3, #0]
 801249c:	e501      	b.n	8011ea2 <_dtoa_r+0x49a>
 801249e:	2a00      	cmp	r2, #0
 80124a0:	dd03      	ble.n	80124aa <_dtoa_r+0xaa2>
 80124a2:	2b39      	cmp	r3, #57	@ 0x39
 80124a4:	d0ee      	beq.n	8012484 <_dtoa_r+0xa7c>
 80124a6:	3301      	adds	r3, #1
 80124a8:	e7c9      	b.n	801243e <_dtoa_r+0xa36>
 80124aa:	9a00      	ldr	r2, [sp, #0]
 80124ac:	9908      	ldr	r1, [sp, #32]
 80124ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80124b2:	428a      	cmp	r2, r1
 80124b4:	d028      	beq.n	8012508 <_dtoa_r+0xb00>
 80124b6:	9902      	ldr	r1, [sp, #8]
 80124b8:	2300      	movs	r3, #0
 80124ba:	220a      	movs	r2, #10
 80124bc:	4648      	mov	r0, r9
 80124be:	f000 f91f 	bl	8012700 <__multadd>
 80124c2:	42af      	cmp	r7, r5
 80124c4:	9002      	str	r0, [sp, #8]
 80124c6:	f04f 0300 	mov.w	r3, #0
 80124ca:	f04f 020a 	mov.w	r2, #10
 80124ce:	4639      	mov	r1, r7
 80124d0:	4648      	mov	r0, r9
 80124d2:	d107      	bne.n	80124e4 <_dtoa_r+0xadc>
 80124d4:	f000 f914 	bl	8012700 <__multadd>
 80124d8:	4607      	mov	r7, r0
 80124da:	4605      	mov	r5, r0
 80124dc:	9b00      	ldr	r3, [sp, #0]
 80124de:	3301      	adds	r3, #1
 80124e0:	9300      	str	r3, [sp, #0]
 80124e2:	e777      	b.n	80123d4 <_dtoa_r+0x9cc>
 80124e4:	f000 f90c 	bl	8012700 <__multadd>
 80124e8:	4629      	mov	r1, r5
 80124ea:	4607      	mov	r7, r0
 80124ec:	2300      	movs	r3, #0
 80124ee:	220a      	movs	r2, #10
 80124f0:	4648      	mov	r0, r9
 80124f2:	f000 f905 	bl	8012700 <__multadd>
 80124f6:	4605      	mov	r5, r0
 80124f8:	e7f0      	b.n	80124dc <_dtoa_r+0xad4>
 80124fa:	f1bb 0f00 	cmp.w	fp, #0
 80124fe:	bfcc      	ite	gt
 8012500:	465e      	movgt	r6, fp
 8012502:	2601      	movle	r6, #1
 8012504:	4456      	add	r6, sl
 8012506:	2700      	movs	r7, #0
 8012508:	9902      	ldr	r1, [sp, #8]
 801250a:	9300      	str	r3, [sp, #0]
 801250c:	2201      	movs	r2, #1
 801250e:	4648      	mov	r0, r9
 8012510:	f000 fa9a 	bl	8012a48 <__lshift>
 8012514:	4621      	mov	r1, r4
 8012516:	9002      	str	r0, [sp, #8]
 8012518:	f000 fb02 	bl	8012b20 <__mcmp>
 801251c:	2800      	cmp	r0, #0
 801251e:	dcb4      	bgt.n	801248a <_dtoa_r+0xa82>
 8012520:	d102      	bne.n	8012528 <_dtoa_r+0xb20>
 8012522:	9b00      	ldr	r3, [sp, #0]
 8012524:	07db      	lsls	r3, r3, #31
 8012526:	d4b0      	bmi.n	801248a <_dtoa_r+0xa82>
 8012528:	4633      	mov	r3, r6
 801252a:	461e      	mov	r6, r3
 801252c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012530:	2a30      	cmp	r2, #48	@ 0x30
 8012532:	d0fa      	beq.n	801252a <_dtoa_r+0xb22>
 8012534:	e4b5      	b.n	8011ea2 <_dtoa_r+0x49a>
 8012536:	459a      	cmp	sl, r3
 8012538:	d1a8      	bne.n	801248c <_dtoa_r+0xa84>
 801253a:	2331      	movs	r3, #49	@ 0x31
 801253c:	f108 0801 	add.w	r8, r8, #1
 8012540:	f88a 3000 	strb.w	r3, [sl]
 8012544:	e4ad      	b.n	8011ea2 <_dtoa_r+0x49a>
 8012546:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012548:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80125a4 <_dtoa_r+0xb9c>
 801254c:	b11b      	cbz	r3, 8012556 <_dtoa_r+0xb4e>
 801254e:	f10a 0308 	add.w	r3, sl, #8
 8012552:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8012554:	6013      	str	r3, [r2, #0]
 8012556:	4650      	mov	r0, sl
 8012558:	b017      	add	sp, #92	@ 0x5c
 801255a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801255e:	9b07      	ldr	r3, [sp, #28]
 8012560:	2b01      	cmp	r3, #1
 8012562:	f77f ae2e 	ble.w	80121c2 <_dtoa_r+0x7ba>
 8012566:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012568:	9308      	str	r3, [sp, #32]
 801256a:	2001      	movs	r0, #1
 801256c:	e64d      	b.n	801220a <_dtoa_r+0x802>
 801256e:	f1bb 0f00 	cmp.w	fp, #0
 8012572:	f77f aed9 	ble.w	8012328 <_dtoa_r+0x920>
 8012576:	4656      	mov	r6, sl
 8012578:	9802      	ldr	r0, [sp, #8]
 801257a:	4621      	mov	r1, r4
 801257c:	f7ff f9b9 	bl	80118f2 <quorem>
 8012580:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8012584:	f806 3b01 	strb.w	r3, [r6], #1
 8012588:	eba6 020a 	sub.w	r2, r6, sl
 801258c:	4593      	cmp	fp, r2
 801258e:	ddb4      	ble.n	80124fa <_dtoa_r+0xaf2>
 8012590:	9902      	ldr	r1, [sp, #8]
 8012592:	2300      	movs	r3, #0
 8012594:	220a      	movs	r2, #10
 8012596:	4648      	mov	r0, r9
 8012598:	f000 f8b2 	bl	8012700 <__multadd>
 801259c:	9002      	str	r0, [sp, #8]
 801259e:	e7eb      	b.n	8012578 <_dtoa_r+0xb70>
 80125a0:	08014559 	.word	0x08014559
 80125a4:	080144dd 	.word	0x080144dd

080125a8 <_free_r>:
 80125a8:	b538      	push	{r3, r4, r5, lr}
 80125aa:	4605      	mov	r5, r0
 80125ac:	2900      	cmp	r1, #0
 80125ae:	d041      	beq.n	8012634 <_free_r+0x8c>
 80125b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80125b4:	1f0c      	subs	r4, r1, #4
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	bfb8      	it	lt
 80125ba:	18e4      	addlt	r4, r4, r3
 80125bc:	f7fe f982 	bl	80108c4 <__malloc_lock>
 80125c0:	4a1d      	ldr	r2, [pc, #116]	@ (8012638 <_free_r+0x90>)
 80125c2:	6813      	ldr	r3, [r2, #0]
 80125c4:	b933      	cbnz	r3, 80125d4 <_free_r+0x2c>
 80125c6:	6063      	str	r3, [r4, #4]
 80125c8:	6014      	str	r4, [r2, #0]
 80125ca:	4628      	mov	r0, r5
 80125cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125d0:	f7fe b97e 	b.w	80108d0 <__malloc_unlock>
 80125d4:	42a3      	cmp	r3, r4
 80125d6:	d908      	bls.n	80125ea <_free_r+0x42>
 80125d8:	6820      	ldr	r0, [r4, #0]
 80125da:	1821      	adds	r1, r4, r0
 80125dc:	428b      	cmp	r3, r1
 80125de:	bf01      	itttt	eq
 80125e0:	6819      	ldreq	r1, [r3, #0]
 80125e2:	685b      	ldreq	r3, [r3, #4]
 80125e4:	1809      	addeq	r1, r1, r0
 80125e6:	6021      	streq	r1, [r4, #0]
 80125e8:	e7ed      	b.n	80125c6 <_free_r+0x1e>
 80125ea:	461a      	mov	r2, r3
 80125ec:	685b      	ldr	r3, [r3, #4]
 80125ee:	b10b      	cbz	r3, 80125f4 <_free_r+0x4c>
 80125f0:	42a3      	cmp	r3, r4
 80125f2:	d9fa      	bls.n	80125ea <_free_r+0x42>
 80125f4:	6811      	ldr	r1, [r2, #0]
 80125f6:	1850      	adds	r0, r2, r1
 80125f8:	42a0      	cmp	r0, r4
 80125fa:	d10b      	bne.n	8012614 <_free_r+0x6c>
 80125fc:	6820      	ldr	r0, [r4, #0]
 80125fe:	4401      	add	r1, r0
 8012600:	1850      	adds	r0, r2, r1
 8012602:	4283      	cmp	r3, r0
 8012604:	6011      	str	r1, [r2, #0]
 8012606:	d1e0      	bne.n	80125ca <_free_r+0x22>
 8012608:	6818      	ldr	r0, [r3, #0]
 801260a:	685b      	ldr	r3, [r3, #4]
 801260c:	6053      	str	r3, [r2, #4]
 801260e:	4408      	add	r0, r1
 8012610:	6010      	str	r0, [r2, #0]
 8012612:	e7da      	b.n	80125ca <_free_r+0x22>
 8012614:	d902      	bls.n	801261c <_free_r+0x74>
 8012616:	230c      	movs	r3, #12
 8012618:	602b      	str	r3, [r5, #0]
 801261a:	e7d6      	b.n	80125ca <_free_r+0x22>
 801261c:	6820      	ldr	r0, [r4, #0]
 801261e:	1821      	adds	r1, r4, r0
 8012620:	428b      	cmp	r3, r1
 8012622:	bf04      	itt	eq
 8012624:	6819      	ldreq	r1, [r3, #0]
 8012626:	685b      	ldreq	r3, [r3, #4]
 8012628:	6063      	str	r3, [r4, #4]
 801262a:	bf04      	itt	eq
 801262c:	1809      	addeq	r1, r1, r0
 801262e:	6021      	streq	r1, [r4, #0]
 8012630:	6054      	str	r4, [r2, #4]
 8012632:	e7ca      	b.n	80125ca <_free_r+0x22>
 8012634:	bd38      	pop	{r3, r4, r5, pc}
 8012636:	bf00      	nop
 8012638:	200055dc 	.word	0x200055dc

0801263c <_Balloc>:
 801263c:	b570      	push	{r4, r5, r6, lr}
 801263e:	69c6      	ldr	r6, [r0, #28]
 8012640:	4604      	mov	r4, r0
 8012642:	460d      	mov	r5, r1
 8012644:	b976      	cbnz	r6, 8012664 <_Balloc+0x28>
 8012646:	2010      	movs	r0, #16
 8012648:	f7fe f892 	bl	8010770 <malloc>
 801264c:	4602      	mov	r2, r0
 801264e:	61e0      	str	r0, [r4, #28]
 8012650:	b920      	cbnz	r0, 801265c <_Balloc+0x20>
 8012652:	4b18      	ldr	r3, [pc, #96]	@ (80126b4 <_Balloc+0x78>)
 8012654:	4818      	ldr	r0, [pc, #96]	@ (80126b8 <_Balloc+0x7c>)
 8012656:	216b      	movs	r1, #107	@ 0x6b
 8012658:	f000 fe0c 	bl	8013274 <__assert_func>
 801265c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012660:	6006      	str	r6, [r0, #0]
 8012662:	60c6      	str	r6, [r0, #12]
 8012664:	69e6      	ldr	r6, [r4, #28]
 8012666:	68f3      	ldr	r3, [r6, #12]
 8012668:	b183      	cbz	r3, 801268c <_Balloc+0x50>
 801266a:	69e3      	ldr	r3, [r4, #28]
 801266c:	68db      	ldr	r3, [r3, #12]
 801266e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012672:	b9b8      	cbnz	r0, 80126a4 <_Balloc+0x68>
 8012674:	2101      	movs	r1, #1
 8012676:	fa01 f605 	lsl.w	r6, r1, r5
 801267a:	1d72      	adds	r2, r6, #5
 801267c:	0092      	lsls	r2, r2, #2
 801267e:	4620      	mov	r0, r4
 8012680:	f000 fe16 	bl	80132b0 <_calloc_r>
 8012684:	b160      	cbz	r0, 80126a0 <_Balloc+0x64>
 8012686:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801268a:	e00e      	b.n	80126aa <_Balloc+0x6e>
 801268c:	2221      	movs	r2, #33	@ 0x21
 801268e:	2104      	movs	r1, #4
 8012690:	4620      	mov	r0, r4
 8012692:	f000 fe0d 	bl	80132b0 <_calloc_r>
 8012696:	69e3      	ldr	r3, [r4, #28]
 8012698:	60f0      	str	r0, [r6, #12]
 801269a:	68db      	ldr	r3, [r3, #12]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d1e4      	bne.n	801266a <_Balloc+0x2e>
 80126a0:	2000      	movs	r0, #0
 80126a2:	bd70      	pop	{r4, r5, r6, pc}
 80126a4:	6802      	ldr	r2, [r0, #0]
 80126a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80126aa:	2300      	movs	r3, #0
 80126ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80126b0:	e7f7      	b.n	80126a2 <_Balloc+0x66>
 80126b2:	bf00      	nop
 80126b4:	080144ea 	.word	0x080144ea
 80126b8:	0801456a 	.word	0x0801456a

080126bc <_Bfree>:
 80126bc:	b570      	push	{r4, r5, r6, lr}
 80126be:	69c6      	ldr	r6, [r0, #28]
 80126c0:	4605      	mov	r5, r0
 80126c2:	460c      	mov	r4, r1
 80126c4:	b976      	cbnz	r6, 80126e4 <_Bfree+0x28>
 80126c6:	2010      	movs	r0, #16
 80126c8:	f7fe f852 	bl	8010770 <malloc>
 80126cc:	4602      	mov	r2, r0
 80126ce:	61e8      	str	r0, [r5, #28]
 80126d0:	b920      	cbnz	r0, 80126dc <_Bfree+0x20>
 80126d2:	4b09      	ldr	r3, [pc, #36]	@ (80126f8 <_Bfree+0x3c>)
 80126d4:	4809      	ldr	r0, [pc, #36]	@ (80126fc <_Bfree+0x40>)
 80126d6:	218f      	movs	r1, #143	@ 0x8f
 80126d8:	f000 fdcc 	bl	8013274 <__assert_func>
 80126dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80126e0:	6006      	str	r6, [r0, #0]
 80126e2:	60c6      	str	r6, [r0, #12]
 80126e4:	b13c      	cbz	r4, 80126f6 <_Bfree+0x3a>
 80126e6:	69eb      	ldr	r3, [r5, #28]
 80126e8:	6862      	ldr	r2, [r4, #4]
 80126ea:	68db      	ldr	r3, [r3, #12]
 80126ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80126f0:	6021      	str	r1, [r4, #0]
 80126f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80126f6:	bd70      	pop	{r4, r5, r6, pc}
 80126f8:	080144ea 	.word	0x080144ea
 80126fc:	0801456a 	.word	0x0801456a

08012700 <__multadd>:
 8012700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012704:	690d      	ldr	r5, [r1, #16]
 8012706:	4607      	mov	r7, r0
 8012708:	460c      	mov	r4, r1
 801270a:	461e      	mov	r6, r3
 801270c:	f101 0c14 	add.w	ip, r1, #20
 8012710:	2000      	movs	r0, #0
 8012712:	f8dc 3000 	ldr.w	r3, [ip]
 8012716:	b299      	uxth	r1, r3
 8012718:	fb02 6101 	mla	r1, r2, r1, r6
 801271c:	0c1e      	lsrs	r6, r3, #16
 801271e:	0c0b      	lsrs	r3, r1, #16
 8012720:	fb02 3306 	mla	r3, r2, r6, r3
 8012724:	b289      	uxth	r1, r1
 8012726:	3001      	adds	r0, #1
 8012728:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801272c:	4285      	cmp	r5, r0
 801272e:	f84c 1b04 	str.w	r1, [ip], #4
 8012732:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012736:	dcec      	bgt.n	8012712 <__multadd+0x12>
 8012738:	b30e      	cbz	r6, 801277e <__multadd+0x7e>
 801273a:	68a3      	ldr	r3, [r4, #8]
 801273c:	42ab      	cmp	r3, r5
 801273e:	dc19      	bgt.n	8012774 <__multadd+0x74>
 8012740:	6861      	ldr	r1, [r4, #4]
 8012742:	4638      	mov	r0, r7
 8012744:	3101      	adds	r1, #1
 8012746:	f7ff ff79 	bl	801263c <_Balloc>
 801274a:	4680      	mov	r8, r0
 801274c:	b928      	cbnz	r0, 801275a <__multadd+0x5a>
 801274e:	4602      	mov	r2, r0
 8012750:	4b0c      	ldr	r3, [pc, #48]	@ (8012784 <__multadd+0x84>)
 8012752:	480d      	ldr	r0, [pc, #52]	@ (8012788 <__multadd+0x88>)
 8012754:	21ba      	movs	r1, #186	@ 0xba
 8012756:	f000 fd8d 	bl	8013274 <__assert_func>
 801275a:	6922      	ldr	r2, [r4, #16]
 801275c:	3202      	adds	r2, #2
 801275e:	f104 010c 	add.w	r1, r4, #12
 8012762:	0092      	lsls	r2, r2, #2
 8012764:	300c      	adds	r0, #12
 8012766:	f7ff f8b6 	bl	80118d6 <memcpy>
 801276a:	4621      	mov	r1, r4
 801276c:	4638      	mov	r0, r7
 801276e:	f7ff ffa5 	bl	80126bc <_Bfree>
 8012772:	4644      	mov	r4, r8
 8012774:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012778:	3501      	adds	r5, #1
 801277a:	615e      	str	r6, [r3, #20]
 801277c:	6125      	str	r5, [r4, #16]
 801277e:	4620      	mov	r0, r4
 8012780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012784:	08014559 	.word	0x08014559
 8012788:	0801456a 	.word	0x0801456a

0801278c <__hi0bits>:
 801278c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012790:	4603      	mov	r3, r0
 8012792:	bf36      	itet	cc
 8012794:	0403      	lslcc	r3, r0, #16
 8012796:	2000      	movcs	r0, #0
 8012798:	2010      	movcc	r0, #16
 801279a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801279e:	bf3c      	itt	cc
 80127a0:	021b      	lslcc	r3, r3, #8
 80127a2:	3008      	addcc	r0, #8
 80127a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80127a8:	bf3c      	itt	cc
 80127aa:	011b      	lslcc	r3, r3, #4
 80127ac:	3004      	addcc	r0, #4
 80127ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80127b2:	bf3c      	itt	cc
 80127b4:	009b      	lslcc	r3, r3, #2
 80127b6:	3002      	addcc	r0, #2
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	db05      	blt.n	80127c8 <__hi0bits+0x3c>
 80127bc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80127c0:	f100 0001 	add.w	r0, r0, #1
 80127c4:	bf08      	it	eq
 80127c6:	2020      	moveq	r0, #32
 80127c8:	4770      	bx	lr

080127ca <__lo0bits>:
 80127ca:	6803      	ldr	r3, [r0, #0]
 80127cc:	4602      	mov	r2, r0
 80127ce:	f013 0007 	ands.w	r0, r3, #7
 80127d2:	d00b      	beq.n	80127ec <__lo0bits+0x22>
 80127d4:	07d9      	lsls	r1, r3, #31
 80127d6:	d421      	bmi.n	801281c <__lo0bits+0x52>
 80127d8:	0798      	lsls	r0, r3, #30
 80127da:	bf49      	itett	mi
 80127dc:	085b      	lsrmi	r3, r3, #1
 80127de:	089b      	lsrpl	r3, r3, #2
 80127e0:	2001      	movmi	r0, #1
 80127e2:	6013      	strmi	r3, [r2, #0]
 80127e4:	bf5c      	itt	pl
 80127e6:	6013      	strpl	r3, [r2, #0]
 80127e8:	2002      	movpl	r0, #2
 80127ea:	4770      	bx	lr
 80127ec:	b299      	uxth	r1, r3
 80127ee:	b909      	cbnz	r1, 80127f4 <__lo0bits+0x2a>
 80127f0:	0c1b      	lsrs	r3, r3, #16
 80127f2:	2010      	movs	r0, #16
 80127f4:	b2d9      	uxtb	r1, r3
 80127f6:	b909      	cbnz	r1, 80127fc <__lo0bits+0x32>
 80127f8:	3008      	adds	r0, #8
 80127fa:	0a1b      	lsrs	r3, r3, #8
 80127fc:	0719      	lsls	r1, r3, #28
 80127fe:	bf04      	itt	eq
 8012800:	091b      	lsreq	r3, r3, #4
 8012802:	3004      	addeq	r0, #4
 8012804:	0799      	lsls	r1, r3, #30
 8012806:	bf04      	itt	eq
 8012808:	089b      	lsreq	r3, r3, #2
 801280a:	3002      	addeq	r0, #2
 801280c:	07d9      	lsls	r1, r3, #31
 801280e:	d403      	bmi.n	8012818 <__lo0bits+0x4e>
 8012810:	085b      	lsrs	r3, r3, #1
 8012812:	f100 0001 	add.w	r0, r0, #1
 8012816:	d003      	beq.n	8012820 <__lo0bits+0x56>
 8012818:	6013      	str	r3, [r2, #0]
 801281a:	4770      	bx	lr
 801281c:	2000      	movs	r0, #0
 801281e:	4770      	bx	lr
 8012820:	2020      	movs	r0, #32
 8012822:	4770      	bx	lr

08012824 <__i2b>:
 8012824:	b510      	push	{r4, lr}
 8012826:	460c      	mov	r4, r1
 8012828:	2101      	movs	r1, #1
 801282a:	f7ff ff07 	bl	801263c <_Balloc>
 801282e:	4602      	mov	r2, r0
 8012830:	b928      	cbnz	r0, 801283e <__i2b+0x1a>
 8012832:	4b05      	ldr	r3, [pc, #20]	@ (8012848 <__i2b+0x24>)
 8012834:	4805      	ldr	r0, [pc, #20]	@ (801284c <__i2b+0x28>)
 8012836:	f240 1145 	movw	r1, #325	@ 0x145
 801283a:	f000 fd1b 	bl	8013274 <__assert_func>
 801283e:	2301      	movs	r3, #1
 8012840:	6144      	str	r4, [r0, #20]
 8012842:	6103      	str	r3, [r0, #16]
 8012844:	bd10      	pop	{r4, pc}
 8012846:	bf00      	nop
 8012848:	08014559 	.word	0x08014559
 801284c:	0801456a 	.word	0x0801456a

08012850 <__multiply>:
 8012850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012854:	4617      	mov	r7, r2
 8012856:	690a      	ldr	r2, [r1, #16]
 8012858:	693b      	ldr	r3, [r7, #16]
 801285a:	429a      	cmp	r2, r3
 801285c:	bfa8      	it	ge
 801285e:	463b      	movge	r3, r7
 8012860:	4689      	mov	r9, r1
 8012862:	bfa4      	itt	ge
 8012864:	460f      	movge	r7, r1
 8012866:	4699      	movge	r9, r3
 8012868:	693d      	ldr	r5, [r7, #16]
 801286a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801286e:	68bb      	ldr	r3, [r7, #8]
 8012870:	6879      	ldr	r1, [r7, #4]
 8012872:	eb05 060a 	add.w	r6, r5, sl
 8012876:	42b3      	cmp	r3, r6
 8012878:	b085      	sub	sp, #20
 801287a:	bfb8      	it	lt
 801287c:	3101      	addlt	r1, #1
 801287e:	f7ff fedd 	bl	801263c <_Balloc>
 8012882:	b930      	cbnz	r0, 8012892 <__multiply+0x42>
 8012884:	4602      	mov	r2, r0
 8012886:	4b41      	ldr	r3, [pc, #260]	@ (801298c <__multiply+0x13c>)
 8012888:	4841      	ldr	r0, [pc, #260]	@ (8012990 <__multiply+0x140>)
 801288a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801288e:	f000 fcf1 	bl	8013274 <__assert_func>
 8012892:	f100 0414 	add.w	r4, r0, #20
 8012896:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801289a:	4623      	mov	r3, r4
 801289c:	2200      	movs	r2, #0
 801289e:	4573      	cmp	r3, lr
 80128a0:	d320      	bcc.n	80128e4 <__multiply+0x94>
 80128a2:	f107 0814 	add.w	r8, r7, #20
 80128a6:	f109 0114 	add.w	r1, r9, #20
 80128aa:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80128ae:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80128b2:	9302      	str	r3, [sp, #8]
 80128b4:	1beb      	subs	r3, r5, r7
 80128b6:	3b15      	subs	r3, #21
 80128b8:	f023 0303 	bic.w	r3, r3, #3
 80128bc:	3304      	adds	r3, #4
 80128be:	3715      	adds	r7, #21
 80128c0:	42bd      	cmp	r5, r7
 80128c2:	bf38      	it	cc
 80128c4:	2304      	movcc	r3, #4
 80128c6:	9301      	str	r3, [sp, #4]
 80128c8:	9b02      	ldr	r3, [sp, #8]
 80128ca:	9103      	str	r1, [sp, #12]
 80128cc:	428b      	cmp	r3, r1
 80128ce:	d80c      	bhi.n	80128ea <__multiply+0x9a>
 80128d0:	2e00      	cmp	r6, #0
 80128d2:	dd03      	ble.n	80128dc <__multiply+0x8c>
 80128d4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d055      	beq.n	8012988 <__multiply+0x138>
 80128dc:	6106      	str	r6, [r0, #16]
 80128de:	b005      	add	sp, #20
 80128e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128e4:	f843 2b04 	str.w	r2, [r3], #4
 80128e8:	e7d9      	b.n	801289e <__multiply+0x4e>
 80128ea:	f8b1 a000 	ldrh.w	sl, [r1]
 80128ee:	f1ba 0f00 	cmp.w	sl, #0
 80128f2:	d01f      	beq.n	8012934 <__multiply+0xe4>
 80128f4:	46c4      	mov	ip, r8
 80128f6:	46a1      	mov	r9, r4
 80128f8:	2700      	movs	r7, #0
 80128fa:	f85c 2b04 	ldr.w	r2, [ip], #4
 80128fe:	f8d9 3000 	ldr.w	r3, [r9]
 8012902:	fa1f fb82 	uxth.w	fp, r2
 8012906:	b29b      	uxth	r3, r3
 8012908:	fb0a 330b 	mla	r3, sl, fp, r3
 801290c:	443b      	add	r3, r7
 801290e:	f8d9 7000 	ldr.w	r7, [r9]
 8012912:	0c12      	lsrs	r2, r2, #16
 8012914:	0c3f      	lsrs	r7, r7, #16
 8012916:	fb0a 7202 	mla	r2, sl, r2, r7
 801291a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801291e:	b29b      	uxth	r3, r3
 8012920:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012924:	4565      	cmp	r5, ip
 8012926:	f849 3b04 	str.w	r3, [r9], #4
 801292a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801292e:	d8e4      	bhi.n	80128fa <__multiply+0xaa>
 8012930:	9b01      	ldr	r3, [sp, #4]
 8012932:	50e7      	str	r7, [r4, r3]
 8012934:	9b03      	ldr	r3, [sp, #12]
 8012936:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801293a:	3104      	adds	r1, #4
 801293c:	f1b9 0f00 	cmp.w	r9, #0
 8012940:	d020      	beq.n	8012984 <__multiply+0x134>
 8012942:	6823      	ldr	r3, [r4, #0]
 8012944:	4647      	mov	r7, r8
 8012946:	46a4      	mov	ip, r4
 8012948:	f04f 0a00 	mov.w	sl, #0
 801294c:	f8b7 b000 	ldrh.w	fp, [r7]
 8012950:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8012954:	fb09 220b 	mla	r2, r9, fp, r2
 8012958:	4452      	add	r2, sl
 801295a:	b29b      	uxth	r3, r3
 801295c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012960:	f84c 3b04 	str.w	r3, [ip], #4
 8012964:	f857 3b04 	ldr.w	r3, [r7], #4
 8012968:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801296c:	f8bc 3000 	ldrh.w	r3, [ip]
 8012970:	fb09 330a 	mla	r3, r9, sl, r3
 8012974:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8012978:	42bd      	cmp	r5, r7
 801297a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801297e:	d8e5      	bhi.n	801294c <__multiply+0xfc>
 8012980:	9a01      	ldr	r2, [sp, #4]
 8012982:	50a3      	str	r3, [r4, r2]
 8012984:	3404      	adds	r4, #4
 8012986:	e79f      	b.n	80128c8 <__multiply+0x78>
 8012988:	3e01      	subs	r6, #1
 801298a:	e7a1      	b.n	80128d0 <__multiply+0x80>
 801298c:	08014559 	.word	0x08014559
 8012990:	0801456a 	.word	0x0801456a

08012994 <__pow5mult>:
 8012994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012998:	4615      	mov	r5, r2
 801299a:	f012 0203 	ands.w	r2, r2, #3
 801299e:	4607      	mov	r7, r0
 80129a0:	460e      	mov	r6, r1
 80129a2:	d007      	beq.n	80129b4 <__pow5mult+0x20>
 80129a4:	4c25      	ldr	r4, [pc, #148]	@ (8012a3c <__pow5mult+0xa8>)
 80129a6:	3a01      	subs	r2, #1
 80129a8:	2300      	movs	r3, #0
 80129aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80129ae:	f7ff fea7 	bl	8012700 <__multadd>
 80129b2:	4606      	mov	r6, r0
 80129b4:	10ad      	asrs	r5, r5, #2
 80129b6:	d03d      	beq.n	8012a34 <__pow5mult+0xa0>
 80129b8:	69fc      	ldr	r4, [r7, #28]
 80129ba:	b97c      	cbnz	r4, 80129dc <__pow5mult+0x48>
 80129bc:	2010      	movs	r0, #16
 80129be:	f7fd fed7 	bl	8010770 <malloc>
 80129c2:	4602      	mov	r2, r0
 80129c4:	61f8      	str	r0, [r7, #28]
 80129c6:	b928      	cbnz	r0, 80129d4 <__pow5mult+0x40>
 80129c8:	4b1d      	ldr	r3, [pc, #116]	@ (8012a40 <__pow5mult+0xac>)
 80129ca:	481e      	ldr	r0, [pc, #120]	@ (8012a44 <__pow5mult+0xb0>)
 80129cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80129d0:	f000 fc50 	bl	8013274 <__assert_func>
 80129d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80129d8:	6004      	str	r4, [r0, #0]
 80129da:	60c4      	str	r4, [r0, #12]
 80129dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80129e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80129e4:	b94c      	cbnz	r4, 80129fa <__pow5mult+0x66>
 80129e6:	f240 2171 	movw	r1, #625	@ 0x271
 80129ea:	4638      	mov	r0, r7
 80129ec:	f7ff ff1a 	bl	8012824 <__i2b>
 80129f0:	2300      	movs	r3, #0
 80129f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80129f6:	4604      	mov	r4, r0
 80129f8:	6003      	str	r3, [r0, #0]
 80129fa:	f04f 0900 	mov.w	r9, #0
 80129fe:	07eb      	lsls	r3, r5, #31
 8012a00:	d50a      	bpl.n	8012a18 <__pow5mult+0x84>
 8012a02:	4631      	mov	r1, r6
 8012a04:	4622      	mov	r2, r4
 8012a06:	4638      	mov	r0, r7
 8012a08:	f7ff ff22 	bl	8012850 <__multiply>
 8012a0c:	4631      	mov	r1, r6
 8012a0e:	4680      	mov	r8, r0
 8012a10:	4638      	mov	r0, r7
 8012a12:	f7ff fe53 	bl	80126bc <_Bfree>
 8012a16:	4646      	mov	r6, r8
 8012a18:	106d      	asrs	r5, r5, #1
 8012a1a:	d00b      	beq.n	8012a34 <__pow5mult+0xa0>
 8012a1c:	6820      	ldr	r0, [r4, #0]
 8012a1e:	b938      	cbnz	r0, 8012a30 <__pow5mult+0x9c>
 8012a20:	4622      	mov	r2, r4
 8012a22:	4621      	mov	r1, r4
 8012a24:	4638      	mov	r0, r7
 8012a26:	f7ff ff13 	bl	8012850 <__multiply>
 8012a2a:	6020      	str	r0, [r4, #0]
 8012a2c:	f8c0 9000 	str.w	r9, [r0]
 8012a30:	4604      	mov	r4, r0
 8012a32:	e7e4      	b.n	80129fe <__pow5mult+0x6a>
 8012a34:	4630      	mov	r0, r6
 8012a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a3a:	bf00      	nop
 8012a3c:	0801461c 	.word	0x0801461c
 8012a40:	080144ea 	.word	0x080144ea
 8012a44:	0801456a 	.word	0x0801456a

08012a48 <__lshift>:
 8012a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a4c:	460c      	mov	r4, r1
 8012a4e:	6849      	ldr	r1, [r1, #4]
 8012a50:	6923      	ldr	r3, [r4, #16]
 8012a52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012a56:	68a3      	ldr	r3, [r4, #8]
 8012a58:	4607      	mov	r7, r0
 8012a5a:	4691      	mov	r9, r2
 8012a5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012a60:	f108 0601 	add.w	r6, r8, #1
 8012a64:	42b3      	cmp	r3, r6
 8012a66:	db0b      	blt.n	8012a80 <__lshift+0x38>
 8012a68:	4638      	mov	r0, r7
 8012a6a:	f7ff fde7 	bl	801263c <_Balloc>
 8012a6e:	4605      	mov	r5, r0
 8012a70:	b948      	cbnz	r0, 8012a86 <__lshift+0x3e>
 8012a72:	4602      	mov	r2, r0
 8012a74:	4b28      	ldr	r3, [pc, #160]	@ (8012b18 <__lshift+0xd0>)
 8012a76:	4829      	ldr	r0, [pc, #164]	@ (8012b1c <__lshift+0xd4>)
 8012a78:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012a7c:	f000 fbfa 	bl	8013274 <__assert_func>
 8012a80:	3101      	adds	r1, #1
 8012a82:	005b      	lsls	r3, r3, #1
 8012a84:	e7ee      	b.n	8012a64 <__lshift+0x1c>
 8012a86:	2300      	movs	r3, #0
 8012a88:	f100 0114 	add.w	r1, r0, #20
 8012a8c:	f100 0210 	add.w	r2, r0, #16
 8012a90:	4618      	mov	r0, r3
 8012a92:	4553      	cmp	r3, sl
 8012a94:	db33      	blt.n	8012afe <__lshift+0xb6>
 8012a96:	6920      	ldr	r0, [r4, #16]
 8012a98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012a9c:	f104 0314 	add.w	r3, r4, #20
 8012aa0:	f019 091f 	ands.w	r9, r9, #31
 8012aa4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012aa8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012aac:	d02b      	beq.n	8012b06 <__lshift+0xbe>
 8012aae:	f1c9 0e20 	rsb	lr, r9, #32
 8012ab2:	468a      	mov	sl, r1
 8012ab4:	2200      	movs	r2, #0
 8012ab6:	6818      	ldr	r0, [r3, #0]
 8012ab8:	fa00 f009 	lsl.w	r0, r0, r9
 8012abc:	4310      	orrs	r0, r2
 8012abe:	f84a 0b04 	str.w	r0, [sl], #4
 8012ac2:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ac6:	459c      	cmp	ip, r3
 8012ac8:	fa22 f20e 	lsr.w	r2, r2, lr
 8012acc:	d8f3      	bhi.n	8012ab6 <__lshift+0x6e>
 8012ace:	ebac 0304 	sub.w	r3, ip, r4
 8012ad2:	3b15      	subs	r3, #21
 8012ad4:	f023 0303 	bic.w	r3, r3, #3
 8012ad8:	3304      	adds	r3, #4
 8012ada:	f104 0015 	add.w	r0, r4, #21
 8012ade:	4560      	cmp	r0, ip
 8012ae0:	bf88      	it	hi
 8012ae2:	2304      	movhi	r3, #4
 8012ae4:	50ca      	str	r2, [r1, r3]
 8012ae6:	b10a      	cbz	r2, 8012aec <__lshift+0xa4>
 8012ae8:	f108 0602 	add.w	r6, r8, #2
 8012aec:	3e01      	subs	r6, #1
 8012aee:	4638      	mov	r0, r7
 8012af0:	612e      	str	r6, [r5, #16]
 8012af2:	4621      	mov	r1, r4
 8012af4:	f7ff fde2 	bl	80126bc <_Bfree>
 8012af8:	4628      	mov	r0, r5
 8012afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012afe:	f842 0f04 	str.w	r0, [r2, #4]!
 8012b02:	3301      	adds	r3, #1
 8012b04:	e7c5      	b.n	8012a92 <__lshift+0x4a>
 8012b06:	3904      	subs	r1, #4
 8012b08:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012b10:	459c      	cmp	ip, r3
 8012b12:	d8f9      	bhi.n	8012b08 <__lshift+0xc0>
 8012b14:	e7ea      	b.n	8012aec <__lshift+0xa4>
 8012b16:	bf00      	nop
 8012b18:	08014559 	.word	0x08014559
 8012b1c:	0801456a 	.word	0x0801456a

08012b20 <__mcmp>:
 8012b20:	690a      	ldr	r2, [r1, #16]
 8012b22:	4603      	mov	r3, r0
 8012b24:	6900      	ldr	r0, [r0, #16]
 8012b26:	1a80      	subs	r0, r0, r2
 8012b28:	b530      	push	{r4, r5, lr}
 8012b2a:	d10e      	bne.n	8012b4a <__mcmp+0x2a>
 8012b2c:	3314      	adds	r3, #20
 8012b2e:	3114      	adds	r1, #20
 8012b30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012b34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012b38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012b3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012b40:	4295      	cmp	r5, r2
 8012b42:	d003      	beq.n	8012b4c <__mcmp+0x2c>
 8012b44:	d205      	bcs.n	8012b52 <__mcmp+0x32>
 8012b46:	f04f 30ff 	mov.w	r0, #4294967295
 8012b4a:	bd30      	pop	{r4, r5, pc}
 8012b4c:	42a3      	cmp	r3, r4
 8012b4e:	d3f3      	bcc.n	8012b38 <__mcmp+0x18>
 8012b50:	e7fb      	b.n	8012b4a <__mcmp+0x2a>
 8012b52:	2001      	movs	r0, #1
 8012b54:	e7f9      	b.n	8012b4a <__mcmp+0x2a>
	...

08012b58 <__mdiff>:
 8012b58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b5c:	4689      	mov	r9, r1
 8012b5e:	4606      	mov	r6, r0
 8012b60:	4611      	mov	r1, r2
 8012b62:	4648      	mov	r0, r9
 8012b64:	4614      	mov	r4, r2
 8012b66:	f7ff ffdb 	bl	8012b20 <__mcmp>
 8012b6a:	1e05      	subs	r5, r0, #0
 8012b6c:	d112      	bne.n	8012b94 <__mdiff+0x3c>
 8012b6e:	4629      	mov	r1, r5
 8012b70:	4630      	mov	r0, r6
 8012b72:	f7ff fd63 	bl	801263c <_Balloc>
 8012b76:	4602      	mov	r2, r0
 8012b78:	b928      	cbnz	r0, 8012b86 <__mdiff+0x2e>
 8012b7a:	4b3f      	ldr	r3, [pc, #252]	@ (8012c78 <__mdiff+0x120>)
 8012b7c:	f240 2137 	movw	r1, #567	@ 0x237
 8012b80:	483e      	ldr	r0, [pc, #248]	@ (8012c7c <__mdiff+0x124>)
 8012b82:	f000 fb77 	bl	8013274 <__assert_func>
 8012b86:	2301      	movs	r3, #1
 8012b88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012b8c:	4610      	mov	r0, r2
 8012b8e:	b003      	add	sp, #12
 8012b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b94:	bfbc      	itt	lt
 8012b96:	464b      	movlt	r3, r9
 8012b98:	46a1      	movlt	r9, r4
 8012b9a:	4630      	mov	r0, r6
 8012b9c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012ba0:	bfba      	itte	lt
 8012ba2:	461c      	movlt	r4, r3
 8012ba4:	2501      	movlt	r5, #1
 8012ba6:	2500      	movge	r5, #0
 8012ba8:	f7ff fd48 	bl	801263c <_Balloc>
 8012bac:	4602      	mov	r2, r0
 8012bae:	b918      	cbnz	r0, 8012bb8 <__mdiff+0x60>
 8012bb0:	4b31      	ldr	r3, [pc, #196]	@ (8012c78 <__mdiff+0x120>)
 8012bb2:	f240 2145 	movw	r1, #581	@ 0x245
 8012bb6:	e7e3      	b.n	8012b80 <__mdiff+0x28>
 8012bb8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012bbc:	6926      	ldr	r6, [r4, #16]
 8012bbe:	60c5      	str	r5, [r0, #12]
 8012bc0:	f109 0310 	add.w	r3, r9, #16
 8012bc4:	f109 0514 	add.w	r5, r9, #20
 8012bc8:	f104 0e14 	add.w	lr, r4, #20
 8012bcc:	f100 0b14 	add.w	fp, r0, #20
 8012bd0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012bd4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012bd8:	9301      	str	r3, [sp, #4]
 8012bda:	46d9      	mov	r9, fp
 8012bdc:	f04f 0c00 	mov.w	ip, #0
 8012be0:	9b01      	ldr	r3, [sp, #4]
 8012be2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012be6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012bea:	9301      	str	r3, [sp, #4]
 8012bec:	fa1f f38a 	uxth.w	r3, sl
 8012bf0:	4619      	mov	r1, r3
 8012bf2:	b283      	uxth	r3, r0
 8012bf4:	1acb      	subs	r3, r1, r3
 8012bf6:	0c00      	lsrs	r0, r0, #16
 8012bf8:	4463      	add	r3, ip
 8012bfa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012bfe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012c02:	b29b      	uxth	r3, r3
 8012c04:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012c08:	4576      	cmp	r6, lr
 8012c0a:	f849 3b04 	str.w	r3, [r9], #4
 8012c0e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012c12:	d8e5      	bhi.n	8012be0 <__mdiff+0x88>
 8012c14:	1b33      	subs	r3, r6, r4
 8012c16:	3b15      	subs	r3, #21
 8012c18:	f023 0303 	bic.w	r3, r3, #3
 8012c1c:	3415      	adds	r4, #21
 8012c1e:	3304      	adds	r3, #4
 8012c20:	42a6      	cmp	r6, r4
 8012c22:	bf38      	it	cc
 8012c24:	2304      	movcc	r3, #4
 8012c26:	441d      	add	r5, r3
 8012c28:	445b      	add	r3, fp
 8012c2a:	461e      	mov	r6, r3
 8012c2c:	462c      	mov	r4, r5
 8012c2e:	4544      	cmp	r4, r8
 8012c30:	d30e      	bcc.n	8012c50 <__mdiff+0xf8>
 8012c32:	f108 0103 	add.w	r1, r8, #3
 8012c36:	1b49      	subs	r1, r1, r5
 8012c38:	f021 0103 	bic.w	r1, r1, #3
 8012c3c:	3d03      	subs	r5, #3
 8012c3e:	45a8      	cmp	r8, r5
 8012c40:	bf38      	it	cc
 8012c42:	2100      	movcc	r1, #0
 8012c44:	440b      	add	r3, r1
 8012c46:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012c4a:	b191      	cbz	r1, 8012c72 <__mdiff+0x11a>
 8012c4c:	6117      	str	r7, [r2, #16]
 8012c4e:	e79d      	b.n	8012b8c <__mdiff+0x34>
 8012c50:	f854 1b04 	ldr.w	r1, [r4], #4
 8012c54:	46e6      	mov	lr, ip
 8012c56:	0c08      	lsrs	r0, r1, #16
 8012c58:	fa1c fc81 	uxtah	ip, ip, r1
 8012c5c:	4471      	add	r1, lr
 8012c5e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012c62:	b289      	uxth	r1, r1
 8012c64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012c68:	f846 1b04 	str.w	r1, [r6], #4
 8012c6c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012c70:	e7dd      	b.n	8012c2e <__mdiff+0xd6>
 8012c72:	3f01      	subs	r7, #1
 8012c74:	e7e7      	b.n	8012c46 <__mdiff+0xee>
 8012c76:	bf00      	nop
 8012c78:	08014559 	.word	0x08014559
 8012c7c:	0801456a 	.word	0x0801456a

08012c80 <__d2b>:
 8012c80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012c84:	460f      	mov	r7, r1
 8012c86:	2101      	movs	r1, #1
 8012c88:	ec59 8b10 	vmov	r8, r9, d0
 8012c8c:	4616      	mov	r6, r2
 8012c8e:	f7ff fcd5 	bl	801263c <_Balloc>
 8012c92:	4604      	mov	r4, r0
 8012c94:	b930      	cbnz	r0, 8012ca4 <__d2b+0x24>
 8012c96:	4602      	mov	r2, r0
 8012c98:	4b23      	ldr	r3, [pc, #140]	@ (8012d28 <__d2b+0xa8>)
 8012c9a:	4824      	ldr	r0, [pc, #144]	@ (8012d2c <__d2b+0xac>)
 8012c9c:	f240 310f 	movw	r1, #783	@ 0x30f
 8012ca0:	f000 fae8 	bl	8013274 <__assert_func>
 8012ca4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012ca8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012cac:	b10d      	cbz	r5, 8012cb2 <__d2b+0x32>
 8012cae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012cb2:	9301      	str	r3, [sp, #4]
 8012cb4:	f1b8 0300 	subs.w	r3, r8, #0
 8012cb8:	d023      	beq.n	8012d02 <__d2b+0x82>
 8012cba:	4668      	mov	r0, sp
 8012cbc:	9300      	str	r3, [sp, #0]
 8012cbe:	f7ff fd84 	bl	80127ca <__lo0bits>
 8012cc2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012cc6:	b1d0      	cbz	r0, 8012cfe <__d2b+0x7e>
 8012cc8:	f1c0 0320 	rsb	r3, r0, #32
 8012ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8012cd0:	430b      	orrs	r3, r1
 8012cd2:	40c2      	lsrs	r2, r0
 8012cd4:	6163      	str	r3, [r4, #20]
 8012cd6:	9201      	str	r2, [sp, #4]
 8012cd8:	9b01      	ldr	r3, [sp, #4]
 8012cda:	61a3      	str	r3, [r4, #24]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	bf0c      	ite	eq
 8012ce0:	2201      	moveq	r2, #1
 8012ce2:	2202      	movne	r2, #2
 8012ce4:	6122      	str	r2, [r4, #16]
 8012ce6:	b1a5      	cbz	r5, 8012d12 <__d2b+0x92>
 8012ce8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012cec:	4405      	add	r5, r0
 8012cee:	603d      	str	r5, [r7, #0]
 8012cf0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012cf4:	6030      	str	r0, [r6, #0]
 8012cf6:	4620      	mov	r0, r4
 8012cf8:	b003      	add	sp, #12
 8012cfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012cfe:	6161      	str	r1, [r4, #20]
 8012d00:	e7ea      	b.n	8012cd8 <__d2b+0x58>
 8012d02:	a801      	add	r0, sp, #4
 8012d04:	f7ff fd61 	bl	80127ca <__lo0bits>
 8012d08:	9b01      	ldr	r3, [sp, #4]
 8012d0a:	6163      	str	r3, [r4, #20]
 8012d0c:	3020      	adds	r0, #32
 8012d0e:	2201      	movs	r2, #1
 8012d10:	e7e8      	b.n	8012ce4 <__d2b+0x64>
 8012d12:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012d16:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012d1a:	6038      	str	r0, [r7, #0]
 8012d1c:	6918      	ldr	r0, [r3, #16]
 8012d1e:	f7ff fd35 	bl	801278c <__hi0bits>
 8012d22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012d26:	e7e5      	b.n	8012cf4 <__d2b+0x74>
 8012d28:	08014559 	.word	0x08014559
 8012d2c:	0801456a 	.word	0x0801456a

08012d30 <__ssputs_r>:
 8012d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d34:	688e      	ldr	r6, [r1, #8]
 8012d36:	461f      	mov	r7, r3
 8012d38:	42be      	cmp	r6, r7
 8012d3a:	680b      	ldr	r3, [r1, #0]
 8012d3c:	4682      	mov	sl, r0
 8012d3e:	460c      	mov	r4, r1
 8012d40:	4690      	mov	r8, r2
 8012d42:	d82d      	bhi.n	8012da0 <__ssputs_r+0x70>
 8012d44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012d48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012d4c:	d026      	beq.n	8012d9c <__ssputs_r+0x6c>
 8012d4e:	6965      	ldr	r5, [r4, #20]
 8012d50:	6909      	ldr	r1, [r1, #16]
 8012d52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012d56:	eba3 0901 	sub.w	r9, r3, r1
 8012d5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012d5e:	1c7b      	adds	r3, r7, #1
 8012d60:	444b      	add	r3, r9
 8012d62:	106d      	asrs	r5, r5, #1
 8012d64:	429d      	cmp	r5, r3
 8012d66:	bf38      	it	cc
 8012d68:	461d      	movcc	r5, r3
 8012d6a:	0553      	lsls	r3, r2, #21
 8012d6c:	d527      	bpl.n	8012dbe <__ssputs_r+0x8e>
 8012d6e:	4629      	mov	r1, r5
 8012d70:	f7fd fd28 	bl	80107c4 <_malloc_r>
 8012d74:	4606      	mov	r6, r0
 8012d76:	b360      	cbz	r0, 8012dd2 <__ssputs_r+0xa2>
 8012d78:	6921      	ldr	r1, [r4, #16]
 8012d7a:	464a      	mov	r2, r9
 8012d7c:	f7fe fdab 	bl	80118d6 <memcpy>
 8012d80:	89a3      	ldrh	r3, [r4, #12]
 8012d82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012d86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012d8a:	81a3      	strh	r3, [r4, #12]
 8012d8c:	6126      	str	r6, [r4, #16]
 8012d8e:	6165      	str	r5, [r4, #20]
 8012d90:	444e      	add	r6, r9
 8012d92:	eba5 0509 	sub.w	r5, r5, r9
 8012d96:	6026      	str	r6, [r4, #0]
 8012d98:	60a5      	str	r5, [r4, #8]
 8012d9a:	463e      	mov	r6, r7
 8012d9c:	42be      	cmp	r6, r7
 8012d9e:	d900      	bls.n	8012da2 <__ssputs_r+0x72>
 8012da0:	463e      	mov	r6, r7
 8012da2:	6820      	ldr	r0, [r4, #0]
 8012da4:	4632      	mov	r2, r6
 8012da6:	4641      	mov	r1, r8
 8012da8:	f000 fa28 	bl	80131fc <memmove>
 8012dac:	68a3      	ldr	r3, [r4, #8]
 8012dae:	1b9b      	subs	r3, r3, r6
 8012db0:	60a3      	str	r3, [r4, #8]
 8012db2:	6823      	ldr	r3, [r4, #0]
 8012db4:	4433      	add	r3, r6
 8012db6:	6023      	str	r3, [r4, #0]
 8012db8:	2000      	movs	r0, #0
 8012dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012dbe:	462a      	mov	r2, r5
 8012dc0:	f000 fa9c 	bl	80132fc <_realloc_r>
 8012dc4:	4606      	mov	r6, r0
 8012dc6:	2800      	cmp	r0, #0
 8012dc8:	d1e0      	bne.n	8012d8c <__ssputs_r+0x5c>
 8012dca:	6921      	ldr	r1, [r4, #16]
 8012dcc:	4650      	mov	r0, sl
 8012dce:	f7ff fbeb 	bl	80125a8 <_free_r>
 8012dd2:	230c      	movs	r3, #12
 8012dd4:	f8ca 3000 	str.w	r3, [sl]
 8012dd8:	89a3      	ldrh	r3, [r4, #12]
 8012dda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012dde:	81a3      	strh	r3, [r4, #12]
 8012de0:	f04f 30ff 	mov.w	r0, #4294967295
 8012de4:	e7e9      	b.n	8012dba <__ssputs_r+0x8a>
	...

08012de8 <_svfiprintf_r>:
 8012de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dec:	4698      	mov	r8, r3
 8012dee:	898b      	ldrh	r3, [r1, #12]
 8012df0:	061b      	lsls	r3, r3, #24
 8012df2:	b09d      	sub	sp, #116	@ 0x74
 8012df4:	4607      	mov	r7, r0
 8012df6:	460d      	mov	r5, r1
 8012df8:	4614      	mov	r4, r2
 8012dfa:	d510      	bpl.n	8012e1e <_svfiprintf_r+0x36>
 8012dfc:	690b      	ldr	r3, [r1, #16]
 8012dfe:	b973      	cbnz	r3, 8012e1e <_svfiprintf_r+0x36>
 8012e00:	2140      	movs	r1, #64	@ 0x40
 8012e02:	f7fd fcdf 	bl	80107c4 <_malloc_r>
 8012e06:	6028      	str	r0, [r5, #0]
 8012e08:	6128      	str	r0, [r5, #16]
 8012e0a:	b930      	cbnz	r0, 8012e1a <_svfiprintf_r+0x32>
 8012e0c:	230c      	movs	r3, #12
 8012e0e:	603b      	str	r3, [r7, #0]
 8012e10:	f04f 30ff 	mov.w	r0, #4294967295
 8012e14:	b01d      	add	sp, #116	@ 0x74
 8012e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e1a:	2340      	movs	r3, #64	@ 0x40
 8012e1c:	616b      	str	r3, [r5, #20]
 8012e1e:	2300      	movs	r3, #0
 8012e20:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e22:	2320      	movs	r3, #32
 8012e24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012e28:	f8cd 800c 	str.w	r8, [sp, #12]
 8012e2c:	2330      	movs	r3, #48	@ 0x30
 8012e2e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012fcc <_svfiprintf_r+0x1e4>
 8012e32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012e36:	f04f 0901 	mov.w	r9, #1
 8012e3a:	4623      	mov	r3, r4
 8012e3c:	469a      	mov	sl, r3
 8012e3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012e42:	b10a      	cbz	r2, 8012e48 <_svfiprintf_r+0x60>
 8012e44:	2a25      	cmp	r2, #37	@ 0x25
 8012e46:	d1f9      	bne.n	8012e3c <_svfiprintf_r+0x54>
 8012e48:	ebba 0b04 	subs.w	fp, sl, r4
 8012e4c:	d00b      	beq.n	8012e66 <_svfiprintf_r+0x7e>
 8012e4e:	465b      	mov	r3, fp
 8012e50:	4622      	mov	r2, r4
 8012e52:	4629      	mov	r1, r5
 8012e54:	4638      	mov	r0, r7
 8012e56:	f7ff ff6b 	bl	8012d30 <__ssputs_r>
 8012e5a:	3001      	adds	r0, #1
 8012e5c:	f000 80a7 	beq.w	8012fae <_svfiprintf_r+0x1c6>
 8012e60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012e62:	445a      	add	r2, fp
 8012e64:	9209      	str	r2, [sp, #36]	@ 0x24
 8012e66:	f89a 3000 	ldrb.w	r3, [sl]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	f000 809f 	beq.w	8012fae <_svfiprintf_r+0x1c6>
 8012e70:	2300      	movs	r3, #0
 8012e72:	f04f 32ff 	mov.w	r2, #4294967295
 8012e76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012e7a:	f10a 0a01 	add.w	sl, sl, #1
 8012e7e:	9304      	str	r3, [sp, #16]
 8012e80:	9307      	str	r3, [sp, #28]
 8012e82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012e86:	931a      	str	r3, [sp, #104]	@ 0x68
 8012e88:	4654      	mov	r4, sl
 8012e8a:	2205      	movs	r2, #5
 8012e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e90:	484e      	ldr	r0, [pc, #312]	@ (8012fcc <_svfiprintf_r+0x1e4>)
 8012e92:	f7ed f99d 	bl	80001d0 <memchr>
 8012e96:	9a04      	ldr	r2, [sp, #16]
 8012e98:	b9d8      	cbnz	r0, 8012ed2 <_svfiprintf_r+0xea>
 8012e9a:	06d0      	lsls	r0, r2, #27
 8012e9c:	bf44      	itt	mi
 8012e9e:	2320      	movmi	r3, #32
 8012ea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012ea4:	0711      	lsls	r1, r2, #28
 8012ea6:	bf44      	itt	mi
 8012ea8:	232b      	movmi	r3, #43	@ 0x2b
 8012eaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012eae:	f89a 3000 	ldrb.w	r3, [sl]
 8012eb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8012eb4:	d015      	beq.n	8012ee2 <_svfiprintf_r+0xfa>
 8012eb6:	9a07      	ldr	r2, [sp, #28]
 8012eb8:	4654      	mov	r4, sl
 8012eba:	2000      	movs	r0, #0
 8012ebc:	f04f 0c0a 	mov.w	ip, #10
 8012ec0:	4621      	mov	r1, r4
 8012ec2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012ec6:	3b30      	subs	r3, #48	@ 0x30
 8012ec8:	2b09      	cmp	r3, #9
 8012eca:	d94b      	bls.n	8012f64 <_svfiprintf_r+0x17c>
 8012ecc:	b1b0      	cbz	r0, 8012efc <_svfiprintf_r+0x114>
 8012ece:	9207      	str	r2, [sp, #28]
 8012ed0:	e014      	b.n	8012efc <_svfiprintf_r+0x114>
 8012ed2:	eba0 0308 	sub.w	r3, r0, r8
 8012ed6:	fa09 f303 	lsl.w	r3, r9, r3
 8012eda:	4313      	orrs	r3, r2
 8012edc:	9304      	str	r3, [sp, #16]
 8012ede:	46a2      	mov	sl, r4
 8012ee0:	e7d2      	b.n	8012e88 <_svfiprintf_r+0xa0>
 8012ee2:	9b03      	ldr	r3, [sp, #12]
 8012ee4:	1d19      	adds	r1, r3, #4
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	9103      	str	r1, [sp, #12]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	bfbb      	ittet	lt
 8012eee:	425b      	neglt	r3, r3
 8012ef0:	f042 0202 	orrlt.w	r2, r2, #2
 8012ef4:	9307      	strge	r3, [sp, #28]
 8012ef6:	9307      	strlt	r3, [sp, #28]
 8012ef8:	bfb8      	it	lt
 8012efa:	9204      	strlt	r2, [sp, #16]
 8012efc:	7823      	ldrb	r3, [r4, #0]
 8012efe:	2b2e      	cmp	r3, #46	@ 0x2e
 8012f00:	d10a      	bne.n	8012f18 <_svfiprintf_r+0x130>
 8012f02:	7863      	ldrb	r3, [r4, #1]
 8012f04:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f06:	d132      	bne.n	8012f6e <_svfiprintf_r+0x186>
 8012f08:	9b03      	ldr	r3, [sp, #12]
 8012f0a:	1d1a      	adds	r2, r3, #4
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	9203      	str	r2, [sp, #12]
 8012f10:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012f14:	3402      	adds	r4, #2
 8012f16:	9305      	str	r3, [sp, #20]
 8012f18:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012fdc <_svfiprintf_r+0x1f4>
 8012f1c:	7821      	ldrb	r1, [r4, #0]
 8012f1e:	2203      	movs	r2, #3
 8012f20:	4650      	mov	r0, sl
 8012f22:	f7ed f955 	bl	80001d0 <memchr>
 8012f26:	b138      	cbz	r0, 8012f38 <_svfiprintf_r+0x150>
 8012f28:	9b04      	ldr	r3, [sp, #16]
 8012f2a:	eba0 000a 	sub.w	r0, r0, sl
 8012f2e:	2240      	movs	r2, #64	@ 0x40
 8012f30:	4082      	lsls	r2, r0
 8012f32:	4313      	orrs	r3, r2
 8012f34:	3401      	adds	r4, #1
 8012f36:	9304      	str	r3, [sp, #16]
 8012f38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f3c:	4824      	ldr	r0, [pc, #144]	@ (8012fd0 <_svfiprintf_r+0x1e8>)
 8012f3e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012f42:	2206      	movs	r2, #6
 8012f44:	f7ed f944 	bl	80001d0 <memchr>
 8012f48:	2800      	cmp	r0, #0
 8012f4a:	d036      	beq.n	8012fba <_svfiprintf_r+0x1d2>
 8012f4c:	4b21      	ldr	r3, [pc, #132]	@ (8012fd4 <_svfiprintf_r+0x1ec>)
 8012f4e:	bb1b      	cbnz	r3, 8012f98 <_svfiprintf_r+0x1b0>
 8012f50:	9b03      	ldr	r3, [sp, #12]
 8012f52:	3307      	adds	r3, #7
 8012f54:	f023 0307 	bic.w	r3, r3, #7
 8012f58:	3308      	adds	r3, #8
 8012f5a:	9303      	str	r3, [sp, #12]
 8012f5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f5e:	4433      	add	r3, r6
 8012f60:	9309      	str	r3, [sp, #36]	@ 0x24
 8012f62:	e76a      	b.n	8012e3a <_svfiprintf_r+0x52>
 8012f64:	fb0c 3202 	mla	r2, ip, r2, r3
 8012f68:	460c      	mov	r4, r1
 8012f6a:	2001      	movs	r0, #1
 8012f6c:	e7a8      	b.n	8012ec0 <_svfiprintf_r+0xd8>
 8012f6e:	2300      	movs	r3, #0
 8012f70:	3401      	adds	r4, #1
 8012f72:	9305      	str	r3, [sp, #20]
 8012f74:	4619      	mov	r1, r3
 8012f76:	f04f 0c0a 	mov.w	ip, #10
 8012f7a:	4620      	mov	r0, r4
 8012f7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012f80:	3a30      	subs	r2, #48	@ 0x30
 8012f82:	2a09      	cmp	r2, #9
 8012f84:	d903      	bls.n	8012f8e <_svfiprintf_r+0x1a6>
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d0c6      	beq.n	8012f18 <_svfiprintf_r+0x130>
 8012f8a:	9105      	str	r1, [sp, #20]
 8012f8c:	e7c4      	b.n	8012f18 <_svfiprintf_r+0x130>
 8012f8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012f92:	4604      	mov	r4, r0
 8012f94:	2301      	movs	r3, #1
 8012f96:	e7f0      	b.n	8012f7a <_svfiprintf_r+0x192>
 8012f98:	ab03      	add	r3, sp, #12
 8012f9a:	9300      	str	r3, [sp, #0]
 8012f9c:	462a      	mov	r2, r5
 8012f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8012fd8 <_svfiprintf_r+0x1f0>)
 8012fa0:	a904      	add	r1, sp, #16
 8012fa2:	4638      	mov	r0, r7
 8012fa4:	f7fd fdbe 	bl	8010b24 <_printf_float>
 8012fa8:	1c42      	adds	r2, r0, #1
 8012faa:	4606      	mov	r6, r0
 8012fac:	d1d6      	bne.n	8012f5c <_svfiprintf_r+0x174>
 8012fae:	89ab      	ldrh	r3, [r5, #12]
 8012fb0:	065b      	lsls	r3, r3, #25
 8012fb2:	f53f af2d 	bmi.w	8012e10 <_svfiprintf_r+0x28>
 8012fb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012fb8:	e72c      	b.n	8012e14 <_svfiprintf_r+0x2c>
 8012fba:	ab03      	add	r3, sp, #12
 8012fbc:	9300      	str	r3, [sp, #0]
 8012fbe:	462a      	mov	r2, r5
 8012fc0:	4b05      	ldr	r3, [pc, #20]	@ (8012fd8 <_svfiprintf_r+0x1f0>)
 8012fc2:	a904      	add	r1, sp, #16
 8012fc4:	4638      	mov	r0, r7
 8012fc6:	f7fe f845 	bl	8011054 <_printf_i>
 8012fca:	e7ed      	b.n	8012fa8 <_svfiprintf_r+0x1c0>
 8012fcc:	080145c3 	.word	0x080145c3
 8012fd0:	080145cd 	.word	0x080145cd
 8012fd4:	08010b25 	.word	0x08010b25
 8012fd8:	08012d31 	.word	0x08012d31
 8012fdc:	080145c9 	.word	0x080145c9

08012fe0 <__sflush_r>:
 8012fe0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fe8:	0716      	lsls	r6, r2, #28
 8012fea:	4605      	mov	r5, r0
 8012fec:	460c      	mov	r4, r1
 8012fee:	d454      	bmi.n	801309a <__sflush_r+0xba>
 8012ff0:	684b      	ldr	r3, [r1, #4]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	dc02      	bgt.n	8012ffc <__sflush_r+0x1c>
 8012ff6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	dd48      	ble.n	801308e <__sflush_r+0xae>
 8012ffc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012ffe:	2e00      	cmp	r6, #0
 8013000:	d045      	beq.n	801308e <__sflush_r+0xae>
 8013002:	2300      	movs	r3, #0
 8013004:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013008:	682f      	ldr	r7, [r5, #0]
 801300a:	6a21      	ldr	r1, [r4, #32]
 801300c:	602b      	str	r3, [r5, #0]
 801300e:	d030      	beq.n	8013072 <__sflush_r+0x92>
 8013010:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013012:	89a3      	ldrh	r3, [r4, #12]
 8013014:	0759      	lsls	r1, r3, #29
 8013016:	d505      	bpl.n	8013024 <__sflush_r+0x44>
 8013018:	6863      	ldr	r3, [r4, #4]
 801301a:	1ad2      	subs	r2, r2, r3
 801301c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801301e:	b10b      	cbz	r3, 8013024 <__sflush_r+0x44>
 8013020:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013022:	1ad2      	subs	r2, r2, r3
 8013024:	2300      	movs	r3, #0
 8013026:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013028:	6a21      	ldr	r1, [r4, #32]
 801302a:	4628      	mov	r0, r5
 801302c:	47b0      	blx	r6
 801302e:	1c43      	adds	r3, r0, #1
 8013030:	89a3      	ldrh	r3, [r4, #12]
 8013032:	d106      	bne.n	8013042 <__sflush_r+0x62>
 8013034:	6829      	ldr	r1, [r5, #0]
 8013036:	291d      	cmp	r1, #29
 8013038:	d82b      	bhi.n	8013092 <__sflush_r+0xb2>
 801303a:	4a2a      	ldr	r2, [pc, #168]	@ (80130e4 <__sflush_r+0x104>)
 801303c:	40ca      	lsrs	r2, r1
 801303e:	07d6      	lsls	r6, r2, #31
 8013040:	d527      	bpl.n	8013092 <__sflush_r+0xb2>
 8013042:	2200      	movs	r2, #0
 8013044:	6062      	str	r2, [r4, #4]
 8013046:	04d9      	lsls	r1, r3, #19
 8013048:	6922      	ldr	r2, [r4, #16]
 801304a:	6022      	str	r2, [r4, #0]
 801304c:	d504      	bpl.n	8013058 <__sflush_r+0x78>
 801304e:	1c42      	adds	r2, r0, #1
 8013050:	d101      	bne.n	8013056 <__sflush_r+0x76>
 8013052:	682b      	ldr	r3, [r5, #0]
 8013054:	b903      	cbnz	r3, 8013058 <__sflush_r+0x78>
 8013056:	6560      	str	r0, [r4, #84]	@ 0x54
 8013058:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801305a:	602f      	str	r7, [r5, #0]
 801305c:	b1b9      	cbz	r1, 801308e <__sflush_r+0xae>
 801305e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013062:	4299      	cmp	r1, r3
 8013064:	d002      	beq.n	801306c <__sflush_r+0x8c>
 8013066:	4628      	mov	r0, r5
 8013068:	f7ff fa9e 	bl	80125a8 <_free_r>
 801306c:	2300      	movs	r3, #0
 801306e:	6363      	str	r3, [r4, #52]	@ 0x34
 8013070:	e00d      	b.n	801308e <__sflush_r+0xae>
 8013072:	2301      	movs	r3, #1
 8013074:	4628      	mov	r0, r5
 8013076:	47b0      	blx	r6
 8013078:	4602      	mov	r2, r0
 801307a:	1c50      	adds	r0, r2, #1
 801307c:	d1c9      	bne.n	8013012 <__sflush_r+0x32>
 801307e:	682b      	ldr	r3, [r5, #0]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d0c6      	beq.n	8013012 <__sflush_r+0x32>
 8013084:	2b1d      	cmp	r3, #29
 8013086:	d001      	beq.n	801308c <__sflush_r+0xac>
 8013088:	2b16      	cmp	r3, #22
 801308a:	d11e      	bne.n	80130ca <__sflush_r+0xea>
 801308c:	602f      	str	r7, [r5, #0]
 801308e:	2000      	movs	r0, #0
 8013090:	e022      	b.n	80130d8 <__sflush_r+0xf8>
 8013092:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013096:	b21b      	sxth	r3, r3
 8013098:	e01b      	b.n	80130d2 <__sflush_r+0xf2>
 801309a:	690f      	ldr	r7, [r1, #16]
 801309c:	2f00      	cmp	r7, #0
 801309e:	d0f6      	beq.n	801308e <__sflush_r+0xae>
 80130a0:	0793      	lsls	r3, r2, #30
 80130a2:	680e      	ldr	r6, [r1, #0]
 80130a4:	bf08      	it	eq
 80130a6:	694b      	ldreq	r3, [r1, #20]
 80130a8:	600f      	str	r7, [r1, #0]
 80130aa:	bf18      	it	ne
 80130ac:	2300      	movne	r3, #0
 80130ae:	eba6 0807 	sub.w	r8, r6, r7
 80130b2:	608b      	str	r3, [r1, #8]
 80130b4:	f1b8 0f00 	cmp.w	r8, #0
 80130b8:	dde9      	ble.n	801308e <__sflush_r+0xae>
 80130ba:	6a21      	ldr	r1, [r4, #32]
 80130bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80130be:	4643      	mov	r3, r8
 80130c0:	463a      	mov	r2, r7
 80130c2:	4628      	mov	r0, r5
 80130c4:	47b0      	blx	r6
 80130c6:	2800      	cmp	r0, #0
 80130c8:	dc08      	bgt.n	80130dc <__sflush_r+0xfc>
 80130ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80130d2:	81a3      	strh	r3, [r4, #12]
 80130d4:	f04f 30ff 	mov.w	r0, #4294967295
 80130d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130dc:	4407      	add	r7, r0
 80130de:	eba8 0800 	sub.w	r8, r8, r0
 80130e2:	e7e7      	b.n	80130b4 <__sflush_r+0xd4>
 80130e4:	20400001 	.word	0x20400001

080130e8 <_fflush_r>:
 80130e8:	b538      	push	{r3, r4, r5, lr}
 80130ea:	690b      	ldr	r3, [r1, #16]
 80130ec:	4605      	mov	r5, r0
 80130ee:	460c      	mov	r4, r1
 80130f0:	b913      	cbnz	r3, 80130f8 <_fflush_r+0x10>
 80130f2:	2500      	movs	r5, #0
 80130f4:	4628      	mov	r0, r5
 80130f6:	bd38      	pop	{r3, r4, r5, pc}
 80130f8:	b118      	cbz	r0, 8013102 <_fflush_r+0x1a>
 80130fa:	6a03      	ldr	r3, [r0, #32]
 80130fc:	b90b      	cbnz	r3, 8013102 <_fflush_r+0x1a>
 80130fe:	f7fe f953 	bl	80113a8 <__sinit>
 8013102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d0f3      	beq.n	80130f2 <_fflush_r+0xa>
 801310a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801310c:	07d0      	lsls	r0, r2, #31
 801310e:	d404      	bmi.n	801311a <_fflush_r+0x32>
 8013110:	0599      	lsls	r1, r3, #22
 8013112:	d402      	bmi.n	801311a <_fflush_r+0x32>
 8013114:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013116:	f7fe fbdc 	bl	80118d2 <__retarget_lock_acquire_recursive>
 801311a:	4628      	mov	r0, r5
 801311c:	4621      	mov	r1, r4
 801311e:	f7ff ff5f 	bl	8012fe0 <__sflush_r>
 8013122:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013124:	07da      	lsls	r2, r3, #31
 8013126:	4605      	mov	r5, r0
 8013128:	d4e4      	bmi.n	80130f4 <_fflush_r+0xc>
 801312a:	89a3      	ldrh	r3, [r4, #12]
 801312c:	059b      	lsls	r3, r3, #22
 801312e:	d4e1      	bmi.n	80130f4 <_fflush_r+0xc>
 8013130:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013132:	f7fe fbcf 	bl	80118d4 <__retarget_lock_release_recursive>
 8013136:	e7dd      	b.n	80130f4 <_fflush_r+0xc>

08013138 <__swhatbuf_r>:
 8013138:	b570      	push	{r4, r5, r6, lr}
 801313a:	460c      	mov	r4, r1
 801313c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013140:	2900      	cmp	r1, #0
 8013142:	b096      	sub	sp, #88	@ 0x58
 8013144:	4615      	mov	r5, r2
 8013146:	461e      	mov	r6, r3
 8013148:	da0d      	bge.n	8013166 <__swhatbuf_r+0x2e>
 801314a:	89a3      	ldrh	r3, [r4, #12]
 801314c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013150:	f04f 0100 	mov.w	r1, #0
 8013154:	bf14      	ite	ne
 8013156:	2340      	movne	r3, #64	@ 0x40
 8013158:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801315c:	2000      	movs	r0, #0
 801315e:	6031      	str	r1, [r6, #0]
 8013160:	602b      	str	r3, [r5, #0]
 8013162:	b016      	add	sp, #88	@ 0x58
 8013164:	bd70      	pop	{r4, r5, r6, pc}
 8013166:	466a      	mov	r2, sp
 8013168:	f000 f862 	bl	8013230 <_fstat_r>
 801316c:	2800      	cmp	r0, #0
 801316e:	dbec      	blt.n	801314a <__swhatbuf_r+0x12>
 8013170:	9901      	ldr	r1, [sp, #4]
 8013172:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013176:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801317a:	4259      	negs	r1, r3
 801317c:	4159      	adcs	r1, r3
 801317e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013182:	e7eb      	b.n	801315c <__swhatbuf_r+0x24>

08013184 <__smakebuf_r>:
 8013184:	898b      	ldrh	r3, [r1, #12]
 8013186:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013188:	079d      	lsls	r5, r3, #30
 801318a:	4606      	mov	r6, r0
 801318c:	460c      	mov	r4, r1
 801318e:	d507      	bpl.n	80131a0 <__smakebuf_r+0x1c>
 8013190:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013194:	6023      	str	r3, [r4, #0]
 8013196:	6123      	str	r3, [r4, #16]
 8013198:	2301      	movs	r3, #1
 801319a:	6163      	str	r3, [r4, #20]
 801319c:	b003      	add	sp, #12
 801319e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80131a0:	ab01      	add	r3, sp, #4
 80131a2:	466a      	mov	r2, sp
 80131a4:	f7ff ffc8 	bl	8013138 <__swhatbuf_r>
 80131a8:	9f00      	ldr	r7, [sp, #0]
 80131aa:	4605      	mov	r5, r0
 80131ac:	4639      	mov	r1, r7
 80131ae:	4630      	mov	r0, r6
 80131b0:	f7fd fb08 	bl	80107c4 <_malloc_r>
 80131b4:	b948      	cbnz	r0, 80131ca <__smakebuf_r+0x46>
 80131b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80131ba:	059a      	lsls	r2, r3, #22
 80131bc:	d4ee      	bmi.n	801319c <__smakebuf_r+0x18>
 80131be:	f023 0303 	bic.w	r3, r3, #3
 80131c2:	f043 0302 	orr.w	r3, r3, #2
 80131c6:	81a3      	strh	r3, [r4, #12]
 80131c8:	e7e2      	b.n	8013190 <__smakebuf_r+0xc>
 80131ca:	89a3      	ldrh	r3, [r4, #12]
 80131cc:	6020      	str	r0, [r4, #0]
 80131ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80131d2:	81a3      	strh	r3, [r4, #12]
 80131d4:	9b01      	ldr	r3, [sp, #4]
 80131d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80131da:	b15b      	cbz	r3, 80131f4 <__smakebuf_r+0x70>
 80131dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80131e0:	4630      	mov	r0, r6
 80131e2:	f000 f837 	bl	8013254 <_isatty_r>
 80131e6:	b128      	cbz	r0, 80131f4 <__smakebuf_r+0x70>
 80131e8:	89a3      	ldrh	r3, [r4, #12]
 80131ea:	f023 0303 	bic.w	r3, r3, #3
 80131ee:	f043 0301 	orr.w	r3, r3, #1
 80131f2:	81a3      	strh	r3, [r4, #12]
 80131f4:	89a3      	ldrh	r3, [r4, #12]
 80131f6:	431d      	orrs	r5, r3
 80131f8:	81a5      	strh	r5, [r4, #12]
 80131fa:	e7cf      	b.n	801319c <__smakebuf_r+0x18>

080131fc <memmove>:
 80131fc:	4288      	cmp	r0, r1
 80131fe:	b510      	push	{r4, lr}
 8013200:	eb01 0402 	add.w	r4, r1, r2
 8013204:	d902      	bls.n	801320c <memmove+0x10>
 8013206:	4284      	cmp	r4, r0
 8013208:	4623      	mov	r3, r4
 801320a:	d807      	bhi.n	801321c <memmove+0x20>
 801320c:	1e43      	subs	r3, r0, #1
 801320e:	42a1      	cmp	r1, r4
 8013210:	d008      	beq.n	8013224 <memmove+0x28>
 8013212:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013216:	f803 2f01 	strb.w	r2, [r3, #1]!
 801321a:	e7f8      	b.n	801320e <memmove+0x12>
 801321c:	4402      	add	r2, r0
 801321e:	4601      	mov	r1, r0
 8013220:	428a      	cmp	r2, r1
 8013222:	d100      	bne.n	8013226 <memmove+0x2a>
 8013224:	bd10      	pop	{r4, pc}
 8013226:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801322a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801322e:	e7f7      	b.n	8013220 <memmove+0x24>

08013230 <_fstat_r>:
 8013230:	b538      	push	{r3, r4, r5, lr}
 8013232:	4d07      	ldr	r5, [pc, #28]	@ (8013250 <_fstat_r+0x20>)
 8013234:	2300      	movs	r3, #0
 8013236:	4604      	mov	r4, r0
 8013238:	4608      	mov	r0, r1
 801323a:	4611      	mov	r1, r2
 801323c:	602b      	str	r3, [r5, #0]
 801323e:	f7f2 fb3b 	bl	80058b8 <_fstat>
 8013242:	1c43      	adds	r3, r0, #1
 8013244:	d102      	bne.n	801324c <_fstat_r+0x1c>
 8013246:	682b      	ldr	r3, [r5, #0]
 8013248:	b103      	cbz	r3, 801324c <_fstat_r+0x1c>
 801324a:	6023      	str	r3, [r4, #0]
 801324c:	bd38      	pop	{r3, r4, r5, pc}
 801324e:	bf00      	nop
 8013250:	2000571c 	.word	0x2000571c

08013254 <_isatty_r>:
 8013254:	b538      	push	{r3, r4, r5, lr}
 8013256:	4d06      	ldr	r5, [pc, #24]	@ (8013270 <_isatty_r+0x1c>)
 8013258:	2300      	movs	r3, #0
 801325a:	4604      	mov	r4, r0
 801325c:	4608      	mov	r0, r1
 801325e:	602b      	str	r3, [r5, #0]
 8013260:	f7f2 fb3a 	bl	80058d8 <_isatty>
 8013264:	1c43      	adds	r3, r0, #1
 8013266:	d102      	bne.n	801326e <_isatty_r+0x1a>
 8013268:	682b      	ldr	r3, [r5, #0]
 801326a:	b103      	cbz	r3, 801326e <_isatty_r+0x1a>
 801326c:	6023      	str	r3, [r4, #0]
 801326e:	bd38      	pop	{r3, r4, r5, pc}
 8013270:	2000571c 	.word	0x2000571c

08013274 <__assert_func>:
 8013274:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013276:	4614      	mov	r4, r2
 8013278:	461a      	mov	r2, r3
 801327a:	4b09      	ldr	r3, [pc, #36]	@ (80132a0 <__assert_func+0x2c>)
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	4605      	mov	r5, r0
 8013280:	68d8      	ldr	r0, [r3, #12]
 8013282:	b14c      	cbz	r4, 8013298 <__assert_func+0x24>
 8013284:	4b07      	ldr	r3, [pc, #28]	@ (80132a4 <__assert_func+0x30>)
 8013286:	9100      	str	r1, [sp, #0]
 8013288:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801328c:	4906      	ldr	r1, [pc, #24]	@ (80132a8 <__assert_func+0x34>)
 801328e:	462b      	mov	r3, r5
 8013290:	f000 f870 	bl	8013374 <fiprintf>
 8013294:	f7fd fa64 	bl	8010760 <abort>
 8013298:	4b04      	ldr	r3, [pc, #16]	@ (80132ac <__assert_func+0x38>)
 801329a:	461c      	mov	r4, r3
 801329c:	e7f3      	b.n	8013286 <__assert_func+0x12>
 801329e:	bf00      	nop
 80132a0:	20000020 	.word	0x20000020
 80132a4:	080145de 	.word	0x080145de
 80132a8:	080145eb 	.word	0x080145eb
 80132ac:	08014619 	.word	0x08014619

080132b0 <_calloc_r>:
 80132b0:	b570      	push	{r4, r5, r6, lr}
 80132b2:	fba1 5402 	umull	r5, r4, r1, r2
 80132b6:	b934      	cbnz	r4, 80132c6 <_calloc_r+0x16>
 80132b8:	4629      	mov	r1, r5
 80132ba:	f7fd fa83 	bl	80107c4 <_malloc_r>
 80132be:	4606      	mov	r6, r0
 80132c0:	b928      	cbnz	r0, 80132ce <_calloc_r+0x1e>
 80132c2:	4630      	mov	r0, r6
 80132c4:	bd70      	pop	{r4, r5, r6, pc}
 80132c6:	220c      	movs	r2, #12
 80132c8:	6002      	str	r2, [r0, #0]
 80132ca:	2600      	movs	r6, #0
 80132cc:	e7f9      	b.n	80132c2 <_calloc_r+0x12>
 80132ce:	462a      	mov	r2, r5
 80132d0:	4621      	mov	r1, r4
 80132d2:	f7fe fa2d 	bl	8011730 <memset>
 80132d6:	e7f4      	b.n	80132c2 <_calloc_r+0x12>

080132d8 <__ascii_mbtowc>:
 80132d8:	b082      	sub	sp, #8
 80132da:	b901      	cbnz	r1, 80132de <__ascii_mbtowc+0x6>
 80132dc:	a901      	add	r1, sp, #4
 80132de:	b142      	cbz	r2, 80132f2 <__ascii_mbtowc+0x1a>
 80132e0:	b14b      	cbz	r3, 80132f6 <__ascii_mbtowc+0x1e>
 80132e2:	7813      	ldrb	r3, [r2, #0]
 80132e4:	600b      	str	r3, [r1, #0]
 80132e6:	7812      	ldrb	r2, [r2, #0]
 80132e8:	1e10      	subs	r0, r2, #0
 80132ea:	bf18      	it	ne
 80132ec:	2001      	movne	r0, #1
 80132ee:	b002      	add	sp, #8
 80132f0:	4770      	bx	lr
 80132f2:	4610      	mov	r0, r2
 80132f4:	e7fb      	b.n	80132ee <__ascii_mbtowc+0x16>
 80132f6:	f06f 0001 	mvn.w	r0, #1
 80132fa:	e7f8      	b.n	80132ee <__ascii_mbtowc+0x16>

080132fc <_realloc_r>:
 80132fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013300:	4607      	mov	r7, r0
 8013302:	4614      	mov	r4, r2
 8013304:	460d      	mov	r5, r1
 8013306:	b921      	cbnz	r1, 8013312 <_realloc_r+0x16>
 8013308:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801330c:	4611      	mov	r1, r2
 801330e:	f7fd ba59 	b.w	80107c4 <_malloc_r>
 8013312:	b92a      	cbnz	r2, 8013320 <_realloc_r+0x24>
 8013314:	f7ff f948 	bl	80125a8 <_free_r>
 8013318:	4625      	mov	r5, r4
 801331a:	4628      	mov	r0, r5
 801331c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013320:	f000 f83a 	bl	8013398 <_malloc_usable_size_r>
 8013324:	4284      	cmp	r4, r0
 8013326:	4606      	mov	r6, r0
 8013328:	d802      	bhi.n	8013330 <_realloc_r+0x34>
 801332a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801332e:	d8f4      	bhi.n	801331a <_realloc_r+0x1e>
 8013330:	4621      	mov	r1, r4
 8013332:	4638      	mov	r0, r7
 8013334:	f7fd fa46 	bl	80107c4 <_malloc_r>
 8013338:	4680      	mov	r8, r0
 801333a:	b908      	cbnz	r0, 8013340 <_realloc_r+0x44>
 801333c:	4645      	mov	r5, r8
 801333e:	e7ec      	b.n	801331a <_realloc_r+0x1e>
 8013340:	42b4      	cmp	r4, r6
 8013342:	4622      	mov	r2, r4
 8013344:	4629      	mov	r1, r5
 8013346:	bf28      	it	cs
 8013348:	4632      	movcs	r2, r6
 801334a:	f7fe fac4 	bl	80118d6 <memcpy>
 801334e:	4629      	mov	r1, r5
 8013350:	4638      	mov	r0, r7
 8013352:	f7ff f929 	bl	80125a8 <_free_r>
 8013356:	e7f1      	b.n	801333c <_realloc_r+0x40>

08013358 <__ascii_wctomb>:
 8013358:	4603      	mov	r3, r0
 801335a:	4608      	mov	r0, r1
 801335c:	b141      	cbz	r1, 8013370 <__ascii_wctomb+0x18>
 801335e:	2aff      	cmp	r2, #255	@ 0xff
 8013360:	d904      	bls.n	801336c <__ascii_wctomb+0x14>
 8013362:	228a      	movs	r2, #138	@ 0x8a
 8013364:	601a      	str	r2, [r3, #0]
 8013366:	f04f 30ff 	mov.w	r0, #4294967295
 801336a:	4770      	bx	lr
 801336c:	700a      	strb	r2, [r1, #0]
 801336e:	2001      	movs	r0, #1
 8013370:	4770      	bx	lr
	...

08013374 <fiprintf>:
 8013374:	b40e      	push	{r1, r2, r3}
 8013376:	b503      	push	{r0, r1, lr}
 8013378:	4601      	mov	r1, r0
 801337a:	ab03      	add	r3, sp, #12
 801337c:	4805      	ldr	r0, [pc, #20]	@ (8013394 <fiprintf+0x20>)
 801337e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013382:	6800      	ldr	r0, [r0, #0]
 8013384:	9301      	str	r3, [sp, #4]
 8013386:	f000 f839 	bl	80133fc <_vfiprintf_r>
 801338a:	b002      	add	sp, #8
 801338c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013390:	b003      	add	sp, #12
 8013392:	4770      	bx	lr
 8013394:	20000020 	.word	0x20000020

08013398 <_malloc_usable_size_r>:
 8013398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801339c:	1f18      	subs	r0, r3, #4
 801339e:	2b00      	cmp	r3, #0
 80133a0:	bfbc      	itt	lt
 80133a2:	580b      	ldrlt	r3, [r1, r0]
 80133a4:	18c0      	addlt	r0, r0, r3
 80133a6:	4770      	bx	lr

080133a8 <__sfputc_r>:
 80133a8:	6893      	ldr	r3, [r2, #8]
 80133aa:	3b01      	subs	r3, #1
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	b410      	push	{r4}
 80133b0:	6093      	str	r3, [r2, #8]
 80133b2:	da08      	bge.n	80133c6 <__sfputc_r+0x1e>
 80133b4:	6994      	ldr	r4, [r2, #24]
 80133b6:	42a3      	cmp	r3, r4
 80133b8:	db01      	blt.n	80133be <__sfputc_r+0x16>
 80133ba:	290a      	cmp	r1, #10
 80133bc:	d103      	bne.n	80133c6 <__sfputc_r+0x1e>
 80133be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80133c2:	f7fe b920 	b.w	8011606 <__swbuf_r>
 80133c6:	6813      	ldr	r3, [r2, #0]
 80133c8:	1c58      	adds	r0, r3, #1
 80133ca:	6010      	str	r0, [r2, #0]
 80133cc:	7019      	strb	r1, [r3, #0]
 80133ce:	4608      	mov	r0, r1
 80133d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80133d4:	4770      	bx	lr

080133d6 <__sfputs_r>:
 80133d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133d8:	4606      	mov	r6, r0
 80133da:	460f      	mov	r7, r1
 80133dc:	4614      	mov	r4, r2
 80133de:	18d5      	adds	r5, r2, r3
 80133e0:	42ac      	cmp	r4, r5
 80133e2:	d101      	bne.n	80133e8 <__sfputs_r+0x12>
 80133e4:	2000      	movs	r0, #0
 80133e6:	e007      	b.n	80133f8 <__sfputs_r+0x22>
 80133e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133ec:	463a      	mov	r2, r7
 80133ee:	4630      	mov	r0, r6
 80133f0:	f7ff ffda 	bl	80133a8 <__sfputc_r>
 80133f4:	1c43      	adds	r3, r0, #1
 80133f6:	d1f3      	bne.n	80133e0 <__sfputs_r+0xa>
 80133f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080133fc <_vfiprintf_r>:
 80133fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013400:	460d      	mov	r5, r1
 8013402:	b09d      	sub	sp, #116	@ 0x74
 8013404:	4614      	mov	r4, r2
 8013406:	4698      	mov	r8, r3
 8013408:	4606      	mov	r6, r0
 801340a:	b118      	cbz	r0, 8013414 <_vfiprintf_r+0x18>
 801340c:	6a03      	ldr	r3, [r0, #32]
 801340e:	b90b      	cbnz	r3, 8013414 <_vfiprintf_r+0x18>
 8013410:	f7fd ffca 	bl	80113a8 <__sinit>
 8013414:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013416:	07d9      	lsls	r1, r3, #31
 8013418:	d405      	bmi.n	8013426 <_vfiprintf_r+0x2a>
 801341a:	89ab      	ldrh	r3, [r5, #12]
 801341c:	059a      	lsls	r2, r3, #22
 801341e:	d402      	bmi.n	8013426 <_vfiprintf_r+0x2a>
 8013420:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013422:	f7fe fa56 	bl	80118d2 <__retarget_lock_acquire_recursive>
 8013426:	89ab      	ldrh	r3, [r5, #12]
 8013428:	071b      	lsls	r3, r3, #28
 801342a:	d501      	bpl.n	8013430 <_vfiprintf_r+0x34>
 801342c:	692b      	ldr	r3, [r5, #16]
 801342e:	b99b      	cbnz	r3, 8013458 <_vfiprintf_r+0x5c>
 8013430:	4629      	mov	r1, r5
 8013432:	4630      	mov	r0, r6
 8013434:	f7fe f926 	bl	8011684 <__swsetup_r>
 8013438:	b170      	cbz	r0, 8013458 <_vfiprintf_r+0x5c>
 801343a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801343c:	07dc      	lsls	r4, r3, #31
 801343e:	d504      	bpl.n	801344a <_vfiprintf_r+0x4e>
 8013440:	f04f 30ff 	mov.w	r0, #4294967295
 8013444:	b01d      	add	sp, #116	@ 0x74
 8013446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801344a:	89ab      	ldrh	r3, [r5, #12]
 801344c:	0598      	lsls	r0, r3, #22
 801344e:	d4f7      	bmi.n	8013440 <_vfiprintf_r+0x44>
 8013450:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013452:	f7fe fa3f 	bl	80118d4 <__retarget_lock_release_recursive>
 8013456:	e7f3      	b.n	8013440 <_vfiprintf_r+0x44>
 8013458:	2300      	movs	r3, #0
 801345a:	9309      	str	r3, [sp, #36]	@ 0x24
 801345c:	2320      	movs	r3, #32
 801345e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013462:	f8cd 800c 	str.w	r8, [sp, #12]
 8013466:	2330      	movs	r3, #48	@ 0x30
 8013468:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013618 <_vfiprintf_r+0x21c>
 801346c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013470:	f04f 0901 	mov.w	r9, #1
 8013474:	4623      	mov	r3, r4
 8013476:	469a      	mov	sl, r3
 8013478:	f813 2b01 	ldrb.w	r2, [r3], #1
 801347c:	b10a      	cbz	r2, 8013482 <_vfiprintf_r+0x86>
 801347e:	2a25      	cmp	r2, #37	@ 0x25
 8013480:	d1f9      	bne.n	8013476 <_vfiprintf_r+0x7a>
 8013482:	ebba 0b04 	subs.w	fp, sl, r4
 8013486:	d00b      	beq.n	80134a0 <_vfiprintf_r+0xa4>
 8013488:	465b      	mov	r3, fp
 801348a:	4622      	mov	r2, r4
 801348c:	4629      	mov	r1, r5
 801348e:	4630      	mov	r0, r6
 8013490:	f7ff ffa1 	bl	80133d6 <__sfputs_r>
 8013494:	3001      	adds	r0, #1
 8013496:	f000 80a7 	beq.w	80135e8 <_vfiprintf_r+0x1ec>
 801349a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801349c:	445a      	add	r2, fp
 801349e:	9209      	str	r2, [sp, #36]	@ 0x24
 80134a0:	f89a 3000 	ldrb.w	r3, [sl]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	f000 809f 	beq.w	80135e8 <_vfiprintf_r+0x1ec>
 80134aa:	2300      	movs	r3, #0
 80134ac:	f04f 32ff 	mov.w	r2, #4294967295
 80134b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80134b4:	f10a 0a01 	add.w	sl, sl, #1
 80134b8:	9304      	str	r3, [sp, #16]
 80134ba:	9307      	str	r3, [sp, #28]
 80134bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80134c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80134c2:	4654      	mov	r4, sl
 80134c4:	2205      	movs	r2, #5
 80134c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80134ca:	4853      	ldr	r0, [pc, #332]	@ (8013618 <_vfiprintf_r+0x21c>)
 80134cc:	f7ec fe80 	bl	80001d0 <memchr>
 80134d0:	9a04      	ldr	r2, [sp, #16]
 80134d2:	b9d8      	cbnz	r0, 801350c <_vfiprintf_r+0x110>
 80134d4:	06d1      	lsls	r1, r2, #27
 80134d6:	bf44      	itt	mi
 80134d8:	2320      	movmi	r3, #32
 80134da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80134de:	0713      	lsls	r3, r2, #28
 80134e0:	bf44      	itt	mi
 80134e2:	232b      	movmi	r3, #43	@ 0x2b
 80134e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80134e8:	f89a 3000 	ldrb.w	r3, [sl]
 80134ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80134ee:	d015      	beq.n	801351c <_vfiprintf_r+0x120>
 80134f0:	9a07      	ldr	r2, [sp, #28]
 80134f2:	4654      	mov	r4, sl
 80134f4:	2000      	movs	r0, #0
 80134f6:	f04f 0c0a 	mov.w	ip, #10
 80134fa:	4621      	mov	r1, r4
 80134fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013500:	3b30      	subs	r3, #48	@ 0x30
 8013502:	2b09      	cmp	r3, #9
 8013504:	d94b      	bls.n	801359e <_vfiprintf_r+0x1a2>
 8013506:	b1b0      	cbz	r0, 8013536 <_vfiprintf_r+0x13a>
 8013508:	9207      	str	r2, [sp, #28]
 801350a:	e014      	b.n	8013536 <_vfiprintf_r+0x13a>
 801350c:	eba0 0308 	sub.w	r3, r0, r8
 8013510:	fa09 f303 	lsl.w	r3, r9, r3
 8013514:	4313      	orrs	r3, r2
 8013516:	9304      	str	r3, [sp, #16]
 8013518:	46a2      	mov	sl, r4
 801351a:	e7d2      	b.n	80134c2 <_vfiprintf_r+0xc6>
 801351c:	9b03      	ldr	r3, [sp, #12]
 801351e:	1d19      	adds	r1, r3, #4
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	9103      	str	r1, [sp, #12]
 8013524:	2b00      	cmp	r3, #0
 8013526:	bfbb      	ittet	lt
 8013528:	425b      	neglt	r3, r3
 801352a:	f042 0202 	orrlt.w	r2, r2, #2
 801352e:	9307      	strge	r3, [sp, #28]
 8013530:	9307      	strlt	r3, [sp, #28]
 8013532:	bfb8      	it	lt
 8013534:	9204      	strlt	r2, [sp, #16]
 8013536:	7823      	ldrb	r3, [r4, #0]
 8013538:	2b2e      	cmp	r3, #46	@ 0x2e
 801353a:	d10a      	bne.n	8013552 <_vfiprintf_r+0x156>
 801353c:	7863      	ldrb	r3, [r4, #1]
 801353e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013540:	d132      	bne.n	80135a8 <_vfiprintf_r+0x1ac>
 8013542:	9b03      	ldr	r3, [sp, #12]
 8013544:	1d1a      	adds	r2, r3, #4
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	9203      	str	r2, [sp, #12]
 801354a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801354e:	3402      	adds	r4, #2
 8013550:	9305      	str	r3, [sp, #20]
 8013552:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013628 <_vfiprintf_r+0x22c>
 8013556:	7821      	ldrb	r1, [r4, #0]
 8013558:	2203      	movs	r2, #3
 801355a:	4650      	mov	r0, sl
 801355c:	f7ec fe38 	bl	80001d0 <memchr>
 8013560:	b138      	cbz	r0, 8013572 <_vfiprintf_r+0x176>
 8013562:	9b04      	ldr	r3, [sp, #16]
 8013564:	eba0 000a 	sub.w	r0, r0, sl
 8013568:	2240      	movs	r2, #64	@ 0x40
 801356a:	4082      	lsls	r2, r0
 801356c:	4313      	orrs	r3, r2
 801356e:	3401      	adds	r4, #1
 8013570:	9304      	str	r3, [sp, #16]
 8013572:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013576:	4829      	ldr	r0, [pc, #164]	@ (801361c <_vfiprintf_r+0x220>)
 8013578:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801357c:	2206      	movs	r2, #6
 801357e:	f7ec fe27 	bl	80001d0 <memchr>
 8013582:	2800      	cmp	r0, #0
 8013584:	d03f      	beq.n	8013606 <_vfiprintf_r+0x20a>
 8013586:	4b26      	ldr	r3, [pc, #152]	@ (8013620 <_vfiprintf_r+0x224>)
 8013588:	bb1b      	cbnz	r3, 80135d2 <_vfiprintf_r+0x1d6>
 801358a:	9b03      	ldr	r3, [sp, #12]
 801358c:	3307      	adds	r3, #7
 801358e:	f023 0307 	bic.w	r3, r3, #7
 8013592:	3308      	adds	r3, #8
 8013594:	9303      	str	r3, [sp, #12]
 8013596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013598:	443b      	add	r3, r7
 801359a:	9309      	str	r3, [sp, #36]	@ 0x24
 801359c:	e76a      	b.n	8013474 <_vfiprintf_r+0x78>
 801359e:	fb0c 3202 	mla	r2, ip, r2, r3
 80135a2:	460c      	mov	r4, r1
 80135a4:	2001      	movs	r0, #1
 80135a6:	e7a8      	b.n	80134fa <_vfiprintf_r+0xfe>
 80135a8:	2300      	movs	r3, #0
 80135aa:	3401      	adds	r4, #1
 80135ac:	9305      	str	r3, [sp, #20]
 80135ae:	4619      	mov	r1, r3
 80135b0:	f04f 0c0a 	mov.w	ip, #10
 80135b4:	4620      	mov	r0, r4
 80135b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80135ba:	3a30      	subs	r2, #48	@ 0x30
 80135bc:	2a09      	cmp	r2, #9
 80135be:	d903      	bls.n	80135c8 <_vfiprintf_r+0x1cc>
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d0c6      	beq.n	8013552 <_vfiprintf_r+0x156>
 80135c4:	9105      	str	r1, [sp, #20]
 80135c6:	e7c4      	b.n	8013552 <_vfiprintf_r+0x156>
 80135c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80135cc:	4604      	mov	r4, r0
 80135ce:	2301      	movs	r3, #1
 80135d0:	e7f0      	b.n	80135b4 <_vfiprintf_r+0x1b8>
 80135d2:	ab03      	add	r3, sp, #12
 80135d4:	9300      	str	r3, [sp, #0]
 80135d6:	462a      	mov	r2, r5
 80135d8:	4b12      	ldr	r3, [pc, #72]	@ (8013624 <_vfiprintf_r+0x228>)
 80135da:	a904      	add	r1, sp, #16
 80135dc:	4630      	mov	r0, r6
 80135de:	f7fd faa1 	bl	8010b24 <_printf_float>
 80135e2:	4607      	mov	r7, r0
 80135e4:	1c78      	adds	r0, r7, #1
 80135e6:	d1d6      	bne.n	8013596 <_vfiprintf_r+0x19a>
 80135e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80135ea:	07d9      	lsls	r1, r3, #31
 80135ec:	d405      	bmi.n	80135fa <_vfiprintf_r+0x1fe>
 80135ee:	89ab      	ldrh	r3, [r5, #12]
 80135f0:	059a      	lsls	r2, r3, #22
 80135f2:	d402      	bmi.n	80135fa <_vfiprintf_r+0x1fe>
 80135f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80135f6:	f7fe f96d 	bl	80118d4 <__retarget_lock_release_recursive>
 80135fa:	89ab      	ldrh	r3, [r5, #12]
 80135fc:	065b      	lsls	r3, r3, #25
 80135fe:	f53f af1f 	bmi.w	8013440 <_vfiprintf_r+0x44>
 8013602:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013604:	e71e      	b.n	8013444 <_vfiprintf_r+0x48>
 8013606:	ab03      	add	r3, sp, #12
 8013608:	9300      	str	r3, [sp, #0]
 801360a:	462a      	mov	r2, r5
 801360c:	4b05      	ldr	r3, [pc, #20]	@ (8013624 <_vfiprintf_r+0x228>)
 801360e:	a904      	add	r1, sp, #16
 8013610:	4630      	mov	r0, r6
 8013612:	f7fd fd1f 	bl	8011054 <_printf_i>
 8013616:	e7e4      	b.n	80135e2 <_vfiprintf_r+0x1e6>
 8013618:	080145c3 	.word	0x080145c3
 801361c:	080145cd 	.word	0x080145cd
 8013620:	08010b25 	.word	0x08010b25
 8013624:	080133d7 	.word	0x080133d7
 8013628:	080145c9 	.word	0x080145c9

0801362c <_init>:
 801362c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801362e:	bf00      	nop
 8013630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013632:	bc08      	pop	{r3}
 8013634:	469e      	mov	lr, r3
 8013636:	4770      	bx	lr

08013638 <_fini>:
 8013638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801363a:	bf00      	nop
 801363c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801363e:	bc08      	pop	{r3}
 8013640:	469e      	mov	lr, r3
 8013642:	4770      	bx	lr
